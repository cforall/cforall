//
// Cforall Version 1.0.0 Copyright (C) 2016 University of Waterloo
//
// The contents of this file are covered under the licence agreement in the
// file "LICENCE" distributed with Cforall.
//
// common.hfa --
//
// Author           : Peter A. Buhr
// Created On       : Wed Jul 11 17:54:36 2018
// Last Modified By : Peter A. Buhr
// Last Modified On : Fri Aug 23 16:42:39 2024
// Update Count     : 39
//

#pragma once

//---------------------------------------

[ int, int ] div( int num, int denom );
[ long int, long int ] div( long int num, long int denom );
[ long long int, long long int ] div( long long int num, long long int denom );
forall( T | { T ?/?( T, T ); T ?%?( T, T ); } )
[ T, T ] div( T num, T demon );

//---------------------------------------

extern "C" {
	int abs( int );										// stdlib.h
	long int labs( long int );
	long long int llabs( long long int );
} // extern "C"
static inline __attribute__((always_inline)) {
	unsigned char abs( signed char v ) { return (int)abs( (int)v ); }
	// use default C routine for int
	unsigned long int abs( long int v ) { return labs( v ); }
	unsigned long long int abs( long long int v ) { return llabs( v ); }
} // distribution

extern "C" {
	double fabs( double );								// math.h
	float fabsf( float );
	long double fabsl( long double );
} // extern "C"
static inline __attribute__((always_inline)) {
	float abs( float x ) { return fabsf( x ); }
	double abs( double x ) { return fabs( x ); }
	long double abs( long double x ) { return fabsl( x ); }
} // distribution

extern "C" {
	double cabs( double _Complex );						// complex.h
	float cabsf( float _Complex );
	long double cabsl( long double _Complex );
} // extern "C"
static inline __attribute__((always_inline)) {
	float abs( float _Complex x ) { return cabsf( x ); }
	double abs( double _Complex x ) { return cabs( x ); }
	long double abs( long double _Complex x ) { return cabsl( x ); }
} // distribution

forall( T | { void ?{}( T &, zero_t ); int ?<?( T, T ); T -?( T ); } )
T abs( T );

//---------------------------------------

static inline __attribute__((always_inline)) {
	forall( T | { int ?<?( T, T ); } )
	T min( T v1, T v2 ) { return v1 < v2 ? v1 : v2; }

	forall( T, Ts ... | { T min( T, T ); T min( T, Ts ); } )
	T min( T v1, T v2, Ts vs ) { return min( min( v1, v2 ), vs ); }

	forall( T | { int ?>?( T, T ); } )
	T max( T v1, T v2 ) { return v1 > v2 ? v1 : v2; }

	forall( T, Ts ... | { T max( T, T ); T max( T, Ts ); } )
	T max( T v1, T v2, Ts vs ) { return max( max( v1, v2 ), vs ); }

	forall( T | { T min( T, T ); T max( T, T ); } )
	T clamp( T value, T min_val, T max_val ) { return max( min_val, min( value, max_val ) ); }

	forall( T )
	void swap( T & v1, T & v2 ) { T temp = v1; v1 = v2; v2 = temp; }

	// Specializations
	char min( char v1, char v2 ) { return v1 < v2 ? v1 : v2; }
	int min( int v1, int v2 ) { return v1 < v2 ? v1 : v2; }
	unsigned int min( unsigned int v1, unsigned int v2 ) { return v1 < v2 ? v1 : v2; }
	long int min( long int v1, long int v2 ) { return v1 < v2 ? v1 : v2; }
	unsigned long int min( unsigned long int v1, unsigned long int v2 ) { return v1 < v2 ? v1 : v2; }
	long long int min( long long int v1, long long int v2 ) { return v1 < v2 ? v1 : v2; }
	unsigned long long int min( unsigned long long int v1, unsigned long long int v2 ) { return v1 < v2 ? v1 : v2; }

	char max( char v1, char v2 ) { return v1 > v2 ? v1 : v2; }
	int max( int v1, int v2 ) { return v1 > v2 ? v1 : v2; }
	unsigned int max( unsigned int v1, unsigned int v2 ) { return v1 > v2 ? v1 : v2; }
	long int max( long int v1, long int v2 ) { return v1 > v2 ? v1 : v2; }
	unsigned long int max( unsigned long int v1, unsigned long int v2 ) { return v1 > v2 ? v1 : v2; }
	long long int max( long long int v1, long long int v2 ) { return v1 > v2 ? v1 : v2; }
	unsigned long long int max( unsigned long long int v1, unsigned long long int v2 ) { return v1 > v2 ? v1 : v2; }
} // distribution

// Local Variables: //
// mode: c //
// tab-width: 4 //
// End: //
