//
// Cforall Version 1.0.0 Copyright (C) 2022 University of Waterloo
//
// The contents of this file are covered under the licence agreement in the
// file "LICENCE" distributed with Cforall.
//
// atomic.hfa -- simpler macros to access atomic instructions 
//
// Author           : Peter A. Buhr
// Created On       : Thu May 25 15:22:46 2023
// Last Modified By : Peter A. Buhr
// Last Modified On : Fri Jun  9 13:36:47 2023
// Update Count     : 46
// 

#define LOAD( val ) (LOADM( val, __ATOMIC_SEQ_CST))
#define LOADM( val, memorder ) (__atomic_load_n( &(val), memorder))

#define STORE( val, assn ) (STOREM( val, assn, __ATOMIC_SEQ_CST))
#define STOREM( val, assn, memorder ) (__atomic_store_n( &(val), assn, memorder))

#define TAS( lock ) (TASM( lock, __ATOMIC_ACQUIRE))
#define TASM( lock, memorder ) (__atomic_test_and_set( &(lock), memorder))

#define TASCLR( lock ) (TASCLRM( lock, __ATOMIC_RELEASE))
#define TASCLRM( lock, memorder ) (__atomic_clear( &(lock), memorder))

#define FAS( assn, replace ) (FASM(assn, replace, __ATOMIC_SEQ_CST))
#define FASM( assn, replace, memorder ) (__atomic_exchange_n( &(assn), (replace), memorder))

#define FAI( assn, Inc ) (__atomic_fetch_add( &(assn), (Inc), __ATOMIC_SEQ_CST))
#define FAIM( assn, Inc, memorder ) (__atomic_fetch_add( &(assn), (Inc), memorder))

// Use __sync because __atomic with 128-bit CAA can result in calls to pthread_mutex_lock.

// #define CAS( assn, comp, replace ) (CASM( assn, comp, replace, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST))
// #define CASM( assn, comp, replace, memorder... ) ({ \
//  	typeof(comp) __temp = (comp); \
//  	__atomic_compare_exchange_n( &(assn), &(__temp), (replace), false, memorder ); \
// })
#define CAS( assn, comp, replace ) (__sync_bool_compare_and_swap( &assn, comp, replace))
#define CASM( assn, comp, replace, memorder... ) _Static_assert( false, "memory order unsupported for CAS macro" );

// #define CASV( assn, comp, replace ) (__atomic_compare_exchange_n( &(assn), &(comp), (replace), false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST ))
// #define CASVM( assn, comp, replace, memorder... ) (__atomic_compare_exchange_n( &(assn), &(comp), (replace), false, memorder, memorder ))
#define CASV( assn, comp, replace ) ({ \
	typeof(comp) temp = comp; \
	typeof(comp) old = __sync_val_compare_and_swap( &(assn), (comp), (replace) ); \
	old == temp ? true : (comp = old, false); \
})
#define CASVM( assn, comp, replace, memorder... ) _Static_assert( false, "memory order unsupported for CASV macro" );
