//
// Cforall Version 1.0.0 Copyright (C) 2022 University of Waterloo
//
// The contents of this file are covered under the licence agreement in the
// file "LICENCE" distributed with Cforall.
//
// atomic.hfa -- simpler macros to access atomic instructions 
//
// Author           : Peter A. Buhr
// Created On       : Thu May 25 15:22:46 2023
// Last Modified By : Peter A. Buhr
// Last Modified On : Thu May 25 15:24:45 2023
// Update Count     : 1
// 

#define LOAD( lock ) (__atomic_load_n( &(lock), __ATOMIC_SEQ_CST ))
#define LOADM( lock, memorder ) (__atomic_load_n( &(lock), memorder ))
#define STORE( lock, assn ) (__atomic_store_n( &(lock), assn, __ATOMIC_SEQ_CST ))
#define STOREM( lock, assn, memorder ) (__atomic_store_n( &(lock), assn, memorder ))
#define CLR( lock ) (__atomic_clear( &(lock), __ATOMIC_RELEASE ))
#define CLRM( lock, memorder ) (__atomic_clear( &(lock), memorder ))
#define TAS( lock ) (__atomic_test_and_set( &(lock), __ATOMIC_ACQUIRE ))
#define TASM( lock, memorder ) (__atomic_test_and_set( &(lock), memorder ))
#define CAS( change, comp, assn ) ({typeof(comp) __temp = (comp); __atomic_compare_exchange_n( &(change), &(__temp), (assn), false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST ); })
#define CASM( change, comp, assn, memorder... ) ({typeof(comp) * __temp = &(comp); __atomic_compare_exchange_n( &(change), &(__temp), (assn), false, memorder, memorder ); })
#define CASV( change, comp, assn ) (__atomic_compare_exchange_n( &(change), &(comp), (assn), false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST ))
#define CASVM( change, comp, assn, memorder... ) (__atomic_compare_exchange_n( &(change), &(comp), (assn), false, memorder, memorder ))
#define FAS( change, assn ) (__atomic_exchange_n( &(change), (assn), __ATOMIC_SEQ_CST ))
#define FASM( change, assn, memorder ) (__atomic_exchange_n( &(change), (assn), memorder ))
#define FAI( change, Inc ) (__atomic_fetch_add( &(change), (Inc), __ATOMIC_SEQ_CST ))
#define FAIM( change, Inc, memorder ) (__atomic_fetch_add( &(change), (Inc), memorder ))
