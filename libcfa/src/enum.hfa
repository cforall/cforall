#pragma once

forall(T) { // T is the based type of enum(T)
    forall(E) trait Bounded {
        E lowerBound();
        E upperBound();
    };

    forall(E| Bounded(T, E)) trait Serial {
        unsigned fromInstance(E e);
        E fromInt(unsigned i);
        E succ(E e);
        E pred(E e);
    };

    // Opague Enum + TypedEnum
    forall(E | Serial(T, E)) trait CfaEnum { 
        char * labelE(E e);
        unsigned int posE(E e);
    };

    forall(E| CfaEnum(T, E)) trait TypedEnum {
        T valueE(E e);
    };

	forall(E | TypedEnum(T, E)) {
		// comparison
		int ?==?(E l, E r);								// true if l and r are same enumerators
		int ?!=?(E l, E r);								// true if l and r are different enumerators
		int ?!=?(E l, zero_t);							// true if l is not the first enumerator
		int ?<?(E l, E r);								// true if l is an enuemerator before r
		int ?<=?(E l, E r);								// true if l before or the same as r
		int ?>?(E l, E r);								// true if l is an enuemrator after r
		int ?>=?(E l, E r);								// true if l after or the same as r
	}
}
