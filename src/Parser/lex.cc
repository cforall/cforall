
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 244
#define YY_END_OF_BUFFER 245
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1948] =
    {   0,
        0,    0,    0,    0,  168,  168,  171,  171,  245,  243,
        7,    8,    7,  194,  170,  156,  200,  203,  167,  180,
      181,  197,  195,  184,  196,  187,  199,  160,  161,  185,
      186,  205,  207,  206,  208,  176,  156,  178,  198,  179,
      201,  156,  177,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  182,  204,  183,  202,    7,  243,    4,    4,  168,
      169,  175,  171,  172,    7,    7,  212,  237,  156,    0,
      225,  193,  217,  226,  223,  209,  220,  232,  210,  221,
      219,  235,    0,  164,    3,    0,  224,  163,  160,    0,

        0,    0,  160,  160,  160,  160,  160,  160,    0,    0,
      160,  160,  161,  161,  161,  161,  161,  161,  161,    0,
      161,  161,  191,  192,  190,  213,  215,  211,  216,  214,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  231,  188,  170,
      167,  156,    0,  222,    0,    0,  228,    0,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,    0,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,   49,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,   85,  156,  156,  156,  156,  156,  103,

      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  227,  218,  233,    7,    0,    0,    0,    2,    0,
        5,  168,    0,  174,  173,  173,    0,    0,    0,  171,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  234,  236,  189,
      164,  164,    0,  164,  164,  164,  164,    0,    6,  165,
      163,    0,  163,  163,  163,  163,  160,    0,    0,  159,
        0,    0,  165,    0,  160,  160,  160,  160,  160,  160,
      160,  160,    0,    0,    0,  160,  160,  160,  160,  160,

      160,  160,    0,  162,    0,    0,  161,  161,  161,  161,
      161,  161,  161,  161,    0,    0,    0,  161,  161,  161,
      161,  161,  161,  161,    0,  229,  230,    0,  241,  238,
        0,    0,    0,  240,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  157,    0,  156,   15,   16,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,   78,  156,  156,  156,  156,
       92,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  132,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,    0,    0,  173,    0,
        0,    0,    0,    0,  173,    0,    0,  242,    0,    0,
        0,    0,    0,    0,    0,  164,    0,  164,    0,    0,
        0,    0,    0,  164,  164,    0,  165,  165,    0,  165,
      165,  165,  165,  163,    0,  163,    0,    0,    0,    0,
        0,  163,  163,    0,  159,  159,  159,  159,  159,  159,

      159,    0,  159,  159,  165,  165,  165,  165,  165,  165,
        0,    0,    0,  160,  160,    0,    0,    0,    0,  160,
      160,    0,    0,  162,  162,  162,  162,  162,  162,  162,
      162,    0,  162,  162,    0,    0,    0,  161,  161,    0,
        0,    0,    0,  161,  161,  240,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  239,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  157,    0,    0,

        0,  156,   22,  156,  156,   28,  156,   31,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
       52,  156,   54,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,   84,  156,  156,   97,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  145,  156,  156,  156,  152,  156,  154,  156,
        0,    0,    0,    0,    0,    0,  173,    0,    0,    0,
        0,    0,  164,  164,    0,  164,  164,    0,    0,    0,
        0,  165,    0,  165,    0,    0,    0,    0,    0,  165,

      165,    0,  163,  163,    0,  163,  163,    0,    0,    0,
        0,  159,  159,  159,  159,  159,  159,  159,  159,    0,
        0,    0,  159,  159,  159,  159,  159,  159,  159,    0,
      165,    0,    0,    0,    0,  165,  165,    0,    0,    0,
        0,    0,    0,    0,  162,  162,  162,  162,  162,  162,
      162,  162,    0,    0,    0,  162,  162,    0,  166,    0,
      162,  162,  162,  162,  162,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  156,  156,   25,  156,  156,  156,

      156,  156,  156,  156,  156,  156,  156,  156,  156,   17,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,    0,    0,    0,
        0,    0,    0,  156,  156,   27,   29,  156,  156,   35,
       39,  156,  156,   34,  156,  156,  156,  156,   51,  156,
      156,  156,  156,  156,   61,   62,  156,  156,   81,  156,
      156,  156,  156,   99,  102,  104,  156,  156,  156,  156,
      156,  112,  156,  156,  156,  156,  156,  156,  156,  128,
      156,  131,  133,  156,  156,  156,  139,  156,  156,  156,
      156,  156,  156,  153,  156,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  164,    0,  164,  164,  165,
      165,    0,  165,  165,    0,    0,    0,    0,    0,  163,
        0,  163,  163,    0,    0,    0,  159,  159,    0,    0,
        0,    0,  159,  159,    0,  165,  165,    0,    0,    0,
        0,    0,  166,    0,    0,    0,    0,    0,  162,  162,
        0,  166,  166,  166,  166,  166,    0,    0,    0,  162,
      162,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  156,    0,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,   87,  156,  156,  156,  156,
      156,  156,  156,  156,  156,    0,    0,    0,    0,    0,
        0,    0,    0,  156,  156,  156,  156,   32,   33,  156,
      156,  156,  156,  156,   50,   53,  156,   57,  156,  156,
      156,  156,   79,  156,  156,   89,   93,  156,  156,  156,
      107,  156,  111,  113,  116,  118,  121,  156,  123,  124,
      156,  156,  156,  138,  135,  156,  156,  156,  149,  156,
      156,  155,    0,    1,    0,    0,  173,    0,    0,    0,
        0,  164,    0,  165,    0,  165,  165,  163,    0,    0,

      165,    0,  165,  165,  166,  166,    0,  166,    0,    0,
        0,    0,  166,  166,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
      156,   19,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,   18,  156,  156,  156,
      156,   40,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,    0,    0,    0,    0,    0,    0,
        0,    0,    9,   11,  156,  156,  156,  156,  117,   47,

       48,  156,  156,   60,  156,   64,   80,  156,   98,  105,
      156,  156,  156,  122,  156,  156,  130,  134,  156,  144,
      156,  150,  156,    0,    0,  165,  165,    0,    0,  166,
      166,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  158,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   10,   12,   36,
      156,  156,   67,   68,   70,   83,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,   88,   90,   94,  156,  156,  114,  125,
      136,  156,  156,    0,    0,    0,    0,    0,    0,    0,
      156,  156,   42,  156,  156,  156,   59,   66,  156,  106,
      108,  156,  156,  156,  141,  146,  156,    0,    0,    0,
        0,  166,    0,  166,  166,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  156,  156,  156,   72,   69,
       71,  156,  100,  156,  156,  156,  156,  156,  156,   13,

      156,  156,  156,   37,   41,  156,  156,   63,  156,  156,
       96,  156,  156,  156,  156,  156,    0,    0,    0,    0,
      156,  156,   43,   55,  156,   82,  156,  156,  156,  151,
        0,    0,    0,    0,  166,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  156,   44,   45,   73,   86,  156,  156,
      156,  156,   26,  156,  156,  156,  156,  156,  156,  156,
      156,   65,   91,   95,  109,  115,  137,  156,  147,    0,

        0,    0,   24,  156,  156,  156,  156,  156,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   46,  156,  156,  156,  156,  156,  156,   14,   20,
       23,  156,  156,   38,  156,  156,  140,  156,    0,    0,
        0,    0,   30,   58,  156,  156,  129,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  110,  148,    0,    0,    0,
      156,  127,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  156,  126,   74,   75,   76,
       77,   21,  156,  156,   56,    0,  120,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  119,  156,  156,
      156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  156,  156,  156,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  156,  142,  156,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
      143,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  101,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   56,   51,   57,   11,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,

       69,   70,   71,   72,   73,   11,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[94] =
    {   0,
        1,    2,    3,    2,    2,    2,    2,    1,    4,    1,
        5,    1,    1,    6,    7,    1,    1,    1,    8,    1,
        9,    1,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   11,    1,    1,    1,    1,    1,    1,   12,   12,
       12,   12,   12,   12,    5,    5,    5,    5,    5,   13,
        5,    5,    5,    5,    5,    5,    5,    5,    1,   14,
        8,    1,   15,    1,   12,   12,   12,   12,   12,   12,
        5,    5,    5,    5,    5,    5,    5,    5,   13,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    1

    } ;

static const flex_int16_t yy_base[2425] =
    {   0,
        0,   92, 6388, 6387,   92,   93,   94,   95, 6403, 8814,
      106, 8814,  112,   85, 8814, 6332,   65,   92, 8814, 8814,
     8814,   86,   91, 8814,   95,  112,  112,  168,  237, 6354,
     8814,  132, 6354,   89,  319,  110,  142, 6329,  122, 8814,
      111,  303, 6323,   98,  100,  164,  221,   99,  173,  101,
      108,  112,  123,  193,  102,  286,  247,  245,  149,  302,
      143, 8814,  128, 8814,  193,  380,  389, 8814, 6364,    0,
     8814,  419,    0, 8814,  393,  399, 8814,  499, 6325,  155,
     8814, 8814, 8814, 8814, 8814, 6347, 8814, 6348, 6345, 8814,
     8814, 6346, 6359,  568, 8814, 6375, 8814,  632,  412,  499,

      226,  435,  256,  492,  597,  421, 8814,  502,  214,  452,
      498,  642,    0,  534,  636,  680,  499, 8814,  557,  250,
      567,  695, 8814, 8814, 8814, 6342, 8814, 8814, 8814, 6341,
     6340,  256,  261, 6358,  280,  390,  414,  288,  395,  314,
      435, 6329,  336,  445, 6304, 6271,  446, 8814, 8814, 8814,
     8814,  264,  778, 8814, 6298, 6290, 8814, 6262,  305,  219,
      316,  144,  258,  308,  212,  329,  161,  351,  819, 6290,
      127,  427,  417,  278,  342,  441,  483,  495,  662,  397,
      426,  453,  496,  503,  604,  541,  527,  590,  557,  471,
      540,  565,  371, 6289,  654,  613,  626,  526,  618, 6288,

      605,  673,  638,  670,  697,  663,  209,  476,  573,  689,
      678,  688,  727,  687,  691,  698,  634,  701,  726,  705,
      715, 8814, 8814, 8814,  787,  798, 6344,  888, 8814,  918,
     8814,    0,  800, 8814, 8814,  786, 6276, 6275, 6274,    0,
     6301,  769,  781, 6319,  782,  802,  810,  796,  816,  797,
      807, 6287,  821,  829,  830, 6260, 6259, 8814, 8814, 8814,
      927,  891,  991,  851,  957,  573, 6258, 6309, 8814, 1032,
      997, 1096,  956,  998,  788, 1087, 1065,  469, 1118, 1165,
      126, 1167, 1232, 1296,  309, 8814,  823, 1217,  679, 8814,
      815, 1146,  667, 6284, 6281,  850,  951,  836, 1004,  849,

      859,  963,    0, 1307, 6286, 1374,  853, 8814, 1053, 1258,
      881, 8814,  907, 1334,  811, 6281, 6276, 1085, 1152,  921,
     1156, 1024, 1038, 1268, 1396, 8814, 8814, 6265, 8814, 8814,
      836,  839, 6238, 6238,  928, 1458, 1408,  998, 1426, 1439,
     1445, 1485, 1477, 1491, 1509, 6234,    0, 6233,    0, 6203,
      900,  850,  903,  792,  917, 1009,  971, 1038,  966, 1044,
     1036, 1076,  870, 1149, 1055, 1090,  963, 1103, 1140, 1106,
     1105, 1104,  916, 1145, 1124, 6233, 1099,  869, 6232, 6231,
     1148, 1150, 1162, 1179, 1046, 1185, 1174, 1190, 1175, 1207,
     1191, 1004, 1208, 1221,  431, 1073, 1239,  587, 1217, 1292,

     1299, 1210, 1231, 1285, 1244, 1323, 1250, 1318, 1307, 1321,
      833, 1395, 1335, 1347, 1330, 1357, 1375, 1394, 1378, 1257,
     1416, 1311, 1397, 1409, 1441, 1443, 1425, 1442, 1460, 1462,
     1446, 6230, 1470, 1483, 1498, 1476, 1473, 1480, 1243, 1279,
     1487, 1484, 1488, 1496, 1501, 1497, 1574, 1559, 1564, 1571,
     6226,    0, 6225,    0, 6224,    0, 6249, 8814, 1435, 1529,
     6224, 6221,    0, 6220,    0, 8814, 1578, 1605, 1592, 1545,
     6257, 6254, 6257, 8814, 1613, 1634, 1675, 1639, 1739, 1664,
     1705, 1106, 6209, 8814, 1704, 1780, 1769, 1553, 6246, 6235,
     6238, 8814, 1748, 1789, 1844, 1786, 1826, 1816, 1593, 8814,

     1836, 6195, 1789, 1896, 1958, 1887, 1918, 1888, 1512, 6194,
     1555, 6231, 6227, 1570, 1571, 6221, 1616, 6224, 6221, 1577,
     1597, 1588, 1629, 2024, 1792, 1924, 2076, 1822, 2091, 1964,
     8814, 1551, 1894, 2103, 1647, 6222, 6219, 1629, 1640, 6215,
     1691, 6218, 6215, 1642, 1663, 6181, 1641, 6177, 6176, 2054,
     2132, 6206, 1687, 6174, 6173, 2138, 2177, 2197, 2208, 2216,
     2228, 2239, 6172,    0, 6171,    0, 8814, 1611, 1700, 1679,
     1661, 1728, 1374, 1721, 1681, 1761, 1586, 1765, 1818, 1954,
     1845, 1775, 1766, 1796, 1854, 1877, 1797, 1826, 1686, 1932,
     1763,  716, 1890, 1698, 1880, 1777, 1837, 6173, 1803, 6169,

     6168, 1916, 6170, 1855, 1204, 6162, 1892, 6153, 1864, 1930,
     1935, 1944, 1957, 1958, 1943, 1963, 1959, 1969, 1965, 2009,
     6147, 2002, 6146, 2016, 2023, 2015, 2050, 2028, 2068, 2086,
     2066, 2088, 2092, 6145, 2095,  553, 6142, 2070, 2025, 2102,
     2096, 2103, 2107, 2109, 2114, 2115, 2108, 2117, 2146, 2134,
     2099, 2148, 2187, 2190, 2111, 2189, 2145, 2167, 2191, 2193,
     2192, 2178, 6140, 2198, 2205, 2217, 6139, 2206, 6138, 1723,
     2270, 2266, 6131,    0, 6128,    0, 6127, 6126, 6125,    0,
     6123,    0, 2301, 6122, 6154, 2227, 2231, 2055, 6158, 6154,
     6157, 8814, 2310, 2365, 2429, 2257, 6153, 6150, 6153, 8814,

     2279, 2374, 2438, 6112, 6144, 2269, 2273, 2273, 6148, 6145,
     6148, 2228, 8814, 2260, 2391, 2267, 8814, 2295, 2447, 2288,
     6145, 6142, 2300, 2359, 2307, 2467, 2238, 2310, 2474, 2362,
     8814, 2333, 6143, 6140, 6143, 8814, 2400, 2527, 6135, 6133,
     2420, 2541, 2431, 2369, 2395, 8814, 2432, 2550, 2433, 8814,
     2435, 2508, 2334, 6137, 6134, 2489, 2530, 2592, 2612, 2676,
     2535, 2600, 2361, 2473, 2620, 6097, 6129, 6128, 6094, 6086,
     6077,    0, 6076,    0, 2706, 6075, 6074, 6071,    0, 6067,
        0, 2712, 2718, 2725, 2731, 2749, 2799, 2809, 2822, 2832,
     6064,    0, 6063,    0, 2301, 2166, 6064, 2367, 2449, 2358,

     2350, 2363, 2412, 2432, 2305, 2312, 2452, 2466, 2351, 2479,
     2467, 2500, 2468, 2515, 2524, 2250, 2526, 2528, 2527, 2201,
     2306, 2529, 2533, 2542, 2592, 2549, 2536, 6060, 6058, 6057,
        0, 6056,    0, 2593, 2537, 6056, 1972, 2595, 2597, 6055,
     6052, 2568, 2591, 6051, 2535, 2602, 2608, 2609, 6050, 2610,
     2605, 2612, 1962, 2616, 6046, 2715, 2666, 2621, 6045, 2682,
     2680, 1915, 2683, 6044, 6018, 6009, 2698, 2686, 2688, 2624,
     2699, 6008, 2700, 2414, 2710, 2704, 2702, 2463, 2705, 2722,
     2547, 6007, 6006, 2720, 2724, 2726, 6004, 2730, 2723, 2735,
     2750, 2770, 2763, 6003, 2734, 6058, 5997,    0, 5996,    0,

     5995,    0, 5992,    0, 2847, 2771, 6024, 5958, 5957, 2892,
     5980, 6012, 2773, 2774, 2504, 6016, 6013, 6008, 2870, 2815,
     5999, 5934, 5931, 2820, 5984, 5968, 2795, 2796, 5949, 2827,
     5946, 5943, 2808, 2810, 5939, 2816, 2838, 2879, 5943, 5940,
     5942, 2921, 2956, 3020, 5901, 2880, 5938, 5935, 2829, 2851,
     5931, 2965, 2839, 2985, 3011, 5890, 2899, 5926, 5923, 2880,
     2883, 5885,    0, 5877,    0, 5876,    0, 5875,    0, 3061,
     3068, 2874, 5873,    0, 5872,    0, 5871,    0, 5863,    0,
     3098, 3104, 3110, 3120, 3142, 3179, 3193, 3201, 3210,    0,
        0, 5865,    0, 2899, 2871, 2773, 2872, 2937, 2793, 2894,

     2783, 2908, 2942, 2916, 2945, 2952, 2897, 2910, 2948, 2953,
     2958, 2866, 2973, 2957, 2977, 2962, 2975, 2882, 2979, 2946,
     3009, 3017, 3016, 3033, 3001, 5861,    0, 5859,    0, 5848,
        0, 5847,    0, 2805, 3020, 2941, 3023, 5849, 5848, 3035,
     3025, 3029, 3058, 3071, 5847, 5839, 3060, 5837, 3072, 3074,
     3112, 3115, 5836, 3079, 3083, 5835, 5833, 3090, 3095, 3091,
     5830, 3094, 5829, 5828, 5827, 3105, 5824, 3028, 5823, 3127,
     3109, 3149, 3131, 5819, 5816, 3119, 3117, 3159, 5815, 3150,
     3158, 5814, 5870, 8814,    0,    0, 8814,    0,    0,    0,
        0, 5785, 3220, 3179, 5841, 5776, 5775, 5774, 5822, 5814,

     3181, 5811, 5752, 5751, 3261, 5774, 5806, 8814, 3134, 5810,
     5806, 5809, 8814, 3234, 3270, 5800, 5766,    0, 5764,    0,
     5763,    0, 5760,    0, 3311, 3346, 3406, 3139, 5761, 5758,
     5757, 5756,    0, 5755,    0, 5747,    0, 5746,    0, 3354,
     3364, 3372, 3385, 3395, 3436, 3447, 3454, 3495, 5745, 3075,
     3160, 5746, 3169, 3161, 3244, 3197, 3247, 3205, 3175, 3178,
     3215, 3217, 3294, 3207, 3246, 3177, 5745, 2567, 3242, 3259,
     3266, 3277, 3261, 3404, 3279, 3286, 3333, 3320, 3321, 3335,
     3355, 3268, 3285, 3345, 5741,    0, 5740,    0, 5738,    0,
     5729,    0, 5731, 5724, 3304, 3262, 3356, 3359, 5722, 5721,

     5719, 3369, 3407, 5718, 3403, 5717, 5716, 3410, 5709, 5708,
     3411, 3302, 3361, 5707, 3360, 3412, 5706, 5698, 3362, 5695,
     3415, 5694, 3405, 5690, 5689, 5655, 5654, 3505, 5704, 3430,
     3464, 3464, 5708, 5705, 5708, 5667,    0, 5664,    0,    0,
        0,    0, 3567, 3543, 3425, 3555, 3576, 3587, 3593, 3607,
     3657, 3667, 5663, 5662, 8814, 5661,    0, 5658,    0, 5657,
        0, 5656,    0,    0,    0,    0, 3673, 3688, 3704, 3735,
     3756, 3766, 3772, 3803, 3834, 5655,    0, 5657, 5654, 5653,
     3484, 3465, 5636, 3386, 3452, 5635, 3445, 3444, 3458, 3481,
     3456, 3492, 3480, 3482, 3494, 3493, 3528, 3507, 3541, 3542,

     3547, 3561, 3562, 5633, 3563, 3569, 3571, 3557, 3578, 5632,
     3586, 3546, 3558, 5621,    0, 5620,    0,    0,    0,    0,
     3446, 3582, 5622, 3596, 3580, 3628, 5620, 5619, 3621, 5618,
     5617, 3622, 3590, 3637, 5615, 5614, 3623, 5610,    0, 5609,
        0, 3656, 5639, 5581, 5579,    0,    0,    0, 5601, 3855,
     3871, 5624, 3600, 5592, 5591, 3877, 3886, 3894, 3908, 3917,
     3954, 3968, 5590,    0, 5589,    0, 5582,    0, 5581,    0,
        0,    0,    0, 5578, 3976, 3985, 3999, 4016, 4035, 4058,
     4067, 4076, 4082, 5565,    0, 3662, 3671, 3659, 3641, 5561,
     5558, 3658, 5546, 3653, 3654, 3663, 3664, 3706, 3723, 3721,

     3720, 3655, 3727, 3731, 5539, 3687, 3670, 5536, 3733, 3732,
     5517, 3737, 3739, 3751, 3762, 3656,    0,    0,    0, 5501,
     3685, 3741, 5459, 5453, 3752, 5452, 3764, 3767, 3753, 5447,
     5435,    0, 5430,    0, 5393, 5416, 5407,    0, 4100, 5393,
     5392, 5389,    0, 5376,    0, 4117, 4126, 4135, 4159, 4167,
     4176, 4198, 4209, 4244, 5359,    0, 5348,    0, 5340,    0,
     5301,    0, 5300, 5286,    0, 4250, 4259, 4281, 4290, 4327,
     4340, 4349,    0, 3726, 5288, 5284, 5280, 5272, 3768, 3782,
     3773, 3805, 5257, 3826, 3804, 3785, 3783, 3847, 3857, 3807,
     3794, 5239, 5230, 5216, 3842, 5198, 5185, 3825, 3865, 5172,

     5158,    0, 5149, 3867, 3869, 3870, 3873, 3874,    0,    0,
     5137,    0, 5136,    0, 4333, 4364, 3892, 5132,    0, 5116,
        0, 5112,    0, 5108,    0, 4373, 4415, 4425, 4432, 4446,
     4456, 4463, 4508, 4515, 5091,    0, 5087,    0,    0,    0,
        0, 5076,    0, 5071,    0, 4527, 4546, 4558, 4567, 4598,
     4605, 5059, 3884, 3885, 3888, 3903, 3904, 3934, 5044, 3947,
     5028, 3892, 3951, 5013, 3949, 3964, 5003, 3966, 4993,    0,
     4990,    0, 4986, 4969, 3953, 3924, 4968, 4958,    0,    0,
     4617, 3960, 4951, 4935, 4920,    0, 4911,    0, 4900,    0,
     4897,    0, 4639, 4647, 4678, 4684, 4691, 4699, 4722, 4759,

     4765,    0,    0,    0, 4884, 4870,    0,    0, 4774, 4796,
     4834, 4856, 4268, 4874, 4894, 3965, 3972, 3970, 3975, 3983,
     4015, 3991, 4040, 4031, 4049, 4865, 4864, 4852,    0,    0,
     4032, 4851,    0, 4828, 4811, 4810,    0, 4806,    0, 4801,
        0, 4792,    0,    0,    0,    0, 4880, 4916, 4925, 4939,
     4984, 4990, 4998, 5005, 5029, 4791, 4788,    0,    0, 5036,
     4296, 5073, 4730, 4108, 5089, 4065, 4771, 4757, 4753, 4749,
     4744, 4736, 4094, 4157, 4735,    0, 4728, 4711,    0, 4697,
        0, 4694,    0, 4693,    0,    0,    0,    0, 4689, 5096,
     5104, 5110, 5120, 5141, 5179, 5187, 5200, 5210, 4686,    0,

     4682,    0, 4963, 4184, 4220, 5221, 5269, 4670, 4086, 4066,
     3795, 4658,    0, 4649,    0, 4645,    0, 4637,    0, 4629,
     4613, 4600, 5259, 5282, 5298, 5305, 5364, 5370, 5381, 4593,
     4585, 4584, 4230, 5388, 5440, 5403, 5431, 5505, 4576, 4575,
     4563, 4092, 4085, 4124, 4562,    0, 4534,    0,    0,    0,
        0, 4530,    0, 4522,    0, 5479, 5455, 5538, 5547, 5553,
     5569,    0, 5584, 5620, 5607, 4517, 4513, 4504, 5634, 5662,
     4503,    0, 4495,    0, 5720,    0, 4160, 4497, 4177,    0,
        0,    0, 4483, 4473,    0,    0, 5696, 5644, 5733, 5792,
     5246, 5768, 5810, 5822, 5831, 4472, 4436, 4430,    0, 5889,

        0, 4303, 5877, 4427,    0, 4420,    0, 5957,    0, 4158,
     4422, 4413, 4393, 4381, 4363, 5862, 5469, 5970, 5703, 4355,
     5987, 4381, 5918, 4360, 4351, 4348, 4344,    0,    0, 4339,
     4333, 4322, 4319, 4313, 4298, 4294, 4286, 4285, 6001, 4383,
     4385, 6030, 6048, 4262, 4261, 4248, 4245,    0, 4226, 4394,
     4218, 4205, 4204, 4196, 4395, 6077, 6127, 6085, 6009, 6192,
     4180, 4179, 4172,    0, 4171, 4437, 4168, 4158, 4146, 6093,
     6046, 6200, 4134, 4133, 4126, 6241, 6119, 4122, 4088, 4087,
     4081, 6302, 4050, 4034, 4033, 3993, 6250, 6291, 3992, 3986,
     3869, 3806, 6370,  157, 4477, 6331,  238,  297,  387,  481,

        0,    0,  525,  745,  797,  909, 4478, 6399, 1143, 1303,
     1410, 1469,    0,    0, 1516, 1548, 1550, 1611, 1719, 1721,
     1825, 1914, 2018, 2130, 2305,    0, 2381, 6437, 2627, 2735,
        0, 2769, 4495, 2906, 3164, 3213, 3264, 3319, 3321, 3459,
     3503, 3591, 3691, 3719, 3755, 3781, 8814, 6507, 6522, 6537,
     6548, 6563, 6578, 6593, 6608, 6615, 6626, 6640, 6646, 6652,
     6663, 6669, 6675, 6681, 6696, 6702, 6708, 6723, 3894, 6730,
     6738, 6752, 6766, 6772, 3983, 6778, 4147, 6789, 6800, 6815,
     6830, 6836, 4178, 6842, 4182, 6848, 4214, 6854, 4297, 6860,
     4304, 6866, 6872, 6883, 6889, 6895, 6909, 6915, 6921, 6927,

     4305, 6933, 4308, 6944, 6955, 6961, 6967, 6982, 6988, 4311,
     6994, 4350, 7000, 7006, 4379, 7012, 4389, 7018, 7024, 7030,
     7036, 7042, 4396, 7048, 4400, 7062, 7068, 7074, 7080, 4461,
     7086, 4462, 7100, 7106, 4467, 7112, 4479, 7123, 7129, 7135,
     7141, 4484, 7147, 4490, 7162, 7168, 4493, 7174, 4497, 7180,
     4514, 7186, 4515, 7192, 7198, 4532, 7204, 4533, 7210, 4544,
     7216, 4567, 7230, 7244, 7250, 4571, 7256, 4579, 7262, 4582,
     7268, 4586, 7282, 4603, 4604, 7293, 4619, 7299, 4622, 7305,
     4623, 7311, 4645, 7317, 4649, 7332, 4650, 4656, 4657, 4660,
     4663, 4699, 7338, 4703, 7344, 4707, 7350, 4708, 7356, 4730,

     7370, 7384, 7390, 7396, 7402, 4731, 7408, 4736, 7414, 4743,
     7420, 4763, 7434, 7440, 7451, 7457, 4774, 7463, 4775, 7469,
     4782, 7475, 4795, 7481, 7487, 7493, 4798, 7499, 4802, 4806,
     4810, 4811, 7513, 7527, 7533, 7539, 7545, 4814, 7551, 4817,
     7557, 4820, 7563, 4832, 4835, 4836, 4840, 7577, 7583, 4855,
     7594, 7600, 4860, 7606, 4880, 4892, 4895, 4898, 7612, 4904,
     7618, 4926, 4927, 4940, 4941, 7624, 7638, 7644, 7650, 7656,
     4946, 7662, 4949, 7668, 4963, 7674, 4967, 4968, 4972, 5003,
     7680, 7694, 7700, 5007, 7711, 5008, 5014, 5015, 7717, 7723,
     5035, 7729, 5042, 7735, 7741, 5047, 7755, 7761, 7767, 7773,

     5050, 7779, 5054, 7793, 7799, 5057, 7805, 5060, 7811, 5071,
     7817, 5074, 7823, 7829, 5075, 7843, 5108, 7854, 7860, 7866,
     5119, 5120, 5125, 7872, 5128, 7878, 5141, 7892, 7906, 7912,
     5145, 7918, 5149, 7924, 5150, 7930, 5153, 7944, 7950, 5156,
     7956, 5157, 5162, 5166, 5186, 7962, 5198, 7968, 5208, 7982,
     7993, 7999, 5221, 8005, 5224, 8011, 5228, 5231, 8025, 8031,
     8037, 8043, 5234, 8049, 5247, 8055, 5257, 8061, 5258, 8075,
     5262, 5263, 5269, 8081, 8087, 5270, 5303, 8101, 8112, 8118,
     5306, 5310, 5311, 8124, 8130, 8136, 5315, 8142, 5316, 8148,
     5321, 8154, 5331, 5335, 5345, 5349, 8168, 8174, 8180, 5350,

     5368, 8194, 8209, 8220, 5369, 8226, 5388, 8232, 5389, 8238,
     5404, 8244, 5405, 5408, 5411, 5415, 8250, 8256, 5416, 8262,
     5419, 8277, 8292, 8298, 5430, 8304, 5434, 8310, 5435, 8316,
     5441, 8322, 8328, 8334, 8340, 8346, 8352, 8363, 8369, 5478,
     8375, 5479, 5484, 5487, 5491, 8381, 5492, 8387, 5506, 8401,
     5510, 8407, 8413, 8419, 8434, 8440, 5525, 8446, 5526, 5536,
     8457, 5551, 5557, 5568, 8463, 8469, 5571, 5572, 8475, 8481,
     5582, 5585, 8487, 5592, 8493, 5593, 8504, 8510, 8516, 8531,
     8537, 8543, 8549, 8555, 8561, 8567, 8582, 8588, 8594, 5599,
     8609, 8615, 8621, 8627, 8633, 5602, 8648, 8654, 8660, 8666,

     8672, 8678, 8684, 8690, 8696, 8702, 8708, 8714, 8720, 8726,
     8732, 8738, 8744, 8750, 8756, 8762, 8768, 8774, 5605, 5630,
     8780, 8786, 8792, 8798
    } ;

static const flex_int16_t yy_def[2425] =
    {   0,
     1947,    1, 1948, 1948, 1949, 1949, 1950, 1950, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1951, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1951, 1947, 1947, 1947,
     1947, 1951, 1947, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1947, 1947, 1947, 1947, 1947, 1952, 1947, 1947, 1953,
     1947, 1947, 1954, 1947, 1947, 1947, 1947, 1947, 1951, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1955, 1947, 1947,   28, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1956,   28,
     1947, 1947,   29, 1947, 1947, 1947, 1947, 1947, 1947,   29,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1957, 1947, 1947, 1947, 1947, 1947,
     1947, 1951, 1958, 1947, 1959, 1960, 1947, 1947, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1961,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1947, 1947, 1947, 1947, 1952, 1952, 1952, 1947, 1952,
     1947, 1953, 1947, 1947, 1947, 1947, 1962, 1963, 1964, 1965,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1966, 1967, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947,  261, 1968, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947,  110,  277, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1969, 1947, 1970, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1971, 1947, 1972, 1973, 1947, 1973, 1973,
     1973, 1973, 1973, 1973, 1973, 1974, 1975, 1976, 1977, 1947,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1979, 1947, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,

     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1980, 1981, 1947, 1947,
     1982, 1983, 1984, 1985, 1986, 1987, 1947, 1947, 1947, 1947,
     1947, 1988, 1989, 1990, 1991, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947,  477, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947,  495, 1947, 1947, 1947, 1947, 1947, 1947, 1947,  505,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1992, 1993, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947,  524, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1994, 1947, 1995, 1996, 1947,
     1997, 1947, 1947, 1998, 1999, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 2000, 2001, 2002, 2003, 1947, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2005, 1947, 2006,

     2007, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2008, 1947, 2009, 2010, 2011, 2012, 2013, 2013, 2014, 2015,
     2016, 2017, 1947,  683, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947,  703, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     2018, 1947, 2018, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 2019, 1947, 1947, 2020, 2021,
     2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
     2032, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033,
     2034, 2035, 2036, 2037, 2038, 2038, 2038, 2038, 2038, 2038,

     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2039, 2040, 2041,
     2042, 2043, 2044, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2045, 2046, 2047, 2048, 2049,

     2050, 2051, 2052, 2053, 1947, 1947, 1947, 1947, 1947, 1947,
      910, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 2054, 1947, 1947, 1947, 1947, 1947,
     1947,  943, 1947, 1947, 1947,  952, 1947, 1947, 1947, 1947,
     1947, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
     2064, 1947, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
     2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2074,
     2075, 2076, 2077, 2076, 2076, 2076, 2076, 2076, 2076, 2076,

     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2078, 2079, 2080, 2081, 2082,
     2083, 2084, 2085, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2086, 1947, 2087, 2088, 1947, 2089, 2090, 2091,
     2092, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1105, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 2093, 2094, 2095, 2096,
     2097, 2098, 2099, 2100, 1947, 2101, 2102, 1947, 1947, 2103,
     2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113,
     2113, 2113, 2113, 2113, 2113, 2113, 2113, 2113, 2114, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2116, 2117, 2118, 2119, 2120, 2121,
     2122, 2123, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,

     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2124, 2125, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 2126, 2127, 2128, 2129, 2130,
     2131, 2132, 2133, 2134, 1947, 2134, 2134, 2134, 2134, 2134,
     2134, 2134, 2135, 2136, 1947, 2137, 2138, 2139, 2140, 2141,
     2142, 2143, 2144, 2145, 2146, 2147, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2149, 2150, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2159, 2160, 2161,
     2162, 1947, 1947, 1947, 1947, 2163, 2164, 2165, 2166, 1947,
     2167, 1947, 1947, 2168, 2169, 2167, 2167, 2167, 2167, 2167,
     2167, 2167, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177,
     2178, 2179, 2180, 2181, 2182, 2182, 2182, 2182, 2182, 2182,
     2182, 2182, 1947, 2183, 2184, 2185, 2185, 2185, 2185, 2185,
     2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185,

     2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185,
     2185, 2185, 2185, 2185, 2185, 2185, 2186, 2187, 2188, 2189,
     2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185,
     2190, 2191, 2192, 2193, 1947, 2194, 2195, 2196, 2197, 2198,
     2199, 2200, 2201, 2202, 2203, 2204, 2204, 2204, 2204, 2204,
     2204, 2204, 2204, 2204, 2205, 2206, 2207, 2208, 2209, 2210,
     2211, 2212, 2213, 2214, 2215, 2216, 2216, 2216, 2216, 2216,
     2216, 2216, 2217, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
     2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
     2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2219,

     2220, 2221, 2218, 2218, 2218, 2218, 2218, 2218, 2222, 2223,
     2224, 2225, 2226, 2227, 2228, 2229, 1947, 2230, 2231, 2232,
     2233, 2234, 2235, 2236, 2237, 2238, 2238, 2238, 2238, 2238,
     2238, 2238, 2238, 2238, 2239, 2240, 2241, 2242, 2243, 2244,
     2245, 2246, 2247, 2248, 2249, 2250, 2250, 2250, 2250, 2250,
     2250, 2251, 2251, 2251, 2251, 2251, 2251, 2251, 2251, 2251,
     2251, 2251, 2251, 2251, 2251, 2251, 2251, 2251, 2252, 2253,
     2254, 2255, 2251, 2251, 2251, 2251, 2251, 2256, 2257, 2258,
     2259, 1947, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267,
     2268, 2269, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270,

     2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2278,
     2278, 1947, 1947, 2278, 2278, 2279, 2279, 2279, 2279, 2279,
     2279, 2279, 2279, 2279, 2279, 2279, 2279, 2280, 2281, 2282,
     2279, 2279, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290,
     2291, 2292, 2293, 2294, 2295, 2296, 2297, 2297, 2297, 2297,
     2297, 2297, 2297, 2297, 2297, 2298, 2299, 2300, 2301, 1947,
     1947, 2302, 1947, 2303, 2302, 2304, 2304, 2304, 2304, 2304,
     2304, 2304, 2304, 2304, 2304, 2305, 2304, 2306, 2307, 2308,
     2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2297,
     2297, 2297, 2297, 2297, 2297, 2297, 2297, 1947, 2318, 2319,

     2320, 2321, 1947, 2322, 2323, 1947, 1947, 2304, 2304, 2304,
     2304, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332,
     2333, 2317, 2297, 2297, 2297, 2297, 2297, 2297, 2297, 2334,
     2318, 2320, 2322, 1947, 1947, 1947, 1947, 2323, 2335, 2336,
     2337, 2338, 2338, 2338, 2339, 2340, 2341, 2342, 2343, 2344,
     2345, 2346, 2347, 2348, 2349, 2350, 2350, 2350, 2350, 2350,
     2350, 2351, 1947, 1947, 2322, 2352, 2353, 2354, 2355, 2355,
     2356, 2357, 2358, 2359, 2355, 2360, 2361, 2361, 2361, 2362,
     2363, 2364, 2365, 2366, 2367, 2368, 2350, 2350, 2350, 1947,
     1947, 2350, 2350, 2322, 2322, 2369, 2352, 2370, 2371, 2322,

     2372, 2355, 2355, 2373, 2374, 2375, 2376, 2355, 1808, 2377,
     2377, 2378, 2379, 2365, 2366, 1947, 1947, 2350, 1947, 2380,
     2350, 2322, 2322, 2381, 2369, 2382, 2370, 1800, 1800, 2383,
     2373, 2384, 2375, 2377, 2385, 2378, 2386, 2379, 1947, 2387,
     2380, 1947, 1947, 2388, 2381, 2389, 2382, 2390, 2383, 2391,
     2384, 2392, 2385, 2386, 2387, 1947, 1947, 1947, 1947, 2380,
     2393, 2394, 2395, 2396, 2388, 2397, 2389, 2398, 2392, 1947,
     1947, 2387, 2399, 2400, 2401, 2380, 2380, 2402, 2393, 2403,
     2394, 2380, 2395, 2404, 2405, 2398, 2387, 2387, 2406, 2399,
     2407, 2400, 2387, 2401, 2380, 2380, 2408, 2402, 2409, 2403,

     1882, 1882, 2410, 2404, 2411, 2405, 2387, 2387, 2412, 2406,
     2413, 2407, 1893, 1893, 2414, 2408, 2415, 2409, 2416, 2410,
     2411, 2417, 2412, 2418, 2413, 2419, 2414, 1882, 2415, 2416,
     2420, 2417, 2387, 2418, 2421, 2422, 2423, 2421, 2424, 2422,
     2415, 2423, 2418, 2424, 2415, 2418,    0, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947
    } ;

static const flex_int16_t yy_nxt[8908] =
    {   0,
       10,   11,   12,   13,   13,   13,   11,   14,   15,   10,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   29,   29,   29,   29,   29,   29,
       29,   30,   31,   32,   33,   34,   35,   36,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   37,   16,   16,
       16,   16,   16,   16,   37,   16,   16,   16,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   16,   51,   16,   52,   53,   16,   54,   16,   16,
       55,   56,   57,   58,   59,   60,   16,   16,   61,   62,
       63,   64,   65,   66,   71,   71,   74,   74,   66,   81,

       82,   67,   74,   74,   83,   71,   71,   75,   86,   76,
       76,   76,   75,   75,   89,   76,   76,   76,   75,   77,
       85,   78,   78,  129,  130,   87,   84,   78,   95,   90,
       91,   78,   93,   96,   94,   94,   94,   94,   94,   94,
       94,   94,   94,  124,  148,  157,   97,  158,  280,  280,
      150,   72,   72,   72,   72,  151,  154,   80,   80,   80,
       80,   80,  222,  125,  175,  126,  127,   80,  149,  192,
      202,   80,  171,  184,  172,  185,  155,  194,  193,  173,
      176,  174,   80,   88,  195,  186,   80,   92,   98,  196,
       99,   99,   99,   99,   99,   99,   99,  100,  100,  378,

      197,   80,   80,   80,  152,  156,  198,  101,   80,  256,
      102,  221,  355,  103,  104,  105,  106,  107,  223, 1947,
       80,  215,  108,   80,  109,  107,  216,  224,  177,   78,
      110,  217,   80,  101,  303,  178,  102,  187,  257,  111,
      104,  179,  112,  360,  106,  188,  107,  189,  280,  280,
      190,  108,   80,  150,  109,  191,  107,   98,  151,  113,
      113,  113,  113,  113,  113,  113,  113,  113,   80,  199,
     1947,   80,  150,  200,  213,  201,  305,  151,   80,  102,
       80,  428,  114,  115,  116,  117,  118,  358,  281,  180,
      328,  119,  329,  181,  118,  328,  353,  329,  182,  120,

     1916,  106,  285,  183,   80,  102,   80,  152,  121,  115,
      286,  122,  325,  117,  328,  118,  329,   80,  208,  209,
      119,  214,  328,   80,  329,  118,  131,  210,  285,  211,
      132,  133,  356,  134,  212,  135,  136,   80,  137,  286,
      138,  159,  160,  161,  162,   80,  163,  164,  328,  165,
      329,  166,  139,  140,  141,  167,  168,  203,  204, 1947,
      381,   80,   80,  286,   80,  169,  218,   80,  205,  206,
      328,  207,  329,  219,  220,   80,  357,  142,  143,  351,
      144,  225,  145,   76,   76,   76,  225,  352,   80,  226,
      228,  229,  286,  354,   75,  228,   76,   76,   76,   75,

       75,   80,   76,   76,   76,   75,  359,  330,  146,  147,
       80,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      233,  234,  361,  382,  328,  233,  329,  235,  331,  328,
       80,  329,  235,  330,  277,  277,  277,  277,  277,  277,
      277,  236,  236,  236,  236,  236,  236,  236,  328, 1918,
      329, 1947,  282,  409,  282,  235,   80,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  393,  285, 1947,  328,
      332,  329, 1947,  237,  278,  286,   80, 1947,  235,  328,
      328,  329,  329,  235,  235,   80,   80,  235,  235, 1947,
       80, 1947,  380,  285,  379,  235,  619,  284, 1947,  235,

       80,  235,  238,  235,  286,  239,  241,  394, 1947,  383,
      242,  243,   80,  244,  306,  245,  246, 1947,  247,   98,
      248,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       80,  494,  249,  250,  251,   80,  395,  287, 1947,  288,
      289,  102,   80, 1947,  285,  307,  290,  298,  286,  299,
      300,  406,  286,  308,   80,   80,  429,  252,  253,  386,
      254,  279,   80,  291,  384,  385,  292,  102,  289,  106,
      285,  307,  387,  301,  286,  290,  302,  862,  300,  117,
      307,  286,  308,  396,  397,   80,   80, 1920,  308,  255,
      261,  261,  261,  261,  261,  261,  261,  261,  261,   80,

       80,  402,  320,  308,  321,  322,  307,  400,  414,  262,
      263,  264,   80,  307,  265,  266,   80,  308,  266,  466,
      293,  308,  294,  401,   80,  295,  296,  407,  323,  308,
      267,  324,   80,  322,  405,  262,  263,  264,  117,  307,
      265,  408,  266,  285,  297,  466,   80,  266,  430,   80,
      308,  286,  622,  266,  270,  270,  270,  270,  270,  270,
      270,  270,  270,   80,   80,  293,  403,  294,  398,  285,
      295,  296,   80,  271,  272,  273,  404,   80,  274,  275,
      286,  309,  275,  310,  311,   80,  415,  399,  285,  412,
      312,  516,  416,   80,  276,  296,  286,   80,  441,  271,

      272,  273,  413,  315,  274,  316,  275,  313,  317,  318,
      314,  275,  311,   80,  285,  422,  297,  275,  315,  312,
      316,   80,   80,  317,  318,  286,  307,  319,  410,   80,
      388,  389,   80,  290,  308,  150,  411,   80,  390,  417,
      423,  307,  391,  418,  427,  392,   80,   80,   80,  308,
       80,  419,  307,  431,  420,  421,   80,   80,  424,  436,
       80,  425,  290,  308,   80,  433,  434,  307,  437,  319,
      439,  438,  440,  442,   80,   80,  432,  426,  308,  336,
      336,  336,  336,  336,  336,   80,   80,  445,  225,  435,
       76,   76,   76,  225,  443,  446,  226,  822,  444,  228,

      229,  233,  234,  457,  228,  458,  233, 1947,  449,  449,
      449,  449,  449,  449,  449,  457,  457,  458,  458,  458,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  458,
      457,  457,  458,  458,  484,  540,  457,  338,  458,  318,
      339,  457,  460,  458,  457,  340,  458,  341,  450,  459,
      457,   80,  458,  342,  343,  457,  636,  458,  344, 1921,
      484,  345,  362,  457,  457,  458,  458,  571,  289,  290,
      328,  363,  329,  328,  470,  329,  471,  290,   80,  472,
      473,  300,  107,  364,  365,  366,  289,  367,  368,  228,
      229,  369,   80,  370,  228,  107,  285,  466,  290,  371,

      372,  373,  374,  375,  286,  107,  290,  308,  107,   80,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  447,
      229,  107,  285,  466,  447,  580,  448,  569,   80,   80,
      300,  107,  466,  286,  466,  312,  308,  466,  466,  602,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  466,   80,
      466,  312,   80,  466,  312,  466,  322,  118,  262,  263,
      264, 1947,  568,  265,  266,   80,   80,  266,  311,  488,
      570,  489,  548,  572,  490,  491,  517,  594,  518,  267,
      312,  519,  520,  118,  262,  263,  264,  285,  474,  265,

      475,  266,  484,  595,  474,  286,  266,  474,  467,  107,
      467,  549,  266,  468,  468,  468,  468,  468,  468,  468,
      468,  468,   80,  285,  474,   80,  475,  517,  484,  518,
       80,  474,  519,  520,  286,  107,  474,  521,  484,  492,
      484,  493,  474,  484,  484,  492,  576,  574,  492,  587,
      107,  521,  554,  469,  477,  477,  477,  477,  477,  477,
      477,  477,  477,   80,  484,  492,  484,  493,   80,  484,
      118,  484,  492,  478,  479,  480,  107,  492,  481,  482,
      616,  555,  482,  492,  118,   98,  573,  277,  277,  277,
      277,  277,  277,  277,  483,   80,  118,   80,  311,  478,

      479,  480,  575,   80,  481,   80,  482,  312,  577,  322,
      118,  482,  607,  485,   80,  485,  578,  482,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  278,  271,  272,
      273,  307,   80,  274,  275,   80,  312,  275,  585,  308,
      100,  100,  100,  100,  100,  100,  100,  100,  100,   80,
      579,  620,  692,  600,  271,  272,  273,  307,  487,  274,
      102,  275,   80,   80,   80,   80,  275,  586,  308,  511,
      591,  512,  275,  592,  513,  514,  593,  588,  692,  541,
      306,  542,  601,   80,  543,  544,  102,  495,  495,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  307,   80,

      290,  597,  118,  545,   80, 1923,  308,   80,   80,   80,
      496,  497,  498,  499,  500,  589,  590,  596,  604,  501,
      515,   80,  500,  581,  307,  603,  605,  502,  118,  290,
      582,  583,  584,   80,   80,  308,  503,  497,   80,  504,
      511,  499,  512,  500,   80,  513,  514,  606,  501,   80,
       80,  609,  611,  500,  505,  505,  505,  505,  505,  505,
      505,  505,  505,   80,  515,  608,   80,   80,  614,   80,
      610,  290,  617,  506,  615,  507,   80,  836,  508,  509,
       80,  535,  509,  536,  626,  618,  537,  538,  612,  613,
       80,  541,  623,  542,  510,  627,  543,  544,   80,  506,

      290,  507,   80,   80,  508,  539,  509,  621,  629,   80,
      663,  509,  312,  282,  118,  282,   80,  509,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  523,  632,  524,
      524,  524,  524,  524,  524,  524,  524,  524,   80,  645,
      118,  312,  545,  664,   80,  524,  524,  524,  524,  524,
      524,   80,  525,  526,  527,  528,  529,  535,   80,  536,
      624,  530,  537,  538,  531, 1947,   80,  625,  628,  532,
       80,  524,  524,  524,  524,  524,  524,   80,  533,  526,
       80,  534,   80,  528,  634,  529,  633,  630,  312,   80,
      530,  647,  640,  635,   80,  531,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  631,   80,  638,  539,  550,
      550,  550,  550,  550,  550,  639,   80,  312,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  550,  550,  550,
      550,  550,  550,   80,   80,  641,  306,   80,  800,  552,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  642,   80,   80,  644,   80,  552,  325,  336,
      336,  336,  336,  336,  336,  637,  643,  553,   80,  457,
      552,  458, 1925,  648,  556,   80,  552,  649,  550,  550,
      550,  550,  550,  550,   80,  553,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  553,  646,

       80,   80,   80,  652,  553,   80,  150,  557,  552,  558,
      550,  550,  550,  550,  550,  550,  552,  338,  657,   80,
      339,   80,  552,  650,  653,  340,  651,  341,  654,   80,
      656, 1947,   80,  342,  343,   80,  553,  655,  344,   80,
      552,  345,   80,   80,  553,  661,   80,   80,  658,  559,
      553,  659,  665,  660,  560,   80,   80,   80,  731,  561,
       80,  229,  662,  457,  667,  458,  666,  227,  553,  685,
      668, 1947,  669,  266,  670,  447,  229,  705, 1927,  739,
      447,  275,  448,  514,  731,  562,  235,  235,  235,  235,
      235,  235,  235,  449,  449,  449,  449,  449,  449,  449,

      468,  468,  468,  468,  468,  468,  468,  468,  468,  467,
     1947,  467, 1929,  766,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  107,  290,  290,  672,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  688,  742,  689,  712,
      740,  690,  691,  107,  520,   80,  262,  713,  264,  107,
      743,  265,  266,  290,  290,  266,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  712,  742,  684,  804,  107,
       80,  767,  262, 1947,  264,  538,  713,  265,  742,  266,
      692,  795,  692,  312,  266,  692,  692,  696,  118,  697,
      266,  744,  698,  699,  312,  769,  476,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  692,  742,  692,  118,
      692,  692,  312,  692,  118,  768,  478,  479,  480,  544,
       80,  481,  482,  312,  770,  482,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  118,  692,  483,   80,  798,
       80,  776,  478,  479,  480,   80,  700,  481,  701,  482,
      818,  802,  700,  797,  482,  700,  693,   80,  693,   80,
      482,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      777,  708,  700,  709,  701,  796,  710,  711,  824,  700,
       80, 1930,   80, 1947,  700,  895,  485,   80,  485,  801,
      700,  486,  486,  486,  486,  486,  486,  486,  486,  486,

      799,  695,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  277,  277,  277,  277,  277,  277,  277,  100,  100,
       80,  271,   80,  273,   80,   80,  274,  275,  821,  803,
      275,  499,  712,  805,   80,  712,   80,  528,  745,  720,
      713,  721,  704,  713,  722,  723,  746,  271,  811,  273,
      810,  494,  274,  826,  275,   80,   80,  828,  712,  275,
      499,  712,  712,  724,  745,  275,  495,  495,  745,  713,
      713,  714,  713,  715,  716,  746,  746,   80,  812,  816,
      717,  725,  713,  726,  727,   80,  829, 1947,  712,  496,
      497,  498,  499,  500,  745,  806,   80,  718,  501,  713,

      719,  500,  716,  817,   80,  746,  502,  728,  713,  717,
      729,  827,  727,   80,   80,  503,  497,  809,  504,  720,
      499,  721,  500,   80,  722,  723,  813,  501,  731,  736,
      731,  737,  500,  731,  731,  736,   80,  835,  736,   80,
      745,  732,  712,  733, 1057,  838,  734,  735,  746,   80,
      713,   80,  814,  815,  731,  736,  731,  737,  825,  731,
      823,  731,  736,  837,  731,  528,  745,  736,  712,  747,
      724,  748,  749,  736,   80,   80, 1932,  746,  750,  713,
      505,  505,  505,  505,  505,  505,  505,  505,  505,   80,
      731,   80,  834,  807,   80,  751,  839,  808,  752,  506,

      749,  507,   80,   80,  508,  509,  819,  750,  509,  761,
      746,  762,  763,   80,  820,  840,   80,   80,   80,  844,
      510,   80,   80, 1037,   80,  506,  841,  507,   80,  842,
      508,   80,  509, 1049,  847,  764,  746,  509,  765,  848,
      763,  843,  846,  509,  523,  845,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  550,  550,  550,  550,  550,
      550,   80,  524,  524,  524,  524,  524,  524,   80,  525,
      526,  527,  528,  529,   80,   80,  850,  849,  530,  907,
     1947,  531,   80,  474,   80,  552,  532,   80,  524,  524,
      524,  524,  524,  524,  851,  533,  526,  853,  534,  753,

      528,  754,  529,  852,  755,  756,  855,  530,  758,   80,
      758,  864,  531,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  745,  757,  854,   80,  753,   80,  754,   80,
      746,  755,  756,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,   80,  858,   80,  745,  745,
      856,   80,  863,  760,   80,   80,  859,  746,   80,  746,
      857,   80,   80,  552,  866,  876,   80,   80,   80,  552,
       80,  861,  860,   80,   80,  745,   80,  757,  550,  550,
      550,  550,  550,  550,  865,  873,  746,  867,  868,  869,
      872,  553, 1934,   80,  870,  871,  880,  553,  550,  550,

      550,  550,  550,  550,   80,   80,  875,   80,  552,  550,
      550,  550,  550,  550,  550,  782,  877,  550,  550,  550,
      550,  550,  550,  874, 1018,   80,   80,  882,  552,  550,
      550,  550,  550,  550,  550,  883,  553,   80,  995,  552,
      550,  550,  550,  550,  550,  550,   80,  552,   80,   80,
       80,   80,   80,  878,  879,  783,  553,   80,  884,  552,
       80,  889,  888,  885,   80,   80,  881,  553,  886,  887,
      552,  784,  229,  466,  894,  553,   80,  466,  896,  891,
      890,  912,  713,  786,  500,  482,  892,  553,  235,  235,
      235,  235,  235,  235,  235,  785,  787,  921,  553,  466,

      893,  492,  915,  466,  916,  716,  788,  917,  918,   80,
      500,  713,  929,  266,  717,  484,  723,  266, 1014,  484,
      789,  717,  790,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  484,  262,  717,  264,  484,  712,  265,  266,  717,
      717,  266,  727,  500,  713,  275,  500,  935,  951,  275,
       80,  509,  756,  684,   80,   80,  716, 1947,  262, 1003,
      264,   80,  712,  265, 1019,  266, 1004,  994,  717,  500,
      266,  727,  500,  713,  495,  495,  266,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  477,  477,  477,  477,

      477,  477,  477,  477,  477,  712,  478,  531,  480,   80,
       80,  481,  482,  713,  924,  482,  925,   80,  742,  926,
      927, 1007,   80,  938,  730,  939,   80,  911,  940,  941,
      999,  712,  478,  531,  480, 1000,  702,  481,  928,  482,
      998,  996,  713, 1947,  482,  717,  693,  742,  693,  746,
      482,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  742,
      924,   80,  925,   80,  717,  926,  927,  749,  746,  271,
      742,  273,  743, 1065,  274,  275,  750,  750,  275,  750,
      930,   80,  931,  945, 1001,  932,  933,  930,  742,  931,

      704,  717,  932,  933, 1002,  271,  749,  273,   80,  742,
      274,   80,  275,  500,  934,  750,  750,  275,  750,  531,
      500,  928,   80,  275,  997,   80,   80,   80, 1095, 1005,
      717,  946,  700,  947, 1069,  745,  948,  949,   80,  500,
     1006, 1008, 1011,  746,  763,  531,  500, 1009,  934,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  942,   80,
      942,  745,  750,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  746,  946,   80,  947,  745, 1010,  948,  949,
      763,  531,  950,   80,  746,   80,   80,   80,   80,  738,
     1015,  750,   80, 1012,   80,   80,   80,  950, 1016, 1017,

     1025,   80,  745,  944,  750, 1013,   80,  531,   80, 1021,
     1022, 1020, 1042,  746,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  957, 1036,  958,   80,   80,  959,  960,
     1072, 1024, 1296,  750,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  957, 1040,  958,  531,  961,  959,  960,
       80,   80,   80,  953,   80,  954,   80, 1034,  955,  953,
     1023,   80,  953, 1038,   80, 1039,  531,   80,   80,   80,
     1035,   80,  531, 1041,  956,   80, 1043, 1045, 1046,  953,
       80,  954, 1044,   80,  955, 1054,  953, 1047, 1048, 1947,
     1050,  953,  531,  758,  961,  758, 1062,  953,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  970,  970,  970,
      970,  970,  970,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,   80,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550, 1051,   80,
     1053,   80,   80,  552, 1052,   80, 1055,   80, 1056,  552,
      550,  550,  550,  550,  550,  550,  552,   80,   80,   80,
     1058,   80,  552,   80,   80,  972, 1059, 1064, 1060,   80,
     1061,  553, 1070, 1071,   80, 1063, 1066,  553, 1068,   80,
      552,   80,   80,   80,  553,   80, 1067, 1077, 1073,   80,
      553, 1074,  981,   80,   80, 1075,  984, 1947,  982,  983,

      550,  550,  550,  550,  550,  550, 1076, 1078,  553,   80,
      550,  550,  550,  550,  550,  550, 1082,  466, 1079,  692,
      692,  985,   80,  550,  550,  550,  550,  550,  550,   80,
      552, 1947,   80,  550,  550,  550,  550,  550,  550, 1081,
      552, 1153,   80,  466, 1099,  692,  692, 1080,  927,  717,
      717, 1100,   80,  552,  500,  933,  500,  266,  553,  482,
      482,  484,  731,  552,   80, 1158, 1160,  986,  553,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  717,  717,
      500,  553,  500,  750,  731, 1108, 1193,  484,  731,  987,
      988,  553,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  275,  509, 1102, 1107,  750, 1177,  736,  949,  905,
      731, 1108,  750,  989,  910,  910,  910,  910,  910,  910,
      910,  910,  910, 1116,  509,   80,  531,  960, 1130,  531,
       80,   80,  919,  478,  750,  480, 1154, 1152,  481,  482,
     1171,   80,  482,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  531,   80,  911,  531,   80, 1131,   80,  478,
     1155,  480, 1156, 1150,  481, 1157,  482,   80, 1947,   80,
     1159,  482, 1167, 1166, 1161,   80, 1151,  482, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105,  952,  952,  952,
      952,  952,  952,  952,  952,  952,   80,  953, 1163,  954,

       80,   80,  955,  953,   80,   80,  953,   80, 1109, 1162,
     1110,   80,   80, 1111, 1112, 1169,   80,   80, 1106, 1195,
     1168,   80, 1164,  953, 1175,  954, 1179,  956,  955, 1165,
      953, 1108,   80, 1173,   80,  953,   80,  942,   80,  942,
     1170,  953,  943,  943,  943,  943,  943,  943,  943,  943,
      943, 1176, 1113, 1178, 1114, 1172, 1183, 1108, 1113, 1174,
       80, 1113,  970,  970,  970,  970,  970,  970,   80, 1125,
     1125, 1125, 1125, 1125, 1125,   80,   80, 1180, 1113,   80,
     1114, 1181,   80, 1184,   80, 1113, 1127,   80,   80, 1194,
     1113, 1196,   80, 1182,   80, 1214, 1113, 1198, 1199,  550,

      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,   80, 1197,   80,
      972,  550,  550,  550,  550,  550,  550, 1128, 1129,  552,
       80,   80, 1202,   80,   80,  552, 1205, 1206,   80, 1201,
     1200,  552,   80,  550,  550,  550,  550,  550,  550,   80,
       80,  552, 1203,   80,   80, 1207, 1278,  553, 1229, 1211,
     1212, 1204,  953,  553,   80, 1208, 1140, 1213,   80,  553,
     1209,   80, 1141,  552,   80, 1210,   80, 1216,   80,  553,
      550,  550,  550,  550,  550,  550,   80, 1219, 1143, 1215,
       80, 1220, 1142, 1253,  550,  550,  550,  550,  550,  550,

     1218,  553,  550,  550,  550,  550,  550,  550,   80,   80,
      552,  550,  550,  550,  550,  550,  550,   80,   80,   80,
       80, 1284, 1254, 1144,  552,  692, 1938,  731,   80, 1279,
     1222, 1217,  552, 1221,   80, 1281,   80,   80,  553, 1287,
     1223,  552,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  692,  553,  731, 1295, 1280,   80, 1232, 1288, 1233,
      553, 1145, 1234, 1235,   80,  482,   80,  509, 1282,  553,
     1146, 1286, 1283, 1285,   80, 1940,   80, 1289, 1148, 1290,
     1147, 1293, 1093, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105,  952,  952,  952,  952,  952,  952,  952,  952,

      952,   80,  953,   80,  954,   80,   80,  955,  953, 1312,
     1294,  953, 1125, 1125, 1125, 1125, 1125, 1125,   80, 1291,
       80,   80, 1292, 1106, 1297,   80, 1942,   80,  953, 1127,
      954, 1298, 1115,  955, 1299,  953,   80, 1311,   80, 1300,
      953, 1304, 1301, 1322,   80,   80,  953, 1125, 1125, 1125,
     1125, 1125, 1125,   80, 1305,  550,  550,  550,  550,  550,
      550,   80, 1306,   80, 1127,  550,  550,  550,  550,  550,
      550, 1129, 1321,  550,  550,  550,  550,  550,  550,   80,
       80, 1947, 1307, 1944, 1331,  552,  550,  550,  550,  550,
      550,  550,   80, 1308,   80,  552,  550,  550,  550,  550,

      550,  550, 1309,  552,   80, 1128, 1129, 1243, 1243, 1243,
     1243, 1243, 1243,  553,   80,   80,  552, 1313,   80,   80,
       80,   80, 1310,  553, 1323, 1332,  552, 1302,   80, 1335,
     1268,  553, 1328, 1303, 1333, 1324, 1267,  550,  550,  550,
      550,  550,  550, 1269,  553,   80, 1325, 1270,  550,  550,
      550,  550,  550,  550,  553,  550,  550,  550,  550,  550,
      550, 1271,   80,   80,   80, 1245,   80,  552, 1246,   80,
       80,   80, 1390, 1247,   80, 1248, 1108, 1337,  552, 1354,
     1396, 1249, 1250, 1336, 1326,  552, 1251, 1329, 1343, 1252,
     1327, 1330, 1113, 1334, 1389,  553,  550,  550,  550,  550,

      550,  550, 1108,   80,   80,   80,  553, 1386, 1355, 1387,
     1108,   80, 1388,  553, 1273,   80,  953,   80, 1397, 1272,
     1393, 1947, 1394, 1421,   80, 1392,  552, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1108, 1274, 1391,   80,
       80,   80, 1398,   80, 1350, 1350, 1350, 1350, 1350, 1350,
      953,   80,   80,   80,  553, 1395, 1350, 1350, 1350, 1350,
     1350, 1350, 1275, 1400, 1399, 1945,   80, 1228, 1243, 1243,
     1243, 1243, 1243, 1243, 1352, 1415, 1401, 1350, 1350, 1350,
     1350, 1350, 1350, 1403, 1408, 1407, 1352,   80, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

       80,   80, 1353, 1356, 1405,   80,   80, 1352, 1350, 1350,
     1350, 1350, 1350, 1350, 1353, 1402,   80,   80, 1352, 1406,
       80,   80,   80, 1412, 1352, 1409, 1245, 1404,   80, 1246,
       80, 1410, 1416, 1411, 1247, 1353, 1248,   80, 1352,   80,
     1413,   80, 1249, 1250, 1357,   80, 1353, 1251, 1414,   80,
     1252, 1358, 1353, 1947, 1440,   80, 1424, 1359, 1350, 1350,
     1350, 1350, 1350, 1350, 1423, 1422, 1353, 1428, 1350, 1350,
     1350, 1350, 1350, 1350,  550,  550,  550,  550,  550,  550,
       80,   80,   80, 1441, 1360, 1476, 1474,   80, 1352,  550,
      550,  550,  550,  550,  550, 1475,   80, 1430, 1352, 1492,

       80, 1426, 1108, 1427,  552,  550,  550,  550,  550,  550,
      550, 1425,   80,   80,   80,   80, 1353,   80,   80,  552,
     1429,   80,   80,   80, 1499, 1361, 1353, 1477, 1108,   80,
       80, 1480,  553, 1488, 1479,  552,  550,  550,  550,  550,
      550,  550,  953, 1362,   80, 1478,   80,  553, 1484, 1481,
     1482, 1485, 1376, 1946, 1503, 1552, 1375,  550,  550,  550,
      550,  550,  550,  553, 1491,   80,  552,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,   80,
       80, 1947,   80, 1486, 1377,   80,   80,  552, 1483, 1489,
       80,   80,   80, 1490,  553, 1493,   80,  552,   80, 1555,

       80, 1496, 1487,  552,  550,  550,  550,  550,  550,  550,
       80,   80,   80, 1497, 1494,  553, 1504, 1947, 1378, 1495,
     1379,   80, 1505,   80, 1498,  553,   80,   80, 1508, 1556,
     1558,  553,   80, 1507,  552, 1383, 1383, 1383, 1383, 1383,
     1383,   80,   80, 1947,   80, 1506, 1380, 1559, 1554, 1553,
     1557, 1560, 1127,   80,   80, 1381, 1350, 1350, 1350, 1350,
     1350, 1350,  553,   80,   80,  552,   80, 1744, 1947, 1564,
     1565, 1382, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350,   80,   80, 1352, 1350, 1350, 1350,
     1350, 1350, 1350,  553, 1129, 1350, 1350, 1350, 1350, 1350,

     1350,   80, 1352,  522, 1566,  522,   80, 1567, 1352, 1350,
     1350, 1350, 1350, 1350, 1350, 1561,   80, 1352, 1350, 1350,
     1350, 1350, 1350, 1350,   80, 1352,   80, 1568,   80,   80,
     1353, 1912,   80,   80, 1562, 1573, 1353, 1576, 1575, 1352,
     1574, 1563, 1577,   80,   80, 1353, 1583,   80, 1352, 1617,
     1618,   80, 1616, 1353, 1446, 1350, 1350, 1350, 1350, 1350,
     1350, 1623,   80,   80, 1447, 1619, 1620, 1353, 1448, 1350,
     1350, 1350, 1350, 1350, 1350, 1584, 1353,  550,  550,  550,
      550,  550,  550,   80, 1450, 1352,  550,  550,  550,  550,
      550,  550,  346,   80,  346, 1449, 1621, 1451, 1632, 1352,

      550,  550,  550,  550,  550,  550,   80,  552,   80, 1622,
       80, 1625,   80, 1353, 1634, 1624,  552,  550,  550,  550,
      550,  550,  550,   80,   80,   80, 1626, 1353, 1627,   80,
      552,   80, 1452, 1631,   80,  553,  550,  550,  550,  550,
      550,  550,   80, 1635,  553, 1666, 1667,  552, 1947, 1453,
       80, 1454, 1668, 1672, 1910, 1947, 1466, 1669,  553,  550,
      550,  550,  550,  550,  550, 1670,  552, 1467,  550,  550,
      550,  550,  550,  550,   80,  553, 1468,  550,  550,  550,
      550,  550,  550, 1383, 1383, 1383, 1383, 1383, 1383,  552,
       80,   80, 1469, 1674,  553, 1906, 1904, 1671,  552,   80,

     1127, 1515, 1515, 1515, 1515, 1515, 1515,  552,   80, 1673,
     1706, 1675, 1947,  552, 1677, 1470, 1706,  553, 1350, 1350,
     1350, 1350, 1350, 1350,   80,   80,  553, 1350, 1350, 1350,
     1350, 1350, 1350, 1471, 1275,  553, 1350, 1350, 1350, 1350,
     1350, 1350, 1129, 1947,   80,   80, 1743, 1708, 1352, 1900,
     1947,   80, 1472,   80, 1742, 1778,  348, 1352,  348, 1517,
     1350, 1350, 1350, 1350, 1350, 1350, 1352, 1707, 1350, 1350,
     1350, 1350, 1350, 1350, 1777, 1709, 1353, 1350, 1350, 1350,
     1350, 1350, 1350,   80, 1898, 1353, 1734,  451, 1894,  451,
     1352,  453, 1734,  453, 1353, 1892, 1890, 1526, 1352, 1350,

     1350, 1350, 1350, 1350, 1350, 1779, 1527, 1352, 1947, 1528,
     1350, 1350, 1350, 1350, 1350, 1350,   80,   80, 1353,   80,
     1886, 1710, 1706,  455, 1529,  455, 1353, 1834, 1706, 1352,
     1947, 1711, 1734, 1947, 1883, 1353,   80, 1810, 1734, 1530,
     1352, 1881, 1879, 1735, 1531, 1350, 1350, 1350, 1350, 1350,
     1350,  550,  550,  550,  550,  550,  550, 1353, 1947, 1811,
      550,  550,  550,  550,  550,  550, 1947, 1869, 1353, 1663,
     1663, 1663, 1663, 1663, 1663, 1352, 1664, 1533, 1532, 1707,
     1947,  552,  550,  550,  550,  550,  550,  550, 1947, 1735,
      552,  550,  550,  550,  550,  550,  550, 1703, 1703, 1703,

     1703, 1703, 1703, 1353, 1704, 1706,  462, 1947,  462,  553,
     1867, 1706,  552,  464,  563,  464,  563,  565,  553,  565,
      673,  552,  673, 1947, 1865, 1534, 1275, 1546,  550,  550,
      550,  550,  550,  550, 1515, 1515, 1515, 1515, 1515, 1515,
      553,  550,  550,  550,  550,  550,  550, 1947, 1854,  553,
      550,  550,  550,  550,  550,  550, 1947, 1842,  552,  675,
     1853,  675, 1707, 1842, 1547, 1125, 1125, 1125, 1125, 1125,
     1125,  552,   80, 1548, 1350, 1350, 1350, 1350, 1350, 1350,
      552, 1947, 1127, 1734, 1851, 1856,  553, 1842,  679, 1734,
      679, 1856, 1517, 1842, 1549, 1947, 1706, 1856,  681,  553,

      681, 1849, 1706, 1856, 1352,  771, 1947,  771,  553,  773,
     1847,  773, 1550, 1947, 1843, 1551, 1350, 1350, 1350, 1350,
     1350, 1350, 1845, 1582, 1129, 1947, 1350, 1350, 1350, 1350,
     1350, 1350, 1353, 1350, 1350, 1350, 1350, 1350, 1350, 1734,
     1735, 1593, 1857, 1947, 1843, 1734, 1352, 1350, 1350, 1350,
     1350, 1350, 1350, 1707, 1857, 1838, 1352, 1350, 1350, 1350,
     1350, 1350, 1350, 1352, 1350, 1350, 1350, 1350, 1350, 1350,
      778,  780,  778,  780, 1353, 1836,  791, 1352,  791, 1842,
     1856,   80, 1833, 1594, 1353, 1842, 1856, 1352,  793, 1831,
      793, 1353, 1827,  830, 1352,  830, 1735, 1856, 1947,  832,

     1596,  832,  897, 1856,  897, 1353,  899, 1595,  899, 1350,
     1350, 1350, 1350, 1350, 1350, 1353, 1350, 1350, 1350, 1350,
     1350, 1350, 1353,  901,  903,  901,  903, 1597,  550,  550,
      550,  550,  550,  550, 1825, 1815, 1843, 1857, 1598, 1352,
     1599,  962,  964,  962,  964, 1814, 1352,  550,  550,  550,
      550,  550,  550,  966, 1857,  966,   80, 1807,  552,  550,
      550,  550,  550,  550,  550, 1805, 1801, 1353, 1612, 1612,
     1612, 1612, 1612, 1612, 1353, 1799,  968,  552,  968, 1797,
      973, 1613,  973, 1601, 1786, 1127,  553, 1600,  975,  552,
      975,  977, 1785,  977, 1609,  979, 1782,  979,  552,  550,

      550,  550,  550,  550,  550,  553,  550,  550,  550,  550,
      550,  550, 1149,  990, 1149,  990, 1610,  553, 1125, 1125,
     1125, 1125, 1125, 1125, 1781, 1776,  553, 1129,  992,  552,
      992, 1026, 1028, 1026, 1028, 1127,  552, 1774, 1772, 1611,
     1350, 1350, 1350, 1350, 1350, 1350, 1947, 1947, 1350, 1350,
     1350, 1350, 1350, 1350, 1030, 1762, 1030,  553, 1032, 1224,
     1032, 1224, 1947, 1614,  553, 1085, 1087, 1085, 1087, 1225,
     1352, 1225, 1089, 1615, 1089, 1755, 1582, 1129, 1352, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1753, 1350, 1350, 1350, 1350, 1350, 1350, 1353, 1751,

     1350, 1350, 1350, 1350, 1350, 1350, 1353, 1750,   79, 1352,
       79, 1748, 1117, 1648, 1117, 1352, 1119, 1121, 1119, 1121,
     1746, 1647, 1352, 1350, 1350, 1350, 1350, 1350, 1350,   80,
     1352, 1663, 1663, 1663, 1663, 1663, 1663, 1353, 1664, 1123,
     1132, 1123, 1132, 1353, 1732, 1134, 1650, 1134, 1731, 1649,
     1353, 1722, 1136, 1352, 1136, 1719, 1717, 1651, 1353, 1715,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1138, 1713, 1138, 1660, 1660, 1660, 1660, 1660,
     1660, 1353, 1652, 1185, 1187, 1185, 1187,   80, 1661, 1653,
     1352, 1189, 1127, 1189,   80,   80, 1352,  550,  550,  550,

      550,  550,  550,   80, 1191,  552, 1191, 1236,   80, 1236,
     1947, 1238,   80, 1238, 1947, 1349,   80, 1349, 1353, 1240,
      334, 1240,  334, 1256, 1353, 1256, 1258,  552, 1258, 1260,
       80, 1260, 1655,  553, 1129,  550,  550,  550,  550,  550,
      550, 1262, 1654, 1262, 1374, 1264, 1374, 1264, 1947,  337,
     1702,  337, 1947, 1700, 1688,  553, 1947, 1612, 1612, 1612,
     1612, 1612, 1612, 1687, 1276,  552, 1276, 1275, 1685, 1314,
     1613, 1314, 1683, 1681, 1127,  550,  550,  550,  550,  550,
      550, 1350, 1350, 1350, 1350, 1350, 1350,  552, 1947, 1316,
     1679, 1316, 1947,  553, 1947,  550,  550,  550,  550,  550,

      550, 1420, 1662, 1420, 1318,  552, 1318,  376, 1947,  376,
       80, 1352, 1947, 1338, 1676, 1338, 1129, 1350, 1350, 1350,
     1350, 1350, 1350,   80,   80,  552, 1350, 1350, 1350, 1350,
     1350, 1350, 1659,  553, 1947, 1340, 1436, 1340, 1436, 1353,
     1350, 1350, 1350, 1350, 1350, 1350, 1658, 1352, 1665, 1346,
      546, 1346,  546,  553, 1947, 1363, 1352, 1363, 1365, 1646,
     1365, 1275, 1645, 1690, 1703, 1703, 1703, 1703, 1703, 1703,
     1352, 1704, 1367, 1643, 1367, 1353, 1369, 1463, 1369, 1463,
     1691, 1371, 1641, 1371, 1353, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1639, 1353, 1350,

     1350, 1350, 1350, 1350, 1350, 1692, 1350, 1350, 1350, 1350,
     1350, 1350,  551, 1637,  551, 1352, 1384, 1500, 1384, 1500,
     1633, 1352, 1693, 1417,  598, 1417,  598,   80,   80, 1352,
     1698, 1698, 1698, 1698, 1698, 1698, 1352, 1660, 1660, 1660,
     1660, 1660, 1660, 1353, 1431,   80, 1431, 1127, 1694, 1353,
     1661, 1433, 1630, 1433, 1127, 1629, 1437, 1353, 1437, 1442,
     1352, 1442,   80, 1444, 1353, 1444, 1455,  552, 1455, 1457,
     1695, 1457,   80, 1697,  550,  550,  550,  550,  550,  550,
     1459, 1696, 1459, 1461, 1464, 1461, 1464,   80, 1353, 1129,
      550,  550,  550,  550,  550,  550, 1129, 1350, 1350, 1350,

     1350, 1350, 1350,   80,  552, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350,  992,   80,  992,
      552, 1350, 1350, 1350, 1350, 1350, 1350, 1352, 1501, 1087,
     1501, 1087,  553, 1608,   79, 1352,   79, 1511, 1607, 1511,
     1275, 1352, 1350, 1350, 1350, 1350, 1350, 1350,  553, 1604,
     1513, 1352, 1513, 1603, 1518, 1353, 1518, 1275, 1520, 1522,
     1520, 1522, 1524, 1353, 1524, 1535, 1537, 1535, 1537, 1353,
     1592, 1605, 1352, 1605, 1590, 1539, 1723, 1539, 1588, 1353,
     1350, 1350, 1350, 1350, 1350, 1350, 1724, 1725, 1350, 1350,
     1350, 1350, 1350, 1350, 1586,  971, 1726,  971, 1580, 1579,

     1353, 1350, 1350, 1350, 1350, 1350, 1350, 1542,   80, 1542,
     1352, 1698, 1698, 1698, 1698, 1698, 1698, 1544, 1352, 1544,
     1572, 1727, 1736, 1736, 1736, 1736, 1736, 1736, 1127, 1664,
     1569, 1352, 1569, 1571, 1570, 1571, 1737, 1578, 1353, 1578,
      334, 1352,  334, 1585,   80, 1585, 1353, 1819, 1819, 1819,
     1819, 1819, 1819, 1728, 1820, 1655, 1587,   80, 1587, 1353,
     1350, 1350, 1350, 1350, 1350, 1350, 1589, 1591, 1589, 1591,
     1129, 1656, 1602, 1656, 1602,   80, 1729, 1705, 1126, 1606,
     1126, 1606, 1705, 1350, 1350, 1350, 1350, 1350, 1350,   80,
     1352, 1738, 1738, 1738, 1738, 1738, 1738, 1738,   80, 1350,

     1350, 1350, 1350, 1350, 1350, 1705, 1350, 1350, 1350, 1350,
     1350, 1350,  337, 1352,  337, 1628,   80, 1628, 1353,  376,
      546,  376,  546, 1739, 1636, 1638, 1636, 1638, 1705, 1352,
     1640,   80, 1640, 1705, 1705, 1655, 1352, 1705, 1705,   80,
     1642, 1353, 1642,   80, 1689, 1705, 1689,   80, 1545, 1705,
     1756, 1705, 1740, 1705, 1644, 1741, 1644, 1353, 1244, 1657,
     1244, 1657, 1543, 1541, 1353, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350,  551,  598,  551,
      598, 1757, 1350, 1350, 1350, 1350, 1350, 1350, 1758, 1763,
     1763, 1763, 1763, 1763, 1763, 1352, 1704, 1678, 1680, 1678,

     1680, 1352, 1540, 1764, 1736, 1736, 1736, 1736, 1736, 1736,
     1538, 1664, 1352, 1682, 1684, 1682, 1684, 1720, 1737, 1720,
     1686, 1536, 1686, 1353, 1351, 1699, 1351, 1699, 1701, 1353,
     1701, 1759, 1125, 1125, 1125, 1125, 1125, 1125, 1525, 1712,
     1353, 1712, 1760, 1714, 1716, 1714, 1716, 1761, 1733, 1127,
     1718, 1523, 1718, 1733, 1521, 1519, 1350, 1350, 1350, 1350,
     1350, 1350, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1514,
     1839, 1839, 1839, 1839, 1839, 1839, 1733, 1840, 1512, 1113,
     1350, 1350, 1350, 1350, 1350, 1350, 1352, 1745, 1747, 1745,
     1747, 1129, 1510, 1783, 1766, 1783, 1749, 1509, 1749, 1733,

     1516, 1752, 1516, 1752, 1733, 1733,   80, 1706, 1733, 1733,
     1352,   80,   80, 1706, 1353, 1754, 1733, 1754,   80, 1126,
     1733, 1126, 1733, 1767, 1733, 1788, 1768, 1769, 1769, 1769,
     1769, 1769, 1769, 1769, 1771, 1773, 1771, 1773, 1353, 1350,
     1350, 1350, 1350, 1350, 1350, 1775, 1787, 1775, 1790, 1790,
     1790, 1790, 1790, 1790, 1350, 1350, 1350, 1350, 1350, 1350,
     1812, 1791, 1812, 1502, 1707, 1127, 1780, 1770, 1780, 1352,
     1350, 1350, 1350, 1350, 1350, 1350,   80, 1581, 1352, 1581,
     1784, 1244, 1784, 1244, 1352, 1763, 1763, 1763, 1763, 1763,
     1763, 1798, 1704, 1798, 1800,   80, 1800, 1353,   80, 1764,

     1352, 1804, 1806, 1804, 1806,   80, 1353, 1129, 1868, 1734,
     1868, 1884, 1353, 1884, 1935, 1734, 1935,   80, 1792, 1789,
       80, 1125, 1125, 1125, 1125, 1125, 1125, 1473, 1353, 1794,
     1794, 1794, 1794, 1794, 1794, 1794, 1706, 1793, 1127, 1936,
     1465, 1936, 1706, 1462, 1460, 1350, 1350, 1350, 1350, 1350,
     1350, 1458, 1456, 1445, 1443, 1439, 1802, 1802, 1802, 1802,
     1802, 1802, 1802, 1438, 1706, 1113, 1735, 1113, 1435, 1795,
     1706, 1434, 1432,   80,   80, 1352,   80,   80,   80,   80,
     1129,   80, 1419, 1418, 1769, 1769, 1769, 1769, 1769, 1769,
     1769,   80,   80, 1707,   80,   80, 1803, 1816, 1816, 1816,

     1816, 1816, 1816, 1353, 1819, 1819, 1819, 1819, 1819, 1819,
     1817, 1820,   80,   80, 1127, 1655,   80, 1385, 1373, 1372,
     1370, 1707, 1706, 1368, 1366, 1364, 1348, 1352, 1706, 1347,
     1113, 1345, 1344, 1342, 1350, 1350, 1350, 1350, 1350, 1350,
      736,  700, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
     1808, 1341, 1339,   80,   80, 1353, 1129,   80, 1808, 1808,
     1808, 1808, 1808, 1808, 1352,   80,   80,   80,   80, 1350,
     1350, 1350, 1350, 1350, 1350,   80,   80,   80,   80, 1707,
       80,   80, 1809,   80, 1808, 1808, 1808, 1808, 1808, 1808,
       80, 1320, 1353, 1790, 1790, 1790, 1790, 1790, 1790, 1352,

     1319, 1818, 1317, 1315,   80,   80, 1791, 1277, 1266, 1265,
     1127, 1350, 1350, 1350, 1350, 1350, 1350, 1263, 1261, 1259,
     1257, 1255, 1242, 1352, 1734, 1241, 1239, 1353, 1237,  960,
     1734,  953, 1231, 1734, 1230,  949, 1228,  736,  736, 1734,
     1227, 1352, 1821,  933, 1822, 1822, 1822, 1822, 1822, 1822,
     1822,  927, 1129, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
      492,  700,  700, 1816, 1816, 1816, 1816, 1816, 1816, 1353,
     1226,  474, 1084,   80,   80,   80, 1817, 1655,   80, 1706,
     1127, 1735,   80,   80, 1823, 1706,   80,   80,   80,   80,
     1735, 1734,   80, 1352,   80,   80,   80, 1734,   80, 1802,

     1802, 1802, 1802, 1802, 1802, 1802,   80,   80,   80, 1192,
     1190, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828,
     1734, 1188, 1129, 1186,   80, 1139, 1734, 1828, 1828, 1828,
     1828, 1828, 1828, 1137, 1135, 1133, 1707, 1124, 1122, 1120,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1118, 1735,  960,
      960, 1829, 1115, 1828, 1828, 1828, 1828, 1828, 1828, 1706,
      756,  949,  949,  945,  736, 1706, 1104, 1103, 1101,  933,
      933, 1350, 1350, 1350, 1350, 1350, 1350, 1735,  723, 1808,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1350, 1350,
     1350, 1350, 1350, 1350,  927, 1808, 1808, 1808, 1808, 1808,

     1808, 1352, 1839, 1839, 1839, 1839, 1839, 1839,  927, 1840,
     1125, 1125, 1125, 1125, 1125, 1125, 1707,  492, 1352, 1809,
      492, 1808, 1808, 1808, 1808, 1808, 1808, 1127, 1098, 1353,
      700, 1858, 1858, 1858, 1858, 1858, 1858, 1655, 1820, 1097,
     1096, 1094, 1093,  474,  474, 1859, 1353, 1125, 1125, 1125,
     1125, 1125, 1125, 1092, 1091, 1655, 1841, 1090, 1088, 1086,
     1084, 1841,   80,   80, 1127,   80,   80,   80,   80, 1129,
     1860, 1860, 1860, 1860, 1860, 1860, 1860,   80, 1870, 1870,
     1870, 1870, 1870, 1870, 1841, 1840, 1858, 1858, 1858, 1858,
     1858, 1858, 1871, 1820, 1870, 1870, 1870, 1870, 1870, 1870,

     1859, 1840, 1861,   80,   80,   80, 1129, 1841, 1871,   80,
       80,   80, 1841, 1841,   80,   80, 1841, 1841, 1033, 1031,
     1029, 1842, 1027,   80, 1841,  993,  991, 1842, 1841,  980,
     1841, 1862, 1841,  978, 1863, 1855,  976,  974,  969,  967,
     1855, 1876, 1876, 1876, 1876, 1876, 1876, 1876,  965, 1872,
     1872, 1872, 1872, 1872, 1872, 1872,  963,  544,  538,  766,
      756,  756,  520, 1855,  514,  509,  937,  936,  723,  723,
      492,  923,  922,  920,  919,  482,  914,  913, 1843,  474,
      909, 1873,  908,  906,  905,  904, 1855,  902,  678,  678,
      900, 1855, 1855,  898, 1842, 1855, 1855,   80,   80,   80,

     1842,   80, 1856, 1855,   80,   80,   80, 1855, 1856, 1855,
     1874, 1855,   80, 1875, 1876, 1876, 1876, 1876, 1876, 1876,
     1876,   80, 1887, 1887, 1887, 1887, 1887, 1887, 1887,   80,
      833,  831,  599,  794,  792,  781,  779,  775,  774,  772,
      547,  544,  544, 1842,  318,  538,  538,  520,  520, 1842,
      296, 1843, 1856,  514, 1877,  514,  738,  730, 1856, 1857,
      275,  707, 1888, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
      706,  702, 1907, 1907, 1907, 1907, 1907, 1907, 1907,  266,
      687,  686,  682,  680,  458,  458,  678,  676,  674,   80,
       80,   80,  599, 1856,  567,  566,  564,  547,  330, 1856,

     1843,  329,  318, 1896, 1842,  318,  303,  296,  296, 1857,
     1842,  269, 1908, 1887, 1887, 1887, 1887, 1887, 1887, 1887,
      476,  465,  463,  461, 1901, 1901, 1901, 1901, 1901, 1901,
     1901, 1901, 1901, 1842,  458,  457,  456,  454,  452, 1842,
     1901, 1901, 1901, 1901, 1901, 1901,  229,   80,   80,  377,
     1857,  350,  349, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
      347, 1843,  330,  335, 1902,  333, 1901, 1901, 1901, 1901,
     1901, 1901, 1856,  330,  328,  327,  326,  269, 1856,  260,
      259,   78,  258,   78,   80,  231,  170,  153,  128,  123,
     1843,   80, 1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913,

     1913, 1856, 1947,   69,   69, 1947, 1947, 1856, 1913, 1913,
     1913, 1913, 1913, 1913, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1907, 1907, 1907, 1907, 1907, 1907, 1907, 1947, 1857,
     1947, 1947, 1914, 1947, 1913, 1913, 1913, 1913, 1913, 1913,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1857, 1841,
     1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1841, 1841, 1841, 1841, 1841,
     1841, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1841,

     1947, 1841, 1841, 1841, 1841, 1841, 1841,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   79, 1947, 1947, 1947, 1947,   79, 1947,   79,
       79,   79,   79,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  232,  232,
     1947,  232,  232, 1947,  232,  232,  232,  232,  232,  232,
      232, 1947,  232,  240,  240, 1947, 1947,  240,  240,  240,

      240,  240,  240,  240,  240,  240, 1947,  240,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  304,  304, 1947,  304, 1947, 1947,  304,
      334, 1947, 1947, 1947, 1947, 1947, 1947,  334,  334,  334,
      334,  337,  337, 1947,  337, 1947, 1947, 1947, 1947, 1947,
     1947,  337,  337,  337,  337,  346, 1947,  346, 1947, 1947,
      346,  348, 1947,  348, 1947, 1947,  348,  376, 1947, 1947,
     1947, 1947, 1947, 1947,  376,  376,  376,  376,  451, 1947,
      451, 1947, 1947,  451,  453, 1947,  453, 1947, 1947,  453,
      455, 1947,  455, 1947, 1947,  455,  240,  240, 1947, 1947,

      240,  240,  240,  240,  240,  240,  240,  240,  240, 1947,
      240,  462, 1947,  462, 1947, 1947,  462,  464, 1947,  464,
     1947, 1947,  464,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  304,  304,
     1947,  304,  546, 1947, 1947, 1947, 1947,  546, 1947,  546,
      546,  546,  546,  337,  337, 1947,  337, 1947, 1947, 1947,
     1947, 1947, 1947,  337,  337,  337,  337,  551,  551, 1947,
      551, 1947, 1947, 1947, 1947,  551,  551,  551,  551,  551,
      551,  563, 1947,  563, 1947, 1947,  563,  565, 1947,  565,
     1947, 1947,  565,   79, 1947, 1947, 1947, 1947,   79, 1947,

       79,   79,   79,   79,  598, 1947, 1947, 1947, 1947,  598,
     1947,  598,  598,  598,  598,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  673, 1947,  673, 1947, 1947,
      673,  675, 1947,  675, 1947, 1947,  675,  677, 1947,  677,
     1947, 1947,  677,  679, 1947,  679, 1947, 1947,  679,  681,
     1947,  681, 1947, 1947,  681,  741, 1947,  741,  741, 1947,
      741,  522, 1947,  522,  522, 1947,  522,  546, 1947, 1947,
     1947, 1947,  546, 1947,  546,  546,  546,  546,  771, 1947,

      771, 1947, 1947,  771,  773, 1947,  773, 1947, 1947,  773,
      551,  551, 1947,  551, 1947, 1947, 1947, 1947,  551,  551,
      551,  551,  551,  551,  778, 1947,  778, 1947, 1947,  778,
      780, 1947,  780, 1947, 1947,  780,  791, 1947,  791, 1947,
     1947,  791,  793, 1947,  793, 1947, 1947,  793,   79, 1947,
     1947, 1947, 1947,   79, 1947,   79,   79,   79,   79,  598,
     1947, 1947, 1947, 1947,  598, 1947,  598,  598,  598,  598,
      830, 1947,  830, 1947, 1947,  830,  832, 1947,  832, 1947,
     1947,  832,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  897, 1947,  897,

     1947, 1947,  897,  899, 1947,  899, 1947, 1947,  899,  677,
     1947,  677, 1947, 1947,  677,  901, 1947,  901, 1947, 1947,
      901,  903, 1947,  903, 1947, 1947,  903,  741, 1947,  741,
      741, 1947,  741,  524, 1947,  524, 1947, 1947,  524,  962,
     1947,  962, 1947, 1947,  962,  964, 1947,  964, 1947, 1947,
      964,  966, 1947,  966, 1947, 1947,  966,  968, 1947,  968,
     1947, 1947,  968,  971,  971, 1947,  971, 1947, 1947, 1947,
     1947, 1947, 1947,  971,  971,  971,  971,  973, 1947,  973,
     1947, 1947,  973,  975, 1947,  975, 1947, 1947,  975,  977,
     1947,  977, 1947, 1947,  977,  979, 1947,  979, 1947, 1947,

      979,  551,  551, 1947,  551, 1947, 1947, 1947, 1947,  551,
      551,  551,  551,  551,  551,  990, 1947,  990, 1947, 1947,
      990,  992, 1947,  992, 1947, 1947,  992,   79, 1947, 1947,
     1947, 1947,   79, 1947,   79,   79,   79,   79, 1026, 1947,
     1026, 1947, 1947, 1026, 1028, 1947, 1028, 1947, 1947, 1028,
     1030, 1947, 1030, 1947, 1947, 1030, 1032, 1947, 1032, 1947,
     1947, 1032, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1085, 1947, 1085,
     1947, 1947, 1085, 1087, 1947, 1087, 1947, 1947, 1087, 1089,
     1947, 1089, 1947, 1947, 1089,   79, 1947,   79, 1947, 1947,

       79,  741, 1947,  741, 1947, 1947,  741, 1117, 1947, 1117,
     1947, 1947, 1117, 1119, 1947, 1119, 1947, 1947, 1119, 1121,
     1947, 1121, 1947, 1947, 1121, 1123, 1947, 1123, 1947, 1947,
     1123,  971,  971, 1947,  971, 1947, 1947, 1947, 1947, 1947,
     1947,  971,  971,  971,  971, 1126, 1126, 1947, 1126, 1947,
     1947, 1126, 1947, 1126, 1947, 1126, 1126, 1126, 1126, 1132,
     1947, 1132, 1947, 1947, 1132, 1134, 1947, 1134, 1947, 1947,
     1134, 1136, 1947, 1136, 1947, 1947, 1136, 1138, 1947, 1138,
     1947, 1947, 1138,  551,  551, 1947,  551, 1947, 1947, 1947,
     1947,  551,  551,  551,  551,  551,  551,   79, 1947, 1947,

     1947, 1947,   79, 1947,   79,   79,   79,   79, 1185, 1947,
     1185, 1947, 1947, 1185, 1187, 1947, 1187, 1947, 1947, 1187,
     1189, 1947, 1189, 1947, 1947, 1189, 1191, 1947, 1191, 1947,
     1947, 1191, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1236, 1947, 1236,
     1947, 1947, 1236, 1238, 1947, 1238, 1947, 1947, 1238, 1240,
     1947, 1240, 1947, 1947, 1240,  334, 1947,  334, 1947, 1947,
      334, 1126, 1126, 1947, 1126, 1947, 1947, 1126, 1947, 1126,
     1947, 1126, 1126, 1126, 1126, 1244, 1244, 1947, 1244, 1947,
     1947, 1947, 1947, 1947, 1947, 1244, 1244, 1244, 1244, 1256,

     1947, 1256, 1947, 1947, 1256, 1258, 1947, 1258, 1947, 1947,
     1258, 1260, 1947, 1260, 1947, 1947, 1260, 1262, 1947, 1262,
     1947, 1947, 1262, 1264, 1947, 1264, 1947, 1947, 1264,  337,
     1947,  337, 1947, 1947,  337,  551,  551, 1947,  551, 1947,
     1947, 1947, 1947,  551,  551,  551,  551,  551,  551, 1276,
     1947, 1276, 1947, 1947, 1276,   79, 1947, 1947, 1947, 1947,
       79, 1947,   79,   79,   79,   79, 1314, 1947, 1314, 1947,
     1947, 1314, 1316, 1947, 1316, 1947, 1947, 1316, 1318, 1947,
     1318, 1947, 1947, 1318,  376, 1947,  376, 1947, 1947,  376,
     1338, 1947, 1338, 1947, 1947, 1338, 1340, 1947, 1340, 1947,

     1947, 1340, 1346, 1947, 1346, 1947, 1947, 1346,  546, 1947,
      546, 1947, 1947,  546, 1244, 1244, 1947, 1244, 1947, 1947,
     1947, 1947, 1947, 1947, 1244, 1244, 1244, 1244, 1351, 1351,
     1947, 1351, 1947, 1947, 1947, 1947, 1351, 1351, 1351, 1351,
     1351, 1351, 1363, 1947, 1363, 1947, 1947, 1363, 1365, 1947,
     1365, 1947, 1947, 1365, 1367, 1947, 1367, 1947, 1947, 1367,
     1369, 1947, 1369, 1947, 1947, 1369, 1371, 1947, 1371, 1947,
     1947, 1371,  551, 1947,  551, 1947, 1947,  551,  551,  551,
     1947,  551, 1947, 1947, 1947, 1947,  551,  551,  551,  551,
      551,  551, 1384, 1947, 1384, 1947, 1947, 1384,   79, 1947,

     1947, 1947, 1947,   79, 1947,   79,   79,   79,   79, 1417,
     1947, 1417, 1947, 1947, 1417,  598, 1947,  598, 1947, 1947,
      598, 1431, 1947, 1431, 1947, 1947, 1431, 1433, 1947, 1433,
     1947, 1947, 1433, 1437, 1947, 1437, 1947, 1947, 1437, 1351,
     1351, 1947, 1351, 1947, 1947, 1947, 1947, 1351, 1351, 1351,
     1351, 1351, 1351, 1442, 1947, 1442, 1947, 1947, 1442, 1444,
     1947, 1444, 1947, 1947, 1444, 1455, 1947, 1455, 1947, 1947,
     1455, 1457, 1947, 1457, 1947, 1947, 1457, 1459, 1947, 1459,
     1947, 1947, 1459, 1461, 1947, 1461, 1947, 1947, 1461, 1464,
     1947, 1464, 1947, 1947, 1464,  551,  551, 1947,  551, 1947,

     1947, 1947, 1947,  551,  551,  551,  551,  551,  551,  992,
     1947,  992, 1947, 1947,  992,   79, 1947, 1947, 1947, 1947,
       79, 1947,   79,   79,   79,   79, 1501, 1947, 1501, 1947,
     1947, 1501, 1087, 1947, 1087, 1947, 1947, 1087,   79, 1947,
       79, 1947, 1947,   79, 1511, 1947, 1511, 1947, 1947, 1511,
     1513, 1947, 1513, 1947, 1947, 1513, 1516, 1516, 1947, 1516,
     1947, 1947, 1947, 1947, 1947, 1947, 1516, 1516, 1516, 1516,
     1518, 1947, 1518, 1947, 1947, 1518, 1520, 1947, 1520, 1947,
     1947, 1520, 1522, 1947, 1522, 1947, 1947, 1522, 1524, 1947,
     1524, 1947, 1947, 1524, 1351, 1351, 1947, 1351, 1947, 1947,

     1947, 1947, 1351, 1351, 1351, 1351, 1351, 1351, 1535, 1947,
     1535, 1947, 1947, 1535, 1537, 1947, 1537, 1947, 1947, 1537,
     1539, 1947, 1539, 1947, 1947, 1539,  971, 1947,  971, 1947,
     1947,  971, 1542, 1947, 1542, 1947, 1947, 1542, 1544, 1947,
     1544, 1947, 1947, 1544,  551,  551, 1947,  551, 1947, 1947,
     1947, 1947,  551,  551,  551,  551,  551,  551,   79, 1947,
     1947, 1947, 1947,   79, 1947,   79,   79,   79,   79, 1569,
     1947, 1569, 1947, 1947, 1569, 1571, 1947, 1571, 1947, 1947,
     1571, 1578, 1947, 1578, 1947, 1947, 1578,  334, 1947,  334,
     1947, 1947,  334, 1516, 1516, 1947, 1516, 1947, 1947, 1947,

     1947, 1947, 1947, 1516, 1516, 1516, 1516, 1581, 1581, 1947,
     1581, 1947, 1947, 1581, 1947, 1581, 1947, 1581, 1581, 1581,
     1581, 1585, 1947, 1585, 1947, 1947, 1585, 1587, 1947, 1587,
     1947, 1947, 1587, 1589, 1947, 1589, 1947, 1947, 1589, 1591,
     1947, 1591, 1947, 1947, 1591, 1351, 1351, 1947, 1351, 1947,
     1947, 1947, 1947, 1351, 1351, 1351, 1351, 1351, 1351, 1602,
     1947, 1602, 1947, 1947, 1602, 1126, 1947, 1126, 1947, 1947,
     1126, 1606, 1947, 1606, 1947, 1947, 1606,  337, 1947,  337,
     1947, 1947,  337,  551,  551, 1947,  551, 1947, 1947, 1947,
     1947,  551,  551,  551,  551,  551,  551,   79, 1947, 1947,

     1947, 1947,   79, 1947,   79,   79,   79,   79, 1628, 1947,
     1628, 1947, 1947, 1628,  376, 1947,  376, 1947, 1947,  376,
      546, 1947,  546, 1947, 1947,  546, 1581, 1581, 1947, 1581,
     1947, 1947, 1581, 1947, 1581, 1947, 1581, 1581, 1581, 1581,
     1636, 1947, 1636, 1947, 1947, 1636, 1638, 1947, 1638, 1947,
     1947, 1638, 1640, 1947, 1640, 1947, 1947, 1640, 1642, 1947,
     1642, 1947, 1947, 1642, 1644, 1947, 1644, 1947, 1947, 1644,
     1244, 1947, 1244, 1947, 1947, 1244, 1351, 1351, 1947, 1351,
     1947, 1947, 1947, 1947, 1351, 1351, 1351, 1351, 1351, 1351,
     1657, 1947, 1657, 1947, 1947, 1657,  551, 1947,  551, 1947,

     1947,  551,  551,  551, 1947,  551, 1947,  551,  551, 1947,
      551,  551,  551,  551,  551,  551,   79, 1947, 1947, 1947,
     1947,   79, 1947,   79,   79,   79,   79,  598, 1947,  598,
     1947, 1947,  598, 1678, 1947, 1678, 1947, 1947, 1678, 1680,
     1947, 1680, 1947, 1947, 1680, 1682, 1947, 1682, 1947, 1947,
     1682, 1684, 1947, 1684, 1947, 1947, 1684, 1686, 1947, 1686,
     1947, 1947, 1686, 1351, 1947, 1351, 1947, 1947, 1351, 1351,
     1351, 1947, 1351, 1947, 1947, 1947, 1947, 1351, 1351, 1351,
     1351, 1351, 1351, 1699, 1947, 1699, 1947, 1947, 1699, 1701,
     1947, 1701, 1947, 1947, 1701,  551,  551, 1947,  551, 1947,

     1947, 1947, 1947,  551,  551,  551,  551,  551,  551, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705,   79, 1947, 1947, 1947, 1947,   79,
     1947,   79,   79,   79,   79, 1712, 1947, 1712, 1947, 1947,
     1712, 1714, 1947, 1714, 1947, 1947, 1714, 1716, 1947, 1716,
     1947, 1947, 1716, 1718, 1947, 1718, 1947, 1947, 1718, 1721,
     1947, 1721, 1947, 1947, 1721, 1730, 1947, 1730, 1947, 1947,
     1730,  971, 1947,  971, 1947, 1947,  971, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,

     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1745, 1947, 1745,
     1947, 1947, 1745, 1747, 1947, 1747, 1947, 1947, 1747, 1749,
     1947, 1749, 1947, 1947, 1749, 1516, 1947, 1516, 1947, 1947,
     1516, 1752, 1947, 1752, 1947, 1947, 1752, 1754, 1947, 1754,
     1947, 1947, 1754, 1126, 1947, 1126, 1947, 1947, 1126, 1771,
     1947, 1771, 1947, 1947, 1771, 1773, 1947, 1773, 1947, 1947,
     1773, 1775, 1947, 1775, 1947, 1947, 1775,   79, 1947, 1947,
     1947, 1947,   79, 1947,   79,   79,   79,   79, 1780, 1947,
     1780, 1947, 1947, 1780, 1581, 1947, 1581, 1947, 1947, 1581,
     1784, 1947, 1784, 1947, 1947, 1784, 1244, 1947, 1244, 1947,

     1947, 1244, 1351, 1351, 1947, 1351, 1947, 1947, 1947, 1947,
     1351, 1351, 1351, 1351, 1351, 1351, 1796, 1947, 1796, 1947,
     1947, 1796, 1798, 1947, 1798, 1947, 1947, 1798, 1800, 1947,
     1800, 1947, 1947, 1800, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1804,
     1947, 1804, 1947, 1947, 1804, 1806, 1947, 1806, 1947, 1947,
     1806,   79, 1947, 1947, 1947, 1947,   79, 1947,   79,   79,
       79,   79, 1813, 1947, 1813, 1947, 1947, 1813, 1351, 1947,
     1351, 1947, 1947, 1351, 1824, 1947, 1824, 1947, 1947, 1824,
     1826, 1947, 1826, 1947, 1947, 1826, 1830, 1947, 1830, 1947,

     1947, 1830, 1832, 1947, 1832, 1947, 1947, 1832,   79, 1947,
     1947, 1947, 1947,   79, 1947,   79,   79,   79,   79, 1835,
     1947, 1835, 1947, 1947, 1835, 1837, 1947, 1837, 1947, 1947,
     1837, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841,
     1841, 1841, 1841, 1841, 1841, 1841, 1844, 1947, 1844, 1947,
     1947, 1844, 1846, 1947, 1846, 1947, 1947, 1846, 1848, 1947,
     1848, 1947, 1947, 1848, 1850, 1947, 1850, 1947, 1947, 1850,
     1852, 1947, 1852, 1947, 1947, 1852, 1516, 1947, 1516, 1947,
     1947, 1516, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1855, 1855, 1855, 1864, 1947, 1864,

     1947, 1947, 1864, 1866, 1947, 1866, 1947, 1947, 1866, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1581, 1947, 1581, 1947, 1947, 1581,
     1878, 1947, 1878, 1947, 1947, 1878, 1880, 1947, 1880, 1947,
     1947, 1880, 1882, 1947, 1882, 1947, 1947, 1882, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1885, 1947, 1885, 1947, 1947, 1885, 1889,
     1947, 1889, 1947, 1947, 1889, 1891, 1947, 1891, 1947, 1947,
     1891, 1893, 1947, 1893, 1947, 1947, 1893, 1897, 1947, 1897,
     1947, 1947, 1897, 1899, 1947, 1899, 1947, 1947, 1899, 1903,

     1947, 1903, 1947, 1947, 1903, 1905, 1947, 1905, 1947, 1947,
     1905, 1909, 1947, 1909, 1947, 1947, 1909, 1911, 1947, 1911,
     1947, 1947, 1911, 1915, 1947, 1915, 1947, 1947, 1915, 1917,
     1947, 1917, 1947, 1947, 1917, 1919, 1947, 1919, 1947, 1947,
     1919, 1850, 1947, 1850, 1947, 1947, 1850, 1922, 1947, 1922,
     1947, 1947, 1922, 1924, 1947, 1924, 1947, 1947, 1924, 1926,
     1947, 1926, 1947, 1947, 1926, 1928, 1947, 1928, 1947, 1947,
     1928, 1866, 1947, 1866, 1947, 1947, 1866, 1931, 1947, 1931,
     1947, 1947, 1931, 1933, 1947, 1933, 1947, 1947, 1933, 1937,
     1947, 1937, 1947, 1947, 1937, 1939, 1947, 1939, 1947, 1947,

     1939, 1941, 1947, 1941, 1947, 1947, 1941, 1943, 1947, 1943,
     1947, 1947, 1943,    9, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947
    } ;

static const flex_int16_t yy_chk[8908] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    5,    6,    7,    8,    2,   17,

       17,    2,    7,    8,   18,    5,    6,   11,   23,   11,
       11,   11,   11,   13,   25,   13,   13,   13,   13,   14,
       22,   14,   22,   34,   34,   23,   18,   23,   27,   25,
       25,   25,   26,   27,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   32,   36,   41,   27,   41,  281,  281,
       37,    5,    6,    7,    8,   37,   39,   44,   48,   45,
       50,   55,   63,   32,   45,   32,   32,   51,   36,   50,
       55,   52,   44,   48,   44,   48,   39,   51,   50,   44,
       45,   44,   53,   23,   51,   48,  171,   25,   28,   52,
       28,   28,   28,   28,   28,   28,   28,   28,   28,  171,

       53,   37,   61,  162,   37,   39,   53,   28,   59,   80,
       28,   61,  162,   28,   28,   28,   28,   28,   63, 1894,
      167,   59,   28,   46,   28,   28,   59,   65,   46,   65,
       28,   59,   49,   28,  109,   46,   28,   49,   80,   28,
       28,   46,   28,  167,   28,   49,   28,   49,  101,  101,
       49,   28,   54,   58,   28,   49,   28,   29,   58,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  207,   54,
      120,  165,  152,   54,   58,   54,  109,  152,  160,   29,
       47,  207,   29,   29,   29,   29,   29,  165,  101,   47,
      132,   29,  132,   47,   29,  133,  160,  133,   47,   29,

     1897,  103,  103,   47,   58,   29,   57,   58,   29,   29,
      103,   29,  120,   29,  135,   29,  135,  163,   57,   57,
       29,   58,  138,  152,  138,   29,   35,   57,  103,   57,
       35,   35,  163,   35,   57,   35,   35,  174,   35,  103,
       35,   42,   42,   42,   42,   56,   42,   42,  140,   42,
      140,   42,   35,   35,   35,   42,   42,   56,   56, 1898,
      174,   60,   42,  285,  159,   42,   60,  164,   56,   56,
      143,   56,  143,   60,   60,  161,  164,   35,   35,  159,
       35,   66,   35,   66,   66,   66,   66,  159,  166,   66,
       67,   67,  285,  161,   75,   67,   75,   75,   75,   75,

       76,  175,   76,   76,   76,   76,  166,  136,   35,   35,
      168,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       72,   72,  168,  175,  136,   72,  136,   72,  139,  139,
      193,  139,   72,  137,   99,   99,   99,   99,   99,   99,
       99,   72,   72,   72,   72,   72,   72,   72,  137, 1899,
      137,   99,  102,  193,  102,   72,  180,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  180,  106,   99,  141,
      141,  141,  110,   72,   99,  106,  173,   99,   72,  144,
      147,  144,  147,   72,   72,  181,  172,   72,   72,  278,
      395,  110,  173,  106,  172,   72,  395,  102,   99,   72,

      176,   72,   72,   72,  106,   72,   78,  181,  110,  176,
       78,   78,  182,   78,  110,   78,   78,  110,   78,  100,
       78,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      190,  278,   78,   78,   78,  208,  182,  104,  110,  104,
      104,  100,  177, 1900,  111,  117,  104,  108,  108,  108,
      108,  190,  111,  117,  178,  183,  208,   78,   78,  178,
       78,  100,  184,  104,  177,  177,  104,  100,  104,  111,
      111,  117,  178,  108,  108,  104,  108,  636,  108,  114,
      114,  111,  117,  183,  184,  198,  187, 1903,  114,   78,
       94,   94,   94,   94,   94,   94,   94,   94,   94,  191,

      186,  187,  119,  119,  119,  119,  114,  186,  198,   94,
       94,   94,  636,  121,   94,   94,  189,  114,   94,  266,
      105,  121,  105,  186,  192,  105,  105,  191,  119,  119,
       94,  119,  209,  119,  189,   94,   94,   94,  121,  121,
       94,  192,   94,  105,  105,  266,  398,   94,  209,  188,
      121,  105,  398,   94,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  185,  201,  112,  188,  112,  185,  105,
      112,  112,  196,   98,   98,   98,  188,  199,   98,   98,
      105,  115,   98,  115,  115,  197,  199,  185,  112,  196,
      115,  293,  201,  217,   98,  293,  112,  203,  217,   98,

       98,   98,  197,  116,   98,  116,   98,  115,  116,  116,
      115,   98,  115,  195,  112,  203,  112,   98,  122,  115,
      122,  179,  206,  122,  122,  112,  116,  116,  195,  204,
      179,  179,  202,  289,  116,  213,  195,  211,  179,  202,
      204,  122,  179,  202,  206,  179,  214,  212,  210,  122,
      215,  202,  116,  210,  202,  202,  205,  216,  204,  214,
      218,  205,  289,  116,  220,  211,  212,  122,  214,  122,
      216,  215,  216,  218,  221,  592,  210,  205,  122,  153,
      153,  153,  153,  153,  153,  219,  213,  220,  225,  213,
      225,  225,  225,  225,  219,  221,  225,  592,  219,  226,

      226,  233,  233,  242,  226,  242,  233, 1904,  236,  236,
      236,  236,  236,  236,  236,  243,  245,  243,  245,  246,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  247,
      248,  250,  248,  250,  275,  315,  246,  153,  246,  315,
      153,  251,  251,  251,  247,  153,  247,  153,  236,  249,
      249,  354,  249,  153,  153,  253,  411,  253,  153, 1905,
      275,  153,  169,  254,  255,  254,  255,  354,  287,  291,
      331,  169,  331,  332,  264,  332,  264,  287,  169,  264,
      264,  298,  298,  169,  169,  169,  291,  169,  169,  228,
      228,  169,  411,  169,  228,  300,  296,  264,  291,  169,

      169,  169,  169,  169,  296,  301,  287,  307,  298,  352,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  230,
      230,  300,  296,  264,  230,  363,  230,  352,  378,  363,
      301,  301,  262,  296,  262,  311,  307,  262,  262,  378,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  262,  351,
      262,  313,  353,  262,  311,  262,  320,  320,  261,  261,
      261, 1906,  351,  261,  261,  373,  355,  261,  313,  273,
      353,  273,  335,  355,  273,  273,  302,  373,  302,  261,
      313,  302,  302,  320,  261,  261,  261,  297,  265,  261,

      265,  261,  273,  373,  265,  297,  261,  265,  263,  302,
      263,  335,  261,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  367,  297,  265,  359,  265,  299,  273,  299,
      357,  265,  299,  299,  297,  302,  265,  302,  271,  274,
      271,  274,  265,  271,  271,  274,  359,  357,  274,  367,
      299,  299,  338,  263,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  392,  271,  274,  271,  274,  356,  271,
      322,  271,  274,  270,  270,  270,  299,  274,  270,  270,
      392,  338,  270,  274,  323,  277,  356,  277,  277,  277,
      277,  277,  277,  277,  270,  361,  322,  358,  309,  270,

      270,  270,  358,  360,  270,  385,  270,  309,  360,  323,
      323,  270,  385,  272,  365,  272,  361,  270,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  277,  276,  276,
      276,  318,  396,  276,  276,  362,  309,  276,  365,  318,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  366,
      362,  396,  482,  377,  276,  276,  276,  318,  272,  276,
      279,  276,  368,  372,  371,  370,  276,  366,  318,  292,
      370,  292,  276,  371,  292,  292,  372,  368,  482,  321,
      279,  321,  377,  375,  321,  321,  279,  280,  280,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  319,  369,

      292,  375,  321,  321,  374, 1909,  319,  381,  364,  382,
      280,  280,  280,  280,  280,  369,  369,  374,  382,  280,
      292,  383,  280,  364,  319,  381,  383,  280,  321,  292,
      364,  364,  364,  387,  389,  319,  280,  280,  384,  280,
      288,  280,  288,  280,  386,  288,  288,  384,  280,  388,
      391,  387,  389,  280,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  605,  288,  386,  390,  393,  391,  402,
      388,  288,  393,  283,  391,  283,  399,  605,  283,  283,
      394,  310,  283,  310,  402,  394,  310,  310,  390,  390,
      403,  324,  399,  324,  283,  403,  324,  324,  397,  283,

      288,  283,  439,  405,  283,  310,  283,  397,  405,  407,
      439,  283,  310,  284,  324,  284,  420,  283,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  304,  407,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  440,  420,
      324,  310,  324,  440,  404,  304,  304,  304,  304,  304,
      304,  400,  304,  304,  304,  304,  304,  314,  401,  314,
      400,  304,  314,  314,  304, 1910,  409,  401,  404,  304,
      422,  304,  304,  304,  304,  304,  304,  408,  304,  304,
      410,  304,  406,  304,  409,  304,  408,  406,  314,  415,
      304,  422,  415,  410,  413,  304,  306,  306,  306,  306,

      306,  306,  306,  306,  306,  406,  414,  413,  314,  337,
      337,  337,  337,  337,  337,  414,  416,  314,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  339,  339,  339,
      339,  339,  339,  573,  417,  416,  306,  419,  573,  337,
      340,  340,  340,  340,  340,  340,  341,  341,  341,  341,
      341,  341,  417,  418,  412,  419,  423,  339,  325,  336,
      336,  336,  336,  336,  336,  412,  418,  337,  424,  459,
      340,  459, 1911,  423,  339,  421,  341,  424,  343,  343,
      343,  343,  343,  343,  427,  339,  342,  342,  342,  342,
      342,  342,  344,  344,  344,  344,  344,  344,  340,  421,

      425,  428,  426,  427,  341,  431,  435,  340,  343,  341,
      345,  345,  345,  345,  345,  345,  342,  336,  431,  429,
      336,  430,  344,  425,  428,  336,  426,  336,  429,  433,
      430, 1912,  437,  336,  336,  436,  343,  429,  336,  438,
      345,  336,  434,  442,  342,  437,  441,  443,  433,  342,
      344,  434,  441,  436,  343,  444,  446,  435,  509,  344,
      445,  448,  438,  460,  443,  460,  442,  448,  345,  470,
      444,  532,  445,  470,  446,  447,  447,  488, 1915,  511,
      447,  488,  447,  511,  509,  345,  449,  449,  449,  449,
      449,  449,  449,  450,  450,  450,  450,  450,  450,  450,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  469,
     1916,  469, 1917,  532,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  520,  514,  515,  449,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  475,  522,  475,  499,
      517,  475,  475,  521,  517,  577,  468,  499,  468,  520,
      522,  468,  468,  514,  515,  468,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  499,  522,  468,  577,  521,
      568,  535,  468, 1918,  468,  535,  499,  468,  523,  468,
      478,  568,  478,  538,  468,  478,  478,  480,  544,  480,
      468,  523,  480,  480,  539,  547,  476,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  478,  523,  478,  545,
      480,  478,  538,  478,  544,  541,  477,  477,  477,  541,
      571,  477,  477,  539,  547,  477,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  545,  480,  477,  570,  571,
      575,  553,  477,  477,  477,  589,  481,  477,  481,  477,
      589,  575,  481,  570,  477,  481,  479,  594,  479,  569,
      477,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      553,  493,  481,  493,  481,  569,  493,  493,  594,  481,
      574, 1919,  670, 1920,  481,  670,  487,  572,  487,  574,
      481,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      572,  479,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      576,  486,  591,  486,  578,  583,  486,  486,  591,  576,
      486,  496,  496,  578,  582,  503,  596,  525,  525,  498,
      496,  498,  486,  503,  498,  498,  525,  486,  583,  486,
      582,  494,  486,  596,  486,  584,  587,  599,  496,  486,
      503,  503,  498,  498,  525,  486,  495,  495,  528,  496,
      498,  497,  503,  497,  497,  525,  528,  579,  584,  587,
      497,  501,  501,  501,  501,  588,  599, 1921,  498,  495,
      495,  495,  495,  495,  528,  579,  597,  497,  495,  498,

      497,  495,  497,  588,  581,  528,  495,  501,  501,  497,
      501,  597,  501,  585,  604,  495,  495,  581,  495,  504,
      495,  504,  495,  609,  504,  504,  585,  495,  506,  508,
      506,  508,  495,  506,  506,  508,  586,  604,  508,  595,
      533,  507,  504,  507,  862,  609,  507,  507,  533,  593,
      504,  607,  586,  586,  506,  508,  506,  508,  595,  506,
      593,  506,  508,  607,  507,  533,  533,  508,  504,  526,
      504,  526,  526,  508,  862,  602, 1922,  533,  526,  504,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  610,
      507,  590,  602,  580,  611,  526,  610,  580,  526,  505,

      526,  505,  615,  612,  505,  505,  590,  526,  505,  530,
      530,  530,  530,  580,  590,  611,  613,  614,  617,  615,
      505,  853,  616,  837,  619,  505,  612,  505,  618,  613,
      505,  837,  505,  853,  618,  530,  530,  505,  530,  619,
      530,  614,  617,  505,  524,  616,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  550,  550,  550,  550,  550,
      550,  622,  524,  524,  524,  524,  524,  524,  620,  524,
      524,  524,  524,  524,  626,  624,  622,  620,  524,  688,
     1923,  524,  625,  688,  639,  550,  524,  628,  524,  524,
      524,  524,  524,  524,  624,  524,  524,  626,  524,  527,

      524,  527,  524,  625,  527,  527,  628,  524,  529,  627,
      529,  639,  524,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  527,  527,  627,  631,  534,  629,  534,  638,
      527,  534,  534,  551,  551,  551,  551,  551,  551,  556,
      556,  556,  556,  556,  556,  630,  631,  632,  527,  534,
      629,  633,  638,  529,  635,  641,  632,  534,  651,  527,
      630,  640,  642,  551,  641,  651,  643,  647,  644,  556,
      655,  635,  633,  645,  646,  534,  648,  534,  557,  557,
      557,  557,  557,  557,  640,  648,  534,  642,  643,  644,
      647,  551, 1924,  650,  645,  646,  655,  556,  558,  558,

      558,  558,  558,  558,  657,  649,  650,  652,  557,  559,
      559,  559,  559,  559,  559,  556,  652,  560,  560,  560,
      560,  560,  560,  649,  820,  796,  658,  657,  558,  561,
      561,  561,  561,  561,  561,  658,  557,  662,  796,  559,
      562,  562,  562,  562,  562,  562,  653,  560,  656,  654,
      659,  661,  660,  653,  654,  557,  558,  664,  659,  561,
      820,  662,  661,  659,  665,  668,  656,  559,  659,  660,
      562,  558,  671,  686,  668,  560,  666,  687,  671,  665,
      664,  696,  712,  560,  727,  696,  666,  561,  672,  672,
      672,  672,  672,  672,  672,  559,  560,  708,  562,  686,

      666,  708,  701,  687,  701,  714,  561,  701,  701,  816,
      727,  712,  720,  686,  714,  706,  720,  687,  816,  707,
      562,  716,  562,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  706,  683,  714,  683,  707,  723,  683,  683,  718,
      716,  683,  725,  725,  723,  706,  728,  732,  753,  707,
      795,  732,  753,  683,  805,  821,  718, 1925,  683,  805,
      683,  806,  723,  683,  821,  683,  806,  795,  718,  725,
      683,  728,  728,  723,  730,  730,  683,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  702,  702,  702,  702,

      702,  702,  702,  702,  702,  724,  694,  763,  694,  801,
      809,  694,  694,  724,  715,  694,  715,  800,  744,  715,
      715,  809,  802,  737,  730,  737,  798,  694,  737,  737,
      801,  724,  694,  763,  694,  802,  702,  694,  715,  694,
      800,  798,  724, 1927,  694,  715,  695,  744,  695,  745,
      694,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  741,
      719,  803,  719,  874,  715,  719,  719,  747,  745,  703,
      743,  703,  741,  874,  703,  703,  747,  749,  703,  751,
      726,  804,  726,  743,  803,  726,  726,  729,  741,  729,

      703,  719,  729,  729,  804,  703,  751,  703,  799,  743,
      703,  807,  703,  726,  726,  747,  749,  703,  751,  764,
      729,  719,  878,  703,  799,  808,  811,  813,  915,  807,
      719,  752,  915,  752,  878,  756,  752,  752,  810,  726,
      808,  810,  813,  756,  764,  764,  729,  811,  729,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  742,  812,
      742,  756,  752,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  756,  748,  814,  748,  757,  812,  748,  748,
      761,  761,  752,  815,  757,  817,  819,  818,  822,  738,
      817,  752,  823,  814,  845,  827,  835,  748,  818,  819,

      827,  824,  757,  742,  748,  815,  881,  761,  826,  823,
      824,  822,  845,  757,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  762,  835,  762, 1168,  842,  762,  762,
      881,  826, 1168,  748,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  765,  842,  765,  762,  762,  765,  765,
      843,  825,  834,  759,  838,  759,  839,  834,  759,  759,
      825,  846,  759,  838,  851,  839,  765,  847,  848,  850,
      834,  852,  762,  843,  759,  854,  846,  848,  850,  759,
      858,  759,  847,  870,  759,  858,  759,  851,  852, 1929,
      854,  759,  765,  760,  765,  760,  870,  759,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  775,  775,  775,
      775,  775,  775,  782,  782,  782,  782,  782,  782,  783,
      783,  783,  783,  783,  783,  857,  784,  784,  784,  784,
      784,  784,  785,  785,  785,  785,  785,  785,  856,  861,
      857,  860,  863,  782,  856,  868,  860,  869,  861,  783,
      786,  786,  786,  786,  786,  786,  784,  867,  871,  873,
      863,  877,  785,  876,  879,  775,  867,  873,  868,  875,
      869,  782,  879,  880,  856,  871,  875,  783,  877,  884,
      786,  880,  889,  885,  784,  886,  876,  889,  884,  888,
      785,  885,  782,  895,  890,  886,  785, 1930,  783,  784,

      787,  787,  787,  787,  787,  787,  888,  890,  786,  891,
      788,  788,  788,  788,  788,  788,  895,  906,  891,  913,
      914,  786,  893,  789,  789,  789,  789,  789,  789,  892,
      787, 1932,  996,  790,  790,  790,  790,  790,  790,  893,
      788,  996, 1001,  906,  924,  913,  914,  892,  924,  927,
      928,  930,  999,  789,  933,  930,  934,  906,  787,  913,
      914,  920,  936,  790, 1034,  999, 1001,  787,  788,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  927,  928,
      933,  789,  934,  949,  937,  953, 1034,  920,  936,  788,
      789,  790,  919,  919,  919,  919,  919,  919,  919,  919,

      919,  920,  936,  938,  946,  950, 1018,  938,  946,  905,
      937,  953,  949,  790,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  957,  937, 1012,  960,  957,  972,  961,
      995,  997,  919,  910,  950,  910,  997,  995,  910,  910,
     1012, 1018,  910,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  960, 1000,  910,  961, 1007,  972,  994,  910,
      998,  910,  998,  994,  910,  998,  910, 1002, 1934, 1008,
     1000,  910, 1008, 1007, 1002, 1004,  994,  910,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  998,  943, 1004,  943,

     1036, 1003,  943,  943, 1005, 1020,  943, 1009,  954, 1003,
      954, 1006, 1010,  954,  954, 1010, 1014, 1011,  943, 1036,
     1009, 1016, 1005,  943, 1016,  943, 1020,  952,  943, 1006,
      943,  954, 1013, 1014, 1017,  943, 1015,  944, 1019,  944,
     1011,  943,  944,  944,  944,  944,  944,  944,  944,  944,
      944, 1017,  955, 1019,  955, 1013, 1024,  954,  955, 1015,
     1025,  955,  970,  970,  970,  970,  970,  970, 1021,  971,
      971,  971,  971,  971,  971, 1023, 1022, 1021,  955, 1035,
      955, 1022, 1037, 1025, 1041,  955,  971, 1068, 1042, 1035,
      955, 1037, 1024, 1023, 1040, 1068,  955, 1041, 1042,  981,

      981,  981,  981,  981,  981,  982,  982,  982,  982,  982,
      982,  983,  983,  983,  983,  983,  983, 1043, 1040, 1047,
      970,  984,  984,  984,  984,  984,  984,  971,  971,  981,
     1044, 1049, 1047, 1050, 1150,  982, 1051, 1052, 1054, 1044,
     1043,  983, 1055,  985,  985,  985,  985,  985,  985, 1058,
     1060,  984, 1049, 1062, 1059, 1054, 1150,  981, 1109, 1060,
     1062, 1050, 1109,  982, 1066, 1055,  981, 1066, 1071,  983,
     1058, 1051,  982,  985, 1052, 1059, 1077, 1071, 1076,  984,
      986,  986,  986,  986,  986,  986, 1070, 1076,  984, 1070,
     1073, 1077,  983, 1128,  987,  987,  987,  987,  987,  987,

     1073,  985,  988,  988,  988,  988,  988,  988, 1072, 1080,
      986,  989,  989,  989,  989,  989,  989, 1081, 1078, 1151,
     1154, 1156, 1128,  985,  987, 1094, 1935, 1101, 1153, 1151,
     1080, 1072,  988, 1078, 1159, 1154, 1166, 1160,  986, 1159,
     1081,  989, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1094,  987, 1101, 1166, 1153, 1156, 1114, 1160, 1114,
      988,  986, 1114, 1114, 1158, 1094, 1164, 1101, 1155,  989,
      987, 1158, 1155, 1157, 1161, 1936, 1162, 1161,  989, 1162,
      988, 1164, 1093, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1169, 1105, 1155, 1105, 1165, 1157, 1105, 1105, 1183,
     1165, 1105, 1125, 1125, 1125, 1125, 1125, 1125, 1170, 1163,
     1173, 1196, 1163, 1105, 1169, 1171, 1937, 1182, 1105, 1125,
     1105, 1170, 1115, 1105, 1171, 1105, 1172, 1182, 1175, 1172,
     1105, 1175, 1173, 1196, 1183, 1176, 1105, 1126, 1126, 1126,
     1126, 1126, 1126, 1163, 1176, 1140, 1140, 1140, 1140, 1140,
     1140, 1212, 1177, 1195, 1126, 1141, 1141, 1141, 1141, 1141,
     1141, 1125, 1195, 1142, 1142, 1142, 1142, 1142, 1142, 1178,
     1179, 1938, 1178, 1939, 1212, 1140, 1143, 1143, 1143, 1143,
     1143, 1143, 1177, 1179, 1180, 1141, 1144, 1144, 1144, 1144,

     1144, 1144, 1180, 1142, 1184, 1126, 1126, 1127, 1127, 1127,
     1127, 1127, 1127, 1140, 1181, 1197, 1143, 1184, 1198, 1215,
     1213, 1219, 1181, 1141, 1197, 1213, 1144, 1174, 1202, 1219,
     1141, 1142, 1205, 1174, 1215, 1198, 1140, 1145, 1145, 1145,
     1145, 1145, 1145, 1142, 1143, 1284, 1202, 1143, 1146, 1146,
     1146, 1146, 1146, 1146, 1144, 1147, 1147, 1147, 1147, 1147,
     1147, 1144, 1205, 1174, 1223, 1127, 1203, 1145, 1127, 1208,
     1211, 1216, 1284, 1127, 1221, 1127, 1230, 1223, 1146, 1245,
     1291, 1127, 1127, 1221, 1203, 1147, 1127, 1208, 1232, 1127,
     1203, 1211, 1232, 1216, 1282, 1145, 1148, 1148, 1148, 1148,

     1148, 1148, 1230, 1288, 1287, 1321, 1146, 1281, 1245, 1281,
     1231, 1285, 1281, 1147, 1146, 1291, 1230, 1289, 1292, 1145,
     1288, 1940, 1289, 1321, 1282, 1287, 1148, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1231, 1147, 1285, 1293,
     1290, 1294, 1293, 1281, 1244, 1244, 1244, 1244, 1244, 1244,
     1231, 1292, 1296, 1295, 1148, 1290, 1246, 1246, 1246, 1246,
     1246, 1246, 1148, 1295, 1294, 1941, 1298, 1228, 1243, 1243,
     1243, 1243, 1243, 1243, 1244, 1312, 1296, 1247, 1247, 1247,
     1247, 1247, 1247, 1298, 1303, 1302, 1246, 1297, 1248, 1248,
     1248, 1248, 1248, 1248, 1249, 1249, 1249, 1249, 1249, 1249,

     1299, 1300, 1244, 1246, 1300, 1312, 1301, 1247, 1250, 1250,
     1250, 1250, 1250, 1250, 1246, 1297, 1308, 1313, 1248, 1301,
     1302, 1303, 1305, 1308, 1249, 1305, 1243, 1299, 1306, 1243,
     1307, 1306, 1313, 1307, 1243, 1247, 1243, 1309, 1250, 1325,
     1309, 1322, 1243, 1243, 1247, 1311, 1248, 1243, 1311, 1333,
     1243, 1248, 1249, 1942, 1353, 1324, 1325, 1249, 1251, 1251,
     1251, 1251, 1251, 1251, 1324, 1322, 1250, 1333, 1252, 1252,
     1252, 1252, 1252, 1252, 1267, 1267, 1267, 1267, 1267, 1267,
     1329, 1332, 1337, 1353, 1250, 1388, 1386, 1326, 1251, 1268,
     1268, 1268, 1268, 1268, 1268, 1387, 1334, 1337, 1252, 1407,

     1389, 1329, 1342, 1332, 1267, 1269, 1269, 1269, 1269, 1269,
     1269, 1326, 1394, 1395, 1402, 1416, 1251, 1392, 1388, 1268,
     1334, 1386, 1396, 1397, 1416, 1251, 1252, 1389, 1342, 1407,
     1387, 1395, 1267, 1402, 1394, 1269, 1270, 1270, 1270, 1270,
     1270, 1270, 1342, 1252, 1421, 1392, 1406, 1268, 1399, 1396,
     1397, 1399, 1268, 1943, 1421, 1474, 1267, 1271, 1271, 1271,
     1271, 1271, 1271, 1269, 1406, 1398, 1270, 1272, 1272, 1272,
     1272, 1272, 1272, 1273, 1273, 1273, 1273, 1273, 1273, 1401,
     1400, 1944, 1399, 1400, 1269, 1474, 1403, 1271, 1398, 1403,
     1404, 1410, 1409, 1404, 1270, 1409, 1412, 1272, 1413, 1481,

     1422, 1413, 1401, 1273, 1274, 1274, 1274, 1274, 1274, 1274,
     1414, 1425, 1429, 1414, 1410, 1271, 1422, 1945, 1270, 1412,
     1271, 1415, 1425, 1427, 1415, 1272, 1428, 1479, 1429, 1482,
     1485, 1273, 1481, 1428, 1274, 1275, 1275, 1275, 1275, 1275,
     1275, 1480, 1487, 1946, 1486, 1427, 1272, 1486, 1480, 1479,
     1484, 1487, 1275, 1491, 1711, 1273, 1350, 1350, 1350, 1350,
     1350, 1350, 1274, 1485, 1482, 1275, 1490, 1711, 1892, 1490,
     1491, 1274, 1351, 1351, 1351, 1351, 1351, 1351, 1356, 1356,
     1356, 1356, 1356, 1356, 1498, 1484, 1350, 1357, 1357, 1357,
     1357, 1357, 1357, 1275, 1275, 1358, 1358, 1358, 1358, 1358,

     1358, 1495, 1351, 1969, 1495, 1969, 1488, 1498, 1356, 1359,
     1359, 1359, 1359, 1359, 1359, 1488, 1489, 1357, 1360, 1360,
     1360, 1360, 1360, 1360, 1499, 1358, 1504, 1499, 1505, 1506,
     1351, 1891, 1507, 1508, 1489, 1504, 1356, 1507, 1506, 1359,
     1505, 1489, 1508, 1553, 1554, 1357, 1517, 1555, 1360, 1554,
     1555, 1562, 1553, 1358, 1356, 1361, 1361, 1361, 1361, 1361,
     1361, 1562, 1556, 1557, 1357, 1556, 1557, 1359, 1358, 1362,
     1362, 1362, 1362, 1362, 1362, 1517, 1360, 1375, 1375, 1375,
     1375, 1375, 1375, 1576, 1360, 1361, 1376, 1376, 1376, 1376,
     1376, 1376, 1975, 1558, 1975, 1359, 1558, 1360, 1576, 1362,

     1377, 1377, 1377, 1377, 1377, 1377, 1560, 1375, 1565, 1560,
     1563, 1565, 1575, 1361, 1582, 1563, 1376, 1378, 1378, 1378,
     1378, 1378, 1378, 1566, 1616, 1568, 1566, 1362, 1568, 1618,
     1377, 1617, 1361, 1575, 1619, 1375, 1379, 1379, 1379, 1379,
     1379, 1379, 1620, 1582, 1376, 1616, 1617, 1378, 1890, 1362,
     1622, 1362, 1618, 1622, 1889, 1886, 1375, 1619, 1377, 1380,
     1380, 1380, 1380, 1380, 1380, 1620, 1379, 1376, 1381, 1381,
     1381, 1381, 1381, 1381, 1621, 1378, 1377, 1382, 1382, 1382,
     1382, 1382, 1382, 1383, 1383, 1383, 1383, 1383, 1383, 1380,
     1624, 1631, 1378, 1624, 1379, 1885, 1884, 1621, 1381, 1623,

     1383, 1439, 1439, 1439, 1439, 1439, 1439, 1382, 1625, 1623,
     1664, 1625, 1883, 1383, 1631, 1379, 1664, 1380, 1446, 1446,
     1446, 1446, 1446, 1446, 1666, 1710, 1381, 1447, 1447, 1447,
     1447, 1447, 1447, 1381, 1380, 1382, 1448, 1448, 1448, 1448,
     1448, 1448, 1383, 1881, 1743, 1709, 1710, 1666, 1446, 1880,
     1879, 1742, 1382, 1673, 1709, 1743, 1977, 1447, 1977, 1439,
     1449, 1449, 1449, 1449, 1449, 1449, 1448, 1664, 1450, 1450,
     1450, 1450, 1450, 1450, 1742, 1673, 1446, 1451, 1451, 1451,
     1451, 1451, 1451, 1744, 1878, 1447, 1704, 1983, 1875, 1983,
     1449, 1985, 1704, 1985, 1448, 1874, 1873, 1446, 1450, 1452,

     1452, 1452, 1452, 1452, 1452, 1744, 1447, 1451, 1869, 1448,
     1453, 1453, 1453, 1453, 1453, 1453, 1674, 1810, 1449, 1777,
     1868, 1674, 1705, 1987, 1449, 1987, 1450, 1810, 1705, 1452,
     1867, 1674, 1733, 1865, 1863, 1451, 1779, 1777, 1733, 1450,
     1453, 1862, 1861, 1704, 1451, 1454, 1454, 1454, 1454, 1454,
     1454, 1466, 1466, 1466, 1466, 1466, 1466, 1452, 1854, 1779,
     1467, 1467, 1467, 1467, 1467, 1467, 1853, 1852, 1453, 1613,
     1613, 1613, 1613, 1613, 1613, 1454, 1613, 1453, 1452, 1705,
     1851, 1466, 1468, 1468, 1468, 1468, 1468, 1468, 1849, 1733,
     1467, 1469, 1469, 1469, 1469, 1469, 1469, 1661, 1661, 1661,

     1661, 1661, 1661, 1454, 1661, 1802, 1989, 1847, 1989, 1466,
     1846, 1802, 1468, 1991, 2001, 1991, 2001, 2003, 1467, 2003,
     2010, 1469, 2010, 1845, 1844, 1454, 1466, 1467, 1470, 1470,
     1470, 1470, 1470, 1470, 1515, 1515, 1515, 1515, 1515, 1515,
     1468, 1471, 1471, 1471, 1471, 1471, 1471, 1838, 1837, 1469,
     1472, 1472, 1472, 1472, 1472, 1472, 1836, 1820, 1470, 2012,
     1835, 2012, 1802, 1820, 1468, 1516, 1516, 1516, 1516, 1516,
     1516, 1471, 1834, 1469, 1526, 1526, 1526, 1526, 1526, 1526,
     1472, 1833, 1516, 1822, 1832, 1840, 1470, 1841, 2015, 1822,
     2015, 1840, 1515, 1841, 1470, 1831, 1850, 1855, 2017, 1471,

     2017, 1830, 1850, 1855, 1526, 2023, 1827, 2023, 1472, 2025,
     1826, 2025, 1471, 1825, 1820, 1472, 1527, 1527, 1527, 1527,
     1527, 1527, 1824, 1516, 1516, 1815, 1528, 1528, 1528, 1528,
     1528, 1528, 1526, 1529, 1529, 1529, 1529, 1529, 1529, 1866,
     1822, 1526, 1840, 1814, 1841, 1866, 1527, 1530, 1530, 1530,
     1530, 1530, 1530, 1850, 1855, 1813, 1528, 1531, 1531, 1531,
     1531, 1531, 1531, 1529, 1532, 1532, 1532, 1532, 1532, 1532,
     2030, 2032, 2030, 2032, 1527, 1812, 2035, 1530, 2035, 1895,
     1907, 1811, 1806, 1527, 1528, 1895, 1907, 1531, 2037, 1804,
     2037, 1529, 1798, 2042, 1532, 2042, 1866, 1933, 1797, 2044,

     1529, 2044, 2047, 1933, 2047, 1530, 2049, 1528, 2049, 1533,
     1533, 1533, 1533, 1533, 1533, 1531, 1534, 1534, 1534, 1534,
     1534, 1534, 1532, 2051, 2053, 2051, 2053, 1530, 1546, 1546,
     1546, 1546, 1546, 1546, 1796, 1784, 1895, 1907, 1531, 1533,
     1532, 2056, 2058, 2056, 2058, 1783, 1534, 1547, 1547, 1547,
     1547, 1547, 1547, 2060, 1933, 2060, 1778, 1773, 1546, 1548,
     1548, 1548, 1548, 1548, 1548, 1771, 1768, 1533, 1549, 1549,
     1549, 1549, 1549, 1549, 1534, 1767, 2062, 1547, 2062, 1766,
     2066, 1549, 2066, 1534, 1754, 1549, 1546, 1533, 2068, 1548,
     2068, 2070, 1752, 2070, 1546, 2072, 1747, 2072, 1549, 1550,

     1550, 1550, 1550, 1550, 1550, 1547, 1551, 1551, 1551, 1551,
     1551, 1551, 2074, 2075, 2074, 2075, 1547, 1548, 1581, 1581,
     1581, 1581, 1581, 1581, 1745, 1741, 1549, 1549, 2077, 1550,
     2077, 2079, 2081, 2079, 2081, 1581, 1551, 1740, 1739, 1548,
     1593, 1593, 1593, 1593, 1593, 1593, 1732, 1731, 1594, 1594,
     1594, 1594, 1594, 1594, 2083, 1730, 2083, 1550, 2085, 2087,
     2085, 2087, 1722, 1550, 1551, 2088, 2089, 2088, 2089, 2090,
     1593, 2090, 2091, 1551, 2091, 1721, 1581, 1581, 1594, 1595,
     1595, 1595, 1595, 1595, 1595, 1596, 1596, 1596, 1596, 1596,
     1596, 1720, 1597, 1597, 1597, 1597, 1597, 1597, 1593, 1718,

     1598, 1598, 1598, 1598, 1598, 1598, 1594, 1716, 2092, 1595,
     2092, 1714, 2094, 1594, 2094, 1596, 2096, 2098, 2096, 2098,
     1712, 1593, 1597, 1599, 1599, 1599, 1599, 1599, 1599, 1708,
     1598, 1663, 1663, 1663, 1663, 1663, 1663, 1595, 1663, 2100,
     2106, 2100, 2106, 1596, 1701, 2108, 1596, 2108, 1699, 1595,
     1597, 1689, 2110, 1599, 2110, 1684, 1682, 1597, 1598, 1680,
     1600, 1600, 1600, 1600, 1600, 1600, 1601, 1601, 1601, 1601,
     1601, 1601, 2112, 1678, 2112, 1609, 1609, 1609, 1609, 1609,
     1609, 1599, 1598, 2117, 2119, 2117, 2119, 1677, 1609, 1599,
     1600, 2121, 1609, 2121, 1675, 1672, 1601, 1610, 1610, 1610,

     1610, 1610, 1610, 1671, 2123, 1609, 2123, 2127, 1670, 2127,
     1610, 2129, 1669, 2129, 1610, 2130, 1668, 2130, 1600, 2131,
     2132, 2131, 2132, 2138, 1601, 2138, 2140, 1610, 2140, 2142,
     1667, 2142, 1601, 1609, 1609, 1611, 1611, 1611, 1611, 1611,
     1611, 2144, 1600, 2144, 2145, 2146, 2145, 2146, 1611, 2147,
     1657, 2147, 1611, 1656, 1642, 1610, 1610, 1612, 1612, 1612,
     1612, 1612, 1612, 1640, 2150, 1611, 2150, 1610, 1638, 2153,
     1612, 2153, 1636, 1635, 1612, 1614, 1614, 1614, 1614, 1614,
     1614, 1647, 1647, 1647, 1647, 1647, 1647, 1612, 1614, 2155,
     1634, 2155, 1614, 1611, 1611, 1615, 1615, 1615, 1615, 1615,

     1615, 2156, 1611, 2156, 2157, 1614, 2157, 2158, 1615, 2158,
     1632, 1647, 1615, 2160, 1628, 2160, 1612, 1648, 1648, 1648,
     1648, 1648, 1648, 1627, 1626, 1615, 1649, 1649, 1649, 1649,
     1649, 1649, 1606, 1614, 1614, 2162, 2163, 2162, 2163, 1647,
     1650, 1650, 1650, 1650, 1650, 1650, 1605, 1648, 1614, 2164,
     2165, 2164, 2165, 1615, 1615, 2171, 1649, 2171, 2173, 1591,
     2173, 1615, 1589, 1647, 1703, 1703, 1703, 1703, 1703, 1703,
     1650, 1703, 2175, 1587, 2175, 1648, 2177, 2178, 2177, 2178,
     1648, 2179, 1585, 2179, 1649, 1651, 1651, 1651, 1651, 1651,
     1651, 1652, 1652, 1652, 1652, 1652, 1652, 1584, 1650, 1653,

     1653, 1653, 1653, 1653, 1653, 1649, 1654, 1654, 1654, 1654,
     1654, 1654, 2180, 1583, 2180, 1651, 2184, 2186, 2184, 2186,
     1578, 1652, 1650, 2187, 2188, 2187, 2188, 1577, 1574, 1653,
     1655, 1655, 1655, 1655, 1655, 1655, 1654, 1660, 1660, 1660,
     1660, 1660, 1660, 1651, 2191, 1573, 2191, 1655, 1651, 1652,
     1660, 2193, 1571, 2193, 1660, 1569, 2196, 1653, 2196, 2201,
     1655, 2201, 1567, 2203, 1654, 2203, 2206, 1660, 2206, 2208,
     1652, 2208, 1564, 1654, 1662, 1662, 1662, 1662, 1662, 1662,
     2210, 1653, 2210, 2212, 2215, 2212, 2215, 1561, 1655, 1655,
     1665, 1665, 1665, 1665, 1665, 1665, 1660, 1690, 1690, 1690,

     1690, 1690, 1690, 1559, 1662, 1691, 1691, 1691, 1691, 1691,
     1691, 1692, 1692, 1692, 1692, 1692, 1692, 2217, 1552, 2217,
     1665, 1693, 1693, 1693, 1693, 1693, 1693, 1690, 2221, 2222,
     2221, 2222, 1662, 1544, 2223, 1691, 2223, 2225, 1542, 2225,
     1662, 1692, 1694, 1694, 1694, 1694, 1694, 1694, 1665, 1537,
     2227, 1693, 2227, 1535, 2231, 1690, 2231, 1665, 2233, 2235,
     2233, 2235, 2237, 1691, 2237, 2240, 2242, 2240, 2242, 1692,
     1524, 2243, 1694, 2243, 1522, 2244, 1690, 2244, 1520, 1693,
     1695, 1695, 1695, 1695, 1695, 1695, 1691, 1692, 1696, 1696,
     1696, 1696, 1696, 1696, 1518, 2245, 1693, 2245, 1513, 1511,

     1694, 1697, 1697, 1697, 1697, 1697, 1697, 2247, 1503, 2247,
     1695, 1698, 1698, 1698, 1698, 1698, 1698, 2249, 1696, 2249,
     1501, 1694, 1706, 1706, 1706, 1706, 1706, 1706, 1698, 1706,
     2253, 1697, 2253, 2255, 1500, 2255, 1706, 2257, 1695, 2257,
     2258, 1698, 2258, 2263, 1497, 2263, 1696, 1791, 1791, 1791,
     1791, 1791, 1791, 1696, 1791, 1695, 2265, 1496, 2265, 1697,
     1723, 1723, 1723, 1723, 1723, 1723, 2267, 2269, 2267, 2269,
     1698, 2271, 2272, 2271, 2272, 1494, 1697, 1707, 2273, 2276,
     2273, 2276, 1707, 1724, 1724, 1724, 1724, 1724, 1724, 1493,
     1723, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1492, 1725,

     1725, 1725, 1725, 1725, 1725, 1707, 1726, 1726, 1726, 1726,
     1726, 1726, 2277, 1724, 2277, 2281, 1483, 2281, 1723, 2282,
     2283, 2282, 2283, 1707, 2287, 2289, 2287, 2289, 1707, 1725,
     2291, 1478, 2291, 1707, 1707, 1723, 1726, 1707, 1707, 1477,
     2293, 1724, 2293, 1476, 2294, 1707, 2294, 1475, 1464, 1707,
     1724, 1707, 1707, 1707, 2295, 1707, 2295, 1725, 2296, 2300,
     2296, 2300, 1463, 1461, 1726, 1727, 1727, 1727, 1727, 1727,
     1727, 1728, 1728, 1728, 1728, 1728, 1728, 2301, 2305, 2301,
     2305, 1725, 1729, 1729, 1729, 1729, 1729, 1729, 1726, 1734,
     1734, 1734, 1734, 1734, 1734, 1727, 1734, 2307, 2309, 2307,

     2309, 1728, 1459, 1734, 1736, 1736, 1736, 1736, 1736, 1736,
     1457, 1736, 1729, 2311, 2313, 2311, 2313, 2314, 1736, 2314,
     2315, 1455, 2315, 1727, 2316, 2319, 2316, 2319, 2321, 1728,
     2321, 1727, 1737, 1737, 1737, 1737, 1737, 1737, 1444, 2325,
     1729, 2325, 1728, 2327, 2329, 2327, 2329, 1729, 1735, 1737,
     2331, 1442, 2331, 1735, 1441, 1440, 1757, 1757, 1757, 1757,
     1757, 1757, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1437,
     1817, 1817, 1817, 1817, 1817, 1817, 1735, 1817, 1436, 1435,
     1756, 1756, 1756, 1756, 1756, 1756, 1757, 2340, 2342, 2340,
     2342, 1737, 1433, 2343, 1735, 2343, 2344, 1431, 2344, 1735,

     2345, 2347, 2345, 2347, 1735, 1735, 1430, 1738, 1735, 1735,
     1756, 1426, 1424, 1738, 1757, 2349, 1735, 2349, 1423, 2351,
     1735, 2351, 1735, 1735, 1735, 1757, 1735, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 2357, 2359, 2357, 2359, 1756, 1758,
     1758, 1758, 1758, 1758, 1758, 2360, 1756, 2360, 1759, 1759,
     1759, 1759, 1759, 1759, 1760, 1760, 1760, 1760, 1760, 1760,
     2362, 1759, 2362, 1420, 1738, 1759, 2363, 1738, 2363, 1758,
     1761, 1761, 1761, 1761, 1761, 1761, 1411, 2364, 1759, 2364,
     2367, 2368, 2367, 2368, 1760, 1763, 1763, 1763, 1763, 1763,
     1763, 2371, 1763, 2371, 2372, 1408, 2372, 1758, 1405, 1763,

     1761, 2374, 2376, 2374, 2376, 1393, 1759, 1759, 2390, 1765,
     2390, 2396, 1760, 2396, 2419, 1765, 2419, 1391, 1760, 1758,
     1390, 1764, 1764, 1764, 1764, 1764, 1764, 1384, 1761, 1765,
     1765, 1765, 1765, 1765, 1765, 1765, 1769, 1761, 1764, 2420,
     1374, 2420, 1769, 1369, 1367, 1788, 1788, 1788, 1788, 1788,
     1788, 1365, 1363, 1355, 1354, 1352, 1769, 1769, 1769, 1769,
     1769, 1769, 1769, 1349, 1770, 1345, 1765, 1344, 1343, 1765,
     1770, 1340, 1338, 1336, 1335, 1788, 1331, 1330, 1328, 1327,
     1764, 1323, 1316, 1314, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1310, 1304, 1769, 1286, 1283, 1769, 1787, 1787, 1787,

     1787, 1787, 1787, 1788, 1819, 1819, 1819, 1819, 1819, 1819,
     1787, 1819, 1280, 1279, 1787, 1788, 1278, 1276, 1262, 1260,
     1258, 1770, 1775, 1256, 1254, 1253, 1238, 1787, 1775, 1236,
     1235, 1234, 1233, 1229, 1789, 1789, 1789, 1789, 1789, 1789,
     1227, 1226, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775,
     1775, 1225, 1224, 1222, 1220, 1787, 1787, 1218, 1775, 1775,
     1775, 1775, 1775, 1775, 1789, 1217, 1214, 1210, 1209, 1792,
     1792, 1792, 1792, 1792, 1792, 1207, 1206, 1204, 1201, 1775,
     1200, 1199, 1775, 1194, 1775, 1775, 1775, 1775, 1775, 1775,
     1193, 1191, 1789, 1790, 1790, 1790, 1790, 1790, 1790, 1792,

     1189, 1789, 1187, 1185, 1167, 1152, 1790, 1149, 1138, 1136,
     1790, 1793, 1793, 1793, 1793, 1793, 1793, 1134, 1132, 1131,
     1130, 1129, 1123, 1790, 1794, 1121, 1119, 1792, 1117, 1116,
     1794, 1112, 1111, 1795, 1110, 1107, 1106, 1104, 1103, 1795,
     1102, 1793, 1792, 1100, 1794, 1794, 1794, 1794, 1794, 1794,
     1794, 1099, 1790, 1795, 1795, 1795, 1795, 1795, 1795, 1795,
     1098, 1097, 1096, 1816, 1816, 1816, 1816, 1816, 1816, 1793,
     1095, 1092, 1083, 1082, 1079, 1075, 1816, 1793, 1074, 1803,
     1816, 1794, 1069, 1067, 1794, 1803, 1065, 1064, 1063, 1061,
     1795, 1800, 1057, 1816, 1056, 1053, 1048, 1800, 1046, 1803,

     1803, 1803, 1803, 1803, 1803, 1803, 1045, 1039, 1038, 1032,
     1030, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800,
     1823, 1028, 1816, 1026,  992,  979, 1823, 1800, 1800, 1800,
     1800, 1800, 1800,  977,  975,  973, 1803,  968,  966,  964,
     1823, 1823, 1823, 1823, 1823, 1823, 1823,  962, 1800,  959,
      958, 1800,  956, 1800, 1800, 1800, 1800, 1800, 1800, 1808,
      951,  948,  947,  945,  941, 1808,  940,  939,  935,  932,
      931, 1818, 1818, 1818, 1818, 1818, 1818, 1823,  929, 1808,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1821, 1821,
     1821, 1821, 1821, 1821,  926, 1808, 1808, 1808, 1808, 1808,

     1808, 1818, 1839, 1839, 1839, 1839, 1839, 1839,  925, 1839,
     1859, 1859, 1859, 1859, 1859, 1859, 1808,  923, 1821, 1808,
      922, 1808, 1808, 1808, 1808, 1808, 1808, 1859,  921, 1818,
      918, 1842, 1842, 1842, 1842, 1842, 1842, 1818, 1842,  917,
      916,  912,  911,  909,  908, 1842, 1821, 1871, 1871, 1871,
     1871, 1871, 1871,  907,  903, 1821, 1843,  901,  899,  897,
      896, 1843,  894,  887, 1871,  883,  882,  872,  866, 1859,
     1843, 1843, 1843, 1843, 1843, 1843, 1843,  865, 1856, 1856,
     1856, 1856, 1856, 1856, 1843, 1856, 1858, 1858, 1858, 1858,
     1858, 1858, 1856, 1858, 1870, 1870, 1870, 1870, 1870, 1870,

     1858, 1870, 1843,  864,  859,  855, 1871, 1843, 1870,  849,
      844,  841, 1843, 1843,  840,  836, 1843, 1843,  832,  830,
      829, 1877,  828,  797, 1843,  793,  791, 1877, 1843,  780,
     1843, 1843, 1843,  778, 1843, 1857,  777,  776,  773,  771,
     1857, 1877, 1877, 1877, 1877, 1877, 1877, 1877,  770, 1857,
     1857, 1857, 1857, 1857, 1857, 1857,  769,  768,  767,  766,
      755,  754,  740, 1857,  739,  735,  734,  733,  722,  721,
      711,  710,  709,  705,  704,  699,  698,  697, 1877,  691,
      690, 1857,  689,  685,  684,  681, 1857,  679,  678,  677,
      675, 1857, 1857,  673, 1860, 1857, 1857,  669,  667,  663,

     1860,  637, 1872, 1857,  634,  623,  621, 1857, 1872, 1857,
     1857, 1857,  608, 1857, 1860, 1860, 1860, 1860, 1860, 1860,
     1860,  606, 1872, 1872, 1872, 1872, 1872, 1872, 1872,  603,
      601,  600,  598,  565,  563,  555,  554,  552,  549,  548,
      546,  543,  542, 1876,  540,  537,  536,  519,  518, 1876,
      516, 1860, 1887,  513, 1860,  512,  510,  502, 1887, 1872,
      491,  490, 1872, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
      489,  483, 1887, 1887, 1887, 1887, 1887, 1887, 1887,  473,
      472,  471,  464,  462,  461,  457,  455,  453,  451,  432,
      380,  379,  376, 1888,  350,  348,  346,  334,  333, 1888,

     1876,  328,  317, 1876, 1882,  316,  305,  295,  294, 1887,
     1882,  268, 1887, 1888, 1888, 1888, 1888, 1888, 1888, 1888,
      267,  257,  256,  252, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1896,  244,  241,  239,  238,  237, 1896,
     1882, 1882, 1882, 1882, 1882, 1882,  227,  200,  194,  170,
     1888,  158,  156, 1896, 1896, 1896, 1896, 1896, 1896, 1896,
      155, 1882,  146,  145, 1882,  142, 1882, 1882, 1882, 1882,
     1882, 1882, 1893,  134,  131,  130,  126,   96, 1893,   93,
       92,   89,   88,   86,   79,   69,   43,   38,   33,   30,
     1896,   16, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893,

     1893, 1908,    9,    4,    3,    0,    0, 1908, 1893, 1893,
     1893, 1893, 1893, 1893,    0,    0,    0,    0,    0,    0,
        0, 1908, 1908, 1908, 1908, 1908, 1908, 1908,    0, 1893,
        0,    0, 1893,    0, 1893, 1893, 1893, 1893, 1893, 1893,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1908, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,    0,    0,
        0,    0,    0,    0,    0, 1928, 1928, 1928, 1928, 1928,
     1928,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1928,

        0, 1928, 1928, 1928, 1928, 1928, 1928, 1948, 1948, 1948,
     1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948,
     1948, 1948, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1951,    0,    0,    0,    0, 1951,    0, 1951,
     1951, 1951, 1951, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1953, 1953,
        0, 1953, 1953,    0, 1953, 1953, 1953, 1953, 1953, 1953,
     1953,    0, 1953, 1954, 1954,    0,    0, 1954, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954,    0, 1954, 1955, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1956, 1956,    0, 1956,    0,    0, 1956,
     1957,    0,    0,    0,    0,    0,    0, 1957, 1957, 1957,
     1957, 1958, 1958,    0, 1958,    0,    0,    0,    0,    0,
        0, 1958, 1958, 1958, 1958, 1959,    0, 1959,    0,    0,
     1959, 1960,    0, 1960,    0,    0, 1960, 1961,    0,    0,
        0,    0,    0,    0, 1961, 1961, 1961, 1961, 1962,    0,
     1962,    0,    0, 1962, 1963,    0, 1963,    0,    0, 1963,
     1964,    0, 1964,    0,    0, 1964, 1965, 1965,    0,    0,

     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,    0,
     1965, 1966,    0, 1966,    0,    0, 1966, 1967,    0, 1967,
        0,    0, 1967, 1968, 1968, 1968, 1968, 1968, 1968, 1968,
     1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1970, 1970,
        0, 1970, 1971,    0,    0,    0,    0, 1971,    0, 1971,
     1971, 1971, 1971, 1972, 1972,    0, 1972,    0,    0,    0,
        0,    0,    0, 1972, 1972, 1972, 1972, 1973, 1973,    0,
     1973,    0,    0,    0,    0, 1973, 1973, 1973, 1973, 1973,
     1973, 1974,    0, 1974,    0,    0, 1974, 1976,    0, 1976,
        0,    0, 1976, 1978,    0,    0,    0,    0, 1978,    0,

     1978, 1978, 1978, 1978, 1979,    0,    0,    0,    0, 1979,
        0, 1979, 1979, 1979, 1979, 1980, 1980, 1980, 1980, 1980,
     1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980,
     1981, 1981, 1981, 1981, 1981, 1981, 1981, 1981, 1981, 1981,
     1981, 1981, 1981, 1981, 1981, 1982,    0, 1982,    0,    0,
     1982, 1984,    0, 1984,    0,    0, 1984, 1986,    0, 1986,
        0,    0, 1986, 1988,    0, 1988,    0,    0, 1988, 1990,
        0, 1990,    0,    0, 1990, 1992,    0, 1992, 1992,    0,
     1992, 1993,    0, 1993, 1993,    0, 1993, 1994,    0,    0,
        0,    0, 1994,    0, 1994, 1994, 1994, 1994, 1995,    0,

     1995,    0,    0, 1995, 1996,    0, 1996,    0,    0, 1996,
     1997, 1997,    0, 1997,    0,    0,    0,    0, 1997, 1997,
     1997, 1997, 1997, 1997, 1998,    0, 1998,    0,    0, 1998,
     1999,    0, 1999,    0,    0, 1999, 2000,    0, 2000,    0,
        0, 2000, 2002,    0, 2002,    0,    0, 2002, 2004,    0,
        0,    0,    0, 2004,    0, 2004, 2004, 2004, 2004, 2005,
        0,    0,    0,    0, 2005,    0, 2005, 2005, 2005, 2005,
     2006,    0, 2006,    0,    0, 2006, 2007,    0, 2007,    0,
        0, 2007, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2009,    0, 2009,

        0,    0, 2009, 2011,    0, 2011,    0,    0, 2011, 2013,
        0, 2013,    0,    0, 2013, 2014,    0, 2014,    0,    0,
     2014, 2016,    0, 2016,    0,    0, 2016, 2018,    0, 2018,
     2018,    0, 2018, 2019,    0, 2019,    0,    0, 2019, 2020,
        0, 2020,    0,    0, 2020, 2021,    0, 2021,    0,    0,
     2021, 2022,    0, 2022,    0,    0, 2022, 2024,    0, 2024,
        0,    0, 2024, 2026, 2026,    0, 2026,    0,    0,    0,
        0,    0,    0, 2026, 2026, 2026, 2026, 2027,    0, 2027,
        0,    0, 2027, 2028,    0, 2028,    0,    0, 2028, 2029,
        0, 2029,    0,    0, 2029, 2031,    0, 2031,    0,    0,

     2031, 2033, 2033,    0, 2033,    0,    0,    0,    0, 2033,
     2033, 2033, 2033, 2033, 2033, 2034,    0, 2034,    0,    0,
     2034, 2036,    0, 2036,    0,    0, 2036, 2038,    0,    0,
        0,    0, 2038,    0, 2038, 2038, 2038, 2038, 2039,    0,
     2039,    0,    0, 2039, 2040,    0, 2040,    0,    0, 2040,
     2041,    0, 2041,    0,    0, 2041, 2043,    0, 2043,    0,
        0, 2043, 2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045,
     2045, 2045, 2045, 2045, 2045, 2045, 2045, 2046,    0, 2046,
        0,    0, 2046, 2048,    0, 2048,    0,    0, 2048, 2050,
        0, 2050,    0,    0, 2050, 2052,    0, 2052,    0,    0,

     2052, 2054,    0, 2054,    0,    0, 2054, 2055,    0, 2055,
        0,    0, 2055, 2057,    0, 2057,    0,    0, 2057, 2059,
        0, 2059,    0,    0, 2059, 2061,    0, 2061,    0,    0,
     2061, 2063, 2063,    0, 2063,    0,    0,    0,    0,    0,
        0, 2063, 2063, 2063, 2063, 2064, 2064,    0, 2064,    0,
        0, 2064,    0, 2064,    0, 2064, 2064, 2064, 2064, 2065,
        0, 2065,    0,    0, 2065, 2067,    0, 2067,    0,    0,
     2067, 2069,    0, 2069,    0,    0, 2069, 2071,    0, 2071,
        0,    0, 2071, 2073, 2073,    0, 2073,    0,    0,    0,
        0, 2073, 2073, 2073, 2073, 2073, 2073, 2076,    0,    0,

        0,    0, 2076,    0, 2076, 2076, 2076, 2076, 2078,    0,
     2078,    0,    0, 2078, 2080,    0, 2080,    0,    0, 2080,
     2082,    0, 2082,    0,    0, 2082, 2084,    0, 2084,    0,
        0, 2084, 2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086,
     2086, 2086, 2086, 2086, 2086, 2086, 2086, 2093,    0, 2093,
        0,    0, 2093, 2095,    0, 2095,    0,    0, 2095, 2097,
        0, 2097,    0,    0, 2097, 2099,    0, 2099,    0,    0,
     2099, 2101, 2101,    0, 2101,    0,    0, 2101,    0, 2101,
        0, 2101, 2101, 2101, 2101, 2102, 2102,    0, 2102,    0,
        0,    0,    0,    0,    0, 2102, 2102, 2102, 2102, 2103,

        0, 2103,    0,    0, 2103, 2104,    0, 2104,    0,    0,
     2104, 2105,    0, 2105,    0,    0, 2105, 2107,    0, 2107,
        0,    0, 2107, 2109,    0, 2109,    0,    0, 2109, 2111,
        0, 2111,    0,    0, 2111, 2113, 2113,    0, 2113,    0,
        0,    0,    0, 2113, 2113, 2113, 2113, 2113, 2113, 2114,
        0, 2114,    0,    0, 2114, 2115,    0,    0,    0,    0,
     2115,    0, 2115, 2115, 2115, 2115, 2116,    0, 2116,    0,
        0, 2116, 2118,    0, 2118,    0,    0, 2118, 2120,    0,
     2120,    0,    0, 2120, 2122,    0, 2122,    0,    0, 2122,
     2124,    0, 2124,    0,    0, 2124, 2125,    0, 2125,    0,

        0, 2125, 2126,    0, 2126,    0,    0, 2126, 2128,    0,
     2128,    0,    0, 2128, 2133, 2133,    0, 2133,    0,    0,
        0,    0,    0,    0, 2133, 2133, 2133, 2133, 2134, 2134,
        0, 2134,    0,    0,    0,    0, 2134, 2134, 2134, 2134,
     2134, 2134, 2135,    0, 2135,    0,    0, 2135, 2136,    0,
     2136,    0,    0, 2136, 2137,    0, 2137,    0,    0, 2137,
     2139,    0, 2139,    0,    0, 2139, 2141,    0, 2141,    0,
        0, 2141, 2143,    0, 2143,    0,    0, 2143, 2148, 2148,
        0, 2148,    0,    0,    0,    0, 2148, 2148, 2148, 2148,
     2148, 2148, 2149,    0, 2149,    0,    0, 2149, 2151,    0,

        0,    0,    0, 2151,    0, 2151, 2151, 2151, 2151, 2152,
        0, 2152,    0,    0, 2152, 2154,    0, 2154,    0,    0,
     2154, 2159,    0, 2159,    0,    0, 2159, 2161,    0, 2161,
        0,    0, 2161, 2166,    0, 2166,    0,    0, 2166, 2167,
     2167,    0, 2167,    0,    0,    0,    0, 2167, 2167, 2167,
     2167, 2167, 2167, 2168,    0, 2168,    0,    0, 2168, 2169,
        0, 2169,    0,    0, 2169, 2170,    0, 2170,    0,    0,
     2170, 2172,    0, 2172,    0,    0, 2172, 2174,    0, 2174,
        0,    0, 2174, 2176,    0, 2176,    0,    0, 2176, 2181,
        0, 2181,    0,    0, 2181, 2182, 2182,    0, 2182,    0,

        0,    0,    0, 2182, 2182, 2182, 2182, 2182, 2182, 2183,
        0, 2183,    0,    0, 2183, 2185,    0,    0,    0,    0,
     2185,    0, 2185, 2185, 2185, 2185, 2189,    0, 2189,    0,
        0, 2189, 2190,    0, 2190,    0,    0, 2190, 2192,    0,
     2192,    0,    0, 2192, 2194,    0, 2194,    0,    0, 2194,
     2195,    0, 2195,    0,    0, 2195, 2197, 2197,    0, 2197,
        0,    0,    0,    0,    0,    0, 2197, 2197, 2197, 2197,
     2198,    0, 2198,    0,    0, 2198, 2199,    0, 2199,    0,
        0, 2199, 2200,    0, 2200,    0,    0, 2200, 2202,    0,
     2202,    0,    0, 2202, 2204, 2204,    0, 2204,    0,    0,

        0,    0, 2204, 2204, 2204, 2204, 2204, 2204, 2205,    0,
     2205,    0,    0, 2205, 2207,    0, 2207,    0,    0, 2207,
     2209,    0, 2209,    0,    0, 2209, 2211,    0, 2211,    0,
        0, 2211, 2213,    0, 2213,    0,    0, 2213, 2214,    0,
     2214,    0,    0, 2214, 2216, 2216,    0, 2216,    0,    0,
        0,    0, 2216, 2216, 2216, 2216, 2216, 2216, 2218,    0,
        0,    0,    0, 2218,    0, 2218, 2218, 2218, 2218, 2219,
        0, 2219,    0,    0, 2219, 2220,    0, 2220,    0,    0,
     2220, 2224,    0, 2224,    0,    0, 2224, 2226,    0, 2226,
        0,    0, 2226, 2228, 2228,    0, 2228,    0,    0,    0,

        0,    0,    0, 2228, 2228, 2228, 2228, 2229, 2229,    0,
     2229,    0,    0, 2229,    0, 2229,    0, 2229, 2229, 2229,
     2229, 2230,    0, 2230,    0,    0, 2230, 2232,    0, 2232,
        0,    0, 2232, 2234,    0, 2234,    0,    0, 2234, 2236,
        0, 2236,    0,    0, 2236, 2238, 2238,    0, 2238,    0,
        0,    0,    0, 2238, 2238, 2238, 2238, 2238, 2238, 2239,
        0, 2239,    0,    0, 2239, 2241,    0, 2241,    0,    0,
     2241, 2246,    0, 2246,    0,    0, 2246, 2248,    0, 2248,
        0,    0, 2248, 2250, 2250,    0, 2250,    0,    0,    0,
        0, 2250, 2250, 2250, 2250, 2250, 2250, 2251,    0,    0,

        0,    0, 2251,    0, 2251, 2251, 2251, 2251, 2252,    0,
     2252,    0,    0, 2252, 2254,    0, 2254,    0,    0, 2254,
     2256,    0, 2256,    0,    0, 2256, 2259, 2259,    0, 2259,
        0,    0, 2259,    0, 2259,    0, 2259, 2259, 2259, 2259,
     2260,    0, 2260,    0,    0, 2260, 2261,    0, 2261,    0,
        0, 2261, 2262,    0, 2262,    0,    0, 2262, 2264,    0,
     2264,    0,    0, 2264, 2266,    0, 2266,    0,    0, 2266,
     2268,    0, 2268,    0,    0, 2268, 2270, 2270,    0, 2270,
        0,    0,    0,    0, 2270, 2270, 2270, 2270, 2270, 2270,
     2274,    0, 2274,    0,    0, 2274, 2275,    0, 2275,    0,

        0, 2275, 2278, 2278,    0, 2278,    0, 2278, 2278,    0,
     2278, 2278, 2278, 2278, 2278, 2278, 2279,    0,    0,    0,
        0, 2279,    0, 2279, 2279, 2279, 2279, 2280,    0, 2280,
        0,    0, 2280, 2284,    0, 2284,    0,    0, 2284, 2285,
        0, 2285,    0,    0, 2285, 2286,    0, 2286,    0,    0,
     2286, 2288,    0, 2288,    0,    0, 2288, 2290,    0, 2290,
        0,    0, 2290, 2292,    0, 2292,    0,    0, 2292, 2297,
     2297,    0, 2297,    0,    0,    0,    0, 2297, 2297, 2297,
     2297, 2297, 2297, 2298,    0, 2298,    0,    0, 2298, 2299,
        0, 2299,    0,    0, 2299, 2302, 2302,    0, 2302,    0,

        0,    0,    0, 2302, 2302, 2302, 2302, 2302, 2302, 2303,
     2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303,
     2303, 2303, 2303, 2303, 2304,    0,    0,    0,    0, 2304,
        0, 2304, 2304, 2304, 2304, 2306,    0, 2306,    0,    0,
     2306, 2308,    0, 2308,    0,    0, 2308, 2310,    0, 2310,
        0,    0, 2310, 2312,    0, 2312,    0,    0, 2312, 2317,
        0, 2317,    0,    0, 2317, 2318,    0, 2318,    0,    0,
     2318, 2320,    0, 2320,    0,    0, 2320, 2322, 2322, 2322,
     2322, 2322, 2322, 2322, 2322, 2322, 2322, 2322, 2322, 2322,
     2322, 2322, 2323, 2323, 2323, 2323, 2323, 2323, 2323, 2323,

     2323, 2323, 2323, 2323, 2323, 2323, 2323, 2324,    0, 2324,
        0,    0, 2324, 2326,    0, 2326,    0,    0, 2326, 2328,
        0, 2328,    0,    0, 2328, 2330,    0, 2330,    0,    0,
     2330, 2332,    0, 2332,    0,    0, 2332, 2333,    0, 2333,
        0,    0, 2333, 2334,    0, 2334,    0,    0, 2334, 2335,
        0, 2335,    0,    0, 2335, 2336,    0, 2336,    0,    0,
     2336, 2337,    0, 2337,    0,    0, 2337, 2338,    0,    0,
        0,    0, 2338,    0, 2338, 2338, 2338, 2338, 2339,    0,
     2339,    0,    0, 2339, 2341,    0, 2341,    0,    0, 2341,
     2346,    0, 2346,    0,    0, 2346, 2348,    0, 2348,    0,

        0, 2348, 2350, 2350,    0, 2350,    0,    0,    0,    0,
     2350, 2350, 2350, 2350, 2350, 2350, 2352,    0, 2352,    0,
        0, 2352, 2353,    0, 2353,    0,    0, 2353, 2354,    0,
     2354,    0,    0, 2354, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2356,
        0, 2356,    0,    0, 2356, 2358,    0, 2358,    0,    0,
     2358, 2361,    0,    0,    0,    0, 2361,    0, 2361, 2361,
     2361, 2361, 2365,    0, 2365,    0,    0, 2365, 2366,    0,
     2366,    0,    0, 2366, 2369,    0, 2369,    0,    0, 2369,
     2370,    0, 2370,    0,    0, 2370, 2373,    0, 2373,    0,

        0, 2373, 2375,    0, 2375,    0,    0, 2375, 2377,    0,
        0,    0,    0, 2377,    0, 2377, 2377, 2377, 2377, 2378,
        0, 2378,    0,    0, 2378, 2379,    0, 2379,    0,    0,
     2379, 2380, 2380, 2380, 2380, 2380, 2380, 2380, 2380, 2380,
     2380, 2380, 2380, 2380, 2380, 2380, 2381,    0, 2381,    0,
        0, 2381, 2382,    0, 2382,    0,    0, 2382, 2383,    0,
     2383,    0,    0, 2383, 2384,    0, 2384,    0,    0, 2384,
     2385,    0, 2385,    0,    0, 2385, 2386,    0, 2386,    0,
        0, 2386, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2388,    0, 2388,

        0,    0, 2388, 2389,    0, 2389,    0,    0, 2389, 2391,
     2391, 2391, 2391, 2391, 2391, 2391, 2391, 2391, 2391, 2391,
     2391, 2391, 2391, 2391, 2392,    0, 2392,    0,    0, 2392,
     2393,    0, 2393,    0,    0, 2393, 2394,    0, 2394,    0,
        0, 2394, 2395,    0, 2395,    0,    0, 2395, 2397, 2397,
     2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397,
     2397, 2397, 2397, 2398,    0, 2398,    0,    0, 2398, 2399,
        0, 2399,    0,    0, 2399, 2400,    0, 2400,    0,    0,
     2400, 2401,    0, 2401,    0,    0, 2401, 2402,    0, 2402,
        0,    0, 2402, 2403,    0, 2403,    0,    0, 2403, 2404,

        0, 2404,    0,    0, 2404, 2405,    0, 2405,    0,    0,
     2405, 2406,    0, 2406,    0,    0, 2406, 2407,    0, 2407,
        0,    0, 2407, 2408,    0, 2408,    0,    0, 2408, 2409,
        0, 2409,    0,    0, 2409, 2410,    0, 2410,    0,    0,
     2410, 2411,    0, 2411,    0,    0, 2411, 2412,    0, 2412,
        0,    0, 2412, 2413,    0, 2413,    0,    0, 2413, 2414,
        0, 2414,    0,    0, 2414, 2415,    0, 2415,    0,    0,
     2415, 2416,    0, 2416,    0,    0, 2416, 2417,    0, 2417,
        0,    0, 2417, 2418,    0, 2418,    0,    0, 2418, 2421,
        0, 2421,    0,    0, 2421, 2422,    0, 2422,    0,    0,

     2422, 2423,    0, 2423,    0,    0, 2423, 2424,    0, 2424,
        0,    0, 2424, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[245] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Sun Dec 15 17:23:46 2024
 * Update Count     : 877
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.hpp"                          // for DeclarationNode
#include "ExpressionNode.hpp"                           // for LabelNode
#include "InitializerNode.hpp"                          // for InitializerNode
#include "ParseNode.hpp"
#include "ParserTypes.hpp"                              // for Token
#include "StatementNode.hpp"                            // for CondCtrl, ForCtrl
#include "TypedefTable.hpp"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 3282 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// " stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}
				// C23 attributes, CPP also handles missing quote delimiter



#line 3299 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define QUOTE 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 187 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 3523 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1948 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8814 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 189 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 211 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 214 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 219 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }			// do nothing
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }					// reset column counter
	YY_BREAK
/* keywords */
case 9:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SVBOOL); }				// gcc (ARM)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CORUN); }				// CFA
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COFOR); }				// CFA
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT16); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32X); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64X); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128); }					// GCC
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128X); }					// GCC
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32X4); }					// GCC (ARM)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64X2); }					// GCC (ARM)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(SVFLOAT32); }					// GCC (ARM)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(SVFLOAT64); }					// GCC (ARM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 112:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COUNTOF); }			// GCC
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 362 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 363 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 364 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 367 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 368 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 369 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 373 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 156:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* C23 attributes */
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	strtext = new string( &yytext[2], yyleng - 4 );		// remove delimiters "[[" and "]]"
	RETURN_STR(C23_ATTRIBUTE);
}
	YY_BREAK
/* numeric constants */
case 159:
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 390 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 391 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 392 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 396 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value, CPP also handles missing quote delimiter */
case 167:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant, CPP also handles missing quote delimiter */
case 170:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 173:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 413 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 176:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATTR); }				// CFA, attribute shorthand
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 190:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 194:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 452 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 457 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 463 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 464 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 465 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 466 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 467 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 468 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 469 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 470 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 471 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 472 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 473 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 474 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 475 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 477 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 478 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUp); }			// CFA
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 479 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 480 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 481 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 482 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 237:
YY_RULE_SETUP
#line 485 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 486 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 487 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 488 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 493 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 242:
YY_RULE_SETUP
#line 520 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 243:
YY_RULE_SETUP
#line 532 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 534 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 4903 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1948 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1948 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1947);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 534 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

