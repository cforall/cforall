
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 243
#define YY_END_OF_BUFFER 244
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1947] =
    {   0,
        0,    0,    0,    0,  167,  167,  170,  170,  244,  242,
        7,    8,    7,  193,  169,  155,  199,  202,  166,  179,
      180,  196,  194,  183,  195,  186,  198,  159,  160,  184,
      185,  204,  206,  205,  207,  175,  155,  177,  197,  178,
      200,  155,  176,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  181,  203,  182,  201,    7,  242,    4,    4,  167,
      168,  174,  170,  171,    7,    7,  211,  236,  155,    0,
      224,  192,  216,  225,  222,  208,  219,  231,  209,  220,
      218,  234,    0,  163,    3,    0,  223,  162,  159,    0,

        0,    0,  159,  159,  159,  159,  159,  159,    0,    0,
      159,  159,  160,  160,  160,  160,  160,  160,  160,    0,
      160,  160,  190,  191,  189,  212,  214,  210,  215,  213,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  230,  187,  169,
      166,  155,    0,  221,    0,    0,  227,    0,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,    0,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,   49,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,   84,  155,  155,  155,  155,  155,  102,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  226,  217,  232,    7,    0,    0,    0,    2,    0,
        5,  167,    0,  173,  172,  172,    0,    0,    0,  170,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  233,  235,  188,
      163,  163,    0,  163,  163,  163,  163,    0,    6,  164,
      162,    0,  162,  162,  162,  162,  159,    0,    0,  158,
        0,    0,  164,    0,  159,  159,  159,  159,  159,  159,
      159,  159,    0,    0,    0,  159,  159,  159,  159,  159,

      159,  159,    0,  161,    0,    0,  160,  160,  160,  160,
      160,  160,  160,  160,    0,    0,    0,  160,  160,  160,
      160,  160,  160,  160,    0,  228,  229,    0,  240,  237,
        0,    0,    0,  239,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  156,    0,  155,   15,   16,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,   77,  155,  155,  155,  155,
       91,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  131,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,    0,    0,  172,    0,
        0,    0,    0,    0,  172,    0,    0,  241,    0,    0,
        0,    0,    0,    0,    0,  163,    0,  163,    0,    0,
        0,    0,    0,  163,  163,    0,  164,  164,    0,  164,
      164,  164,  164,  162,    0,  162,    0,    0,    0,    0,
        0,  162,  162,    0,  158,  158,  158,  158,  158,  158,

      158,    0,  158,  158,  164,  164,  164,  164,  164,  164,
        0,    0,    0,  159,  159,    0,    0,    0,    0,  159,
      159,    0,    0,  161,  161,  161,  161,  161,  161,  161,
      161,    0,  161,  161,    0,    0,    0,  160,  160,    0,
        0,    0,    0,  160,  160,  239,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  238,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  156,    0,    0,

        0,  155,   22,  155,  155,   28,  155,   31,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
       52,  155,   54,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,   83,  155,  155,   96,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  144,  155,  155,  155,  151,  155,  153,  155,
        0,    0,    0,    0,    0,    0,  172,    0,    0,    0,
        0,    0,  163,  163,    0,  163,  163,    0,    0,    0,
        0,  164,    0,  164,    0,    0,    0,    0,    0,  164,

      164,    0,  162,  162,    0,  162,  162,    0,    0,    0,
        0,  158,  158,  158,  158,  158,  158,  158,  158,    0,
        0,    0,  158,  158,  158,  158,  158,  158,  158,    0,
      164,    0,    0,    0,    0,  164,  164,    0,    0,    0,
        0,    0,    0,    0,  161,  161,  161,  161,  161,  161,
      161,  161,    0,    0,    0,  161,  161,    0,  165,    0,
      161,  161,  161,  161,  161,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  155,  155,   25,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,   17,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,    0,    0,    0,
        0,    0,    0,  155,  155,   27,   29,  155,  155,   35,
       39,  155,  155,   34,  155,  155,  155,  155,   51,  155,
      155,  155,  155,  155,   60,   61,  155,  155,   80,  155,
      155,  155,  155,   98,  101,  103,  155,  155,  155,  155,
      155,  111,  155,  155,  155,  155,  155,  155,  155,  127,
      155,  130,  132,  155,  155,  155,  138,  155,  155,  155,
      155,  155,  155,  152,  155,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  163,    0,  163,  163,  164,
      164,    0,  164,  164,    0,    0,    0,    0,    0,  162,
        0,  162,  162,    0,    0,    0,  158,  158,    0,    0,
        0,    0,  158,  158,    0,  164,  164,    0,    0,    0,
        0,    0,  165,    0,    0,    0,    0,    0,  161,  161,
        0,  165,  165,  165,  165,  165,    0,    0,    0,  161,
      161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  155,    0,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,   86,  155,  155,  155,  155,
      155,  155,  155,  155,  155,    0,    0,    0,    0,    0,
        0,    0,    0,  155,  155,  155,  155,   32,   33,  155,
      155,  155,  155,  155,   50,   53,  155,   57,  155,  155,
      155,  155,   78,  155,  155,   88,   92,  155,  155,  155,
      106,  155,  110,  112,  115,  117,  120,  155,  122,  123,
      155,  155,  155,  137,  134,  155,  155,  155,  148,  155,
      155,  154,    0,    1,    0,    0,  172,    0,    0,    0,
        0,  163,    0,  164,    0,  164,  164,  162,    0,    0,

      164,    0,  164,  164,  165,  165,    0,  165,    0,    0,
        0,    0,  165,  165,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,
      155,   19,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,   18,  155,  155,  155,
      155,   40,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,    0,    0,    0,    0,    0,    0,
        0,    0,    9,   11,  155,  155,  155,  155,  116,   47,

       48,  155,  155,   59,  155,   63,   79,  155,   97,  104,
      155,  155,  155,  121,  155,  155,  129,  133,  155,  143,
      155,  149,  155,    0,    0,  164,  164,    0,    0,  165,
      165,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  157,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   10,   12,   36,
      155,  155,   66,   67,   69,   82,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,   87,   89,   93,  155,  155,  113,  124,
      135,  155,  155,    0,    0,    0,    0,    0,    0,    0,
      155,  155,   42,  155,  155,  155,   65,  155,  105,  107,
      155,  155,  155,  140,  145,  155,    0,    0,    0,    0,
      165,    0,  165,  165,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  155,  155,  155,   71,   68,   70,
      155,   99,  155,  155,  155,  155,  155,  155,   13,  155,

      155,  155,   37,   41,  155,  155,   62,  155,  155,   95,
      155,  155,  155,  155,  155,    0,    0,    0,    0,  155,
      155,   43,   55,  155,   81,  155,  155,  155,  150,    0,
        0,    0,    0,  165,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  155,   44,   45,   72,   85,  155,  155,  155,
      155,   26,  155,  155,  155,  155,  155,  155,  155,  155,
       64,   90,   94,  108,  114,  136,  155,  146,    0,    0,

        0,   24,  155,  155,  155,  155,  155,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       46,  155,  155,  155,  155,  155,  155,   14,   20,   23,
      155,  155,   38,  155,  155,  139,  155,    0,    0,    0,
        0,   30,   58,  155,  155,  128,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  109,  147,    0,    0,    0,  155,
      126,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  155,  125,   73,   74,   75,   76,
       21,  155,  155,   56,    0,  119,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  118,  155,  155,  155,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,  155,  155,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  155,  141,  155,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  155,  142,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  100,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   56,   51,   57,   11,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,

       69,   70,   71,   72,   73,   11,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[94] =
    {   0,
        1,    2,    3,    2,    2,    2,    2,    1,    4,    1,
        5,    1,    1,    6,    7,    1,    1,    1,    8,    1,
        9,    1,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   11,    1,    1,    1,    1,    1,    1,   12,   12,
       12,   12,   12,   12,    5,    5,    5,    5,    5,   13,
        5,    5,    5,    5,    5,    5,    5,    5,    1,   14,
        8,    1,   15,    1,   12,   12,   12,   12,   12,   12,
        5,    5,    5,    5,    5,    5,    5,    5,   13,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    1

    } ;

static const flex_int16_t yy_base[2424] =
    {   0,
        0,   92, 6393, 6392,   92,   93,   94,   95, 6408, 8804,
      106, 8804,  112,   85, 8804, 6347,   65,   92, 8804, 8804,
     8804,   86,   91, 8804,   95,  112,  112,  168,  237, 6370,
     8804,  132, 6370,   89,  319,  110,  142, 6338,  122, 8804,
      111,  303, 6332,   98,  100,  164,  221,   99,  173,  101,
      108,  112,  123,  193,  102,  286,  247,  245,  149,  302,
      143, 8804,  128, 8804,  193,  380,  389, 8804, 6373,    0,
     8804,  419,    0, 8804,  393,  399, 8804,  499, 6334,  155,
     8804, 8804, 8804, 8804, 8804, 6356, 8804, 6347, 6343, 8804,
     8804, 6344, 6357,  568, 8804, 6374, 8804,  632,  412,  499,

      226,  435,  256,  492,  597,  421, 8804,  502,  214,  452,
      498,  642,    0,  534,  636,  680,  499, 8804,  557,  250,
      567,  695, 8804, 8804, 8804, 6341, 8804, 8804, 8804, 6340,
     6339,  256,  261, 6357,  280,  390,  414,  288,  395,  314,
      435, 6335,  336,  445, 6311, 6278,  446, 8804, 8804, 8804,
     8804,  264,  778, 8804, 6305, 6304, 8804, 6276,  305,  219,
      316,  144,  258,  308,  212,  329,  161,  351,  819, 6305,
      127,  427,  417,  278,  342,  441,  483,  495,  662,  397,
      426,  453,  496,  503,  604,  541,  527,  590,  557,  471,
      540,  565,  371, 6304,  654,  613,  626,  526,  618, 6296,

      605,  673,  638,  670,  697,  663,  209,  476,  573,  689,
      678,  688,  727,  687,  691,  698,  634,  701,  726,  705,
      715, 8804, 8804, 8804,  787,  798, 6351,  888, 8804,  918,
     8804,    0,  800, 8804, 8804,  786, 6290, 6288, 6280,    0,
     6307,  769,  781, 6324,  782,  802,  810,  796,  816,  797,
      807, 6302,  821,  829,  830, 6275, 6274, 8804, 8804, 8804,
      927,  891,  991,  851,  957,  573, 6266, 6325, 8804, 1032,
      997, 1096,  956,  998,  788, 1087, 1065,  469, 1118, 1165,
      126, 1167, 1232, 1296,  309, 8804,  823, 1217,  679, 8804,
      815, 1146,  667, 6302, 6299,  850,  951,  836, 1004,  849,

      859,  963,    0, 1307, 6304, 1374,  853, 8804, 1053, 1258,
      881, 8804,  907, 1334,  811, 6289, 6286, 1085, 1152,  921,
     1156, 1024, 1038, 1268, 1396, 8804, 8804, 6275, 8804, 8804,
      836,  839, 6250, 6242,  928, 1458, 1408,  998, 1426, 1439,
     1445, 1485, 1477, 1491, 1509, 6236,    0, 6235,    0, 6205,
      900,  850,  903,  792,  917, 1009,  971, 1038,  966, 1044,
     1036, 1076,  870, 1149, 1055, 1090,  963, 1103, 1140, 1106,
     1105, 1104,  916, 1145, 1124, 6236, 1099,  869, 6233, 6232,
     1148, 1150, 1162, 1179, 1046, 1185, 1174, 1190, 1175, 1207,
     1191, 1004, 1208, 1221,  431, 1073, 1239,  587, 1217, 1292,

     1299, 1210, 1231, 1285, 1244, 1323, 1250, 1318, 1307, 1321,
      833, 1395, 1335, 1347, 1330, 1357, 1375, 1394, 1378, 1257,
     1416, 1311, 1397, 1409, 1441, 1443, 1425, 1442, 1460, 1462,
     1446, 6229, 1470, 1483, 1498, 1476, 1473, 1480, 1243, 1279,
     1487, 1484, 1488, 1496, 1501, 1497, 1574, 1559, 1564, 1571,
     6225,    0, 6224,    0, 6223,    0, 6248, 8804, 1435, 1529,
     6222, 6219,    0, 6218,    0, 8804, 1578, 1605, 1592, 1545,
     6255, 6252, 6255, 8804, 1613, 1634, 1675, 1639, 1739, 1664,
     1705, 1106, 6214, 8804, 1704, 1780, 1769, 1553, 6251, 6248,
     6251, 8804, 1748, 1789, 1844, 1786, 1826, 1816, 1593, 8804,

     1836, 6210, 1789, 1896, 1958, 1887, 1918, 1888, 1512, 6209,
     1555, 6246, 6243, 1570, 1571, 6232, 1616, 6236, 6225, 1577,
     1597, 1588, 1629, 2024, 1792, 1924, 2076, 1822, 2091, 1964,
     8804, 1551, 1894, 2103, 1647, 6226, 6221, 1629, 1640, 6217,
     1691, 6221, 6217, 1642, 1663, 6181, 1641, 6176, 6175, 2054,
     2132, 6205, 1687, 6173, 6172, 2138, 2177, 2197, 2208, 2216,
     2228, 2239, 6170,    0, 6169,    0, 8804, 1611, 1700, 1679,
     1661, 1728, 1374, 1721, 1681, 1761, 1586, 1765, 1818, 1954,
     1845, 1775, 1766, 1796, 1854, 1877, 1797, 1826, 1686, 1932,
     1763,  716, 1890, 1698, 1880, 1777, 1837, 6171, 1803, 6167,

     6166, 1916, 6168, 1855, 1204, 6167, 1892, 6166, 1864, 1930,
     1935, 1944, 1957, 1958, 1943, 1963, 1959, 1969, 1965, 2009,
     6165, 2002, 6164, 2016, 2023, 2015, 2050, 2028, 2068, 2086,
     2066, 2088, 2092, 6163, 2095,  553, 6162, 2070, 2025, 2102,
     2096, 2103, 2107, 2109, 2114, 2115, 2108, 2117, 2146, 2134,
     2099, 2148, 2187, 2190, 2111, 2189, 2145, 2167, 2191, 2193,
     2192, 2178, 6161, 2198, 2205, 2217, 6160, 2206, 6152, 1723,
     2270, 2266, 6140,    0, 6134,    0, 6133, 6132, 6129,    0,
     6127,    0, 2301, 6126, 6158, 2227, 2231, 2055, 6159, 6154,
     6157, 8804, 2310, 2365, 2429, 2257, 6154, 6151, 6153, 8804,

     2279, 2374, 2438, 6112, 6144, 2269, 2273, 2273, 6148, 6144,
     6147, 2228, 8804, 2260, 2391, 2267, 8804, 2295, 2447, 2288,
     6143, 6140, 2300, 2359, 2307, 2467, 2238, 2310, 2474, 2362,
     8804, 2333, 6141, 6138, 6141, 8804, 2400, 2527, 6133, 6132,
     2420, 2541, 2431, 2369, 2395, 8804, 2432, 2550, 2433, 8804,
     2435, 2508, 2334, 6136, 6133, 2489, 2530, 2592, 2612, 2676,
     2535, 2600, 2361, 2473, 2620, 6096, 6128, 6127, 6093, 6092,
     6090,    0, 6089,    0, 2706, 6088, 6087, 6086,    0, 6085,
        0, 2712, 2718, 2725, 2731, 2749, 2799, 2809, 2822, 2832,
     6084,    0, 6076,    0, 2301, 2166, 6070, 2367, 2449, 2358,

     2350, 2363, 2412, 2432, 2305, 2312, 2452, 2466, 2351, 2479,
     2467, 2500, 2468, 2515, 2524, 2250, 2526, 2528, 2527, 2201,
     2306, 2529, 2533, 2542, 2592, 2549, 2536, 6066, 6065, 6064,
        0, 6061,    0, 2593, 2537, 6060, 1972, 2595, 2597, 6057,
     6056, 2568, 2591, 6054, 2535, 2602, 2608, 2609, 6053, 2610,
     2605, 2612, 1962, 2616, 6051, 2715, 2666, 2621, 6050, 2682,
     2680, 1915, 2683, 6049, 6046, 6045, 2698, 2686, 2688, 2624,
     2699, 6042, 2700, 2414, 2710, 2704, 2702, 2463, 2705, 2722,
     2547, 6041, 6040, 2720, 2724, 2726, 6036, 2730, 2723, 2735,
     2750, 2770, 2763, 6035, 2734, 6091, 6005,    0, 5996,    0,

     5995,    0, 5994,    0, 2847, 2771, 6026, 5967, 5966, 2892,
     5988, 6020, 2773, 2774, 2504, 6024, 6021, 6022, 2870, 2815,
     6014, 5948, 5947, 2820, 6008, 6005, 2795, 2796, 6001, 2827,
     6005, 5994, 2808, 2810, 5989, 2816, 2838, 2879, 5986, 5981,
     5976, 2921, 2956, 3020, 5922, 2880, 5944, 5934, 2829, 2851,
     5930, 2965, 2839, 2985, 3011, 5896, 2899, 5933, 5930, 2880,
     2883, 5892,    0, 5891,    0, 5890,    0, 5889,    0, 3061,
     3068, 2874, 5888,    0, 5880,    0, 5878,    0, 5877,    0,
     3098, 3104, 3110, 3120, 3142, 3179, 3193, 3201, 3210,    0,
        0, 5878,    0, 2899, 2871, 2773, 2872, 2937, 2793, 2894,

     2783, 2908, 2942, 2916, 2945, 2952, 2897, 2910, 2948, 2953,
     2958, 2866, 2973, 2957, 2977, 2962, 2975, 2882, 2979, 2946,
     3009, 3017, 3016, 3033, 3001, 5867,    0, 5866,    0, 5865,
        0, 5863,    0, 2805, 3020, 2941, 3023, 5865, 5864, 3035,
     3025, 3029, 3058, 3071, 5856, 5855, 3060, 5854, 3072, 3074,
     3112, 3115, 5852, 3079, 3083, 5841, 5840, 3090, 3095, 3091,
     5839, 3094, 5838, 5837, 5829, 3105, 5827, 3028, 5826, 3127,
     3109, 3149, 3131, 5825, 5823, 3119, 3117, 3159, 5820, 3150,
     3158, 5819, 5875, 8804,    0,    0, 8804,    0,    0,    0,
        0, 5790, 3220, 3179, 5844, 5786, 5782, 5779, 5835, 5834,

     3181, 5833, 5775, 5774, 3261, 5790, 5822, 8804, 3134, 5826,
     5815, 5810, 8804, 3234, 3270, 5801, 5766,    0, 5765,    0,
     5764,    0, 5763,    0, 3311, 3346, 3406, 3139, 5764, 5760,
     5759, 5757,    0, 5755,    0, 5754,    0, 5753,    0, 3354,
     3364, 3372, 3385, 3395, 3436, 3447, 3454, 3495, 5750, 3075,
     3160, 5752, 3169, 3161, 3244, 3197, 3247, 3205, 3175, 3178,
     3215, 3217, 3294, 3207, 3246, 3177, 5751, 2567, 3242, 3259,
     3266, 3277, 3261, 3404, 3279, 3286, 3333, 3320, 3321, 3335,
     3355, 3268, 3285, 3345, 5747,    0, 5746,    0, 5745,    0,
     5737,    0, 5739, 5738, 3304, 3262, 3356, 3359, 5736, 5735,

     5734, 3369, 3403, 5733, 3405, 5730, 5722, 3407, 5721, 5714,
     3410, 3302, 3361, 5712, 3413, 3411, 5711, 5709, 3362, 5708,
     3415, 5707, 3360, 5696, 5695, 5670, 5669, 3505, 5717, 3430,
     3431, 3480, 5721, 5718, 5721, 5669,    0, 5668,    0,    0,
        0,    0, 3567, 3519, 3453, 3543, 3554, 3592, 3602, 3578,
     3613, 3672, 5661, 5660, 8804, 5659,    0, 5658,    0, 5655,
        0, 5654,    0,    0,    0,    0, 3681, 3687, 3693, 3703,
     3724, 3764, 3773, 3795, 3788, 5653,    0, 5655, 5651, 5649,
     3642, 3450, 5640, 3429, 3432, 5638, 3481, 3434, 3479, 3492,
     3517, 3516, 3527, 3412, 3494, 3505, 3452, 3551, 3506, 3528,

     3540, 3576, 3579, 5636, 3562, 3566, 3586, 3446, 3587, 5623,
     3595, 3582, 3594, 5619,    0, 5610,    0,    0,    0,    0,
     3581, 3580, 5612, 3601, 3603, 3652, 5610, 3572, 5599, 5598,
     3621, 3655, 3654, 5597, 5596, 3641, 5589,    0, 5588,    0,
     3664, 5620, 5562, 5559,    0,    0,    0, 5582, 3806, 3812,
     5612, 3576, 5580, 5578, 3856, 3863, 3871, 3877, 3887, 3894,
     3946, 5568,    0, 5564,    0, 5555,    0, 5554,    0,    0,
        0,    0, 5553, 3954, 3977, 3985, 3991, 3997, 4037, 4068,
     4077, 3908, 5552,    0, 3695, 3697, 3690, 3658, 5553, 5550,
     3674, 5549, 3661, 3664, 3686, 3694, 3699, 3777, 3698, 3700,

     3725, 3762, 3763, 5548, 3761, 3811, 5527, 3768, 3769, 5526,
     3770, 3772, 3780, 3787, 3679,    0,    0,    0, 5522, 3776,
     3712, 5522, 5521, 3846, 5520, 3704, 3605, 3826, 5519, 5514,
        0, 5507,    0, 5481, 5503, 5502,    0, 4083, 5501, 5500,
     5499,    0, 5497,    0, 4089, 4099, 4113, 4158, 4172, 4179,
     4189, 4195, 4203, 5496,    0, 5488,    0, 5484,    0, 5482,
        0, 5481, 5480,    0, 4254, 4269, 4275, 4285, 4292, 4316,
     4351,    0, 3875, 5481, 5480, 5477, 5472, 3774, 3858, 3827,
     3860, 5463, 3879, 3881, 3861, 3782, 3869, 3885, 3870, 3663,
     5441, 5440, 5424, 3904, 5421, 5411, 3883, 3911, 5404, 5401,

        0, 5394, 3916, 3561, 3947, 3912, 3950,    0,    0, 5361,
        0, 5352,    0, 4306, 4368, 3852, 5342,    0, 5333,    0,
     5329,    0, 5326,    0, 4375, 4388, 4394, 4410, 4434, 4457,
     4469, 4478, 4493, 5322,    0, 5318,    0,    0,    0,    0,
     5315,    0, 5314,    0, 4500, 4516, 4539, 4575, 4598, 4606,
     5312, 3951, 3948, 3952, 3958, 3962, 3964, 5303, 3971, 5291,
     3862, 3973, 5285, 3986, 3987, 5271, 3992, 5249,    0, 5239,
        0, 5239, 5224, 3945, 4001, 5201, 5190,    0,    0, 4612,
     3981, 5177, 5172, 5169,    0, 5139,    0, 5131,    0, 5127,
        0, 4620, 4637, 4679, 4685, 4703, 4717, 4723, 4754, 4762,

        0,    0,    0, 5119, 5112,    0,    0, 4793, 4800, 4837,
     4843, 4120, 4861, 4880, 3972, 4002, 4047, 4050, 4051, 4053,
     3996, 3988, 4004, 4078, 5100, 5099, 5088,    0,    0, 4072,
     5076,    0, 5031, 5026, 5015,    0, 4996,    0, 4978,    0,
     4977,    0,    0,    0,    0, 4911, 4921, 4927, 4958, 4970,
     4994, 5007, 5017, 5041, 4974, 4970,    0,    0, 5077, 4210,
     5101, 4337, 4143, 5108, 4084, 4968, 4956, 4947, 4933, 4928,
     4919, 4087, 4091, 4910,    0, 4898, 4883,    0, 4876,    0,
     4875,    0, 4857,    0,    0,    0,    0, 4856, 5114, 5120,
     5151, 5160, 5182, 5194, 5202, 5241, 5253, 4833,    0, 4818,

        0, 4644, 4233, 4243, 4769, 5310, 4818, 4039, 4090, 3902,
     4811,    0, 4807,    0, 4796,    0, 4788,    0, 4765, 4757,
     4754, 5272, 5284, 5290, 5323, 5354, 5396, 5406, 4750, 4747,
     4730, 4244, 5304, 5465, 5414, 5438, 5423, 4729, 4721, 4699,
     4160, 4082, 4162, 4691,    0, 4690,    0,    0,    0,    0,
     4684,    0, 4674,    0, 5501, 5507, 5551, 5569, 5587, 5600,
        0, 5456, 5593, 5611, 4639, 4615, 4608, 5639, 5652, 4604,
        0, 4582,    0, 5710,    0, 4079, 4577, 4168,    0,    0,
        0, 4570, 4566,    0,    0, 5682, 5688, 5723, 5782, 5059,
     5759, 5800, 5812, 5821, 4565, 4534, 4529,    0, 5879,    0,

     4324, 5867, 4523,    0, 4520,    0, 5947,    0, 4088, 4514,
     4504, 4498, 4488, 4476, 5852, 5619, 5960, 5701, 4325, 5977,
     4359, 5908, 4473, 4472, 4467, 4452,    0,    0, 4449, 4424,
     4406, 4405, 4396, 4392, 4387, 4383, 4371, 5991, 4418, 4449,
     6020, 6038, 4347, 4346, 4301, 4288,    0, 4287, 4505, 4274,
     4273, 4263, 4262, 4524, 6067, 6117, 6075, 5999, 6182, 4253,
     4252, 4243,    0, 4242, 4525, 4221, 4220, 4206, 6083, 6036,
     6190, 4199, 4191, 4187, 6231, 6109, 4178, 4174, 4171, 4170,
     6292, 4167, 4163, 4109, 4105, 6240, 6281, 4077, 4049, 4035,
     4003, 6360, 3991, 4528, 6321,  157,  238,  297,  387,    0,

        0,  481,  525,  745,  797, 4546, 6389,  909, 1143, 1303,
     1410,    0,    0, 1469, 1516, 1548, 1550, 1611, 1719, 1721,
     1825, 1914, 2018, 2130,    0, 2305, 6427, 2381, 2627,    0,
     2735, 4560, 2769, 2906, 3164, 3213, 3264, 3319, 3321, 3383,
     3490, 3515, 3681, 3865, 3881, 8804, 6497, 6512, 6527, 6538,
     6553, 6568, 6583, 6598, 6605, 6616, 6630, 6636, 6642, 6653,
     6659, 6665, 6671, 6686, 6692, 6698, 6713, 4177, 6720, 6728,
     6742, 6756, 6762, 4213, 6768, 4219, 6779, 6790, 6805, 6820,
     6826, 4228, 6832, 4255, 6838, 4256, 6844, 4290, 6850, 4320,
     6856, 6862, 6873, 6879, 6885, 6899, 6905, 6911, 6917, 4337,

     6923, 4351, 6934, 6945, 6951, 6957, 6972, 6978, 4355, 6984,
     4376, 6990, 6996, 4392, 7002, 4393, 7008, 7014, 7020, 7026,
     7032, 4396, 7038, 4412, 7052, 7058, 7064, 7070, 4413, 7076,
     4420, 7090, 7096, 4421, 7102, 4433, 7113, 7119, 7125, 7131,
     4437, 7137, 4441, 7152, 7158, 4455, 7164, 4476, 7170, 4480,
     7176, 4481, 7182, 7188, 4501, 7194, 4514, 7200, 4540, 7206,
     4544, 7220, 7234, 7240, 4547, 7246, 4554, 7252, 4560, 7258,
     4563, 7272, 4579, 4583, 7283, 4586, 7289, 4622, 7295, 4644,
     7301, 4645, 7307, 4649, 7322, 4650, 4653, 4658, 4664, 4667,
     4683, 7328, 4684, 7334, 4688, 7340, 4689, 7346, 4702, 7360,

     7374, 7380, 7386, 7392, 4703, 7398, 4706, 7404, 4721, 7410,
     4722, 7424, 7430, 7441, 7447, 4726, 7453, 4730, 7459, 4731,
     7465, 4734, 7471, 7477, 7483, 4740, 7489, 4769, 4770, 4777,
     4778, 7503, 7517, 7523, 7529, 7535, 4799, 7541, 4806, 7547,
     4811, 7553, 4814, 4817, 4821, 4824, 7567, 7573, 4825, 7584,
     7590, 4845, 7596, 4861, 4867, 4878, 4879, 7602, 4882, 7608,
     4890, 4891, 4895, 4898, 7614, 7628, 7634, 7640, 7646, 4899,
     7652, 4925, 7658, 4932, 7664, 4935, 4939, 4940, 4944, 7670,
     7684, 7690, 4945, 7701, 4956, 4957, 4968, 7707, 7713, 4972,
     7719, 4973, 7725, 7731, 4979, 7745, 7751, 7757, 7763, 4982,

     7769, 4993, 7783, 7789, 4994, 7795, 5005, 7801, 5015, 7807,
     5019, 7813, 7819, 5022, 7833, 5026, 7844, 7850, 7856, 5040,
     5041, 5045, 7862, 5046, 7868, 5059, 7882, 7896, 7902, 5060,
     7908, 5064, 7914, 5075, 7920, 5078, 7934, 7940, 5083, 7946,
     5087, 5088, 5118, 5119, 7952, 5122, 7958, 5125, 7972, 7983,
     7989, 5129, 7995, 5132, 8001, 5133, 5137, 8015, 8021, 8027,
     8033, 5138, 8039, 5160, 8045, 5161, 8051, 5166, 8065, 5169,
     5181, 5200, 8071, 8077, 5203, 5206, 8091, 8102, 8108, 5207,
     5211, 5212, 8114, 8120, 8126, 5215, 8132, 5218, 8138, 5221,
     8144, 5226, 5229, 5239, 5240, 8158, 8164, 8170, 5254, 5255,

     8184, 8199, 8210, 5258, 8216, 5270, 8222, 5271, 8228, 5288,
     8234, 5293, 5305, 5311, 5330, 8240, 8246, 5331, 8252, 5336,
     8267, 8282, 8288, 5342, 8294, 5352, 8300, 5356, 8306, 5357,
     8312, 8318, 8324, 8330, 8336, 8342, 8353, 8359, 5361, 8365,
     5372, 5378, 5394, 5415, 8371, 5419, 8377, 5423, 8391, 5424,
     8397, 8403, 8409, 8424, 8430, 5427, 8436, 5443, 5458, 8447,
     5465, 5466, 5470, 8453, 8459, 5475, 5485, 8465, 8471, 5486,
     5505, 8477, 5506, 8483, 5509, 8494, 8500, 8506, 8521, 8527,
     8533, 8539, 8545, 8551, 8557, 8572, 8578, 8584, 5512, 8599,
     8605, 8611, 8617, 8623, 5516, 8638, 8644, 8650, 8656, 8662,

     8668, 8674, 8680, 8686, 8692, 8698, 8704, 8710, 8716, 8722,
     8728, 8734, 8740, 8746, 8752, 8758, 8764, 5517, 5526, 8770,
     8776, 8782, 8788
    } ;

static const flex_int16_t yy_def[2424] =
    {   0,
     1946,    1, 1947, 1947, 1948, 1948, 1949, 1949, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1950, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1950, 1946, 1946, 1946,
     1946, 1950, 1946, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1946, 1946, 1946, 1946, 1946, 1951, 1946, 1946, 1952,
     1946, 1946, 1953, 1946, 1946, 1946, 1946, 1946, 1950, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1954, 1946, 1946,   28, 1946,

     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1955,   28,
     1946, 1946,   29, 1946, 1946, 1946, 1946, 1946, 1946,   29,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1956, 1946, 1946, 1946, 1946, 1946,
     1946, 1950, 1957, 1946, 1958, 1959, 1946, 1946, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1960,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,

     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1946, 1946, 1946, 1946, 1951, 1951, 1951, 1946, 1951,
     1946, 1952, 1946, 1946, 1946, 1946, 1961, 1962, 1963, 1964,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1965, 1966, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946,  261, 1967, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946,  110,  277, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,

     1946, 1946, 1968, 1946, 1969, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1970, 1946, 1971, 1972, 1946, 1972, 1972,
     1972, 1972, 1972, 1972, 1972, 1973, 1974, 1975, 1976, 1946,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1978, 1946, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,

     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1979, 1980, 1946, 1946,
     1981, 1982, 1983, 1984, 1985, 1986, 1946, 1946, 1946, 1946,
     1946, 1987, 1988, 1989, 1990, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946,  477, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,

     1946,  495, 1946, 1946, 1946, 1946, 1946, 1946, 1946,  505,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1991, 1992, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946,  524, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1993, 1946, 1994, 1995, 1946,
     1996, 1946, 1946, 1997, 1998, 1996, 1996, 1996, 1996, 1996,
     1996, 1996, 1999, 2000, 2001, 2002, 1946, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2004, 1946, 2005,

     2006, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2007, 1946, 2008, 2009, 2010, 2011, 2012, 2012, 2013, 2014,
     2015, 2016, 1946,  683, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,

     1946, 1946, 1946,  703, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     2017, 1946, 2017, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 2018, 1946, 1946, 2019, 2020,
     2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
     2031, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032,
     2033, 2034, 2035, 2036, 2037, 2037, 2037, 2037, 2037, 2037,

     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2038, 2039, 2040,
     2041, 2042, 2043, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2037, 2037, 2044, 2045, 2046, 2047, 2048,

     2049, 2050, 2051, 2052, 1946, 1946, 1946, 1946, 1946, 1946,
      910, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 2053, 1946, 1946, 1946, 1946, 1946,
     1946,  943, 1946, 1946, 1946,  952, 1946, 1946, 1946, 1946,
     1946, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
     2063, 1946, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071,
     2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072, 2073,
     2074, 2075, 2076, 2075, 2075, 2075, 2075, 2075, 2075, 2075,

     2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
     2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
     2075, 2075, 2075, 2075, 2075, 2077, 2078, 2079, 2080, 2081,
     2082, 2083, 2084, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
     2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
     2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
     2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
     2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
     2075, 2075, 2085, 1946, 2086, 2087, 1946, 2088, 2089, 2090,
     2091, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,

     1946, 1946, 1946, 1946, 1946, 1105, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 2092, 2093, 2094, 2095,
     2096, 2097, 2098, 2099, 1946, 2100, 2101, 1946, 1946, 2102,
     2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2113, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
     2121, 2122, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,

     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2123, 2124, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 2125, 2126, 2127, 2128, 2129,
     2130, 2131, 2132, 2133, 1946, 2133, 2133, 2133, 2133, 2133,
     2133, 2133, 2134, 2135, 1946, 2136, 2137, 2138, 2139, 2140,
     2141, 2142, 2143, 2144, 2145, 2146, 2147, 2147, 2147, 2147,
     2147, 2147, 2147, 2147, 2147, 2148, 2149, 2150, 2150, 2150,
     2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150,
     2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150,

     2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150,
     2150, 2150, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157,
     2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 2150,
     2150, 2150, 2150, 2150, 2150, 2150, 2158, 2159, 2160, 2161,
     1946, 1946, 1946, 1946, 2162, 2163, 2164, 2165, 1946, 2166,
     1946, 1946, 2167, 2168, 2166, 2166, 2166, 2166, 2166, 2166,
     2166, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177,
     2178, 2179, 2180, 2181, 2181, 2181, 2181, 2181, 2181, 2181,
     2181, 1946, 2182, 2183, 2184, 2184, 2184, 2184, 2184, 2184,
     2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184,

     2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184,
     2184, 2184, 2184, 2184, 2184, 2185, 2186, 2187, 2188, 2184,
     2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184, 2189,
     2190, 2191, 2192, 1946, 2193, 2194, 2195, 2196, 2197, 2198,
     2199, 2200, 2201, 2202, 2203, 2203, 2203, 2203, 2203, 2203,
     2203, 2203, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210,
     2211, 2212, 2213, 2214, 2215, 2215, 2215, 2215, 2215, 2215,
     2215, 2216, 2217, 2217, 2217, 2217, 2217, 2217, 2217, 2217,
     2217, 2217, 2217, 2217, 2217, 2217, 2217, 2217, 2217, 2217,
     2217, 2217, 2217, 2217, 2217, 2217, 2217, 2217, 2218, 2219,

     2220, 2217, 2217, 2217, 2217, 2217, 2217, 2221, 2222, 2223,
     2224, 2225, 2226, 2227, 2228, 1946, 2229, 2230, 2231, 2232,
     2233, 2234, 2235, 2236, 2237, 2237, 2237, 2237, 2237, 2237,
     2237, 2237, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244,
     2245, 2246, 2247, 2248, 2249, 2249, 2249, 2249, 2249, 2249,
     2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250,
     2250, 2250, 2250, 2250, 2250, 2250, 2250, 2251, 2252, 2253,
     2254, 2250, 2250, 2250, 2250, 2250, 2255, 2256, 2257, 2258,
     1946, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267,
     2268, 2269, 2269, 2269, 2269, 2269, 2269, 2269, 2269, 2269,

     2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2277, 2277,
     1946, 1946, 2277, 2277, 2278, 2278, 2278, 2278, 2278, 2278,
     2278, 2278, 2278, 2278, 2278, 2278, 2279, 2280, 2281, 2278,
     2278, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290,
     2291, 2292, 2293, 2294, 2295, 2296, 2296, 2296, 2296, 2296,
     2296, 2296, 2296, 2296, 2297, 2298, 2299, 2300, 1946, 1946,
     2301, 1946, 2302, 2301, 2303, 2303, 2303, 2303, 2303, 2303,
     2303, 2303, 2303, 2303, 2304, 2303, 2305, 2306, 2307, 2308,
     2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2296, 2296,
     2296, 2296, 2296, 2296, 2296, 2296, 1946, 2317, 2318, 2319,

     2320, 1946, 2321, 2322, 1946, 1946, 2303, 2303, 2303, 2303,
     2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332,
     2316, 2296, 2296, 2296, 2296, 2296, 2296, 2296, 2333, 2317,
     2319, 2321, 1946, 1946, 1946, 1946, 2322, 2334, 2335, 2336,
     2337, 2337, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344,
     2345, 2346, 2347, 2348, 2349, 2349, 2349, 2349, 2349, 2349,
     2350, 1946, 1946, 2321, 2351, 2352, 2353, 2354, 2354, 2355,
     2356, 2357, 2358, 2354, 2359, 2360, 2360, 2360, 2361, 2362,
     2363, 2364, 2365, 2366, 2367, 2349, 2349, 2349, 1946, 1946,
     2349, 2349, 2321, 2321, 2368, 2351, 2369, 2370, 2321, 2371,

     2354, 2354, 2372, 2373, 2374, 2375, 2354, 1807, 2376, 2376,
     2377, 2378, 2364, 2365, 1946, 1946, 2349, 1946, 2379, 2349,
     2321, 2321, 2380, 2368, 2381, 2369, 1799, 1799, 2382, 2372,
     2383, 2374, 2376, 2384, 2377, 2385, 2378, 1946, 2386, 2379,
     1946, 1946, 2387, 2380, 2388, 2381, 2389, 2382, 2390, 2383,
     2391, 2384, 2385, 2386, 1946, 1946, 1946, 1946, 2379, 2392,
     2393, 2394, 2395, 2387, 2396, 2388, 2397, 2391, 1946, 1946,
     2386, 2398, 2399, 2400, 2379, 2379, 2401, 2392, 2402, 2393,
     2379, 2394, 2403, 2404, 2397, 2386, 2386, 2405, 2398, 2406,
     2399, 2386, 2400, 2379, 2379, 2407, 2401, 2408, 2402, 1881,

     1881, 2409, 2403, 2410, 2404, 2386, 2386, 2411, 2405, 2412,
     2406, 1892, 1892, 2413, 2407, 2414, 2408, 2415, 2409, 2410,
     2416, 2411, 2417, 2412, 2418, 2413, 1881, 2414, 2415, 2419,
     2416, 2386, 2417, 2420, 2421, 2422, 2420, 2423, 2421, 2414,
     2422, 2417, 2423, 2414, 2417,    0, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,

     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,

     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,

     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,

     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,

     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946
    } ;

static const flex_int16_t yy_nxt[8898] =
    {   0,
       10,   11,   12,   13,   13,   13,   11,   14,   15,   10,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   29,   29,   29,   29,   29,   29,
       29,   30,   31,   32,   33,   34,   35,   36,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   37,   16,   16,
       16,   16,   16,   16,   37,   16,   16,   16,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   16,   51,   16,   52,   53,   16,   54,   16,   16,
       55,   56,   57,   58,   59,   60,   16,   16,   61,   62,
       63,   64,   65,   66,   71,   71,   74,   74,   66,   81,

       82,   67,   74,   74,   83,   71,   71,   75,   86,   76,
       76,   76,   75,   75,   89,   76,   76,   76,   75,   77,
       85,   78,   78,  129,  130,   87,   84,   78,   95,   90,
       91,   78,   93,   96,   94,   94,   94,   94,   94,   94,
       94,   94,   94,  124,  148,  157,   97,  158,  280,  280,
      150,   72,   72,   72,   72,  151,  154,   80,   80,   80,
       80,   80,  222,  125,  175,  126,  127,   80,  149,  192,
      202,   80,  171,  184,  172,  185,  155,  194,  193,  173,
      176,  174,   80,   88,  195,  186,   80,   92,   98,  196,
       99,   99,   99,   99,   99,   99,   99,  100,  100,  378,

      197,   80,   80,   80,  152,  156,  198,  101,   80,  256,
      102,  221,  355,  103,  104,  105,  106,  107,  223, 1915,
       80,  215,  108,   80,  109,  107,  216,  224,  177,   78,
      110,  217,   80,  101,  303,  178,  102,  187,  257,  111,
      104,  179,  112,  360,  106,  188,  107,  189,  280,  280,
      190,  108,   80,  150,  109,  191,  107,   98,  151,  113,
      113,  113,  113,  113,  113,  113,  113,  113,   80,  199,
     1946,   80,  150,  200,  213,  201,  305,  151,   80,  102,
       80,  428,  114,  115,  116,  117,  118,  358,  281,  180,
      328,  119,  329,  181,  118,  328,  353,  329,  182,  120,

     1946,  106,  285,  183,   80,  102,   80,  152,  121,  115,
      286,  122,  325,  117,  328,  118,  329,   80,  208,  209,
      119,  214,  328,   80,  329,  118,  131,  210,  285,  211,
      132,  133,  356,  134,  212,  135,  136,   80,  137,  286,
      138,  159,  160,  161,  162,   80,  163,  164,  328,  165,
      329,  166,  139,  140,  141,  167,  168,  203,  204, 1917,
      381,   80,   80,  286,   80,  169,  218,   80,  205,  206,
      328,  207,  329,  219,  220,   80,  357,  142,  143,  351,
      144,  225,  145,   76,   76,   76,  225,  352,   80,  226,
      228,  229,  286,  354,   75,  228,   76,   76,   76,   75,

       75,   80,   76,   76,   76,   75,  359,  330,  146,  147,
       80,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      233,  234,  361,  382,  328,  233,  329,  235,  331,  328,
       80,  329,  235,  330,  277,  277,  277,  277,  277,  277,
      277,  236,  236,  236,  236,  236,  236,  236,  328, 1946,
      329, 1946,  282,  409,  282,  235,   80,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  393,  285, 1946,  328,
      332,  329, 1946,  237,  278,  286,   80, 1946,  235,  328,
      328,  329,  329,  235,  235,   80,   80,  235,  235, 1946,
       80, 1946,  380,  285,  379,  235,  619,  284, 1946,  235,

       80,  235,  238,  235,  286,  239,  241,  394, 1946,  383,
      242,  243,   80,  244,  306,  245,  246, 1946,  247,   98,
      248,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       80,  494,  249,  250,  251,   80,  395,  287, 1946,  288,
      289,  102,   80, 1919,  285,  307,  290,  298,  286,  299,
      300,  406,  286,  308,   80,   80,  429,  252,  253,  386,
      254,  279,   80,  291,  384,  385,  292,  102,  289,  106,
      285,  307,  387,  301,  286,  290,  302,  862,  300,  117,
      307,  286,  308,  396,  397,   80,   80, 1946,  308,  255,
      261,  261,  261,  261,  261,  261,  261,  261,  261,   80,

       80,  402,  320,  308,  321,  322,  307,  400,  414,  262,
      263,  264,   80,  307,  265,  266,   80,  308,  266,  466,
      293,  308,  294,  401,   80,  295,  296,  407,  323,  308,
      267,  324,   80,  322,  405,  262,  263,  264,  117,  307,
      265,  408,  266,  285,  297,  466,   80,  266,  430,   80,
      308,  286,  622,  266,  270,  270,  270,  270,  270,  270,
      270,  270,  270,   80,   80,  293,  403,  294,  398,  285,
      295,  296,   80,  271,  272,  273,  404,   80,  274,  275,
      286,  309,  275,  310,  311,   80,  415,  399,  285,  412,
      312,  516,  416,   80,  276,  296,  286,   80,  441,  271,

      272,  273,  413,  315,  274,  316,  275,  313,  317,  318,
      314,  275,  311,   80,  285,  422,  297,  275,  315,  312,
      316,   80,   80,  317,  318,  286,  307,  319,  410,   80,
      388,  389,   80,  290,  308,  150,  411,   80,  390,  417,
      423,  307,  391,  418,  427,  392,   80,   80,   80,  308,
       80,  419,  307,  431,  420,  421,   80,   80,  424,  436,
       80,  425,  290,  308,   80,  433,  434,  307,  437,  319,
      439,  438,  440,  442,   80,   80,  432,  426,  308,  336,
      336,  336,  336,  336,  336,   80,   80,  445,  225,  435,
       76,   76,   76,  225,  443,  446,  226,  822,  444,  228,

      229,  233,  234,  457,  228,  458,  233, 1920,  449,  449,
      449,  449,  449,  449,  449,  457,  457,  458,  458,  458,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  458,
      457,  457,  458,  458,  484,  540,  457,  338,  458,  318,
      339,  457,  460,  458,  457,  340,  458,  341,  450,  459,
      457,   80,  458,  342,  343,  457,  636,  458,  344, 1946,
      484,  345,  362,  457,  457,  458,  458,  571,  289,  290,
      328,  363,  329,  328,  470,  329,  471,  290,   80,  472,
      473,  300,  107,  364,  365,  366,  289,  367,  368,  228,
      229,  369,   80,  370,  228,  107,  285,  466,  290,  371,

      372,  373,  374,  375,  286,  107,  290,  308,  107,   80,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  447,
      229,  107,  285,  466,  447,  580,  448,  569,   80,   80,
      300,  107,  466,  286,  466,  312,  308,  466,  466,  602,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  466,   80,
      466,  312,   80,  466,  312,  466,  322,  118,  262,  263,
      264, 1922,  568,  265,  266,   80,   80,  266,  311,  488,
      570,  489,  548,  572,  490,  491,  517,  594,  518,  267,
      312,  519,  520,  118,  262,  263,  264,  285,  474,  265,

      475,  266,  484,  595,  474,  286,  266,  474,  467,  107,
      467,  549,  266,  468,  468,  468,  468,  468,  468,  468,
      468,  468,   80,  285,  474,   80,  475,  517,  484,  518,
       80,  474,  519,  520,  286,  107,  474,  521,  484,  492,
      484,  493,  474,  484,  484,  492,  576,  574,  492,  587,
      107,  521,  554,  469,  477,  477,  477,  477,  477,  477,
      477,  477,  477,   80,  484,  492,  484,  493,   80,  484,
      118,  484,  492,  478,  479,  480,  107,  492,  481,  482,
      616,  555,  482,  492,  118,   98,  573,  277,  277,  277,
      277,  277,  277,  277,  483,   80,  118,   80,  311,  478,

      479,  480,  575,   80,  481,   80,  482,  312,  577,  322,
      118,  482,  607,  485,   80,  485,  578,  482,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  278,  271,  272,
      273,  307,   80,  274,  275,   80,  312,  275,  585,  308,
      100,  100,  100,  100,  100,  100,  100,  100,  100,   80,
      579,  620,  692,  600,  271,  272,  273,  307,  487,  274,
      102,  275,   80,   80,   80,   80,  275,  586,  308,  511,
      591,  512,  275,  592,  513,  514,  593,  588,  692,  541,
      306,  542,  601,   80,  543,  544,  102,  495,  495,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  307,   80,

      290,  597,  118,  545,   80, 1946,  308,   80,   80,   80,
      496,  497,  498,  499,  500,  589,  590,  596,  604,  501,
      515,   80,  500,  581,  307,  603,  605,  502,  118,  290,
      582,  583,  584,   80,   80,  308,  503,  497,   80,  504,
      511,  499,  512,  500,   80,  513,  514,  606,  501,   80,
       80,  609,  611,  500,  505,  505,  505,  505,  505,  505,
      505,  505,  505,   80,  515,  608,   80,   80,  614,   80,
      610,  290,  617,  506,  615,  507,   80,  836,  508,  509,
       80,  535,  509,  536,  626,  618,  537,  538,  612,  613,
       80,  541,  623,  542,  510,  627,  543,  544,   80,  506,

      290,  507,   80,   80,  508,  539,  509,  621,  629,   80,
      663,  509,  312,  282,  118,  282,   80,  509,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  523,  632,  524,
      524,  524,  524,  524,  524,  524,  524,  524,   80,  645,
      118,  312,  545,  664,   80,  524,  524,  524,  524,  524,
      524,   80,  525,  526,  527,  528,  529,  535,   80,  536,
      624,  530,  537,  538,  531, 1924,   80,  625,  628,  532,
       80,  524,  524,  524,  524,  524,  524,   80,  533,  526,
       80,  534,   80,  528,  634,  529,  633,  630,  312,   80,
      530,  647,  640,  635,   80,  531,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  631,   80,  638,  539,  550,
      550,  550,  550,  550,  550,  639,   80,  312,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  550,  550,  550,
      550,  550,  550,   80,   80,  641,  306,   80,  800,  552,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  642,   80,   80,  644,   80,  552,  325,  336,
      336,  336,  336,  336,  336,  637,  643,  553,   80,  457,
      552,  458, 1946,  648,  556,   80,  552,  649,  550,  550,
      550,  550,  550,  550,   80,  553,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  553,  646,

       80,   80,   80,  652,  553,   80,  150,  557,  552,  558,
      550,  550,  550,  550,  550,  550,  552,  338,  657,   80,
      339,   80,  552,  650,  653,  340,  651,  341,  654,   80,
      656, 1926,   80,  342,  343,   80,  553,  655,  344,   80,
      552,  345,   80,   80,  553,  661,   80,   80,  658,  559,
      553,  659,  665,  660,  560,   80,   80,   80,  731,  561,
       80,  229,  662,  457,  667,  458,  666,  227,  553,  685,
      668, 1946,  669,  266,  670,  447,  229,  705, 1946,  739,
      447,  275,  448,  514,  731,  562,  235,  235,  235,  235,
      235,  235,  235,  449,  449,  449,  449,  449,  449,  449,

      468,  468,  468,  468,  468,  468,  468,  468,  468,  467,
     1928,  467, 1946,  766,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  107,  290,  290,  672,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  688,  742,  689,  712,
      740,  690,  691,  107,  520,   80,  262,  713,  264,  107,
      743,  265,  266,  290,  290,  266,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  712,  742,  684,  804,  107,
       80,  767,  262, 1929,  264,  538,  713,  265,  742,  266,
      692,  795,  692,  312,  266,  692,  692,  696,  118,  697,
      266,  744,  698,  699,  312,  769,  476,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  692,  742,  692,  118,
      692,  692,  312,  692,  118,  768,  478,  479,  480,  544,
       80,  481,  482,  312,  770,  482,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  118,  692,  483,   80,  798,
       80,  776,  478,  479,  480,   80,  700,  481,  701,  482,
      818,  802,  700,  797,  482,  700,  693,   80,  693,   80,
      482,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      777,  708,  700,  709,  701,  796,  710,  711,  824,  700,
       80, 1946,   80, 1946,  700,  895,  485,   80,  485,  801,
      700,  486,  486,  486,  486,  486,  486,  486,  486,  486,

      799,  695,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  277,  277,  277,  277,  277,  277,  277,  100,  100,
       80,  271,   80,  273,   80,   80,  274,  275,  821,  803,
      275,  499,  712,  805,   80,  712,   80,  528,  745,  720,
      713,  721,  704,  713,  722,  723,  746,  271,  811,  273,
      810,  494,  274,  826,  275,   80,   80,  828,  712,  275,
      499,  712,  712,  724,  745,  275,  495,  495,  745,  713,
      713,  714,  713,  715,  716,  746,  746,   80,  812,  816,
      717,  725,  713,  726,  727,   80,  829, 1931,  712,  496,
      497,  498,  499,  500,  745,  806,   80,  718,  501,  713,

      719,  500,  716,  817,   80,  746,  502,  728,  713,  717,
      729,  827,  727,   80,   80,  503,  497,  809,  504,  720,
      499,  721,  500,   80,  722,  723,  813,  501,  731,  736,
      731,  737,  500,  731,  731,  736,   80,  835,  736,   80,
      745,  732,  712,  733, 1057,  838,  734,  735,  746,   80,
      713,   80,  814,  815,  731,  736,  731,  737,  825,  731,
      823,  731,  736,  837,  731,  528,  745,  736,  712,  747,
      724,  748,  749,  736,   80,   80, 1946,  746,  750,  713,
      505,  505,  505,  505,  505,  505,  505,  505,  505,   80,
      731,   80,  834,  807,   80,  751,  839,  808,  752,  506,

      749,  507,   80,   80,  508,  509,  819,  750,  509,  761,
      746,  762,  763,   80,  820,  840,   80,   80,   80,  844,
      510,   80,   80, 1037,   80,  506,  841,  507,   80,  842,
      508,   80,  509, 1049,  847,  764,  746,  509,  765,  848,
      763,  843,  846,  509,  523,  845,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  550,  550,  550,  550,  550,
      550,   80,  524,  524,  524,  524,  524,  524,   80,  525,
      526,  527,  528,  529,   80,   80,  850,  849,  530,  907,
     1933,  531,   80,  474,   80,  552,  532,   80,  524,  524,
      524,  524,  524,  524,  851,  533,  526,  853,  534,  753,

      528,  754,  529,  852,  755,  756,  855,  530,  758,   80,
      758,  864,  531,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  745,  757,  854,   80,  753,   80,  754,   80,
      746,  755,  756,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,   80,  858,   80,  745,  745,
      856,   80,  863,  760,   80,   80,  859,  746,   80,  746,
      857,   80,   80,  552,  866,  876,   80,   80,   80,  552,
       80,  861,  860,   80,   80,  745,   80,  757,  550,  550,
      550,  550,  550,  550,  865,  873,  746,  867,  868,  869,
      872,  553, 1946,   80,  870,  871,  880,  553,  550,  550,

      550,  550,  550,  550,   80,   80,  875,   80,  552,  550,
      550,  550,  550,  550,  550,  782,  877,  550,  550,  550,
      550,  550,  550,  874, 1018,   80,   80,  882,  552,  550,
      550,  550,  550,  550,  550,  883,  553,   80,  995,  552,
      550,  550,  550,  550,  550,  550,   80,  552,   80,   80,
       80,   80,   80,  878,  879,  783,  553,   80,  884,  552,
       80,  889,  888,  885,   80,   80,  881,  553,  886,  887,
      552,  784,  229,  466,  894,  553,   80,  466,  896,  891,
      890,  912,  713,  786,  500,  482,  892,  553,  235,  235,
      235,  235,  235,  235,  235,  785,  787,  921,  553,  466,

      893,  492,  915,  466,  916,  716,  788,  917,  918,   80,
      500,  713,  929,  266,  717,  484,  723,  266, 1014,  484,
      789,  717,  790,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  484,  262,  717,  264,  484,  712,  265,  266,  717,
      717,  266,  727,  500,  713,  275,  500,  935,  951,  275,
       80,  509,  756,  684,   80,   80,  716, 1946,  262, 1003,
      264,   80,  712,  265, 1019,  266, 1004,  994,  717,  500,
      266,  727,  500,  713,  495,  495,  266,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  477,  477,  477,  477,

      477,  477,  477,  477,  477,  712,  478,  531,  480,   80,
       80,  481,  482,  713,  924,  482,  925,   80,  742,  926,
      927, 1007,   80,  938,  730,  939,   80,  911,  940,  941,
      999,  712,  478,  531,  480, 1000,  702,  481,  928,  482,
      998,  996,  713, 1946,  482,  717,  693,  742,  693,  746,
      482,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  742,
      924,   80,  925,   80,  717,  926,  927,  749,  746,  271,
      742,  273,  743, 1065,  274,  275,  750,  750,  275,  750,
      930,   80,  931,  945, 1001,  932,  933,  930,  742,  931,

      704,  717,  932,  933, 1002,  271,  749,  273,   80,  742,
      274,   80,  275,  500,  934,  750,  750,  275,  750,  531,
      500,  928,   80,  275,  997,   80,   80,   80, 1095, 1005,
      717,  946,  700,  947, 1069,  745,  948,  949,   80,  500,
     1006, 1008, 1011,  746,  763,  531,  500, 1009,  934,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  942,   80,
      942,  745,  750,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  746,  946,   80,  947,  745, 1010,  948,  949,
      763,  531,  950,   80,  746,   80,   80,   80,   80,  738,
     1015,  750,   80, 1012,   80,   80,   80,  950, 1016, 1017,

     1025,   80,  745,  944,  750, 1013,   80,  531,   80, 1021,
     1022, 1020, 1042,  746,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  957, 1036,  958,   80,   80,  959,  960,
     1072, 1024, 1296,  750,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  957, 1040,  958,  531,  961,  959,  960,
       80,   80,   80,  953,   80,  954,   80, 1034,  955,  953,
     1023,   80,  953, 1038,   80, 1039,  531,   80,   80,   80,
     1035,   80,  531, 1041,  956,   80, 1043, 1045, 1046,  953,
       80,  954, 1044,   80,  955, 1054,  953, 1047, 1048, 1946,
     1050,  953,  531,  758,  961,  758, 1062,  953,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  970,  970,  970,
      970,  970,  970,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,   80,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550, 1051,   80,
     1053,   80,   80,  552, 1052,   80, 1055,   80, 1056,  552,
      550,  550,  550,  550,  550,  550,  552,   80,   80,   80,
     1058,   80,  552,   80,   80,  972, 1059, 1064, 1060,   80,
     1061,  553, 1070, 1071,   80, 1063, 1066,  553, 1068,   80,
      552,   80,   80,   80,  553,   80, 1067, 1077, 1073,   80,
      553, 1074,  981,   80,   80, 1075,  984, 1946,  982,  983,

      550,  550,  550,  550,  550,  550, 1076, 1078,  553,   80,
      550,  550,  550,  550,  550,  550, 1082,  466, 1079,  692,
      692,  985,   80,  550,  550,  550,  550,  550,  550,   80,
      552, 1946,   80,  550,  550,  550,  550,  550,  550, 1081,
      552, 1153,   80,  466, 1099,  692,  692, 1080,  927,  717,
      717, 1100,   80,  552,  500,  933,  500,  266,  553,  482,
      482,  484,  731,  552,   80, 1158, 1160,  986,  553,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  717,  717,
      500,  553,  500,  750,  731, 1108, 1193,  484,  731,  987,
      988,  553,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  275,  509, 1102, 1107,  750, 1177,  736,  949,  905,
      731, 1108,  750,  989,  910,  910,  910,  910,  910,  910,
      910,  910,  910, 1116,  509,   80,  531,  960, 1130,  531,
       80,   80,  919,  478,  750,  480, 1154, 1152,  481,  482,
     1171,   80,  482,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  531,   80,  911,  531,   80, 1131,   80,  478,
     1155,  480, 1156, 1150,  481, 1157,  482,   80, 1937,   80,
     1159,  482, 1167, 1166, 1161,   80, 1151,  482, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105,  952,  952,  952,
      952,  952,  952,  952,  952,  952,   80,  953, 1163,  954,

       80,   80,  955,  953,   80,   80,  953,   80, 1109, 1162,
     1110,   80,   80, 1111, 1112, 1169,   80,   80, 1106, 1195,
     1168,   80, 1164,  953, 1175,  954, 1179,  956,  955, 1165,
      953, 1108,   80, 1173,   80,  953,   80,  942,   80,  942,
     1170,  953,  943,  943,  943,  943,  943,  943,  943,  943,
      943, 1176, 1113, 1178, 1114, 1172, 1183, 1108, 1113, 1174,
       80, 1113,  970,  970,  970,  970,  970,  970,   80, 1125,
     1125, 1125, 1125, 1125, 1125,   80,   80, 1180, 1113,   80,
     1114, 1181,   80, 1184,   80, 1113, 1127,   80,   80, 1194,
     1113, 1196,   80, 1182,   80, 1214, 1113, 1198, 1199,  550,

      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,   80, 1197,   80,
      972,  550,  550,  550,  550,  550,  550, 1128, 1129,  552,
       80,   80, 1202,   80,   80,  552, 1205, 1206,   80, 1201,
     1200,  552,   80,  550,  550,  550,  550,  550,  550,   80,
       80,  552, 1203,   80,   80, 1207, 1278,  553, 1229, 1211,
     1212, 1204,  953,  553,   80, 1208, 1140, 1213,   80,  553,
     1209,   80, 1141,  552,   80, 1210,   80, 1216,   80,  553,
      550,  550,  550,  550,  550,  550,   80, 1219, 1143, 1215,
       80, 1220, 1142, 1253,  550,  550,  550,  550,  550,  550,

     1218,  553,  550,  550,  550,  550,  550,  550,   80,   80,
      552,  550,  550,  550,  550,  550,  550,   80,   80,   80,
       80, 1284, 1254, 1144,  552,  692, 1939,  731,   80, 1279,
     1222, 1217,  552, 1221,   80, 1281,   80,   80,  553, 1287,
     1223,  552,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  692,  553,  731, 1295, 1280,   80, 1232, 1288, 1233,
      553, 1145, 1234, 1235,   80,  482,   80,  509, 1282,  553,
     1146, 1286, 1283, 1285,   80, 1941,   80, 1289, 1148, 1290,
     1147, 1293, 1093, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105,  952,  952,  952,  952,  952,  952,  952,  952,

      952,   80,  953,   80,  954,   80,   80,  955,  953, 1312,
     1294,  953, 1125, 1125, 1125, 1125, 1125, 1125,   80, 1291,
       80,   80, 1292, 1106, 1297,   80, 1946,   80,  953, 1127,
      954, 1298, 1115,  955, 1299,  953,   80, 1311,   80, 1300,
      953, 1304, 1301, 1322,   80,   80,  953, 1125, 1125, 1125,
     1125, 1125, 1125,   80, 1305,  550,  550,  550,  550,  550,
      550,   80, 1306,   80, 1127,  550,  550,  550,  550,  550,
      550, 1129, 1321,  550,  550,  550,  550,  550,  550,   80,
       80, 1943, 1307, 1946, 1330,  552,  550,  550,  550,  550,
      550,  550,   80, 1308,   80,  552,  550,  550,  550,  550,

      550,  550, 1309,  552,   80, 1128, 1129, 1243, 1243, 1243,
     1243, 1243, 1243,  553,   80,   80,  552, 1313,   80,   80,
       80,   80, 1310,  553, 1323, 1331,  552, 1302,   80, 1334,
     1268,  553, 1336, 1303, 1327, 1324, 1267,  550,  550,  550,
      550,  550,  550, 1269,  553, 1944, 1325, 1270,  550,  550,
      550,  550,  550,  550,  553,  550,  550,  550,  550,  550,
      550, 1271,   80,   80,   80, 1245,   80,  552, 1246,   80,
       80,   80,   80, 1247,   80, 1248, 1108, 1108,  552, 1388,
     1326, 1249, 1250, 1335, 1328,  552, 1251, 1332,   80, 1252,
     1329,   80, 1333,   80, 1398,  553,  550,  550,  550,  550,

      550,  550, 1108, 1108, 1342,   80,  553, 1353, 1113,   80,
     1392,   80, 1411,  553, 1273, 1389,  953,  953, 1390, 1272,
     1349, 1349, 1349, 1349, 1349, 1349,  552, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1354, 1274,   80, 1401,
       80, 1395, 1396, 1393, 1349, 1349, 1349, 1349, 1349, 1349,
     1351,   80, 1946,   80,  553, 1349, 1349, 1349, 1349, 1349,
     1349, 1391, 1275, 1399,   80,   80, 1394, 1228, 1243, 1243,
     1243, 1243, 1243, 1243, 1351,   80,   80, 1945, 1352, 1349,
     1349, 1349, 1349, 1349, 1349, 1351,   80,   80, 1400, 1397,
     1404, 1355, 1403, 1349, 1349, 1349, 1349, 1349, 1349,   80,

     1406, 1407, 1352, 1349, 1349, 1349, 1349, 1349, 1349, 1351,
       80, 1414, 1405, 1352, 1349, 1349, 1349, 1349, 1349, 1349,
       80,   80, 1356, 1351, 1408,   80, 1245, 1402, 1409, 1246,
     1439,   80, 1573, 1351, 1247,   80, 1248, 1352,   80,   80,
       80,   80, 1249, 1250, 1351,   80,   80, 1251, 1410, 1412,
     1252, 1352, 1425,   80,   80, 1359, 1357, 1413, 1420, 1440,
       80, 1352,   80, 1421,   80, 1385, 1358, 1386, 1415, 1422,
     1387, 1506, 1352, 1349, 1349, 1349, 1349, 1349, 1349, 1423,
       80, 1360,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,

       80,   80, 1426, 1351,  550,  550,  550,  550,  550,  550,
     1108,   80,  552,   80,   80, 1429, 1475,   80,  552, 1473,
       80, 1474,   80,   80,  552,  550,  550,  550,  550,  550,
      550, 1352, 1427,   80,  552, 1424, 1108, 1428,   80, 1564,
      553, 1479, 1478, 1946, 1476,   80,  553, 1498, 1361,   80,
      953, 1375,  553,   80,   80,  552,   80,   80,   80,   80,
     1485, 1477,  553,   80, 1374,  550,  550,  550,  550,  550,
      550,   80, 1480, 1376,  550,  550,  550,  550,  550,  550,
     1481, 1482, 1486,  553,   80, 1505, 1377, 1503, 1378, 1382,
     1382, 1382, 1382, 1382, 1382,  552,  550,  550,  550,  550,

      550,  550, 1483, 1487,  552, 1484, 1127, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,  552,
       80,   80,   80,  553, 1488, 1489,  552,   80,   80,   80,
     1492,   80,  553,   80, 1495,   80,   80, 1351, 1490,   80,
     1491,   80, 1496, 1351, 1379, 1502,   80,  553, 1129, 1497,
     1559, 1493, 1494, 1554,  553, 1552, 1380, 1349, 1349, 1349,
     1349, 1349, 1349, 1381, 1349, 1349, 1349, 1349, 1349, 1349,
       80, 1352, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1555,   80,   80, 1351, 1349, 1349,
     1349, 1349, 1349, 1349, 1351, 1349, 1349, 1349, 1349, 1349,

     1349, 1507, 1351, 1556, 1551,   80, 1582, 1557, 1351, 1382,
     1382, 1382, 1382, 1382, 1382, 1352, 1504,   80, 1351,   80,
       80,   80, 1352, 1558, 1553, 1351, 1127, 1946,   80,   80,
     1352, 1622, 1563, 1445,   80, 1583, 1352, 1560,   80,  552,
       80, 1446,   80, 1946,   80, 1447, 1352, 1349, 1349, 1349,
     1349, 1349, 1349, 1352, 1449,  550,  550,  550,  550,  550,
      550,   80, 1561,   80, 1448, 1566, 1565, 1450, 1129, 1562,
       80,   80, 1451, 1567, 1743,   80, 1575, 1351,  550,  550,
      550,  550,  550,  550, 1572,  552,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,

      550,  550,  550,  550,   80, 1352,   80,   80,  552,   80,
       80,   80, 1616,  553, 1617, 1574,  552,   80, 1576, 1615,
     1618,   80,  552,   80, 1619, 1630, 1620, 1452,  552, 1453,
       80,   80,   80, 1621, 1465, 1633,  553, 1623,  550,  550,
      550,  550,  550,  550,  553,   80,   80,   80, 1624, 1625,
      553,   80, 1665, 1946, 1626,   80,  553, 1672, 1671, 1466,
       80,   80, 1467,   80, 1634, 1946, 1673, 1468,  552,  550,
      550,  550,  550,  550,  550, 1631, 1666, 1469,  550,  550,
      550,  550,  550,  550, 1514, 1514, 1514, 1514, 1514, 1514,
     1349, 1349, 1349, 1349, 1349, 1349,  553, 1911,   80,  552,

     1349, 1349, 1349, 1349, 1349, 1349,   80, 1741,  552,   80,
       80, 1946,   80, 1275, 1349, 1349, 1349, 1349, 1349, 1349,
     1351, 1662, 1662, 1662, 1662, 1662, 1662,  553, 1663, 1667,
     1351,   80, 1668, 1669, 1470, 1670,  553,   80,   80, 1909,
     1674,   80, 1516,   80, 1351, 1705,   80,   80, 1352,   80,
       80, 1705, 1777, 1471, 1676, 1709, 1809, 1833, 1352, 1349,
     1349, 1349, 1349, 1349, 1349, 1710, 1707, 1946, 1708, 1525,
     1742, 1905, 1352, 1349, 1349, 1349, 1349, 1349, 1349, 1526,
     1349, 1349, 1349, 1349, 1349, 1349,  522, 1527,  522, 1351,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,

     1349, 1349, 1706, 1351, 1349, 1349, 1349, 1349, 1349, 1349,
     1351, 1702, 1702, 1702, 1702, 1702, 1702, 1352, 1703,   80,
     1351,   80,  346, 1528,  346, 1903, 1351,   80,  348, 1946,
      348, 1352, 1946, 1899, 1351, 1733, 1946,  451, 1352,  451,
     1897, 1733, 1776, 1778, 1529, 1705, 1733, 1530, 1352, 1893,
     1810, 1705, 1733, 1891, 1352,  550,  550,  550,  550,  550,
      550, 1889, 1352, 1532,  453,  455,  453,  455, 1946, 1531,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550, 1885, 1946, 1533,  552,  550,  550,  550,  550,
      550,  550, 1734,  550,  550,  550,  550,  550,  550,  462,

      552,  462, 1706, 1734, 1946, 1882,  552, 1514, 1514, 1514,
     1514, 1514, 1514,  553, 1880, 1878,  552,  550,  550,  550,
      550,  550,  550,  552, 1946, 1946, 1705, 1841,  553,  464,
     1275,  464, 1705, 1841,  553, 1868, 1946, 1545, 1662, 1662,
     1662, 1662, 1662, 1662,  553, 1663,  563,  552,  563, 1946,
     1946,  553,  550,  550,  550,  550,  550,  550, 1546, 1548,
      565, 1733,  565, 1866,  673, 1516,  673, 1733, 1547, 1125,
     1125, 1125, 1125, 1125, 1125,  553, 1349, 1349, 1349, 1349,
     1349, 1349,  552, 1706, 1842,  675, 1127,  675, 1549, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,

     1349,  679,  681,  679,  681,  771, 1351,  771, 1946, 1864,
      553, 1349, 1349, 1349, 1349, 1349, 1349, 1550, 1734, 1351,
     1855,  773,  778,  773,  778, 1351, 1855, 1581, 1129,  780,
      791,  780,  791, 1946, 1352, 1349, 1349, 1349, 1349, 1349,
     1349, 1351,  793, 1592,  793, 1853,  830, 1352,  830, 1946,
      832, 1841,  832, 1352, 1852,   80, 1593, 1841, 1349, 1349,
     1349, 1349, 1349, 1349,  897, 1351,  897, 1946, 1850, 1352,
     1349, 1349, 1349, 1349, 1349, 1349, 1594, 1856, 1595, 1349,
     1349, 1349, 1349, 1349, 1349,  899, 1946,  899, 1351,  901,
      903,  901,  903, 1352, 1349, 1349, 1349, 1349, 1349, 1349,

     1351,  550,  550,  550,  550,  550,  550, 1705, 1842, 1351,
      962, 1848,  962, 1705, 1946, 1596, 1352,  550,  550,  550,
      550,  550,  550,  964, 1351,  964, 1855, 1733, 1352, 1846,
     1841,  552, 1855, 1733, 1946, 1844, 1841, 1352, 1946, 1597,
      550,  550,  550,  550,  550,  550, 1598,  552, 1855,  966,
     1946,  966, 1352,  968, 1855,  968,  973, 1599,  973,  553,
     1837, 1600, 1855,  975, 1706,  975, 1835, 1608, 1855,  977,
      552,  977,  979,   80,  979,  553, 1611, 1611, 1611, 1611,
     1611, 1611, 1832, 1856, 1734, 1830, 1609, 1842, 1149, 1612,
     1149, 1826,  990, 1127,  990,  992, 1946,  992,  553,  550,

      550,  550,  550,  550,  550, 1856,  552,  550,  550,  550,
      550,  550,  550, 1125, 1125, 1125, 1125, 1125, 1125, 1856,
     1610, 1349, 1349, 1349, 1349, 1349, 1349, 1824, 1814,  552,
     1127, 1026, 1813, 1026,  553, 1129,   80,  552, 1349, 1349,
     1349, 1349, 1349, 1349, 1806, 1702, 1702, 1702, 1702, 1702,
     1702, 1351, 1703, 1028, 1030, 1028, 1030,  553, 1032, 1224,
     1032, 1224, 1085, 1613, 1085,  553, 1804, 1087, 1351, 1087,
     1800, 1581, 1129, 1225, 1614, 1225, 1089, 1798, 1089, 1352,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349,   79, 1117,   79, 1117, 1352, 1119, 1121, 1119,

     1121, 1796, 1646, 1647, 1349, 1349, 1349, 1349, 1349, 1349,
     1351, 1123, 1132, 1123, 1132, 1134, 1351, 1134, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1136, 1138, 1136, 1138, 1351, 1185, 1785, 1185, 1352, 1187,
     1189, 1187, 1189, 1191, 1352, 1191, 1784, 1649, 1351, 1236,
     1648, 1236, 1781, 1780, 1351, 1349, 1349, 1349, 1349, 1349,
     1349, 1775, 1352, 1349, 1349, 1349, 1349, 1349, 1349, 1650,
     1735, 1735, 1735, 1735, 1735, 1735, 1352, 1663, 1238, 1348,
     1238, 1348, 1352, 1773, 1736, 1351, 1240,  334, 1240,  334,
     1652, 1771, 1946, 1351, 1659, 1659, 1659, 1659, 1659, 1659,

     1651,  550,  550,  550,  550,  550,  550, 1660, 1256, 1946,
     1256, 1127, 1761, 1352, 1946, 1258, 1946, 1258, 1946, 1754,
     1260, 1352, 1260, 1262,  552, 1262, 1373, 1752, 1373, 1654,
     1264,  552, 1264,  337, 1276,  337, 1276, 1653,  550,  550,
      550,  550,  550,  550, 1611, 1611, 1611, 1611, 1611, 1611,
     1750, 1946,  553, 1129, 1314, 1946, 1314, 1612, 1749,  553,
     1946, 1127,  550,  550,  550,  550,  550,  550,  552, 1747,
     1316, 1275, 1316, 1745,  552, 1946, 1419,   80, 1419, 1946,
     1731,  550,  550,  550,  550,  550,  550, 1318,  376, 1318,
      376, 1337,  552, 1337, 1946, 1730,  553, 1946, 1946, 1339,

     1435, 1339, 1435, 1129, 1345, 1661, 1345,  546, 1362,  546,
     1362,  552, 1349, 1349, 1349, 1349, 1349, 1349, 1721, 1718,
      553, 1946, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1364, 1664, 1364, 1716, 1714,  553,
     1946, 1366, 1351, 1366, 1368, 1712, 1368, 1275, 1462, 1370,
     1462, 1370, 1351,  551, 1383,  551, 1383,   80, 1351, 1349,
     1349, 1349, 1349, 1349, 1349, 1499, 1416, 1499, 1416,   80,
     1352, 1349, 1349, 1349, 1349, 1349, 1349,  598,   80,  598,
     1352, 1430, 1432, 1430, 1432, 1690, 1352,   80, 1436, 1351,
     1436, 1441,   80, 1441, 1689, 1349, 1349, 1349, 1349, 1349,

     1349, 1351, 1443, 1454, 1443, 1454,   80, 1691, 1349, 1349,
     1349, 1349, 1349, 1349, 1456,   80, 1456, 1352, 1349, 1349,
     1349, 1349, 1349, 1349, 1458, 1351, 1458,   80, 1460, 1352,
     1460, 1463, 1701, 1463, 1693,  992, 1699,  992, 1351, 1687,
     1686, 1692, 1697, 1697, 1697, 1697, 1697, 1697, 1351, 1500,
     1087, 1500, 1087, 1352,   79, 1510,   79, 1510, 1684, 1127,
     1818, 1818, 1818, 1818, 1818, 1818, 1352, 1819, 1512, 1517,
     1512, 1517, 1351, 1519, 1694, 1519, 1352, 1682, 1659, 1659,
     1659, 1659, 1659, 1659, 1521, 1696, 1521, 1523, 1680, 1523,
     1695, 1660, 1534, 1678, 1534, 1127, 1536, 1604, 1536, 1604,

     1352, 1129,  550,  550,  550,  550,  550,  550,  552,  550,
      550,  550,  550,  550,  550, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1538,  971, 1538,
      971, 1541,  552, 1541, 1543,   80, 1543, 1129, 1568,  552,
     1568, 1570, 1577, 1570, 1577, 1351,  334, 1584,  334, 1584,
     1675, 1351, 1349, 1349, 1349, 1349, 1349, 1349,   80,   80,
      553, 1349, 1349, 1349, 1349, 1349, 1349,  553, 1275, 1586,
     1588, 1586, 1588, 1352, 1658, 1590, 1275, 1590, 1655, 1352,
     1655, 1657, 1351, 1349, 1349, 1349, 1349, 1349, 1349, 1645,
     1601, 1351, 1601, 1644, 1722, 1349, 1349, 1349, 1349, 1349,

     1349, 1642, 1723, 1349, 1349, 1349, 1349, 1349, 1349, 1126,
     1352, 1126, 1605, 1351, 1605,  337, 1627,  337, 1627, 1352,
      376,  546,  376,  546, 1635, 1351, 1635, 1637, 1724, 1637,
     1639, 1640, 1639, 1351, 1638, 1641, 1725, 1641, 1688, 1636,
     1688, 1352, 1349, 1349, 1349, 1349, 1349, 1349, 1643, 1244,
     1643, 1244, 1632, 1352, 1697, 1697, 1697, 1697, 1697, 1697,
       80, 1352, 1726, 1656,  551, 1656,  551,  598, 1727,  598,
     1654, 1127, 1351, 1349, 1349, 1349, 1349, 1349, 1349, 1677,
     1679, 1677, 1679,   80, 1351, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1681,   80, 1681,

     1352, 1629, 1683, 1351, 1683, 1762, 1762, 1762, 1762, 1762,
     1762, 1628, 1703, 1129, 1719, 1351, 1719, 1728, 1704, 1763,
     1685, 1351, 1685, 1704, 1349, 1349, 1349, 1349, 1349, 1349,
       80, 1352, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1350,
     1698, 1350, 1698, 1352,   80, 1700, 1704, 1700, 1654, 1352,
       80, 1711, 1755, 1711, 1351, 1349, 1349, 1349, 1349, 1349,
     1349, 1713,   80, 1713, 1738, 1715, 1717, 1715, 1717, 1704,
     1744,   80, 1744, 1756, 1704, 1704, 1607, 1606, 1704, 1704,
     1603, 1746, 1352, 1746, 1602, 1351, 1704, 1782, 1591, 1782,
     1704, 1589, 1704, 1739, 1704, 1587, 1740, 1349, 1349, 1349,

     1349, 1349, 1349, 1748, 1585, 1748, 1757, 1349, 1349, 1349,
     1349, 1349, 1349, 1352, 1579, 1735, 1735, 1735, 1735, 1735,
     1735, 1758, 1663, 1578, 1515, 1705, 1515, 1351, 1751, 1736,
     1751, 1705, 1753, 1126, 1753, 1126, 1770, 1351, 1770, 1125,
     1125, 1125, 1125, 1125, 1125, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1772,   80, 1772, 1352, 1127, 1762, 1762, 1762,
     1762, 1762, 1762, 1571, 1703, 1352, 1569, 1774, 1759, 1774,
       80, 1763, 1760, 1732, 1811, 1779, 1811, 1779, 1732, 1580,
       80, 1580, 1706,   80, 1783, 1769, 1783, 1764, 1764, 1764,
     1764, 1764, 1764, 1764, 1244, 1797, 1244, 1797, 1129,   80,

       80, 1732, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1799, 1803, 1799, 1803, 1805, 1765,
     1805, 1867,   80, 1867, 1732, 1883, 1934, 1883, 1934, 1732,
     1732,   80, 1351, 1732, 1732, 1935,   80, 1935, 1351,   80,
       80, 1732, 1544, 1542, 1540, 1732, 1539, 1732, 1766, 1732,
     1537, 1767, 1349, 1349, 1349, 1349, 1349, 1349, 1535, 1524,
     1352, 1522, 1520, 1518, 1513, 1511, 1352, 1113, 1786, 1509,
     1789, 1789, 1789, 1789, 1789, 1789, 1508, 1787,   80,   80,
       80,   80, 1351, 1790, 1501,   80,   80, 1127, 1349, 1349,
     1349, 1349, 1349, 1349, 1125, 1125, 1125, 1125, 1125, 1125,

     1351, 1349, 1349, 1349, 1349, 1349, 1349,   80,   80,   80,
     1352, 1127,   80, 1733, 1472, 1464, 1461, 1459, 1351, 1733,
     1838, 1838, 1838, 1838, 1838, 1838, 1457, 1839, 1352, 1129,
     1455, 1351, 1788, 1793, 1793, 1793, 1793, 1793, 1793, 1793,
     1444, 1705, 1442, 1438, 1437, 1113, 1352, 1705, 1113, 1434,
     1433, 1431, 1791, 1129, 1705,   80,   80,   80,   80, 1352,
     1705, 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1792,   80,
     1734,   80, 1418, 1794, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1417,   80, 1815, 1815, 1815, 1815, 1815, 1815, 1349,
     1349, 1349, 1349, 1349, 1349,   80, 1816,   80, 1706,   80,

     1127, 1802, 1818, 1818, 1818, 1818, 1818, 1818,   80, 1819,
       80, 1706, 1705, 1351,   80, 1384, 1372, 1371, 1705, 1351,
     1369, 1367, 1365, 1363, 1349, 1349, 1349, 1349, 1349, 1349,
     1347, 1346, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807,
     1807, 1352, 1129, 1113, 1344, 1343, 1341, 1352, 1807, 1807,
     1807, 1807, 1807, 1807, 1351,  736,  700, 1340, 1338, 1654,
     1349, 1349, 1349, 1349, 1349, 1349,   80,   80,   80, 1706,
       80,   80, 1808,   80, 1807, 1807, 1807, 1807, 1807, 1807,
       80,   80, 1352, 1789, 1789, 1789, 1789, 1789, 1789,   80,
     1351, 1817,   80,   80,   80,   80, 1790,   80,   80, 1320,

     1127, 1349, 1349, 1349, 1349, 1349, 1349, 1319, 1317, 1315,
       80,   80, 1277, 1351, 1733, 1266, 1265, 1263, 1352, 1261,
     1733, 1259, 1257, 1733, 1255, 1242, 1241, 1239, 1237, 1733,
      960, 1351,  953, 1820, 1821, 1821, 1821, 1821, 1821, 1821,
     1821, 1231, 1129, 1793, 1793, 1793, 1793, 1793, 1793, 1793,
     1230,  949, 1228, 1815, 1815, 1815, 1815, 1815, 1815, 1352,
      736,  736, 1227,  933,  927,  492, 1816, 1654,  700, 1705,
     1127, 1734,  700, 1226, 1822, 1705,  474, 1084,   80,   80,
     1734, 1733,   80, 1351,   80,   80,   80, 1733,   80, 1801,
     1801, 1801, 1801, 1801, 1801, 1801,   80,   80,   80,   80,

       80, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1733,   80, 1129,   80,   80,   80, 1733, 1827, 1827, 1827,
     1827, 1827, 1827,   80,   80, 1192, 1706, 1190, 1188, 1186,
     1821, 1821, 1821, 1821, 1821, 1821, 1821,   80, 1734, 1139,
     1137, 1828, 1135, 1827, 1827, 1827, 1827, 1827, 1827, 1705,
     1133, 1124, 1122, 1120, 1118, 1705,  960,  960, 1115,  756,
      949, 1349, 1349, 1349, 1349, 1349, 1349, 1734,  949, 1807,
     1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1349, 1349,
     1349, 1349, 1349, 1349,  945, 1807, 1807, 1807, 1807, 1807,
     1807, 1351, 1838, 1838, 1838, 1838, 1838, 1838,  736, 1839,

     1125, 1125, 1125, 1125, 1125, 1125, 1706, 1104, 1351, 1808,
     1103, 1807, 1807, 1807, 1807, 1807, 1807, 1127, 1101, 1352,
      933, 1857, 1857, 1857, 1857, 1857, 1857, 1654, 1819,  933,
      723,  927,  927,  492,  492, 1858, 1352, 1125, 1125, 1125,
     1125, 1125, 1125, 1098,  700, 1654, 1840, 1097, 1096, 1094,
     1093, 1840,  474,  474, 1127, 1092, 1091, 1090, 1088, 1129,
     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1086, 1869, 1869,
     1869, 1869, 1869, 1869, 1840, 1839, 1857, 1857, 1857, 1857,
     1857, 1857, 1870, 1819, 1869, 1869, 1869, 1869, 1869, 1869,
     1858, 1839, 1860, 1084,   80,   80, 1129, 1840, 1870,   80,

       80,   80, 1840, 1840,   80,   80, 1840, 1840,   80,   80,
       80, 1841,   80,   80, 1840,   80,   80, 1841, 1840,   80,
     1840, 1861, 1840, 1033, 1862, 1854, 1031, 1029, 1027,   80,
     1854, 1875, 1875, 1875, 1875, 1875, 1875, 1875,  993, 1871,
     1871, 1871, 1871, 1871, 1871, 1871,  991,  980,  978,  976,
      974,  969,  967, 1854,  965,  963,  544,  538,  766,  756,
      756,  520,  514,  509,  937,  936,  723,  723, 1842,  492,
      923, 1872,  922,  920,  919,  482, 1854,  914,  913,  474,
      909, 1854, 1854,  908, 1841, 1854, 1854,  906,  905,  904,
     1841,  902, 1855, 1854,  678,  678,  900, 1854, 1855, 1854,

     1873, 1854,  898, 1874, 1875, 1875, 1875, 1875, 1875, 1875,
     1875,   80, 1886, 1886, 1886, 1886, 1886, 1886, 1886,   80,
       80,   80,   80,   80,   80,   80,   80,   80,  833,  831,
      599,  794,  792, 1841,  781,  779,  775,  774,  772, 1841,
      547, 1842, 1855,  544, 1876,  544,  318,  538, 1855, 1856,
      538,  520, 1887, 1894, 1894, 1894, 1894, 1894, 1894, 1894,
      520,  296, 1906, 1906, 1906, 1906, 1906, 1906, 1906,  514,
      514,  738,  730,  275,  707,  706,  702,  266,  687,  686,
      682,  680,  458, 1855,  458,  678,  676,  674,   80, 1855,
     1842,   80,   80, 1895, 1841,  599,  567,  566,  564, 1856,

     1841,  547, 1907, 1886, 1886, 1886, 1886, 1886, 1886, 1886,
      330,  329,  318,  318, 1900, 1900, 1900, 1900, 1900, 1900,
     1900, 1900, 1900, 1841,  303,  296,  296,  269,  476, 1841,
     1900, 1900, 1900, 1900, 1900, 1900,  465,  463,  461,  458,
     1856,  457,  456, 1894, 1894, 1894, 1894, 1894, 1894, 1894,
      454, 1842,  452,  229, 1901,   80, 1900, 1900, 1900, 1900,
     1900, 1900, 1855,   80,  377,  350,  349,  347, 1855,  330,
      335,  333,  330,  328,  327,  326,  269,  260,  259,   78,
     1842,  258, 1912, 1912, 1912, 1912, 1912, 1912, 1912, 1912,
     1912, 1855,   78,   80,  231,  170,  153, 1855, 1912, 1912,

     1912, 1912, 1912, 1912,  128,  123,   80, 1946,   69,   69,
     1946, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1946, 1856,
     1946, 1946, 1913, 1946, 1912, 1912, 1912, 1912, 1912, 1912,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1856, 1840,
     1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1840, 1840, 1840, 1840, 1840,
     1840, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1840,
     1946, 1840, 1840, 1840, 1840, 1840, 1840,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   79, 1946, 1946, 1946, 1946,   79, 1946,   79,
       79,   79,   79,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  232,  232,
     1946,  232,  232, 1946,  232,  232,  232,  232,  232,  232,
      232, 1946,  232,  240,  240, 1946, 1946,  240,  240,  240,
      240,  240,  240,  240,  240,  240, 1946,  240,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  304,  304, 1946,  304, 1946, 1946,  304,
      334, 1946, 1946, 1946, 1946, 1946, 1946,  334,  334,  334,
      334,  337,  337, 1946,  337, 1946, 1946, 1946, 1946, 1946,
     1946,  337,  337,  337,  337,  346, 1946,  346, 1946, 1946,
      346,  348, 1946,  348, 1946, 1946,  348,  376, 1946, 1946,
     1946, 1946, 1946, 1946,  376,  376,  376,  376,  451, 1946,
      451, 1946, 1946,  451,  453, 1946,  453, 1946, 1946,  453,
      455, 1946,  455, 1946, 1946,  455,  240,  240, 1946, 1946,
      240,  240,  240,  240,  240,  240,  240,  240,  240, 1946,

      240,  462, 1946,  462, 1946, 1946,  462,  464, 1946,  464,
     1946, 1946,  464,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  304,  304,
     1946,  304,  546, 1946, 1946, 1946, 1946,  546, 1946,  546,
      546,  546,  546,  337,  337, 1946,  337, 1946, 1946, 1946,
     1946, 1946, 1946,  337,  337,  337,  337,  551,  551, 1946,
      551, 1946, 1946, 1946, 1946,  551,  551,  551,  551,  551,
      551,  563, 1946,  563, 1946, 1946,  563,  565, 1946,  565,
     1946, 1946,  565,   79, 1946, 1946, 1946, 1946,   79, 1946,
       79,   79,   79,   79,  598, 1946, 1946, 1946, 1946,  598,

     1946,  598,  598,  598,  598,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  673, 1946,  673, 1946, 1946,
      673,  675, 1946,  675, 1946, 1946,  675,  677, 1946,  677,
     1946, 1946,  677,  679, 1946,  679, 1946, 1946,  679,  681,
     1946,  681, 1946, 1946,  681,  741, 1946,  741,  741, 1946,
      741,  522, 1946,  522,  522, 1946,  522,  546, 1946, 1946,
     1946, 1946,  546, 1946,  546,  546,  546,  546,  771, 1946,
      771, 1946, 1946,  771,  773, 1946,  773, 1946, 1946,  773,

      551,  551, 1946,  551, 1946, 1946, 1946, 1946,  551,  551,
      551,  551,  551,  551,  778, 1946,  778, 1946, 1946,  778,
      780, 1946,  780, 1946, 1946,  780,  791, 1946,  791, 1946,
     1946,  791,  793, 1946,  793, 1946, 1946,  793,   79, 1946,
     1946, 1946, 1946,   79, 1946,   79,   79,   79,   79,  598,
     1946, 1946, 1946, 1946,  598, 1946,  598,  598,  598,  598,
      830, 1946,  830, 1946, 1946,  830,  832, 1946,  832, 1946,
     1946,  832,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  897, 1946,  897,
     1946, 1946,  897,  899, 1946,  899, 1946, 1946,  899,  677,

     1946,  677, 1946, 1946,  677,  901, 1946,  901, 1946, 1946,
      901,  903, 1946,  903, 1946, 1946,  903,  741, 1946,  741,
      741, 1946,  741,  524, 1946,  524, 1946, 1946,  524,  962,
     1946,  962, 1946, 1946,  962,  964, 1946,  964, 1946, 1946,
      964,  966, 1946,  966, 1946, 1946,  966,  968, 1946,  968,
     1946, 1946,  968,  971,  971, 1946,  971, 1946, 1946, 1946,
     1946, 1946, 1946,  971,  971,  971,  971,  973, 1946,  973,
     1946, 1946,  973,  975, 1946,  975, 1946, 1946,  975,  977,
     1946,  977, 1946, 1946,  977,  979, 1946,  979, 1946, 1946,
      979,  551,  551, 1946,  551, 1946, 1946, 1946, 1946,  551,

      551,  551,  551,  551,  551,  990, 1946,  990, 1946, 1946,
      990,  992, 1946,  992, 1946, 1946,  992,   79, 1946, 1946,
     1946, 1946,   79, 1946,   79,   79,   79,   79, 1026, 1946,
     1026, 1946, 1946, 1026, 1028, 1946, 1028, 1946, 1946, 1028,
     1030, 1946, 1030, 1946, 1946, 1030, 1032, 1946, 1032, 1946,
     1946, 1032, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1085, 1946, 1085,
     1946, 1946, 1085, 1087, 1946, 1087, 1946, 1946, 1087, 1089,
     1946, 1089, 1946, 1946, 1089,   79, 1946,   79, 1946, 1946,
       79,  741, 1946,  741, 1946, 1946,  741, 1117, 1946, 1117,

     1946, 1946, 1117, 1119, 1946, 1119, 1946, 1946, 1119, 1121,
     1946, 1121, 1946, 1946, 1121, 1123, 1946, 1123, 1946, 1946,
     1123,  971,  971, 1946,  971, 1946, 1946, 1946, 1946, 1946,
     1946,  971,  971,  971,  971, 1126, 1126, 1946, 1126, 1946,
     1946, 1126, 1946, 1126, 1946, 1126, 1126, 1126, 1126, 1132,
     1946, 1132, 1946, 1946, 1132, 1134, 1946, 1134, 1946, 1946,
     1134, 1136, 1946, 1136, 1946, 1946, 1136, 1138, 1946, 1138,
     1946, 1946, 1138,  551,  551, 1946,  551, 1946, 1946, 1946,
     1946,  551,  551,  551,  551,  551,  551,   79, 1946, 1946,
     1946, 1946,   79, 1946,   79,   79,   79,   79, 1185, 1946,

     1185, 1946, 1946, 1185, 1187, 1946, 1187, 1946, 1946, 1187,
     1189, 1946, 1189, 1946, 1946, 1189, 1191, 1946, 1191, 1946,
     1946, 1191, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1236, 1946, 1236,
     1946, 1946, 1236, 1238, 1946, 1238, 1946, 1946, 1238, 1240,
     1946, 1240, 1946, 1946, 1240,  334, 1946,  334, 1946, 1946,
      334, 1126, 1126, 1946, 1126, 1946, 1946, 1126, 1946, 1126,
     1946, 1126, 1126, 1126, 1126, 1244, 1244, 1946, 1244, 1946,
     1946, 1946, 1946, 1946, 1946, 1244, 1244, 1244, 1244, 1256,
     1946, 1256, 1946, 1946, 1256, 1258, 1946, 1258, 1946, 1946,

     1258, 1260, 1946, 1260, 1946, 1946, 1260, 1262, 1946, 1262,
     1946, 1946, 1262, 1264, 1946, 1264, 1946, 1946, 1264,  337,
     1946,  337, 1946, 1946,  337,  551,  551, 1946,  551, 1946,
     1946, 1946, 1946,  551,  551,  551,  551,  551,  551, 1276,
     1946, 1276, 1946, 1946, 1276,   79, 1946, 1946, 1946, 1946,
       79, 1946,   79,   79,   79,   79, 1314, 1946, 1314, 1946,
     1946, 1314, 1316, 1946, 1316, 1946, 1946, 1316, 1318, 1946,
     1318, 1946, 1946, 1318,  376, 1946,  376, 1946, 1946,  376,
     1337, 1946, 1337, 1946, 1946, 1337, 1339, 1946, 1339, 1946,
     1946, 1339, 1345, 1946, 1345, 1946, 1946, 1345,  546, 1946,

      546, 1946, 1946,  546, 1244, 1244, 1946, 1244, 1946, 1946,
     1946, 1946, 1946, 1946, 1244, 1244, 1244, 1244, 1350, 1350,
     1946, 1350, 1946, 1946, 1946, 1946, 1350, 1350, 1350, 1350,
     1350, 1350, 1362, 1946, 1362, 1946, 1946, 1362, 1364, 1946,
     1364, 1946, 1946, 1364, 1366, 1946, 1366, 1946, 1946, 1366,
     1368, 1946, 1368, 1946, 1946, 1368, 1370, 1946, 1370, 1946,
     1946, 1370,  551, 1946,  551, 1946, 1946,  551,  551,  551,
     1946,  551, 1946, 1946, 1946, 1946,  551,  551,  551,  551,
      551,  551, 1383, 1946, 1383, 1946, 1946, 1383,   79, 1946,
     1946, 1946, 1946,   79, 1946,   79,   79,   79,   79, 1416,

     1946, 1416, 1946, 1946, 1416,  598, 1946,  598, 1946, 1946,
      598, 1430, 1946, 1430, 1946, 1946, 1430, 1432, 1946, 1432,
     1946, 1946, 1432, 1436, 1946, 1436, 1946, 1946, 1436, 1350,
     1350, 1946, 1350, 1946, 1946, 1946, 1946, 1350, 1350, 1350,
     1350, 1350, 1350, 1441, 1946, 1441, 1946, 1946, 1441, 1443,
     1946, 1443, 1946, 1946, 1443, 1454, 1946, 1454, 1946, 1946,
     1454, 1456, 1946, 1456, 1946, 1946, 1456, 1458, 1946, 1458,
     1946, 1946, 1458, 1460, 1946, 1460, 1946, 1946, 1460, 1463,
     1946, 1463, 1946, 1946, 1463,  551,  551, 1946,  551, 1946,
     1946, 1946, 1946,  551,  551,  551,  551,  551,  551,  992,

     1946,  992, 1946, 1946,  992,   79, 1946, 1946, 1946, 1946,
       79, 1946,   79,   79,   79,   79, 1500, 1946, 1500, 1946,
     1946, 1500, 1087, 1946, 1087, 1946, 1946, 1087,   79, 1946,
       79, 1946, 1946,   79, 1510, 1946, 1510, 1946, 1946, 1510,
     1512, 1946, 1512, 1946, 1946, 1512, 1515, 1515, 1946, 1515,
     1946, 1946, 1946, 1946, 1946, 1946, 1515, 1515, 1515, 1515,
     1517, 1946, 1517, 1946, 1946, 1517, 1519, 1946, 1519, 1946,
     1946, 1519, 1521, 1946, 1521, 1946, 1946, 1521, 1523, 1946,
     1523, 1946, 1946, 1523, 1350, 1350, 1946, 1350, 1946, 1946,
     1946, 1946, 1350, 1350, 1350, 1350, 1350, 1350, 1534, 1946,

     1534, 1946, 1946, 1534, 1536, 1946, 1536, 1946, 1946, 1536,
     1538, 1946, 1538, 1946, 1946, 1538,  971, 1946,  971, 1946,
     1946,  971, 1541, 1946, 1541, 1946, 1946, 1541, 1543, 1946,
     1543, 1946, 1946, 1543,  551,  551, 1946,  551, 1946, 1946,
     1946, 1946,  551,  551,  551,  551,  551,  551,   79, 1946,
     1946, 1946, 1946,   79, 1946,   79,   79,   79,   79, 1568,
     1946, 1568, 1946, 1946, 1568, 1570, 1946, 1570, 1946, 1946,
     1570, 1577, 1946, 1577, 1946, 1946, 1577,  334, 1946,  334,
     1946, 1946,  334, 1515, 1515, 1946, 1515, 1946, 1946, 1946,
     1946, 1946, 1946, 1515, 1515, 1515, 1515, 1580, 1580, 1946,

     1580, 1946, 1946, 1580, 1946, 1580, 1946, 1580, 1580, 1580,
     1580, 1584, 1946, 1584, 1946, 1946, 1584, 1586, 1946, 1586,
     1946, 1946, 1586, 1588, 1946, 1588, 1946, 1946, 1588, 1590,
     1946, 1590, 1946, 1946, 1590, 1350, 1350, 1946, 1350, 1946,
     1946, 1946, 1946, 1350, 1350, 1350, 1350, 1350, 1350, 1601,
     1946, 1601, 1946, 1946, 1601, 1126, 1946, 1126, 1946, 1946,
     1126, 1605, 1946, 1605, 1946, 1946, 1605,  337, 1946,  337,
     1946, 1946,  337,  551,  551, 1946,  551, 1946, 1946, 1946,
     1946,  551,  551,  551,  551,  551,  551,   79, 1946, 1946,
     1946, 1946,   79, 1946,   79,   79,   79,   79, 1627, 1946,

     1627, 1946, 1946, 1627,  376, 1946,  376, 1946, 1946,  376,
      546, 1946,  546, 1946, 1946,  546, 1580, 1580, 1946, 1580,
     1946, 1946, 1580, 1946, 1580, 1946, 1580, 1580, 1580, 1580,
     1635, 1946, 1635, 1946, 1946, 1635, 1637, 1946, 1637, 1946,
     1946, 1637, 1639, 1946, 1639, 1946, 1946, 1639, 1641, 1946,
     1641, 1946, 1946, 1641, 1643, 1946, 1643, 1946, 1946, 1643,
     1244, 1946, 1244, 1946, 1946, 1244, 1350, 1350, 1946, 1350,
     1946, 1946, 1946, 1946, 1350, 1350, 1350, 1350, 1350, 1350,
     1656, 1946, 1656, 1946, 1946, 1656,  551, 1946,  551, 1946,
     1946,  551,  551,  551, 1946,  551, 1946,  551,  551, 1946,

      551,  551,  551,  551,  551,  551,   79, 1946, 1946, 1946,
     1946,   79, 1946,   79,   79,   79,   79,  598, 1946,  598,
     1946, 1946,  598, 1677, 1946, 1677, 1946, 1946, 1677, 1679,
     1946, 1679, 1946, 1946, 1679, 1681, 1946, 1681, 1946, 1946,
     1681, 1683, 1946, 1683, 1946, 1946, 1683, 1685, 1946, 1685,
     1946, 1946, 1685, 1350, 1946, 1350, 1946, 1946, 1350, 1350,
     1350, 1946, 1350, 1946, 1946, 1946, 1946, 1350, 1350, 1350,
     1350, 1350, 1350, 1698, 1946, 1698, 1946, 1946, 1698, 1700,
     1946, 1700, 1946, 1946, 1700,  551,  551, 1946,  551, 1946,
     1946, 1946, 1946,  551,  551,  551,  551,  551,  551, 1704,

     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704,   79, 1946, 1946, 1946, 1946,   79,
     1946,   79,   79,   79,   79, 1711, 1946, 1711, 1946, 1946,
     1711, 1713, 1946, 1713, 1946, 1946, 1713, 1715, 1946, 1715,
     1946, 1946, 1715, 1717, 1946, 1717, 1946, 1946, 1717, 1720,
     1946, 1720, 1946, 1946, 1720, 1729, 1946, 1729, 1946, 1946,
     1729,  971, 1946,  971, 1946, 1946,  971, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1744, 1946, 1744,

     1946, 1946, 1744, 1746, 1946, 1746, 1946, 1946, 1746, 1748,
     1946, 1748, 1946, 1946, 1748, 1515, 1946, 1515, 1946, 1946,
     1515, 1751, 1946, 1751, 1946, 1946, 1751, 1753, 1946, 1753,
     1946, 1946, 1753, 1126, 1946, 1126, 1946, 1946, 1126, 1770,
     1946, 1770, 1946, 1946, 1770, 1772, 1946, 1772, 1946, 1946,
     1772, 1774, 1946, 1774, 1946, 1946, 1774,   79, 1946, 1946,
     1946, 1946,   79, 1946,   79,   79,   79,   79, 1779, 1946,
     1779, 1946, 1946, 1779, 1580, 1946, 1580, 1946, 1946, 1580,
     1783, 1946, 1783, 1946, 1946, 1783, 1244, 1946, 1244, 1946,
     1946, 1244, 1350, 1350, 1946, 1350, 1946, 1946, 1946, 1946,

     1350, 1350, 1350, 1350, 1350, 1350, 1795, 1946, 1795, 1946,
     1946, 1795, 1797, 1946, 1797, 1946, 1946, 1797, 1799, 1946,
     1799, 1946, 1946, 1799, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1803,
     1946, 1803, 1946, 1946, 1803, 1805, 1946, 1805, 1946, 1946,
     1805,   79, 1946, 1946, 1946, 1946,   79, 1946,   79,   79,
       79,   79, 1812, 1946, 1812, 1946, 1946, 1812, 1350, 1946,
     1350, 1946, 1946, 1350, 1823, 1946, 1823, 1946, 1946, 1823,
     1825, 1946, 1825, 1946, 1946, 1825, 1829, 1946, 1829, 1946,
     1946, 1829, 1831, 1946, 1831, 1946, 1946, 1831,   79, 1946,

     1946, 1946, 1946,   79, 1946,   79,   79,   79,   79, 1834,
     1946, 1834, 1946, 1946, 1834, 1836, 1946, 1836, 1946, 1946,
     1836, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     1840, 1840, 1840, 1840, 1840, 1840, 1843, 1946, 1843, 1946,
     1946, 1843, 1845, 1946, 1845, 1946, 1946, 1845, 1847, 1946,
     1847, 1946, 1946, 1847, 1849, 1946, 1849, 1946, 1946, 1849,
     1851, 1946, 1851, 1946, 1946, 1851, 1515, 1946, 1515, 1946,
     1946, 1515, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854,
     1854, 1854, 1854, 1854, 1854, 1854, 1854, 1863, 1946, 1863,
     1946, 1946, 1863, 1865, 1946, 1865, 1946, 1946, 1865, 1704,

     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1580, 1946, 1580, 1946, 1946, 1580,
     1877, 1946, 1877, 1946, 1946, 1877, 1879, 1946, 1879, 1946,
     1946, 1879, 1881, 1946, 1881, 1946, 1946, 1881, 1732, 1732,
     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1884, 1946, 1884, 1946, 1946, 1884, 1888,
     1946, 1888, 1946, 1946, 1888, 1890, 1946, 1890, 1946, 1946,
     1890, 1892, 1946, 1892, 1946, 1946, 1892, 1896, 1946, 1896,
     1946, 1946, 1896, 1898, 1946, 1898, 1946, 1946, 1898, 1902,
     1946, 1902, 1946, 1946, 1902, 1904, 1946, 1904, 1946, 1946,

     1904, 1908, 1946, 1908, 1946, 1946, 1908, 1910, 1946, 1910,
     1946, 1946, 1910, 1914, 1946, 1914, 1946, 1946, 1914, 1916,
     1946, 1916, 1946, 1946, 1916, 1918, 1946, 1918, 1946, 1946,
     1918, 1849, 1946, 1849, 1946, 1946, 1849, 1921, 1946, 1921,
     1946, 1946, 1921, 1923, 1946, 1923, 1946, 1946, 1923, 1925,
     1946, 1925, 1946, 1946, 1925, 1927, 1946, 1927, 1946, 1946,
     1927, 1865, 1946, 1865, 1946, 1946, 1865, 1930, 1946, 1930,
     1946, 1946, 1930, 1932, 1946, 1932, 1946, 1946, 1932, 1936,
     1946, 1936, 1946, 1946, 1936, 1938, 1946, 1938, 1946, 1946,
     1938, 1940, 1946, 1940, 1946, 1946, 1940, 1942, 1946, 1942,

     1946, 1946, 1942,    9, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946

    } ;

static const flex_int16_t yy_chk[8898] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    5,    6,    7,    8,    2,   17,

       17,    2,    7,    8,   18,    5,    6,   11,   23,   11,
       11,   11,   11,   13,   25,   13,   13,   13,   13,   14,
       22,   14,   22,   34,   34,   23,   18,   23,   27,   25,
       25,   25,   26,   27,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   32,   36,   41,   27,   41,  281,  281,
       37,    5,    6,    7,    8,   37,   39,   44,   48,   45,
       50,   55,   63,   32,   45,   32,   32,   51,   36,   50,
       55,   52,   44,   48,   44,   48,   39,   51,   50,   44,
       45,   44,   53,   23,   51,   48,  171,   25,   28,   52,
       28,   28,   28,   28,   28,   28,   28,   28,   28,  171,

       53,   37,   61,  162,   37,   39,   53,   28,   59,   80,
       28,   61,  162,   28,   28,   28,   28,   28,   63, 1896,
      167,   59,   28,   46,   28,   28,   59,   65,   46,   65,
       28,   59,   49,   28,  109,   46,   28,   49,   80,   28,
       28,   46,   28,  167,   28,   49,   28,   49,  101,  101,
       49,   28,   54,   58,   28,   49,   28,   29,   58,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  207,   54,
      120,  165,  152,   54,   58,   54,  109,  152,  160,   29,
       47,  207,   29,   29,   29,   29,   29,  165,  101,   47,
      132,   29,  132,   47,   29,  133,  160,  133,   47,   29,

     1897,  103,  103,   47,   58,   29,   57,   58,   29,   29,
      103,   29,  120,   29,  135,   29,  135,  163,   57,   57,
       29,   58,  138,  152,  138,   29,   35,   57,  103,   57,
       35,   35,  163,   35,   57,   35,   35,  174,   35,  103,
       35,   42,   42,   42,   42,   56,   42,   42,  140,   42,
      140,   42,   35,   35,   35,   42,   42,   56,   56, 1898,
      174,   60,   42,  285,  159,   42,   60,  164,   56,   56,
      143,   56,  143,   60,   60,  161,  164,   35,   35,  159,
       35,   66,   35,   66,   66,   66,   66,  159,  166,   66,
       67,   67,  285,  161,   75,   67,   75,   75,   75,   75,

       76,  175,   76,   76,   76,   76,  166,  136,   35,   35,
      168,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       72,   72,  168,  175,  136,   72,  136,   72,  139,  139,
      193,  139,   72,  137,   99,   99,   99,   99,   99,   99,
       99,   72,   72,   72,   72,   72,   72,   72,  137, 1899,
      137,   99,  102,  193,  102,   72,  180,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  180,  106,   99,  141,
      141,  141,  110,   72,   99,  106,  173,   99,   72,  144,
      147,  144,  147,   72,   72,  181,  172,   72,   72,  278,
      395,  110,  173,  106,  172,   72,  395,  102,   99,   72,

      176,   72,   72,   72,  106,   72,   78,  181,  110,  176,
       78,   78,  182,   78,  110,   78,   78,  110,   78,  100,
       78,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      190,  278,   78,   78,   78,  208,  182,  104,  110,  104,
      104,  100,  177, 1902,  111,  117,  104,  108,  108,  108,
      108,  190,  111,  117,  178,  183,  208,   78,   78,  178,
       78,  100,  184,  104,  177,  177,  104,  100,  104,  111,
      111,  117,  178,  108,  108,  104,  108,  636,  108,  114,
      114,  111,  117,  183,  184,  198,  187, 1903,  114,   78,
       94,   94,   94,   94,   94,   94,   94,   94,   94,  191,

      186,  187,  119,  119,  119,  119,  114,  186,  198,   94,
       94,   94,  636,  121,   94,   94,  189,  114,   94,  266,
      105,  121,  105,  186,  192,  105,  105,  191,  119,  119,
       94,  119,  209,  119,  189,   94,   94,   94,  121,  121,
       94,  192,   94,  105,  105,  266,  398,   94,  209,  188,
      121,  105,  398,   94,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  185,  201,  112,  188,  112,  185,  105,
      112,  112,  196,   98,   98,   98,  188,  199,   98,   98,
      105,  115,   98,  115,  115,  197,  199,  185,  112,  196,
      115,  293,  201,  217,   98,  293,  112,  203,  217,   98,

       98,   98,  197,  116,   98,  116,   98,  115,  116,  116,
      115,   98,  115,  195,  112,  203,  112,   98,  122,  115,
      122,  179,  206,  122,  122,  112,  116,  116,  195,  204,
      179,  179,  202,  289,  116,  213,  195,  211,  179,  202,
      204,  122,  179,  202,  206,  179,  214,  212,  210,  122,
      215,  202,  116,  210,  202,  202,  205,  216,  204,  214,
      218,  205,  289,  116,  220,  211,  212,  122,  214,  122,
      216,  215,  216,  218,  221,  592,  210,  205,  122,  153,
      153,  153,  153,  153,  153,  219,  213,  220,  225,  213,
      225,  225,  225,  225,  219,  221,  225,  592,  219,  226,

      226,  233,  233,  242,  226,  242,  233, 1904,  236,  236,
      236,  236,  236,  236,  236,  243,  245,  243,  245,  246,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  247,
      248,  250,  248,  250,  275,  315,  246,  153,  246,  315,
      153,  251,  251,  251,  247,  153,  247,  153,  236,  249,
      249,  354,  249,  153,  153,  253,  411,  253,  153, 1905,
      275,  153,  169,  254,  255,  254,  255,  354,  287,  291,
      331,  169,  331,  332,  264,  332,  264,  287,  169,  264,
      264,  298,  298,  169,  169,  169,  291,  169,  169,  228,
      228,  169,  411,  169,  228,  300,  296,  264,  291,  169,

      169,  169,  169,  169,  296,  301,  287,  307,  298,  352,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  230,
      230,  300,  296,  264,  230,  363,  230,  352,  378,  363,
      301,  301,  262,  296,  262,  311,  307,  262,  262,  378,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  262,  351,
      262,  313,  353,  262,  311,  262,  320,  320,  261,  261,
      261, 1908,  351,  261,  261,  373,  355,  261,  313,  273,
      353,  273,  335,  355,  273,  273,  302,  373,  302,  261,
      313,  302,  302,  320,  261,  261,  261,  297,  265,  261,

      265,  261,  273,  373,  265,  297,  261,  265,  263,  302,
      263,  335,  261,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  367,  297,  265,  359,  265,  299,  273,  299,
      357,  265,  299,  299,  297,  302,  265,  302,  271,  274,
      271,  274,  265,  271,  271,  274,  359,  357,  274,  367,
      299,  299,  338,  263,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  392,  271,  274,  271,  274,  356,  271,
      322,  271,  274,  270,  270,  270,  299,  274,  270,  270,
      392,  338,  270,  274,  323,  277,  356,  277,  277,  277,
      277,  277,  277,  277,  270,  361,  322,  358,  309,  270,

      270,  270,  358,  360,  270,  385,  270,  309,  360,  323,
      323,  270,  385,  272,  365,  272,  361,  270,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  277,  276,  276,
      276,  318,  396,  276,  276,  362,  309,  276,  365,  318,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  366,
      362,  396,  482,  377,  276,  276,  276,  318,  272,  276,
      279,  276,  368,  372,  371,  370,  276,  366,  318,  292,
      370,  292,  276,  371,  292,  292,  372,  368,  482,  321,
      279,  321,  377,  375,  321,  321,  279,  280,  280,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  319,  369,

      292,  375,  321,  321,  374, 1909,  319,  381,  364,  382,
      280,  280,  280,  280,  280,  369,  369,  374,  382,  280,
      292,  383,  280,  364,  319,  381,  383,  280,  321,  292,
      364,  364,  364,  387,  389,  319,  280,  280,  384,  280,
      288,  280,  288,  280,  386,  288,  288,  384,  280,  388,
      391,  387,  389,  280,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  605,  288,  386,  390,  393,  391,  402,
      388,  288,  393,  283,  391,  283,  399,  605,  283,  283,
      394,  310,  283,  310,  402,  394,  310,  310,  390,  390,
      403,  324,  399,  324,  283,  403,  324,  324,  397,  283,

      288,  283,  439,  405,  283,  310,  283,  397,  405,  407,
      439,  283,  310,  284,  324,  284,  420,  283,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  304,  407,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  440,  420,
      324,  310,  324,  440,  404,  304,  304,  304,  304,  304,
      304,  400,  304,  304,  304,  304,  304,  314,  401,  314,
      400,  304,  314,  314,  304, 1910,  409,  401,  404,  304,
      422,  304,  304,  304,  304,  304,  304,  408,  304,  304,
      410,  304,  406,  304,  409,  304,  408,  406,  314,  415,
      304,  422,  415,  410,  413,  304,  306,  306,  306,  306,

      306,  306,  306,  306,  306,  406,  414,  413,  314,  337,
      337,  337,  337,  337,  337,  414,  416,  314,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  339,  339,  339,
      339,  339,  339,  573,  417,  416,  306,  419,  573,  337,
      340,  340,  340,  340,  340,  340,  341,  341,  341,  341,
      341,  341,  417,  418,  412,  419,  423,  339,  325,  336,
      336,  336,  336,  336,  336,  412,  418,  337,  424,  459,
      340,  459, 1911,  423,  339,  421,  341,  424,  343,  343,
      343,  343,  343,  343,  427,  339,  342,  342,  342,  342,
      342,  342,  344,  344,  344,  344,  344,  344,  340,  421,

      425,  428,  426,  427,  341,  431,  435,  340,  343,  341,
      345,  345,  345,  345,  345,  345,  342,  336,  431,  429,
      336,  430,  344,  425,  428,  336,  426,  336,  429,  433,
      430, 1914,  437,  336,  336,  436,  343,  429,  336,  438,
      345,  336,  434,  442,  342,  437,  441,  443,  433,  342,
      344,  434,  441,  436,  343,  444,  446,  435,  509,  344,
      445,  448,  438,  460,  443,  460,  442,  448,  345,  470,
      444,  532,  445,  470,  446,  447,  447,  488, 1915,  511,
      447,  488,  447,  511,  509,  345,  449,  449,  449,  449,
      449,  449,  449,  450,  450,  450,  450,  450,  450,  450,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  469,
     1916,  469, 1917,  532,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  520,  514,  515,  449,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  475,  522,  475,  499,
      517,  475,  475,  521,  517,  577,  468,  499,  468,  520,
      522,  468,  468,  514,  515,  468,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  499,  522,  468,  577,  521,
      568,  535,  468, 1918,  468,  535,  499,  468,  523,  468,
      478,  568,  478,  538,  468,  478,  478,  480,  544,  480,
      468,  523,  480,  480,  539,  547,  476,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  478,  523,  478,  545,
      480,  478,  538,  478,  544,  541,  477,  477,  477,  541,
      571,  477,  477,  539,  547,  477,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  545,  480,  477,  570,  571,
      575,  553,  477,  477,  477,  589,  481,  477,  481,  477,
      589,  575,  481,  570,  477,  481,  479,  594,  479,  569,
      477,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      553,  493,  481,  493,  481,  569,  493,  493,  594,  481,
      574, 1919,  670, 1920,  481,  670,  487,  572,  487,  574,
      481,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      572,  479,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      576,  486,  591,  486,  578,  583,  486,  486,  591,  576,
      486,  496,  496,  578,  582,  503,  596,  525,  525,  498,
      496,  498,  486,  503,  498,  498,  525,  486,  583,  486,
      582,  494,  486,  596,  486,  584,  587,  599,  496,  486,
      503,  503,  498,  498,  525,  486,  495,  495,  528,  496,
      498,  497,  503,  497,  497,  525,  528,  579,  584,  587,
      497,  501,  501,  501,  501,  588,  599, 1921,  498,  495,
      495,  495,  495,  495,  528,  579,  597,  497,  495,  498,

      497,  495,  497,  588,  581,  528,  495,  501,  501,  497,
      501,  597,  501,  585,  604,  495,  495,  581,  495,  504,
      495,  504,  495,  609,  504,  504,  585,  495,  506,  508,
      506,  508,  495,  506,  506,  508,  586,  604,  508,  595,
      533,  507,  504,  507,  862,  609,  507,  507,  533,  593,
      504,  607,  586,  586,  506,  508,  506,  508,  595,  506,
      593,  506,  508,  607,  507,  533,  533,  508,  504,  526,
      504,  526,  526,  508,  862,  602, 1922,  533,  526,  504,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  610,
      507,  590,  602,  580,  611,  526,  610,  580,  526,  505,

      526,  505,  615,  612,  505,  505,  590,  526,  505,  530,
      530,  530,  530,  580,  590,  611,  613,  614,  617,  615,
      505,  853,  616,  837,  619,  505,  612,  505,  618,  613,
      505,  837,  505,  853,  618,  530,  530,  505,  530,  619,
      530,  614,  617,  505,  524,  616,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  550,  550,  550,  550,  550,
      550,  622,  524,  524,  524,  524,  524,  524,  620,  524,
      524,  524,  524,  524,  626,  624,  622,  620,  524,  688,
     1923,  524,  625,  688,  639,  550,  524,  628,  524,  524,
      524,  524,  524,  524,  624,  524,  524,  626,  524,  527,

      524,  527,  524,  625,  527,  527,  628,  524,  529,  627,
      529,  639,  524,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  527,  527,  627,  631,  534,  629,  534,  638,
      527,  534,  534,  551,  551,  551,  551,  551,  551,  556,
      556,  556,  556,  556,  556,  630,  631,  632,  527,  534,
      629,  633,  638,  529,  635,  641,  632,  534,  651,  527,
      630,  640,  642,  551,  641,  651,  643,  647,  644,  556,
      655,  635,  633,  645,  646,  534,  648,  534,  557,  557,
      557,  557,  557,  557,  640,  648,  534,  642,  643,  644,
      647,  551, 1924,  650,  645,  646,  655,  556,  558,  558,

      558,  558,  558,  558,  657,  649,  650,  652,  557,  559,
      559,  559,  559,  559,  559,  556,  652,  560,  560,  560,
      560,  560,  560,  649,  820,  796,  658,  657,  558,  561,
      561,  561,  561,  561,  561,  658,  557,  662,  796,  559,
      562,  562,  562,  562,  562,  562,  653,  560,  656,  654,
      659,  661,  660,  653,  654,  557,  558,  664,  659,  561,
      820,  662,  661,  659,  665,  668,  656,  559,  659,  660,
      562,  558,  671,  686,  668,  560,  666,  687,  671,  665,
      664,  696,  712,  560,  727,  696,  666,  561,  672,  672,
      672,  672,  672,  672,  672,  559,  560,  708,  562,  686,

      666,  708,  701,  687,  701,  714,  561,  701,  701,  816,
      727,  712,  720,  686,  714,  706,  720,  687,  816,  707,
      562,  716,  562,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  706,  683,  714,  683,  707,  723,  683,  683,  718,
      716,  683,  725,  725,  723,  706,  728,  732,  753,  707,
      795,  732,  753,  683,  805,  821,  718, 1926,  683,  805,
      683,  806,  723,  683,  821,  683,  806,  795,  718,  725,
      683,  728,  728,  723,  730,  730,  683,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  702,  702,  702,  702,

      702,  702,  702,  702,  702,  724,  694,  763,  694,  801,
      809,  694,  694,  724,  715,  694,  715,  800,  744,  715,
      715,  809,  802,  737,  730,  737,  798,  694,  737,  737,
      801,  724,  694,  763,  694,  802,  702,  694,  715,  694,
      800,  798,  724, 1928,  694,  715,  695,  744,  695,  745,
      694,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  741,
      719,  803,  719,  874,  715,  719,  719,  747,  745,  703,
      743,  703,  741,  874,  703,  703,  747,  749,  703,  751,
      726,  804,  726,  743,  803,  726,  726,  729,  741,  729,

      703,  719,  729,  729,  804,  703,  751,  703,  799,  743,
      703,  807,  703,  726,  726,  747,  749,  703,  751,  764,
      729,  719,  878,  703,  799,  808,  811,  813,  915,  807,
      719,  752,  915,  752,  878,  756,  752,  752,  810,  726,
      808,  810,  813,  756,  764,  764,  729,  811,  729,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  742,  812,
      742,  756,  752,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  756,  748,  814,  748,  757,  812,  748,  748,
      761,  761,  752,  815,  757,  817,  819,  818,  822,  738,
      817,  752,  823,  814,  845,  827,  835,  748,  818,  819,

      827,  824,  757,  742,  748,  815,  881,  761,  826,  823,
      824,  822,  845,  757,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  762,  835,  762, 1168,  842,  762,  762,
      881,  826, 1168,  748,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  765,  842,  765,  762,  762,  765,  765,
      843,  825,  834,  759,  838,  759,  839,  834,  759,  759,
      825,  846,  759,  838,  851,  839,  765,  847,  848,  850,
      834,  852,  762,  843,  759,  854,  846,  848,  850,  759,
      858,  759,  847,  870,  759,  858,  759,  851,  852, 1929,
      854,  759,  765,  760,  765,  760,  870,  759,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  775,  775,  775,
      775,  775,  775,  782,  782,  782,  782,  782,  782,  783,
      783,  783,  783,  783,  783,  857,  784,  784,  784,  784,
      784,  784,  785,  785,  785,  785,  785,  785,  856,  861,
      857,  860,  863,  782,  856,  868,  860,  869,  861,  783,
      786,  786,  786,  786,  786,  786,  784,  867,  871,  873,
      863,  877,  785,  876,  879,  775,  867,  873,  868,  875,
      869,  782,  879,  880,  856,  871,  875,  783,  877,  884,
      786,  880,  889,  885,  784,  886,  876,  889,  884,  888,
      785,  885,  782,  895,  890,  886,  785, 1931,  783,  784,

      787,  787,  787,  787,  787,  787,  888,  890,  786,  891,
      788,  788,  788,  788,  788,  788,  895,  906,  891,  913,
      914,  786,  893,  789,  789,  789,  789,  789,  789,  892,
      787, 1933,  996,  790,  790,  790,  790,  790,  790,  893,
      788,  996, 1001,  906,  924,  913,  914,  892,  924,  927,
      928,  930,  999,  789,  933,  930,  934,  906,  787,  913,
      914,  920,  936,  790, 1034,  999, 1001,  787,  788,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  927,  928,
      933,  789,  934,  949,  937,  953, 1034,  920,  936,  788,
      789,  790,  919,  919,  919,  919,  919,  919,  919,  919,

      919,  920,  936,  938,  946,  950, 1018,  938,  946,  905,
      937,  953,  949,  790,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  957,  937, 1012,  960,  957,  972,  961,
      995,  997,  919,  910,  950,  910,  997,  995,  910,  910,
     1012, 1018,  910,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  960, 1000,  910,  961, 1007,  972,  994,  910,
      998,  910,  998,  994,  910,  998,  910, 1002, 1934, 1008,
     1000,  910, 1008, 1007, 1002, 1004,  994,  910,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  998,  943, 1004,  943,

     1036, 1003,  943,  943, 1005, 1020,  943, 1009,  954, 1003,
      954, 1006, 1010,  954,  954, 1010, 1014, 1011,  943, 1036,
     1009, 1016, 1005,  943, 1016,  943, 1020,  952,  943, 1006,
      943,  954, 1013, 1014, 1017,  943, 1015,  944, 1019,  944,
     1011,  943,  944,  944,  944,  944,  944,  944,  944,  944,
      944, 1017,  955, 1019,  955, 1013, 1024,  954,  955, 1015,
     1025,  955,  970,  970,  970,  970,  970,  970, 1021,  971,
      971,  971,  971,  971,  971, 1023, 1022, 1021,  955, 1035,
      955, 1022, 1037, 1025, 1041,  955,  971, 1068, 1042, 1035,
      955, 1037, 1024, 1023, 1040, 1068,  955, 1041, 1042,  981,

      981,  981,  981,  981,  981,  982,  982,  982,  982,  982,
      982,  983,  983,  983,  983,  983,  983, 1043, 1040, 1047,
      970,  984,  984,  984,  984,  984,  984,  971,  971,  981,
     1044, 1049, 1047, 1050, 1150,  982, 1051, 1052, 1054, 1044,
     1043,  983, 1055,  985,  985,  985,  985,  985,  985, 1058,
     1060,  984, 1049, 1062, 1059, 1054, 1150,  981, 1109, 1060,
     1062, 1050, 1109,  982, 1066, 1055,  981, 1066, 1071,  983,
     1058, 1051,  982,  985, 1052, 1059, 1077, 1071, 1076,  984,
      986,  986,  986,  986,  986,  986, 1070, 1076,  984, 1070,
     1073, 1077,  983, 1128,  987,  987,  987,  987,  987,  987,

     1073,  985,  988,  988,  988,  988,  988,  988, 1072, 1080,
      986,  989,  989,  989,  989,  989,  989, 1081, 1078, 1151,
     1154, 1156, 1128,  985,  987, 1094, 1935, 1101, 1153, 1151,
     1080, 1072,  988, 1078, 1159, 1154, 1166, 1160,  986, 1159,
     1081,  989, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1094,  987, 1101, 1166, 1153, 1156, 1114, 1160, 1114,
      988,  986, 1114, 1114, 1158, 1094, 1164, 1101, 1155,  989,
      987, 1158, 1155, 1157, 1161, 1936, 1162, 1161,  989, 1162,
      988, 1164, 1093, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1169, 1105, 1155, 1105, 1165, 1157, 1105, 1105, 1183,
     1165, 1105, 1125, 1125, 1125, 1125, 1125, 1125, 1170, 1163,
     1173, 1196, 1163, 1105, 1169, 1171, 1937, 1182, 1105, 1125,
     1105, 1170, 1115, 1105, 1171, 1105, 1172, 1182, 1175, 1172,
     1105, 1175, 1173, 1196, 1183, 1176, 1105, 1126, 1126, 1126,
     1126, 1126, 1126, 1163, 1176, 1140, 1140, 1140, 1140, 1140,
     1140, 1212, 1177, 1195, 1126, 1141, 1141, 1141, 1141, 1141,
     1141, 1125, 1195, 1142, 1142, 1142, 1142, 1142, 1142, 1178,
     1179, 1938, 1178, 1939, 1212, 1140, 1143, 1143, 1143, 1143,
     1143, 1143, 1177, 1179, 1180, 1141, 1144, 1144, 1144, 1144,

     1144, 1144, 1180, 1142, 1184, 1126, 1126, 1127, 1127, 1127,
     1127, 1127, 1127, 1140, 1181, 1197, 1143, 1184, 1198, 1223,
     1213, 1219, 1181, 1141, 1197, 1213, 1144, 1174, 1202, 1219,
     1141, 1142, 1223, 1174, 1205, 1198, 1140, 1145, 1145, 1145,
     1145, 1145, 1145, 1142, 1143, 1940, 1202, 1143, 1146, 1146,
     1146, 1146, 1146, 1146, 1144, 1147, 1147, 1147, 1147, 1147,
     1147, 1144, 1203, 1174, 1205, 1127, 1208, 1145, 1127, 1211,
     1216, 1294, 1215, 1127, 1221, 1127, 1230, 1231, 1146, 1282,
     1203, 1127, 1127, 1221, 1208, 1147, 1127, 1215, 1284, 1127,
     1211, 1285, 1216, 1288, 1294, 1145, 1148, 1148, 1148, 1148,

     1148, 1148, 1230, 1231, 1232, 1308, 1146, 1245, 1232, 1282,
     1288, 1297, 1308, 1147, 1146, 1284, 1230, 1231, 1285, 1145,
     1244, 1244, 1244, 1244, 1244, 1244, 1148, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1245, 1147, 1289, 1297,
     1287, 1291, 1292, 1289, 1246, 1246, 1246, 1246, 1246, 1246,
     1244, 1290, 1941, 1295, 1148, 1247, 1247, 1247, 1247, 1247,
     1247, 1287, 1148, 1295, 1296, 1299, 1290, 1228, 1243, 1243,
     1243, 1243, 1243, 1243, 1246, 1292, 1291, 1942, 1244, 1250,
     1250, 1250, 1250, 1250, 1250, 1247, 1293, 1300, 1296, 1293,
     1300, 1246, 1299, 1248, 1248, 1248, 1248, 1248, 1248, 1301,

     1302, 1303, 1246, 1249, 1249, 1249, 1249, 1249, 1249, 1250,
     1298, 1312, 1301, 1247, 1251, 1251, 1251, 1251, 1251, 1251,
     1504, 1305, 1247, 1248, 1305, 1306, 1243, 1298, 1306, 1243,
     1352, 1328, 1504, 1249, 1243, 1302, 1243, 1250, 1303, 1322,
     1321, 1312, 1243, 1243, 1251, 1307, 1309, 1243, 1307, 1309,
     1243, 1248, 1328, 1313, 1311, 1250, 1248, 1311, 1321, 1352,
     1324, 1249, 1325, 1322, 1427, 1281, 1249, 1281, 1313, 1324,
     1281, 1427, 1251, 1252, 1252, 1252, 1252, 1252, 1252, 1325,
     1331, 1251, 1267, 1267, 1267, 1267, 1267, 1267, 1268, 1268,
     1268, 1268, 1268, 1268, 1269, 1269, 1269, 1269, 1269, 1269,

     1336, 1281, 1331, 1252, 1270, 1270, 1270, 1270, 1270, 1270,
     1341, 1326, 1267, 1333, 1332, 1336, 1387, 1388, 1268, 1385,
     1393, 1386, 1490, 1394, 1269, 1271, 1271, 1271, 1271, 1271,
     1271, 1252, 1332, 1391, 1270, 1326, 1341, 1333, 1415, 1490,
     1267, 1394, 1393, 1943, 1388, 1395, 1268, 1415, 1252, 1387,
     1341, 1268, 1269, 1396, 1385, 1271, 1386, 1399, 1397, 1400,
     1399, 1391, 1270, 1426, 1267, 1272, 1272, 1272, 1272, 1272,
     1272, 1421, 1395, 1269, 1273, 1273, 1273, 1273, 1273, 1273,
     1396, 1397, 1400, 1271, 1401, 1426, 1270, 1421, 1271, 1275,
     1275, 1275, 1275, 1275, 1275, 1272, 1274, 1274, 1274, 1274,

     1274, 1274, 1398, 1401, 1273, 1398, 1275, 1349, 1349, 1349,
     1349, 1349, 1349, 1350, 1350, 1350, 1350, 1350, 1350, 1275,
     1405, 1402, 1403, 1272, 1402, 1403, 1274, 1408, 1409, 1411,
     1408, 1412, 1273, 1478, 1412, 1420, 1398, 1349, 1405, 1413,
     1406, 1486, 1413, 1350, 1272, 1420, 1414, 1275, 1275, 1414,
     1486, 1409, 1411, 1480, 1274, 1478, 1273, 1355, 1355, 1355,
     1355, 1355, 1355, 1274, 1356, 1356, 1356, 1356, 1356, 1356,
     1406, 1350, 1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358,
     1358, 1358, 1358, 1358, 1481, 1428, 1480, 1355, 1359, 1359,
     1359, 1359, 1359, 1359, 1356, 1360, 1360, 1360, 1360, 1360,

     1360, 1428, 1357, 1483, 1473, 1424, 1516, 1484, 1358, 1382,
     1382, 1382, 1382, 1382, 1382, 1355, 1424, 1479, 1359, 1481,
     1485, 1561, 1356, 1485, 1479, 1360, 1382, 1944, 1487, 1489,
     1357, 1561, 1489, 1355, 1473, 1516, 1358, 1487, 1483, 1382,
     1484, 1356, 1497, 1945, 1488, 1357, 1359, 1361, 1361, 1361,
     1361, 1361, 1361, 1360, 1359, 1374, 1374, 1374, 1374, 1374,
     1374, 1710, 1488, 1494, 1358, 1497, 1494, 1359, 1382, 1488,
     1498, 1506, 1360, 1498, 1710, 1503, 1506, 1361, 1375, 1375,
     1375, 1375, 1375, 1375, 1503, 1374, 1376, 1376, 1376, 1376,
     1376, 1376, 1377, 1377, 1377, 1377, 1377, 1377, 1378, 1378,

     1378, 1378, 1378, 1378, 1574, 1361, 1505, 1553, 1375, 1507,
     1552, 1554, 1553, 1374, 1554, 1505, 1376, 1555, 1507, 1552,
     1555, 1556, 1377, 1557, 1556, 1574, 1557, 1361, 1378, 1361,
     1559, 1615, 1562, 1559, 1374, 1581, 1375, 1562, 1379, 1379,
     1379, 1379, 1379, 1379, 1376, 1564, 1565, 1622, 1564, 1565,
     1377, 1567, 1615, 1893, 1567, 1621, 1378, 1622, 1621, 1375,
     1575, 1616, 1376, 1623, 1581, 1891, 1623, 1377, 1379, 1380,
     1380, 1380, 1380, 1380, 1380, 1575, 1616, 1378, 1381, 1381,
     1381, 1381, 1381, 1381, 1438, 1438, 1438, 1438, 1438, 1438,
     1445, 1445, 1445, 1445, 1445, 1445, 1379, 1890, 1708, 1380,

     1446, 1446, 1446, 1446, 1446, 1446, 1617, 1708, 1381, 1618,
     1619, 1889, 1620, 1379, 1447, 1447, 1447, 1447, 1447, 1447,
     1445, 1612, 1612, 1612, 1612, 1612, 1612, 1380, 1612, 1617,
     1446, 1630, 1618, 1619, 1380, 1620, 1381, 1624, 1776, 1888,
     1624, 1742, 1438, 1665, 1447, 1663, 1672, 1809, 1445, 1709,
     1673, 1663, 1742, 1381, 1630, 1673, 1776, 1809, 1446, 1448,
     1448, 1448, 1448, 1448, 1448, 1673, 1665, 1885, 1672, 1445,
     1709, 1884, 1447, 1449, 1449, 1449, 1449, 1449, 1449, 1446,
     1450, 1450, 1450, 1450, 1450, 1450, 1968, 1447, 1968, 1448,
     1451, 1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452,

     1452, 1452, 1663, 1449, 1453, 1453, 1453, 1453, 1453, 1453,
     1450, 1660, 1660, 1660, 1660, 1660, 1660, 1448, 1660, 1741,
     1451, 1743, 1974, 1448, 1974, 1883, 1452, 1778, 1976, 1882,
     1976, 1449, 1880, 1879, 1453, 1703, 1878, 1982, 1450, 1982,
     1877, 1703, 1741, 1743, 1449, 1704, 1732, 1450, 1451, 1874,
     1778, 1704, 1732, 1873, 1452, 1465, 1465, 1465, 1465, 1465,
     1465, 1872, 1453, 1452, 1984, 1986, 1984, 1986, 1868, 1451,
     1466, 1466, 1466, 1466, 1466, 1466, 1467, 1467, 1467, 1467,
     1467, 1467, 1867, 1866, 1453, 1465, 1468, 1468, 1468, 1468,
     1468, 1468, 1703, 1469, 1469, 1469, 1469, 1469, 1469, 1988,

     1466, 1988, 1704, 1732, 1864, 1862, 1467, 1514, 1514, 1514,
     1514, 1514, 1514, 1465, 1861, 1860, 1468, 1470, 1470, 1470,
     1470, 1470, 1470, 1469, 1853, 1852, 1801, 1819, 1466, 1990,
     1465, 1990, 1801, 1819, 1467, 1851, 1850, 1466, 1662, 1662,
     1662, 1662, 1662, 1662, 1468, 1662, 2000, 1470, 2000, 1848,
     1846, 1469, 1471, 1471, 1471, 1471, 1471, 1471, 1467, 1469,
     2002, 1821, 2002, 1845, 2009, 1514, 2009, 1821, 1468, 1515,
     1515, 1515, 1515, 1515, 1515, 1470, 1525, 1525, 1525, 1525,
     1525, 1525, 1471, 1801, 1819, 2011, 1515, 2011, 1470, 1526,
     1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527, 1527, 1527,

     1527, 2014, 2016, 2014, 2016, 2022, 1525, 2022, 1844, 1843,
     1471, 1528, 1528, 1528, 1528, 1528, 1528, 1471, 1821, 1526,
     1839, 2024, 2029, 2024, 2029, 1527, 1839, 1515, 1515, 2031,
     2034, 2031, 2034, 1837, 1525, 1529, 1529, 1529, 1529, 1529,
     1529, 1528, 2036, 1525, 2036, 1836, 2041, 1526, 2041, 1835,
     2043, 1840, 2043, 1527, 1834, 1833, 1526, 1840, 1530, 1530,
     1530, 1530, 1530, 1530, 2046, 1529, 2046, 1832, 1831, 1528,
     1531, 1531, 1531, 1531, 1531, 1531, 1527, 1839, 1528, 1532,
     1532, 1532, 1532, 1532, 1532, 2048, 1830, 2048, 1530, 2050,
     2052, 2050, 2052, 1529, 1533, 1533, 1533, 1533, 1533, 1533,

     1531, 1545, 1545, 1545, 1545, 1545, 1545, 1849, 1840, 1532,
     2055, 1829, 2055, 1849, 1826, 1529, 1530, 1546, 1546, 1546,
     1546, 1546, 1546, 2057, 1533, 2057, 1854, 1865, 1531, 1825,
     1894, 1545, 1854, 1865, 1824, 1823, 1894, 1532, 1814, 1530,
     1547, 1547, 1547, 1547, 1547, 1547, 1531, 1546, 1906, 2059,
     1813, 2059, 1533, 2061, 1906, 2061, 2065, 1532, 2065, 1545,
     1812, 1533, 1932, 2067, 1849, 2067, 1811, 1545, 1932, 2069,
     1547, 2069, 2071, 1810, 2071, 1546, 1548, 1548, 1548, 1548,
     1548, 1548, 1805, 1854, 1865, 1803, 1546, 1894, 2073, 1548,
     2073, 1797, 2074, 1548, 2074, 2076, 1796, 2076, 1547, 1549,

     1549, 1549, 1549, 1549, 1549, 1906, 1548, 1550, 1550, 1550,
     1550, 1550, 1550, 1580, 1580, 1580, 1580, 1580, 1580, 1932,
     1547, 1592, 1592, 1592, 1592, 1592, 1592, 1795, 1783, 1549,
     1580, 2078, 1782, 2078, 1548, 1548, 1777, 1550, 1593, 1593,
     1593, 1593, 1593, 1593, 1772, 1702, 1702, 1702, 1702, 1702,
     1702, 1592, 1702, 2080, 2082, 2080, 2082, 1549, 2084, 2086,
     2084, 2086, 2087, 1549, 2087, 1550, 1770, 2088, 1593, 2088,
     1767, 1580, 1580, 2089, 1550, 2089, 2090, 1766, 2090, 1592,
     1594, 1594, 1594, 1594, 1594, 1594, 1595, 1595, 1595, 1595,
     1595, 1595, 2091, 2093, 2091, 2093, 1593, 2095, 2097, 2095,

     2097, 1765, 1592, 1593, 1596, 1596, 1596, 1596, 1596, 1596,
     1594, 2099, 2105, 2099, 2105, 2107, 1595, 2107, 1597, 1597,
     1597, 1597, 1597, 1597, 1598, 1598, 1598, 1598, 1598, 1598,
     2109, 2111, 2109, 2111, 1596, 2116, 1753, 2116, 1594, 2118,
     2120, 2118, 2120, 2122, 1595, 2122, 1751, 1595, 1597, 2126,
     1594, 2126, 1746, 1744, 1598, 1599, 1599, 1599, 1599, 1599,
     1599, 1740, 1596, 1600, 1600, 1600, 1600, 1600, 1600, 1596,
     1705, 1705, 1705, 1705, 1705, 1705, 1597, 1705, 2128, 2129,
     2128, 2129, 1598, 1739, 1705, 1599, 2130, 2131, 2130, 2131,
     1598, 1738, 1731, 1600, 1608, 1608, 1608, 1608, 1608, 1608,

     1597, 1609, 1609, 1609, 1609, 1609, 1609, 1608, 2137, 1730,
     2137, 1608, 1729, 1599, 1609, 2139, 1721, 2139, 1609, 1720,
     2141, 1600, 2141, 2143, 1608, 2143, 2144, 1719, 2144, 1600,
     2145, 1609, 2145, 2146, 2149, 2146, 2149, 1599, 1610, 1610,
     1610, 1610, 1610, 1610, 1611, 1611, 1611, 1611, 1611, 1611,
     1717, 1610, 1608, 1608, 2152, 1610, 2152, 1611, 1715, 1609,
     1609, 1611, 1613, 1613, 1613, 1613, 1613, 1613, 1610, 1713,
     2154, 1609, 2154, 1711, 1611, 1613, 2155, 1707, 2155, 1613,
     1700, 1614, 1614, 1614, 1614, 1614, 1614, 2156, 2157, 2156,
     2157, 2159, 1613, 2159, 1614, 1698, 1610, 1610, 1614, 2161,

     2162, 2161, 2162, 1611, 2163, 1610, 2163, 2164, 2170, 2164,
     2170, 1614, 1646, 1646, 1646, 1646, 1646, 1646, 1688, 1683,
     1613, 1613, 1647, 1647, 1647, 1647, 1647, 1647, 1648, 1648,
     1648, 1648, 1648, 1648, 2172, 1613, 2172, 1681, 1679, 1614,
     1614, 2174, 1646, 2174, 2176, 1677, 2176, 1614, 2177, 2178,
     2177, 2178, 1647, 2179, 2183, 2179, 2183, 1676, 1648, 1649,
     1649, 1649, 1649, 1649, 1649, 2185, 2186, 2185, 2186, 1674,
     1646, 1650, 1650, 1650, 1650, 1650, 1650, 2187, 1671, 2187,
     1647, 2190, 2192, 2190, 2192, 1647, 1648, 1670, 2195, 1649,
     2195, 2200, 1669, 2200, 1646, 1651, 1651, 1651, 1651, 1651,

     1651, 1650, 2202, 2205, 2202, 2205, 1668, 1648, 1652, 1652,
     1652, 1652, 1652, 1652, 2207, 1667, 2207, 1649, 1653, 1653,
     1653, 1653, 1653, 1653, 2209, 1651, 2209, 1666, 2211, 1650,
     2211, 2214, 1656, 2214, 1650, 2216, 1655, 2216, 1652, 1641,
     1639, 1649, 1654, 1654, 1654, 1654, 1654, 1654, 1653, 2220,
     2221, 2220, 2221, 1651, 2222, 2224, 2222, 2224, 1637, 1654,
     1790, 1790, 1790, 1790, 1790, 1790, 1652, 1790, 2226, 2230,
     2226, 2230, 1654, 2232, 1651, 2232, 1653, 1635, 1659, 1659,
     1659, 1659, 1659, 1659, 2234, 1653, 2234, 2236, 1634, 2236,
     1652, 1659, 2239, 1633, 2239, 1659, 2241, 2242, 2241, 2242,

     1654, 1654, 1661, 1661, 1661, 1661, 1661, 1661, 1659, 1664,
     1664, 1664, 1664, 1664, 1664, 1689, 1689, 1689, 1689, 1689,
     1689, 1690, 1690, 1690, 1690, 1690, 1690, 2243, 2244, 2243,
     2244, 2246, 1661, 2246, 2248, 1631, 2248, 1659, 2252, 1664,
     2252, 2254, 2256, 2254, 2256, 1689, 2257, 2262, 2257, 2262,
     1627, 1690, 1691, 1691, 1691, 1691, 1691, 1691, 1626, 1625,
     1661, 1692, 1692, 1692, 1692, 1692, 1692, 1664, 1661, 2264,
     2266, 2264, 2266, 1689, 1605, 2268, 1664, 2268, 2270, 1690,
     2270, 1604, 1691, 1693, 1693, 1693, 1693, 1693, 1693, 1590,
     2271, 1692, 2271, 1588, 1689, 1694, 1694, 1694, 1694, 1694,

     1694, 1586, 1690, 1695, 1695, 1695, 1695, 1695, 1695, 2272,
     1691, 2272, 2275, 1693, 2275, 2276, 2280, 2276, 2280, 1692,
     2281, 2282, 2281, 2282, 2286, 1694, 2286, 2288, 1691, 2288,
     2290, 1584, 2290, 1695, 1583, 2292, 1692, 2292, 2293, 1582,
     2293, 1693, 1696, 1696, 1696, 1696, 1696, 1696, 2294, 2295,
     2294, 2295, 1577, 1694, 1697, 1697, 1697, 1697, 1697, 1697,
     1576, 1695, 1693, 2299, 2300, 2299, 2300, 2304, 1695, 2304,
     1694, 1697, 1696, 1722, 1722, 1722, 1722, 1722, 1722, 2306,
     2308, 2306, 2308, 1573, 1697, 1723, 1723, 1723, 1723, 1723,
     1723, 1724, 1724, 1724, 1724, 1724, 1724, 2310, 1572, 2310,

     1696, 1570, 2312, 1722, 2312, 1733, 1733, 1733, 1733, 1733,
     1733, 1568, 1733, 1697, 2313, 1723, 2313, 1696, 1706, 1733,
     2314, 1724, 2314, 1706, 1725, 1725, 1725, 1725, 1725, 1725,
     1566, 1722, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 2315,
     2318, 2315, 2318, 1723, 1563, 2320, 1706, 2320, 1722, 1724,
     1560, 2324, 1723, 2324, 1725, 1726, 1726, 1726, 1726, 1726,
     1726, 2326, 1558, 2326, 1706, 2328, 2330, 2328, 2330, 1706,
     2339, 1551, 2339, 1724, 1706, 1706, 1543, 1541, 1706, 1706,
     1536, 2341, 1725, 2341, 1534, 1726, 1706, 2342, 1523, 2342,
     1706, 1521, 1706, 1706, 1706, 1519, 1706, 1727, 1727, 1727,

     1727, 1727, 1727, 2343, 1517, 2343, 1725, 1728, 1728, 1728,
     1728, 1728, 1728, 1726, 1512, 1735, 1735, 1735, 1735, 1735,
     1735, 1726, 1735, 1510, 2344, 1737, 2344, 1727, 2346, 1735,
     2346, 1737, 2348, 2350, 2348, 2350, 2356, 1728, 2356, 1736,
     1736, 1736, 1736, 1736, 1736, 1737, 1737, 1737, 1737, 1737,
     1737, 1737, 2358, 1502, 2358, 1727, 1736, 1762, 1762, 1762,
     1762, 1762, 1762, 1500, 1762, 1728, 1499, 2359, 1727, 2359,
     1496, 1762, 1728, 1734, 2361, 2362, 2361, 2362, 1734, 2363,
     1495, 2363, 1737, 1493, 2366, 1737, 2366, 1734, 1734, 1734,
     1734, 1734, 1734, 1734, 2367, 2370, 2367, 2370, 1736, 1492,

     1491, 1734, 1755, 1755, 1755, 1755, 1755, 1755, 1756, 1756,
     1756, 1756, 1756, 1756, 2371, 2373, 2371, 2373, 2375, 1734,
     2375, 2389, 1482, 2389, 1734, 2395, 2418, 2395, 2418, 1734,
     1734, 1477, 1755, 1734, 1734, 2419, 1476, 2419, 1756, 1475,
     1474, 1734, 1463, 1462, 1460, 1734, 1458, 1734, 1734, 1734,
     1456, 1734, 1757, 1757, 1757, 1757, 1757, 1757, 1454, 1443,
     1755, 1441, 1440, 1439, 1436, 1435, 1756, 1434, 1755, 1432,
     1758, 1758, 1758, 1758, 1758, 1758, 1430, 1756, 1429, 1425,
     1423, 1422, 1757, 1758, 1419, 1410, 1407, 1758, 1759, 1759,
     1759, 1759, 1759, 1759, 1763, 1763, 1763, 1763, 1763, 1763,

     1758, 1760, 1760, 1760, 1760, 1760, 1760, 1404, 1392, 1390,
     1757, 1763, 1389, 1764, 1383, 1373, 1368, 1366, 1759, 1764,
     1816, 1816, 1816, 1816, 1816, 1816, 1364, 1816, 1758, 1758,
     1362, 1760, 1757, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
     1354, 1768, 1353, 1351, 1348, 1344, 1759, 1768, 1343, 1342,
     1339, 1337, 1759, 1763, 1769, 1335, 1334, 1330, 1329, 1760,
     1769, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1760, 1327,
     1764, 1323, 1316, 1764, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1314, 1310, 1786, 1786, 1786, 1786, 1786, 1786, 1787,
     1787, 1787, 1787, 1787, 1787, 1304, 1786, 1286, 1768, 1283,

     1786, 1768, 1818, 1818, 1818, 1818, 1818, 1818, 1280, 1818,
     1279, 1769, 1774, 1786, 1278, 1276, 1262, 1260, 1774, 1787,
     1258, 1256, 1254, 1253, 1788, 1788, 1788, 1788, 1788, 1788,
     1238, 1236, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774,
     1774, 1786, 1786, 1235, 1234, 1233, 1229, 1787, 1774, 1774,
     1774, 1774, 1774, 1774, 1788, 1227, 1226, 1225, 1224, 1787,
     1791, 1791, 1791, 1791, 1791, 1791, 1222, 1220, 1218, 1774,
     1217, 1214, 1774, 1210, 1774, 1774, 1774, 1774, 1774, 1774,
     1209, 1207, 1788, 1789, 1789, 1789, 1789, 1789, 1789, 1206,
     1791, 1788, 1204, 1201, 1200, 1199, 1789, 1194, 1193, 1191,

     1789, 1792, 1792, 1792, 1792, 1792, 1792, 1189, 1187, 1185,
     1167, 1152, 1149, 1789, 1793, 1138, 1136, 1134, 1791, 1132,
     1793, 1131, 1130, 1794, 1129, 1123, 1121, 1119, 1117, 1794,
     1116, 1792, 1112, 1791, 1793, 1793, 1793, 1793, 1793, 1793,
     1793, 1111, 1789, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
     1110, 1107, 1106, 1815, 1815, 1815, 1815, 1815, 1815, 1792,
     1104, 1103, 1102, 1100, 1099, 1098, 1815, 1792, 1097, 1802,
     1815, 1793, 1096, 1095, 1793, 1802, 1092, 1083, 1082, 1079,
     1794, 1799, 1075, 1815, 1074, 1069, 1067, 1799, 1065, 1802,
     1802, 1802, 1802, 1802, 1802, 1802, 1064, 1063, 1061, 1057,

     1056, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799,
     1822, 1053, 1815, 1048, 1046, 1045, 1822, 1799, 1799, 1799,
     1799, 1799, 1799, 1039, 1038, 1032, 1802, 1030, 1028, 1026,
     1822, 1822, 1822, 1822, 1822, 1822, 1822,  992, 1799,  979,
      977, 1799,  975, 1799, 1799, 1799, 1799, 1799, 1799, 1807,
      973,  968,  966,  964,  962, 1807,  959,  958,  956,  951,
      948, 1817, 1817, 1817, 1817, 1817, 1817, 1822,  947, 1807,
     1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1820, 1820,
     1820, 1820, 1820, 1820,  945, 1807, 1807, 1807, 1807, 1807,
     1807, 1817, 1838, 1838, 1838, 1838, 1838, 1838,  941, 1838,

     1858, 1858, 1858, 1858, 1858, 1858, 1807,  940, 1820, 1807,
      939, 1807, 1807, 1807, 1807, 1807, 1807, 1858,  935, 1817,
      932, 1841, 1841, 1841, 1841, 1841, 1841, 1817, 1841,  931,
      929,  926,  925,  923,  922, 1841, 1820, 1870, 1870, 1870,
     1870, 1870, 1870,  921,  918, 1820, 1842,  917,  916,  912,
      911, 1842,  909,  908, 1870,  907,  903,  901,  899, 1858,
     1842, 1842, 1842, 1842, 1842, 1842, 1842,  897, 1855, 1855,
     1855, 1855, 1855, 1855, 1842, 1855, 1857, 1857, 1857, 1857,
     1857, 1857, 1855, 1857, 1869, 1869, 1869, 1869, 1869, 1869,
     1857, 1869, 1842,  896,  894,  887, 1870, 1842, 1869,  883,

      882,  872, 1842, 1842,  866,  865, 1842, 1842,  864,  859,
      855, 1876,  849,  844, 1842,  841,  840, 1876, 1842,  836,
     1842, 1842, 1842,  832, 1842, 1856,  830,  829,  828,  797,
     1856, 1876, 1876, 1876, 1876, 1876, 1876, 1876,  793, 1856,
     1856, 1856, 1856, 1856, 1856, 1856,  791,  780,  778,  777,
      776,  773,  771, 1856,  770,  769,  768,  767,  766,  755,
      754,  740,  739,  735,  734,  733,  722,  721, 1876,  711,
      710, 1856,  709,  705,  704,  699, 1856,  698,  697,  691,
      690, 1856, 1856,  689, 1859, 1856, 1856,  685,  684,  681,
     1859,  679, 1871, 1856,  678,  677,  675, 1856, 1871, 1856,

     1856, 1856,  673, 1856, 1859, 1859, 1859, 1859, 1859, 1859,
     1859,  669, 1871, 1871, 1871, 1871, 1871, 1871, 1871,  667,
      663,  637,  634,  623,  621,  608,  606,  603,  601,  600,
      598,  565,  563, 1875,  555,  554,  552,  549,  548, 1875,
      546, 1859, 1886,  543, 1859,  542,  540,  537, 1886, 1871,
      536,  519, 1871, 1875, 1875, 1875, 1875, 1875, 1875, 1875,
      518,  516, 1886, 1886, 1886, 1886, 1886, 1886, 1886,  513,
      512,  510,  502,  491,  490,  489,  483,  473,  472,  471,
      464,  462,  461, 1887,  457,  455,  453,  451,  432, 1887,
     1875,  380,  379, 1875, 1881,  376,  350,  348,  346, 1886,

     1881,  334, 1886, 1887, 1887, 1887, 1887, 1887, 1887, 1887,
      333,  328,  317,  316, 1881, 1881, 1881, 1881, 1881, 1881,
     1881, 1881, 1881, 1895,  305,  295,  294,  268,  267, 1895,
     1881, 1881, 1881, 1881, 1881, 1881,  257,  256,  252,  244,
     1887,  241,  239, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
      238, 1881,  237,  227, 1881,  200, 1881, 1881, 1881, 1881,
     1881, 1881, 1892,  194,  170,  158,  156,  155, 1892,  146,
      145,  142,  134,  131,  130,  126,   96,   93,   92,   89,
     1895,   88, 1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892,
     1892, 1907,   86,   79,   69,   43,   38, 1907, 1892, 1892,

     1892, 1892, 1892, 1892,   33,   30,   16,    9,    4,    3,
        0, 1907, 1907, 1907, 1907, 1907, 1907, 1907,    0, 1892,
        0,    0, 1892,    0, 1892, 1892, 1892, 1892, 1892, 1892,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1907, 1927,
     1927, 1927, 1927, 1927, 1927, 1927, 1927, 1927,    0,    0,
        0,    0,    0,    0,    0, 1927, 1927, 1927, 1927, 1927,
     1927,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1927,
        0, 1927, 1927, 1927, 1927, 1927, 1927, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948,
     1948, 1948, 1948, 1948, 1948, 1948, 1948, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1950,    0,    0,    0,    0, 1950,    0, 1950,
     1950, 1950, 1950, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1952, 1952,
        0, 1952, 1952,    0, 1952, 1952, 1952, 1952, 1952, 1952,
     1952,    0, 1952, 1953, 1953,    0,    0, 1953, 1953, 1953,
     1953, 1953, 1953, 1953, 1953, 1953,    0, 1953, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1955, 1955,    0, 1955,    0,    0, 1955,
     1956,    0,    0,    0,    0,    0,    0, 1956, 1956, 1956,
     1956, 1957, 1957,    0, 1957,    0,    0,    0,    0,    0,
        0, 1957, 1957, 1957, 1957, 1958,    0, 1958,    0,    0,
     1958, 1959,    0, 1959,    0,    0, 1959, 1960,    0,    0,
        0,    0,    0,    0, 1960, 1960, 1960, 1960, 1961,    0,
     1961,    0,    0, 1961, 1962,    0, 1962,    0,    0, 1962,
     1963,    0, 1963,    0,    0, 1963, 1964, 1964,    0,    0,
     1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964,    0,

     1964, 1965,    0, 1965,    0,    0, 1965, 1966,    0, 1966,
        0,    0, 1966, 1967, 1967, 1967, 1967, 1967, 1967, 1967,
     1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1969, 1969,
        0, 1969, 1970,    0,    0,    0,    0, 1970,    0, 1970,
     1970, 1970, 1970, 1971, 1971,    0, 1971,    0,    0,    0,
        0,    0,    0, 1971, 1971, 1971, 1971, 1972, 1972,    0,
     1972,    0,    0,    0,    0, 1972, 1972, 1972, 1972, 1972,
     1972, 1973,    0, 1973,    0,    0, 1973, 1975,    0, 1975,
        0,    0, 1975, 1977,    0,    0,    0,    0, 1977,    0,
     1977, 1977, 1977, 1977, 1978,    0,    0,    0,    0, 1978,

        0, 1978, 1978, 1978, 1978, 1979, 1979, 1979, 1979, 1979,
     1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979,
     1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980,
     1980, 1980, 1980, 1980, 1980, 1981,    0, 1981,    0,    0,
     1981, 1983,    0, 1983,    0,    0, 1983, 1985,    0, 1985,
        0,    0, 1985, 1987,    0, 1987,    0,    0, 1987, 1989,
        0, 1989,    0,    0, 1989, 1991,    0, 1991, 1991,    0,
     1991, 1992,    0, 1992, 1992,    0, 1992, 1993,    0,    0,
        0,    0, 1993,    0, 1993, 1993, 1993, 1993, 1994,    0,
     1994,    0,    0, 1994, 1995,    0, 1995,    0,    0, 1995,

     1996, 1996,    0, 1996,    0,    0,    0,    0, 1996, 1996,
     1996, 1996, 1996, 1996, 1997,    0, 1997,    0,    0, 1997,
     1998,    0, 1998,    0,    0, 1998, 1999,    0, 1999,    0,
        0, 1999, 2001,    0, 2001,    0,    0, 2001, 2003,    0,
        0,    0,    0, 2003,    0, 2003, 2003, 2003, 2003, 2004,
        0,    0,    0,    0, 2004,    0, 2004, 2004, 2004, 2004,
     2005,    0, 2005,    0,    0, 2005, 2006,    0, 2006,    0,
        0, 2006, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007,
     2007, 2007, 2007, 2007, 2007, 2007, 2007, 2008,    0, 2008,
        0,    0, 2008, 2010,    0, 2010,    0,    0, 2010, 2012,

        0, 2012,    0,    0, 2012, 2013,    0, 2013,    0,    0,
     2013, 2015,    0, 2015,    0,    0, 2015, 2017,    0, 2017,
     2017,    0, 2017, 2018,    0, 2018,    0,    0, 2018, 2019,
        0, 2019,    0,    0, 2019, 2020,    0, 2020,    0,    0,
     2020, 2021,    0, 2021,    0,    0, 2021, 2023,    0, 2023,
        0,    0, 2023, 2025, 2025,    0, 2025,    0,    0,    0,
        0,    0,    0, 2025, 2025, 2025, 2025, 2026,    0, 2026,
        0,    0, 2026, 2027,    0, 2027,    0,    0, 2027, 2028,
        0, 2028,    0,    0, 2028, 2030,    0, 2030,    0,    0,
     2030, 2032, 2032,    0, 2032,    0,    0,    0,    0, 2032,

     2032, 2032, 2032, 2032, 2032, 2033,    0, 2033,    0,    0,
     2033, 2035,    0, 2035,    0,    0, 2035, 2037,    0,    0,
        0,    0, 2037,    0, 2037, 2037, 2037, 2037, 2038,    0,
     2038,    0,    0, 2038, 2039,    0, 2039,    0,    0, 2039,
     2040,    0, 2040,    0,    0, 2040, 2042,    0, 2042,    0,
        0, 2042, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2045,    0, 2045,
        0,    0, 2045, 2047,    0, 2047,    0,    0, 2047, 2049,
        0, 2049,    0,    0, 2049, 2051,    0, 2051,    0,    0,
     2051, 2053,    0, 2053,    0,    0, 2053, 2054,    0, 2054,

        0,    0, 2054, 2056,    0, 2056,    0,    0, 2056, 2058,
        0, 2058,    0,    0, 2058, 2060,    0, 2060,    0,    0,
     2060, 2062, 2062,    0, 2062,    0,    0,    0,    0,    0,
        0, 2062, 2062, 2062, 2062, 2063, 2063,    0, 2063,    0,
        0, 2063,    0, 2063,    0, 2063, 2063, 2063, 2063, 2064,
        0, 2064,    0,    0, 2064, 2066,    0, 2066,    0,    0,
     2066, 2068,    0, 2068,    0,    0, 2068, 2070,    0, 2070,
        0,    0, 2070, 2072, 2072,    0, 2072,    0,    0,    0,
        0, 2072, 2072, 2072, 2072, 2072, 2072, 2075,    0,    0,
        0,    0, 2075,    0, 2075, 2075, 2075, 2075, 2077,    0,

     2077,    0,    0, 2077, 2079,    0, 2079,    0,    0, 2079,
     2081,    0, 2081,    0,    0, 2081, 2083,    0, 2083,    0,
        0, 2083, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085,
     2085, 2085, 2085, 2085, 2085, 2085, 2085, 2092,    0, 2092,
        0,    0, 2092, 2094,    0, 2094,    0,    0, 2094, 2096,
        0, 2096,    0,    0, 2096, 2098,    0, 2098,    0,    0,
     2098, 2100, 2100,    0, 2100,    0,    0, 2100,    0, 2100,
        0, 2100, 2100, 2100, 2100, 2101, 2101,    0, 2101,    0,
        0,    0,    0,    0,    0, 2101, 2101, 2101, 2101, 2102,
        0, 2102,    0,    0, 2102, 2103,    0, 2103,    0,    0,

     2103, 2104,    0, 2104,    0,    0, 2104, 2106,    0, 2106,
        0,    0, 2106, 2108,    0, 2108,    0,    0, 2108, 2110,
        0, 2110,    0,    0, 2110, 2112, 2112,    0, 2112,    0,
        0,    0,    0, 2112, 2112, 2112, 2112, 2112, 2112, 2113,
        0, 2113,    0,    0, 2113, 2114,    0,    0,    0,    0,
     2114,    0, 2114, 2114, 2114, 2114, 2115,    0, 2115,    0,
        0, 2115, 2117,    0, 2117,    0,    0, 2117, 2119,    0,
     2119,    0,    0, 2119, 2121,    0, 2121,    0,    0, 2121,
     2123,    0, 2123,    0,    0, 2123, 2124,    0, 2124,    0,
        0, 2124, 2125,    0, 2125,    0,    0, 2125, 2127,    0,

     2127,    0,    0, 2127, 2132, 2132,    0, 2132,    0,    0,
        0,    0,    0,    0, 2132, 2132, 2132, 2132, 2133, 2133,
        0, 2133,    0,    0,    0,    0, 2133, 2133, 2133, 2133,
     2133, 2133, 2134,    0, 2134,    0,    0, 2134, 2135,    0,
     2135,    0,    0, 2135, 2136,    0, 2136,    0,    0, 2136,
     2138,    0, 2138,    0,    0, 2138, 2140,    0, 2140,    0,
        0, 2140, 2142,    0, 2142,    0,    0, 2142, 2147, 2147,
        0, 2147,    0,    0,    0,    0, 2147, 2147, 2147, 2147,
     2147, 2147, 2148,    0, 2148,    0,    0, 2148, 2150,    0,
        0,    0,    0, 2150,    0, 2150, 2150, 2150, 2150, 2151,

        0, 2151,    0,    0, 2151, 2153,    0, 2153,    0,    0,
     2153, 2158,    0, 2158,    0,    0, 2158, 2160,    0, 2160,
        0,    0, 2160, 2165,    0, 2165,    0,    0, 2165, 2166,
     2166,    0, 2166,    0,    0,    0,    0, 2166, 2166, 2166,
     2166, 2166, 2166, 2167,    0, 2167,    0,    0, 2167, 2168,
        0, 2168,    0,    0, 2168, 2169,    0, 2169,    0,    0,
     2169, 2171,    0, 2171,    0,    0, 2171, 2173,    0, 2173,
        0,    0, 2173, 2175,    0, 2175,    0,    0, 2175, 2180,
        0, 2180,    0,    0, 2180, 2181, 2181,    0, 2181,    0,
        0,    0,    0, 2181, 2181, 2181, 2181, 2181, 2181, 2182,

        0, 2182,    0,    0, 2182, 2184,    0,    0,    0,    0,
     2184,    0, 2184, 2184, 2184, 2184, 2188,    0, 2188,    0,
        0, 2188, 2189,    0, 2189,    0,    0, 2189, 2191,    0,
     2191,    0,    0, 2191, 2193,    0, 2193,    0,    0, 2193,
     2194,    0, 2194,    0,    0, 2194, 2196, 2196,    0, 2196,
        0,    0,    0,    0,    0,    0, 2196, 2196, 2196, 2196,
     2197,    0, 2197,    0,    0, 2197, 2198,    0, 2198,    0,
        0, 2198, 2199,    0, 2199,    0,    0, 2199, 2201,    0,
     2201,    0,    0, 2201, 2203, 2203,    0, 2203,    0,    0,
        0,    0, 2203, 2203, 2203, 2203, 2203, 2203, 2204,    0,

     2204,    0,    0, 2204, 2206,    0, 2206,    0,    0, 2206,
     2208,    0, 2208,    0,    0, 2208, 2210,    0, 2210,    0,
        0, 2210, 2212,    0, 2212,    0,    0, 2212, 2213,    0,
     2213,    0,    0, 2213, 2215, 2215,    0, 2215,    0,    0,
        0,    0, 2215, 2215, 2215, 2215, 2215, 2215, 2217,    0,
        0,    0,    0, 2217,    0, 2217, 2217, 2217, 2217, 2218,
        0, 2218,    0,    0, 2218, 2219,    0, 2219,    0,    0,
     2219, 2223,    0, 2223,    0,    0, 2223, 2225,    0, 2225,
        0,    0, 2225, 2227, 2227,    0, 2227,    0,    0,    0,
        0,    0,    0, 2227, 2227, 2227, 2227, 2228, 2228,    0,

     2228,    0,    0, 2228,    0, 2228,    0, 2228, 2228, 2228,
     2228, 2229,    0, 2229,    0,    0, 2229, 2231,    0, 2231,
        0,    0, 2231, 2233,    0, 2233,    0,    0, 2233, 2235,
        0, 2235,    0,    0, 2235, 2237, 2237,    0, 2237,    0,
        0,    0,    0, 2237, 2237, 2237, 2237, 2237, 2237, 2238,
        0, 2238,    0,    0, 2238, 2240,    0, 2240,    0,    0,
     2240, 2245,    0, 2245,    0,    0, 2245, 2247,    0, 2247,
        0,    0, 2247, 2249, 2249,    0, 2249,    0,    0,    0,
        0, 2249, 2249, 2249, 2249, 2249, 2249, 2250,    0,    0,
        0,    0, 2250,    0, 2250, 2250, 2250, 2250, 2251,    0,

     2251,    0,    0, 2251, 2253,    0, 2253,    0,    0, 2253,
     2255,    0, 2255,    0,    0, 2255, 2258, 2258,    0, 2258,
        0,    0, 2258,    0, 2258,    0, 2258, 2258, 2258, 2258,
     2259,    0, 2259,    0,    0, 2259, 2260,    0, 2260,    0,
        0, 2260, 2261,    0, 2261,    0,    0, 2261, 2263,    0,
     2263,    0,    0, 2263, 2265,    0, 2265,    0,    0, 2265,
     2267,    0, 2267,    0,    0, 2267, 2269, 2269,    0, 2269,
        0,    0,    0,    0, 2269, 2269, 2269, 2269, 2269, 2269,
     2273,    0, 2273,    0,    0, 2273, 2274,    0, 2274,    0,
        0, 2274, 2277, 2277,    0, 2277,    0, 2277, 2277,    0,

     2277, 2277, 2277, 2277, 2277, 2277, 2278,    0,    0,    0,
        0, 2278,    0, 2278, 2278, 2278, 2278, 2279,    0, 2279,
        0,    0, 2279, 2283,    0, 2283,    0,    0, 2283, 2284,
        0, 2284,    0,    0, 2284, 2285,    0, 2285,    0,    0,
     2285, 2287,    0, 2287,    0,    0, 2287, 2289,    0, 2289,
        0,    0, 2289, 2291,    0, 2291,    0,    0, 2291, 2296,
     2296,    0, 2296,    0,    0,    0,    0, 2296, 2296, 2296,
     2296, 2296, 2296, 2297,    0, 2297,    0,    0, 2297, 2298,
        0, 2298,    0,    0, 2298, 2301, 2301,    0, 2301,    0,
        0,    0,    0, 2301, 2301, 2301, 2301, 2301, 2301, 2302,

     2302, 2302, 2302, 2302, 2302, 2302, 2302, 2302, 2302, 2302,
     2302, 2302, 2302, 2302, 2303,    0,    0,    0,    0, 2303,
        0, 2303, 2303, 2303, 2303, 2305,    0, 2305,    0,    0,
     2305, 2307,    0, 2307,    0,    0, 2307, 2309,    0, 2309,
        0,    0, 2309, 2311,    0, 2311,    0,    0, 2311, 2316,
        0, 2316,    0,    0, 2316, 2317,    0, 2317,    0,    0,
     2317, 2319,    0, 2319,    0,    0, 2319, 2321, 2321, 2321,
     2321, 2321, 2321, 2321, 2321, 2321, 2321, 2321, 2321, 2321,
     2321, 2321, 2322, 2322, 2322, 2322, 2322, 2322, 2322, 2322,
     2322, 2322, 2322, 2322, 2322, 2322, 2322, 2323,    0, 2323,

        0,    0, 2323, 2325,    0, 2325,    0,    0, 2325, 2327,
        0, 2327,    0,    0, 2327, 2329,    0, 2329,    0,    0,
     2329, 2331,    0, 2331,    0,    0, 2331, 2332,    0, 2332,
        0,    0, 2332, 2333,    0, 2333,    0,    0, 2333, 2334,
        0, 2334,    0,    0, 2334, 2335,    0, 2335,    0,    0,
     2335, 2336,    0, 2336,    0,    0, 2336, 2337,    0,    0,
        0,    0, 2337,    0, 2337, 2337, 2337, 2337, 2338,    0,
     2338,    0,    0, 2338, 2340,    0, 2340,    0,    0, 2340,
     2345,    0, 2345,    0,    0, 2345, 2347,    0, 2347,    0,
        0, 2347, 2349, 2349,    0, 2349,    0,    0,    0,    0,

     2349, 2349, 2349, 2349, 2349, 2349, 2351,    0, 2351,    0,
        0, 2351, 2352,    0, 2352,    0,    0, 2352, 2353,    0,
     2353,    0,    0, 2353, 2354, 2354, 2354, 2354, 2354, 2354,
     2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354, 2355,
        0, 2355,    0,    0, 2355, 2357,    0, 2357,    0,    0,
     2357, 2360,    0,    0,    0,    0, 2360,    0, 2360, 2360,
     2360, 2360, 2364,    0, 2364,    0,    0, 2364, 2365,    0,
     2365,    0,    0, 2365, 2368,    0, 2368,    0,    0, 2368,
     2369,    0, 2369,    0,    0, 2369, 2372,    0, 2372,    0,
        0, 2372, 2374,    0, 2374,    0,    0, 2374, 2376,    0,

        0,    0,    0, 2376,    0, 2376, 2376, 2376, 2376, 2377,
        0, 2377,    0,    0, 2377, 2378,    0, 2378,    0,    0,
     2378, 2379, 2379, 2379, 2379, 2379, 2379, 2379, 2379, 2379,
     2379, 2379, 2379, 2379, 2379, 2379, 2380,    0, 2380,    0,
        0, 2380, 2381,    0, 2381,    0,    0, 2381, 2382,    0,
     2382,    0,    0, 2382, 2383,    0, 2383,    0,    0, 2383,
     2384,    0, 2384,    0,    0, 2384, 2385,    0, 2385,    0,
        0, 2385, 2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386,
     2386, 2386, 2386, 2386, 2386, 2386, 2386, 2387,    0, 2387,
        0,    0, 2387, 2388,    0, 2388,    0,    0, 2388, 2390,

     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2391,    0, 2391,    0,    0, 2391,
     2392,    0, 2392,    0,    0, 2392, 2393,    0, 2393,    0,
        0, 2393, 2394,    0, 2394,    0,    0, 2394, 2396, 2396,
     2396, 2396, 2396, 2396, 2396, 2396, 2396, 2396, 2396, 2396,
     2396, 2396, 2396, 2397,    0, 2397,    0,    0, 2397, 2398,
        0, 2398,    0,    0, 2398, 2399,    0, 2399,    0,    0,
     2399, 2400,    0, 2400,    0,    0, 2400, 2401,    0, 2401,
        0,    0, 2401, 2402,    0, 2402,    0,    0, 2402, 2403,
        0, 2403,    0,    0, 2403, 2404,    0, 2404,    0,    0,

     2404, 2405,    0, 2405,    0,    0, 2405, 2406,    0, 2406,
        0,    0, 2406, 2407,    0, 2407,    0,    0, 2407, 2408,
        0, 2408,    0,    0, 2408, 2409,    0, 2409,    0,    0,
     2409, 2410,    0, 2410,    0,    0, 2410, 2411,    0, 2411,
        0,    0, 2411, 2412,    0, 2412,    0,    0, 2412, 2413,
        0, 2413,    0,    0, 2413, 2414,    0, 2414,    0,    0,
     2414, 2415,    0, 2415,    0,    0, 2415, 2416,    0, 2416,
        0,    0, 2416, 2417,    0, 2417,    0,    0, 2417, 2420,
        0, 2420,    0,    0, 2420, 2421,    0, 2421,    0,    0,
     2421, 2422,    0, 2422,    0,    0, 2422, 2423,    0, 2423,

        0,    0, 2423, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1946, 1946, 1946, 1946, 1946, 1946

    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[244] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Fri Jan 17 14:36:16 2025
 * Update Count     : 878
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.hpp"                          // for DeclarationNode
#include "ExpressionNode.hpp"                           // for LabelNode
#include "InitializerNode.hpp"                          // for InitializerNode
#include "ParseNode.hpp"
#include "ParserTypes.hpp"                              // for Token
#include "StatementNode.hpp"                            // for CondCtrl, ForCtrl
#include "TypedefTable.hpp"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 3280 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// " stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}
				// C23 attributes, CPP also handles missing quote delimiter



#line 3297 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define QUOTE 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 187 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 3521 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1947 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8804 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 189 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 211 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 214 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 219 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }			// do nothing
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }					// reset column counter
	YY_BREAK
/* keywords */
case 9:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SVBOOL); }				// gcc (ARM)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CORUN); }				// CFA
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COFOR); }				// CFA
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT16); }					// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32X); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64X); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128X); }					// GCC
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32X4); }					// GCC (ARM)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64X2); }					// GCC (ARM)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(SVFLOAT32); }					// GCC (ARM)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(SVFLOAT64); }					// GCC (ARM)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 111:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COUNTOF); }			// GCC
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 362 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 363 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 364 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 367 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 368 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 369 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 155:
YY_RULE_SETUP
#line 375 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* C23 attributes */
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	strtext = new string( &yytext[2], yyleng - 4 );		// remove delimiters "[[" and "]]"
	RETURN_STR(C23_ATTRIBUTE);
}
	YY_BREAK
/* numeric constants */
case 158:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 390 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 391 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 392 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value, CPP also handles missing quote delimiter */
case 166:
YY_RULE_SETUP
#line 398 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant, CPP also handles missing quote delimiter */
case 169:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 172:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 175:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATTR); }				// CFA, attribute shorthand
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 189:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 193:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 457 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 463 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 464 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 465 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 466 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 467 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 468 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 469 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 470 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 471 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 472 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 473 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 474 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 476 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 477 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUp); }			// CFA
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 478 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 479 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 480 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 481 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 236:
YY_RULE_SETUP
#line 484 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 485 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 486 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 487 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 492 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 241:
YY_RULE_SETUP
#line 519 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 242:
YY_RULE_SETUP
#line 531 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 533 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 4896 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1947 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1947 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1946);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 533 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

