
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 226
#define YY_END_OF_BUFFER 227
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1326] =
    {   0,
        0,    0,    0,    0,    0,    0,  153,  153,  156,  156,
      227,  225,    7,    9,    8,  178,  155,  142,  184,  187,
      152,  165,  166,  181,  179,  169,  180,  172,  183,  145,
      146,  170,  171,  189,  191,  190,  192,  161,  142,  163,
      182,  164,  185,  142,  162,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  167,  188,  168,  186,    7,  225,    4,
        4,  226,  153,  154,  160,  156,  157,    7,    9,    0,
        8,  196,  219,  142,    0,  209,  177,  201,  210,  207,
      193,  204,  194,  205,  203,  217,    0,  149,    3,    0,

      208,  148,  145,    0,    0,    0,  145,  145,  145,  145,
      145,  145,    0,    0,  145,  145,  146,  146,  146,  146,
      146,  146,  146,    0,  146,  146,  175,  176,  174,  197,
      199,  195,  200,  198,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  215,  155,  152,  142,  206,    0,    0,  212,    0,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,    0,  142,  142,  142,  142,  142,  142,  142,  142,
      142,   44,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,   76,  142,  142,  142,  142,  142,   94,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  211,  202,  216,    7,    0,    0,    0,    2,    0,
        5,  153,    0,  159,  158,  158,    0,    0,    0,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  218,  173,  149,
      149,    0,  149,  149,  149,  149,    0,    6,  150,  148,
        0,  148,  148,  148,  148,  145,    0,    0,  144,    0,
        0,  150,    0,  145,  145,  145,  145,  145,  145,  145,
      145,    0,    0,    0,  145,  145,  145,  145,  145,  145,

      145,    0,  147,    0,    0,  146,  146,  146,  146,  146,
      146,  146,  146,    0,    0,    0,  146,  146,  146,  146,
      146,  146,  146,    0,  213,  214,    0,  223,  220,    0,
        0,    0,  222,    0,    0,    0,    0,    0,    0,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  143,    0,   14,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,   69,  142,
      142,  142,  142,   83,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  120,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,    0,
        0,  158,    0,    0,    0,    0,    0,  158,    0,    0,
      224,    0,    0,    0,    0,    0,    0,    0,  149,    0,
      149,    0,    0,    0,    0,    0,  149,  149,    0,  150,
      150,    0,  150,  150,  150,  150,  148,    0,  148,    0,
        0,    0,    0,    0,  148,  148,    0,  144,  144,  144,
      144,  144,  144,  144,    0,  144,  144,  150,  150,  150,
      150,  150,  150,    0,    0,    0,  145,  145,    0,    0,

        0,    0,  145,  145,    0,    0,  147,  147,  147,  147,
      147,  147,  147,  147,    0,  147,  147,    0,    0,    0,
      146,  146,    0,    0,    0,    0,  146,  146,  222,    0,
        0,    0,    0,    0,    0,    0,  221,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  143,    0,    0,    0,   20,
      142,  142,   25,  142,   28,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   47,  142,   49,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,   75,  142,  142,

       88,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  132,  142,  142,  142,
      138,  142,  140,  142,    0,    0,    0,    0,    0,    0,
      158,    0,    0,    0,    0,    0,  149,  149,    0,  149,
      149,    0,    0,    0,    0,  150,    0,  150,    0,    0,
        0,    0,    0,  150,  150,    0,  148,  148,    0,  148,
      148,    0,    0,    0,    0,  144,  144,  144,  144,  144,
      144,  144,  144,    0,    0,    0,  144,  144,  144,  144,
      144,  144,  144,    0,  150,    0,    0,    0,    0,  150,

      150,    0,    0,    0,    0,    0,    0,    0,  147,  147,
      147,  147,  147,  147,  147,  147,    0,    0,    0,  147,
      147,    0,  151,    0,  147,  147,  147,  147,  147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  142,  142,   23,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   15,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,    0,    0,    0,    0,    0,    0,  142,   24,
       26,  142,  142,   34,  142,  142,  142,  142,  142,   46,
      142,  142,  142,  142,  142,   56,   57,  142,  142,   72,

      142,  142,  142,  142,   90,   93,   95,  142,  142,  142,
      142,  142,  103,  142,  142,  142,  142,  142,  142,  142,
      116,  142,  119,  121,  142,  142,  142,  127,  142,  142,
      142,  142,  142,  139,  142,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  149,    0,  149,  149,  150,
      150,    0,  150,  150,    0,    0,    0,    0,    0,  148,
        0,  148,  148,    0,    0,    0,  144,  144,    0,    0,
        0,    0,  144,  144,    0,  150,  150,    0,    0,    0,
        0,    0,  151,    0,    0,    0,    0,    0,  147,  147,
        0,  151,  151,  151,  151,  151,    0,    0,    0,  147,

      147,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  142,    0,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,   78,  142,  142,  142,  142,  142,  142,  142,
      142,  142,    0,    0,    0,    0,    0,    0,    0,    0,
      142,  142,   29,   30,  142,  142,  142,  142,   45,   48,
      142,   52,  142,  142,  142,  142,   70,  142,  142,   80,
       84,  142,  142,  142,   98,  142,  102,  104,  107,  108,
      110,  142,  112,  113,  142,  142,  142,  126,  123,  142,
      142,  142,  136,  142,  141,    0,    1,    0,    0,  158,

        0,    0,    0,    0,  149,    0,  150,    0,  150,  150,
      148,    0,    0,  150,    0,  150,  150,  151,  151,    0,
      151,    0,    0,    0,    0,  151,  151,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  142,  142,
       17,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,   16,  142,  142,  142,  142,   35,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
        0,    0,    0,    0,    0,    0,    0,    0,  142,  142,
      142,  142,   42,   43,  142,  142,   55,  142,   59,   71,
      142,   89,   96,  142,  142,  111,  142,  118,  122,  142,

      131,  142,  137,    0,    0,  150,  150,    0,    0,  151,
      151,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   10,   11,   31,  142,  142,   62,
       63,   65,   74,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,   79,   81,   85,  142,
      142,  105,  114,  124,  142,  142,    0,    0,    0,    0,
        0,    0,    0,  142,  142,   37,  142,  142,  142,   54,
       61,  142,   97,   99,  142,  129,  133,    0,    0,    0,
        0,  151,    0,  151,  151,    0,    0,    0,    0,    0,
        0,  142,  142,  142,   67,   64,   66,  142,   91,  142,

      142,   12,  142,  142,  142,   32,   36,  142,  142,   58,
      142,  142,   87,  142,  142,  142,  142,  142,    0,    0,
        0,    0,  142,  142,   38,   51,  142,   73,  142,    0,
        0,    0,    0,  151,    0,    0,    0,    0,  142,   39,
       40,   68,   77,  142,  142,  142,  142,  142,  142,  142,
      142,   60,   82,   86,  100,  106,  125,  142,  134,    0,
        0,    0,   22,  142,  142,  142,    0,    0,    0,    0,
        0,    0,   41,  142,  142,   13,   18,   21,  142,  142,
       33,  142,  142,  128,  142,    0,    0,    0,    0,   27,
       53,  117,    0,    0,    0,  142,  142,  142,  142,  142,

      142,  101,  135,    0,    0,    0,    0,  142,  115,   19,
      142,  142,   50,    0,  109,  142,  142,  142,  142,  142,
      142,  142,  130,   92,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   11,   51,   56,   11,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   11,   73,   74,   75,   76,
       77,   78,   51,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[92] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    4,    4,    4,    4,    4,    9,
        4,    4,    4,    4,    4,    4,    4,    1,   10,    1,
        1,   11,    1,    8,    8,    8,    8,    8,    8,    4,
        4,    4,    4,    4,    4,    4,    4,    9,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1

    } ;

static const flex_int16_t yy_base[1490] =
    {   0,
        0,   90, 4036, 4035,    0,    0,   90,   91,   92,   93,
     4051, 4054,  104, 4054,  110,   83, 4054, 3991,   63,   90,
     4054, 4054, 4054,   84,  104, 4054,  107,  105,  123,  178,
      245, 4013, 4054,  125, 4013,   88,  325, 4012,  152, 4054,
      112, 4054,  111,  129, 3983,   95,  121,  180,  164,   79,
      237,  104,  120,  133,  138,  183,   97,  282,  218,  296,
      253,  158,  125, 4054,  127, 4054,  218,  276,  366, 4054,
     4023, 4054,    0, 4054,  413,    0, 4054,  372, 4054,  396,
      402, 4054,  491, 3985,  131, 4054, 4054, 4054, 4054, 4054,
     4006, 4054, 4005, 4054, 4054, 4006, 4019,  558, 4054, 4036,

     4054,  620,  405,  491,  305,  429,  428,  484,  549,  482,
     4054,  496,  169,  572,  614,  629,    0,  626,  651,  683,
      623, 4054,  668,  246,  663,  717, 4054, 4054, 4054, 4003,
     4054, 4054, 4054, 4002, 4001,  250,  285, 4019,  309,  313,
      345,  314,  384,  350,  375, 3997,  388,  389, 3974, 3942,
      409, 4054, 4054, 4054,  434, 4054, 3969, 3968, 4054, 3941,
      392,  160,  247,  179,  297,  403,  277,  280,  404,  244,
      694, 3969,  405,  406,  417,  420,  443,  492,  531,  189,
      425,  202,  276,  427,  512,  481,  472,  489,  358,  482,
      442,  136,  476, 3968,  555,  532,  539,  536,  554, 3967,

      477,  712,  564,  565,  601,  559,  544,  595,  581,  662,
      533,  624,  670,  677,  691,  695,  574,  618,  726,  702,
      721, 4054, 4054, 4054,  799,  805, 4022,  814, 4054,  844,
     4054,    0,  717, 4054, 4054,  831, 3962, 3961, 3960,    0,
     3986,  656,  744, 4004,  749,  778,  790,  760,  785,  789,
      813, 3982,  826,  827,  841, 3956, 3955, 4054, 4054,  871,
      837,  933,  897,  923,  805, 3954, 4012, 4054,  985,  931,
     1047,  905, 1037,  818, 1048,  959,  845, 1100, 1146,  728,
     1014, 1211, 1121,  732, 4054,  834, 1032,  828, 4054,  865,
     1130,  857, 3989, 3986,  894, 1106,  845, 1151,  840,  946,

     1219,    0, 1275, 3991, 1340,  848, 4054, 1000, 1326,  850,
     4054,  899, 1305,  899, 3986, 3983, 1118, 1172,  976, 1239,
      878,  954, 1354, 1365, 4054, 4054, 3972, 4054, 4054,  911,
      954, 3948, 3948,  917, 3944,    0, 3943,    0, 3914,  947,
      943,  972,  975,  752, 1007,  992,  664,  829,  878,  945,
     1208, 1001, 1030,  909, 1027, 1043,  971,  607, 1038, 1096,
     1041, 1035, 3944, 1053, 3943, 1081, 1074, 1034, 1098, 1105,
     1104, 1120, 1127, 1130, 1125, 1150, 1157, 1148,  678, 1188,
     1166, 1171, 1192, 1193, 1113, 1211, 1212, 1213, 1295, 1198,
     1268, 1173, 1220,  764,  311, 1225, 1314, 1075, 1248, 1251,

     1261, 1326, 1316, 1279, 1327, 1115, 1339, 1318, 1341, 1346,
     1350, 1345, 1351, 1286, 3942, 1352, 1353, 1167, 1355, 1357,
     1356, 1358, 1249, 1374, 1359, 1205, 1361, 1375, 1377, 1440,
     1435, 1432, 1439, 3938,    0, 3937,    0, 3936,    0, 3960,
     4054, 1068, 1101, 3936, 3933,    0, 3932,    0, 4054, 1446,
     1472, 1460, 1416, 3968, 3965, 3968, 4054, 1480, 1501, 1541,
     1506, 1603, 1567, 1593, 1435, 3928, 4054, 1622, 1655, 1717,
     1423, 3964, 3961, 3964, 4054, 1531, 1645, 1726, 1535, 1708,
     1738, 1504, 4054, 1642, 3924, 1540, 1777, 1837, 1686, 1765,
     1774, 1445, 3923, 1483, 3959, 3956, 1456, 1458, 3952, 1493,

     3956, 3953, 1486, 1490, 1443, 1642, 1901, 1654, 1798, 1952,
     1768, 1966, 1829, 4054, 1515, 1836, 1980, 1518, 3954, 3951,
     1460, 1497, 3947, 1520, 3951, 3948, 1527, 1547, 3915, 1561,
     3911, 3910, 3909,    0, 3908,    0, 4054, 1596, 1543, 1546,
     1579, 1636, 1542, 1595, 1628, 1637, 1577, 1651, 1653, 1565,
     1583, 1634, 1679, 1702, 1706, 1693, 1597, 1740, 1539, 1652,
     1710, 1750, 1733, 1758, 1768, 3910, 1639, 3906, 3905, 3907,
     1771, 1156, 3906, 1700, 3905, 1746, 1769, 1774, 1798, 1737,
     1772, 1780, 1797, 1814, 3904, 1828, 3903, 1834, 1831, 1833,
     1839, 1837, 1835, 1860, 1838, 1827, 1874, 3902, 1861,  552,

     3901, 1876, 1394, 1879, 1887, 1289, 1900, 1895, 1926, 1939,
     1880, 1903, 1942, 1864, 1949, 1943, 1954, 1953, 1955, 1944,
     1957, 1963, 1970, 1964, 1966, 1905, 3900, 1967, 1971, 1974,
     3899, 1973, 3898, 1250, 2041, 2032, 3894,    0, 3893,    0,
     3892, 3891, 3890,    0, 3889,    0, 2040, 3888, 3919, 2004,
     2025, 2024, 3923, 3920, 3923, 4054, 2092, 2102, 2164, 2048,
     3920, 3917, 3920, 4054, 2066, 2111, 2173, 3880, 3911, 2028,
     2096, 2049, 3915, 3912, 3915, 2024, 4054, 2101, 2181, 2026,
     4054, 2090, 2201, 2069, 3912, 3909, 2161, 2167, 2039, 2222,
     2033, 2107, 2208, 2230, 4054, 2074, 3910, 3907, 3910, 4054,

     2133, 2272, 3902, 3901, 2200, 2286, 2209, 2102, 2093, 4054,
     2226, 2294, 2103, 4054, 2203, 2301, 2126, 3905, 3902, 2281,
     2282, 2342, 2361, 2423, 2172, 2370, 2194, 2217, 2390, 3865,
     3896, 3892, 3859, 3855, 3854,    0, 3850,    0, 3849,    0,
     3845,    0, 2101, 2154, 3847, 2202, 2153, 2209, 2214, 2260,
     2262, 2263, 2106, 2034, 2147, 2267, 2024, 2281, 2201, 2206,
     2279, 2280, 2282, 2286, 1707, 2291, 2298, 2208, 2292, 2334,
     2323, 2342, 3840, 3839, 3835,    0, 3834,    0, 2321, 3833,
     2322, 2354, 2356, 3832, 2302, 2351, 2303, 2352, 2366, 3828,
     2368, 2379, 2380, 2396, 2370, 3827, 2433, 2399, 2402, 3823,

     2406, 2372, 2429, 2409, 3822, 3818, 3817, 2410, 2412, 2413,
     2415, 2420, 3811, 2416, 2421, 2418, 2417, 2423, 2426, 2422,
     2443, 2339, 3810, 3806, 2432, 2442, 2444, 3805, 2445, 2446,
     2447, 2448, 2449, 3797, 2452, 3852, 3789,    0, 3788,    0,
     3782,    0, 3781,    0, 2511, 2471, 3809, 3753, 3749, 2551,
     3771, 3797, 2473, 2475, 2498, 3801, 3795, 3798, 2538, 2485,
     3787, 3731, 3727, 2499, 3786, 3778, 2462, 2470, 3774, 2521,
     3773, 3770, 2482, 2483, 3761, 2512, 2524, 2524, 3765, 3757,
     3760, 2603, 2613, 2675, 3717, 2558, 3753, 3745, 2530, 2533,
     3741, 2622, 2539, 2639, 2665, 3703, 2565, 3739, 3731, 2542,

     2544, 3695,    0, 3689,    0, 3688,    0, 3659,    0,    0,
        0, 3661,    0, 2542, 2544, 2549, 2595, 2665, 2533, 2455,
     2597, 2607, 2603, 2545, 2453, 2599, 2489, 2615, 2548, 2629,
     2649, 2631, 2619, 2655, 2658, 2618, 2656, 2608, 2659, 2660,
     2696, 2662, 3652,    0, 3651,    0, 3645,    0, 3644,    0,
     2663, 2668, 3641, 3640, 2669, 2670, 2667, 2679, 3630, 3629,
     2674, 3620, 2671, 2681, 2719, 2722, 3619, 2693, 2694, 3613,
     3612, 2695, 2697, 2698, 3606, 2699, 3605, 3599, 3598, 3594,
     3593, 2701, 3587, 3586, 2702, 2703, 2704, 3580, 3579, 2712,
     2705, 2713, 3573, 2718, 3572, 3622, 4054,    0,    0, 4054,

        0,    0,    0,    0, 3539, 2765, 2735, 3577, 3521, 3515,
     3514, 3565, 3564, 2736, 3560, 3504, 3496, 2805, 3518, 3545,
     4054, 2773, 3549, 3541, 3544, 4054, 2775, 2786, 3531, 3498,
        0, 3492,    0, 3491,    0, 3487,    0, 3486, 2726, 2781,
     3485, 2248, 2744, 2812, 2798, 2792, 2779, 2780, 2763, 2784,
     2796, 2801, 3484, 2800, 2795, 2803, 2802, 2804, 2805, 2856,
     2822, 2814, 2838, 2828, 2824, 2832, 2833, 2829, 2844, 2834,
     3477,    0, 3476,    0, 3472,    0, 3465,    0, 2836, 2842,
     2843, 2848, 3467, 3461, 2835, 2846, 3460, 2878, 3456, 3455,
     2850, 3449, 3448, 2851, 2854, 3442, 2858, 3441, 3426, 2859,

     3425, 2857, 3421, 3417, 3409, 3385, 3378, 2916, 3432, 2882,
     2884, 2907, 3432, 3429, 3427, 3387, 3383, 3382, 3378,    0,
     3377, 3369, 3368, 3365, 3363, 3356, 3355, 2924, 2890, 3349,
     2741, 2874, 3348, 2855, 2892, 2893, 2896, 2902, 2899, 2700,
     2901, 2903, 2904, 2913, 2939, 2942, 3342, 2914, 2920, 2925,
     2927, 2930, 3341, 2932, 2944, 2916, 3332, 3331, 3325, 3324,
        0, 3294, 3293, 2936, 2937, 3289, 2938, 2940, 2941, 3288,
     3283, 2943, 3282, 3276, 2945, 3275, 3267, 3263, 3244, 3243,
     3239, 2933, 3270, 3211, 3210,    0,    0, 3229, 3228, 3224,
     3223, 2982, 2983, 2984, 2950, 3219, 3218, 2951, 3217, 2953,

     2955, 2958, 2965, 2956, 2966, 2967, 3214, 2962, 3000, 3213,
     2985, 2972, 3209, 2977, 2986, 2990, 2992, 2996,    0, 3205,
     3198, 3197, 2981, 2997, 3199, 3196, 2998, 3195, 3001, 3176,
     3169, 3168, 3165, 3137, 3157, 3139, 3138, 3091, 3008, 3093,
     3089, 3088, 3087, 3002, 3003, 3004, 3006, 3011, 3012, 3016,
     3014, 3086, 3081, 3080, 3018, 3078, 3077, 3022, 3024, 3073,
     3026, 2859, 2860, 3025, 3026, 3028, 2763, 2762, 2610, 2562,
     2510, 2335, 2336, 3032, 3035, 2246, 3039, 2232, 3033, 3045,
     2218, 3046, 3048, 2164, 3052, 2105, 2104, 1984, 1890, 1830,
     1779, 1777, 1661, 1597, 1538, 3047, 3053, 3054, 3056, 3058,

     3059, 1476, 1422, 1389, 1388, 1212, 1143, 3060, 1005, 1004,
     3063, 3064,  937,  476,  410, 3065, 3070, 3069, 3071, 3072,
     3073, 3075,  239,  128, 4054, 3154, 3165, 3176, 3187, 3195,
     3206, 3217, 3228, 3239, 3245, 3253, 3258, 3263, 3271, 3276,
     3281, 3286, 3291, 3296, 3307, 3312, 3315, 3320, 3325, 3330,
     3332, 3337, 3342, 3350, 3361, 3372, 3377, 3382, 3384, 3389,
     3391, 3396, 3398, 3403, 3405, 3410, 3412, 3417, 3425, 3430,
     3435, 3440, 3445, 3447, 3452, 3457, 3465, 3470, 3475, 3486,
     3491, 3496, 3498, 3503, 3505, 3510, 3515, 3517, 3522, 3524,
     3529, 3534, 3539, 3544, 3549, 3551, 3556, 3558, 3563, 3565,

     3570, 3575, 3580, 3585, 3590, 3595, 3597, 3602, 3610, 3615,
     3620, 3622, 3627, 3629, 3634, 3636, 3641, 3643, 3648, 3653,
     3655, 3660, 3662, 3667, 3669, 3674, 3676, 3678, 3683, 3688,
     3690, 3695, 3697, 3702, 3704, 3709, 3711, 3716, 3724, 3729,
     3731, 3733, 3735, 3737, 3739, 3741, 3746, 3748, 3753, 3755,
     3760, 3762, 3767, 3769, 3774, 3779, 3781, 3786, 3788, 3793,
     3795, 3800, 3802, 3807, 3812, 3817, 3822, 3824, 3829, 3834,
     3839, 3841, 3846, 3851, 3853, 3855, 3860, 3865, 3867, 3872,
     3877, 3882, 3887, 3892, 3897, 3902, 3907, 3912, 3917
    } ;

static const flex_int16_t yy_def[1490] =
    {   0,
     1325,    1, 1326, 1326, 1327, 1327, 1328, 1328, 1329, 1329,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1330, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1330, 1325,
     1325, 1325, 1325, 1330, 1325, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1325, 1325, 1325, 1325, 1325, 1331, 1325,
     1325, 1325, 1332, 1325, 1325, 1333, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1330, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1334,

     1325, 1325,   30, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1335,   30, 1325, 1325,   31, 1325, 1325, 1325,
     1325, 1325, 1325,   31, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1336, 1325,
     1325, 1325, 1325, 1325, 1330, 1325, 1337, 1338, 1325, 1325,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1339, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,

     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1325, 1325, 1325, 1325, 1331, 1331, 1331, 1325, 1331,
     1325, 1332, 1325, 1325, 1325, 1325, 1340, 1341, 1342, 1333,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1343, 1344, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325,  260, 1345, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325,  114,  276, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,

     1325, 1346, 1325, 1347, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1348, 1325, 1349, 1350, 1351, 1352, 1325, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1354, 1325, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1355,
     1356, 1325, 1325, 1357, 1358, 1359, 1360, 1361, 1362, 1325,
     1325, 1325, 1325, 1325, 1363, 1364, 1365, 1366, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325,  460, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325,  478, 1325, 1325, 1325, 1325, 1325,
     1325, 1325,  488, 1325, 1325, 1325, 1325, 1325, 1325, 1325,

     1325, 1325, 1325, 1325, 1367, 1368, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325,  507, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1369, 1325,
     1370, 1371, 1372, 1373, 1374, 1375, 1325, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1377, 1325, 1378, 1379, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,

     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1380, 1325, 1381, 1382, 1383, 1384,
     1385, 1385, 1386, 1387, 1388, 1389, 1325,  647, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325,  667, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,

     1325, 1325, 1325, 1325, 1390, 1325, 1390, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1391,
     1325, 1325, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
     1400, 1401, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,

     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1416, 1417, 1325, 1325, 1325, 1325, 1325, 1325,
      850, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1418, 1325, 1325, 1325, 1325, 1325,
     1325,  883, 1325, 1325, 1325,  892, 1325, 1325, 1325, 1325,

     1325, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
     1428, 1429, 1430, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1439, 1325, 1440, 1441, 1325,

     1442, 1443, 1444, 1445, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1018, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1446,
     1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,

     1429, 1429, 1429, 1463, 1464, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1465, 1446, 1466, 1448, 1467,
     1450, 1452, 1468, 1454, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1469, 1455, 1470, 1457,
     1471, 1459, 1461, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1472, 1463, 1473,
     1464, 1325, 1325, 1325, 1325, 1474, 1475, 1466, 1476, 1477,
     1468, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,

     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1478, 1469,
     1470, 1479, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1480,
     1472, 1481, 1473, 1325, 1482, 1483, 1476, 1477, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1484,
     1485, 1479, 1429, 1429, 1429, 1429, 1480, 1481, 1486, 1482,
     1487, 1483, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1488, 1484, 1489, 1485, 1429,
     1429, 1429, 1466, 1486, 1487, 1429, 1429, 1429, 1429, 1429,

     1429, 1429, 1429, 1470, 1488, 1489, 1466, 1429, 1429, 1429,
     1429, 1429, 1429, 1470, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429,    0, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,

     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325
    } ;

static const flex_int16_t yy_nxt[4146] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   31,   31,   31,   31,   31,
       31,   32,   33,   34,   35,   36,   37,   38,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   39,   18,   18,
       18,   18,   18,   18,   39,   18,   18,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       18,   53,   18,   54,   55,   18,   56,   18,   57,   58,
       59,   60,   61,   62,   18,   18,   63,   64,   65,   66,
       67,   68,   74,   74,   77,   77,   68,   86,   87,   69,

       77,   77,   88,   74,   74,   78,   79,   80,   80,   80,
       78,   80,   79,   81,   81,   81,   80,   82,   90,   83,
       83,   91,  133,  134,   89,   97,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  128,   85,   92,   99,
       83,   94,   95,   83,  100,  159,  156,  160,   75,   75,
       75,   75,  184,   85,  185,   85,  129,  101,  130,  131,
      153,  222,   85,  186,  202,  154,  157,  161,  162,  163,
      164,  192,  165,  166,  173,  167,  174,  168,   85,   85,
      193,  169,  170,   85,  175,  256,   85,   85,  194,  302,
      171,   85,  221,  158,   85,  195,   85,   96,  102,  176,

      103,  103,  103,  103,  103,  103,  103,  104,  104,  196,
       85,  391,  257,  155,  197,  223,   85,  105,   85,  198,
      106,  218,   85,  107,  108,  109,  110,  111,  219,  220,
      304,  180,  112,  113,  111,  181,  342,   85,   85,  114,
      182,   85,  105,  177,  183,  106,  344,   85,  115,  108,
      178,  116,  224,  110,   83,  111,  179,  376,  199,  112,
       85,  200,  113,  201,  111,  102, 1325,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   85,  225,   79,   80,
       80,   80,  225,  378,  327,  226,  328,  106,  208,  209,
      118,  119,  120,  121,  122,   85,  210,   85,  211,  123,

      187,  122,   85,  212,  153,   85,  124,  324,  188,  154,
      189,   85,  106,  190,  350,  125,  119,  191,  126,  327,
      121,  328,  122,  343,  215,  213,  123,  279,  279,  216,
      329,  122,  135,  217,   85,   85,  136,  137,   85,  138,
       85,  139,  140,  327,  141,  328,  142,  327,  327,  328,
      328,  347,  203,  204,   85,   85,  348,  155,  143,  144,
      145,  379,  205,  206,  329,  207,  280,  228,  229,   85,
      345,  214,  228,   78,   79,   80,   80,   80,   78,  327,
      601,  328,  146,  147,  327,  148,  328,  149,  230,  230,
      230,  230,  230,  230,  230,  230,  230,   80,   79,   80,

       80,   80,   80,   80,   79,   81,   81,   81,   80,  327,
      331,  328,  150,  151,  233,  234,   85,  330,  327,  233,
      328,  235,  327,  327,  328,  328,  235,  276,  276,  276,
      276,  276,  276,  276,  388,  236,  236,  236,  236,  236,
      236,  236,  153,  327, 1325,  328,  281,  154,  281,  235,
       85,  282,  282,  282,  282,  282,  282,  282,  282,  282,
     1325,   85,   85,   85,   85,  340,  277,  237,   85, 1325,
      346,  235,  341,  110,  284,   85,  235,  235,   85,  365,
      235,  235,  285,   85,  349,   85,  366,  368,  235, 1325,
      283,  235,   85,  235,  238,  235,  367,  239,  241,  284,

       85,   85,  242,  243,  377,  244,  380,  245,  246,  285,
      247,  102,  248,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  369,  370,  249,  250,  251,  390,  284,  286,
       85,  287,  288,  106,   85,   85,  285, 1325,  289,   85,
       85,  297,  285,  298,  299,  385,  383,   85,  252,  253,
       85,  254,  278,  284,  290,  371,  392,  291,  106,  288,
      389,  384,  399,  285,  386,  289,  300,  285,  372,  301,
       85,  299,  292,  387,  293,  381,  803,  294,  295,  255,
      260,  260,  260,  260,  260,  260,  260,  260,  260,   85,
       85,   85, 1325,  382,   85,  284,  296,   85,  373,  261,

      262,  263,   85,  285,  264,  265,  374,  395,  265,  375,
       85, 1325,   85,   85,  396,  411,  397,   85,  416,  266,
      284,  398,   85,   85,  261,  262,  263, 1325,  393,  264,
      285,  265,   85,  305,  406,  394, 1325,  424,  410,   85,
      405,  265,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  407,  292,   85,  293,  413, 1325,  294,  295,   85,
      284,  270,  271,  272,  408,   85,  273,  274,  285,  306,
      274,  121,  306,  412,  560,  284,   85,  307,  153,  409,
      307,  275,   85,  285,  110,  284,  270,  271,  272,  425,
      440,  273,  441,  274,  306,  285,  308,  306,  309,  310,

      284,  417,  296,  274,  307,  311,  314,  307,  315,  306,
      285,  316,  317,  319,  307,  320,  321,  307,  233,  234,
       85,  312,   85,  233,  313,  414,  310,  545,   85,  306,
      318,  418,  311,  121,  306,   85,   85,  307,  322,  307,
      314,  323,  315,  321,  307,  316,  317,  415,  419,   85,
      279,  279,   85,   85,  306,  584,  420,  351,  352,  353,
       85,  354,  355,  306,  307,  356,  422,  357,  423,  421,
       85,  307,  358,  359,  360,  361,  362,  400,  440,   85,
      441,  401,  428,  440,   85,  441,  285,  600,  306,  402,
      318,  403,  404,  426,  440,  441,  441,  427,  307,  429,

      225,   79,   80,   80,   80,  225,  228,  229,  226,  441,
       85,  228,  440,  285,  441,  228,  229,  542,  442,  440,
      228,  441,   85,  440,  440,  441,  441,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  430,  229,  440,  443,  441,
      430,  449,  431,  432,  432,  432,  432,  432,  432,  432,
      440,  440,  441,  441,  467, 1325,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  440,  449,  441,  449,  288,
      449,  499,  289,  449,  449,  295,  111,   85,  289,  467,
      299,  111,  433,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  307,  449,  311,  449,  477,  546,  449,  289,
      449,  111,  261,  262,  263,  289,  111,  264,  265,  289,
      453,  265,  454,  523,  122,  455,  456,  317,  471,  307,
      472,  311,  266,  473,  474,  288,   85,  261,  262,  263,
      284,  547,  264,  449,  265,  327,  289,  328,  285,  122,
      450,  467,  450,  311,  265,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  457,  284,  458,   85,  449,  310,
      457,  531,  467,  457,  467,  285,  467,  467,  467,  102,
      311,  276,  276,  276,  276,  276,  276,  276,  327,  457,
      328,  458,  111,  555,  452,   85,  457,  467,  532,  467,

      122,   85,  467,   85,  467,   85,  457,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  299,  111,  538,  539,
      277,  321,  122,  548,  321,  122,  461,  462,  463,   85,
       85,  464,  465,   85,  559,  465,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  310,  466,  122,  540,  541,
       85,  461,  462,  463,  311,  494,  464,  495,  465,   85,
      496,  497,   85,   85,  468,   85,  468,  544,  465,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  475,  498,
      476,  311,  553,  543,  475,   85,  289,  475,   85,  270,
      271,  272,   85,   85,  273,  274,   85,  572,  274,   85,

      556,   85,  440,  475,  441,  476,  554,  568,  470,  561,
      475,  565,  564,  289,  270,  271,  272,  557,  558,  273,
      475,  274,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  274,   85,   85,  569,  440,  604,  441,  281,   85,
      281,  571,  106,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  284,  494,   85,  495,   85,  570,  496,  497,
      285,  305,   85,   85,  306,  573,  562,  106,  478,  478,
      574,   85,  307,   85,  500,  153,  501,  284,   85,  502,
      503,  563,  575,   85,  289,   85,  590,  285,   85,  306,
      612,  479,  480,  481,  482,  483,  576,  111,  504,  307,

      484,  580,  483,  498, 1325,  577,   85,  485,   85,  578,
      579,  289,  583,  581,   85,   85,  486,  480,  306,  487,
      582,  482,  111,  483,   85,   85,  307,  484,  780,   85,
      586,   85,  483,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  500,  306,  501,  587,   85,  502,  503,  598,
       85,   85,  489,  307,  490,  585,   85,  491,  492,  588,
      589,  492,  524,   85,  525,  111,   85,  526,  527,   85,
       85,   85,  493, 1325,  591,  596,  593,  489,   85,  490,
      631,  549,  491,   85,  492,  122,  528,  550,  551,  552,
      111,  599,  504,  592,  492,  506,  602,  507,  507,  507,

      507,  507,  507,  507,  507,  507,   85,   85,   85,   85,
      122,  835,  628,  507,  507,  507,  507,  507,  507,   85,
      508,  509,  510,  511,  512,  605,   85,  606,  518,  513,
      519,  514,  607,  520,  521,  597,  515,   85,  507,  507,
      507,  507,  507,  507,   85,  516,  509,   85,  517,  518,
      511,  519,  512,   85,  520,  521,  513,  621,  594,  311,
      610,  514,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  808,   85,  522,   85,  595,   85,  524,  522,  525,
      311,  603,  526,  527,   85,   85,  311,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  609,   85,  614,   85,

      122,  305,  608,   85,   85,  611,  613,  311,   85,   85,
       85,   85,  618,   85,   85,   85,   85,   85,  620,   85,
      623,  619,  615,  616,  627,  122,  324,  528,  625,  622,
      617,  624,   85,   85,  632,   85,  626,  229,  629,  630,
      649,  430,  229,  227,  265,  633,  430,  669,  431, 1325,
     1314,  274,   85,  634,  235,  235,  235,  235,  235,  235,
      235,  432,  432,  432,  432,  432,  432,  432,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  450,  805,  450,
       85,  656,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  695,  706,  636,  647,  647,  647,  647,  647,  647,

      647,  647,  647,  652,  707,  653,  656,  703,  654,  655,
      289,  497,  289,  261,  311,  263,  695,  704,  264,  265,
      706,  503,  265,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  111,  648,   85, 1325,  111,  289,  261,  289,
      263,  311,  731,  264,  732,  265,  521,  656,  527,  656,
      676,  311,  656,  656,  672,  265,  673,  111,  677,  674,
      675,  111,  459,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  656,  122,  656,  676,  730,  656,  311,  656,
      482,  676,  461,  462,  463,  677,  676,  464,  465,  677,
      660,  465,  661,  122,  677,  662,  663,   85,  122, 1325,

       85,   85,  466,  766,   85,  748,  676,  461,  462,  463,
      482,  676,  464,  656,  465,  733,  677,  744,  122,  745,
      657,  677,  657,   85,  465,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  664,   85,  665,   85,  656,  755,
      664,   85,  734,  664,  469,  469,  469,  469,  469,  469,
      469,  469,  469,   85,   85,   85,  746,  752, 1325,  664,
      763,  665,  749,  756,  659,  743,  664,  276,  276,  276,
      276,  276,  276,  276,  104,  104,  664,  667,  667,  667,
      667,  667,  667,  667,  667,  667,   85,  689,  677,  690,
      691,  706,   85,  773,   85,   85,  270,  750,  272,  511,

      709,  273,  274,  708,  751,  274,  477,  747,  710,   85,
       85,   85,  692,  677,  757,  693,  668,  691,  753,  706,
      774,  270, 1307,  272,  754,  709,  273,  695,  274,  695,
      935,  767,  695,  695,  468,  710,  468,   85,  274,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  478,  478,
      758,   85,  695,  678,  695,  679,  680,  695,   85,  695,
       85,  684,  681,  685,   85,   85,  686,  687,   85,  762,
      781,  479,  480,  481,  482,  483,  759,  760,  682,  768,
      484,  683,  483,  680,  676,  688,  761,  485,  696,  681,
      697,   85,  677,  698,  699,   85,  486,  480,   85,  487,

      684,  482,  685,  483,   85,  686,  687,  484,   85,  676,
      770,  695,  483,  764,  709,  700,   85,  701,  786,  677,
      765,  700,  710,  676,  700,  782,   85,   85,  769,   85,
       85,  677,   85,  771,  783,   85,  695,   85,   85,  709,
      700,  772,  701,  711,  788,  712,  713,  700,  676,  710,
      688,  779,  714,  787,  784,   85,   85,  700,  677,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  715,  785,
      789,  716,   85,  713,  725,  710,  726,  727,  489,  714,
      490,  790,  709,  491,  492,   85,   85,  492,   85,   85,
      710,   85,   85,   85,  800,   85,   85,   85,  493,  728,

      710,  791,  729,  489,  727,  490,  511,  709,  491,  793,
      492,  792,  795,  794,  796,  797,  799,  710,   85,   85,
      492,  506,   85,  507,  507,  507,  507,  507,  507,  507,
      507,  507,   85,  798,   85,  816,  802,   85,   85,  507,
      507,  507,  507,  507,  507,   85,  508,  509,  510,  511,
      512, 1325,  801,   85,  807,  513,  804,  514,   85,  806,
      813,   85,  515,   85,  507,  507,  507,  507,  507,  507,
      814,  516,  509,  810,  517,  717,  511,  718,  512,  809,
      719,  720,  513,  722,   85,  722,  830,  514,  723,  723,
      723,  723,  723,  723,  723,  723,  723,   85,  709,  721,

       85,   85,   85,  717,  811,  718,  710,   85,  719,  720,
      818,   85,   85,   85,  817,   85,  820,  812,  815,  819,
      822,   85,   85,  709,   85,   85,  709,  724,   85,   85,
      824,   85,   85,  710,  710,  829,  825,  823,  821,  828,
      834,  826,  833,  229,  832, 1306,  827,  831,  847,  836,
      449,  709,  457,  721,  235,  235,  235,  235,  235,  235,
      235,  710,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  449,  852,  861,  467,  449,  465,  475,  677,  483,
      681,  261,   85,  263,  691,  483,  264,  265,  265,  855,
      265,  856,   85,  869,  857,  858,  449,  687,  875,  467,

      927,  648,  492,  924,  483,  677,  261,  681,  263,  265,
      483,  264,  274,  265,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  265,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  467,  461,  681,  463,  680,  710,  464,  465,
      891,  706,  465,  483,  720,  681,  878,  714,  879,   85,
      680,  880,  881,  851,   85, 1325, 1305,  467,  461,  923,
      463,  681,  666,  464,  710,  465,  914,  691,  483,  706,
      274,  657,  681,  657,  714,  465,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  864,   85,  865,  676,  925,  866,
      867,   85,   85,  676,  270,  677,  272,  727,  514,  273,
      274,  677,   85,  274,  864,  915,  865,  917,  868,  866,
      867,  870,  676,  871,  668,  681,  872,  873,  676,  270,
      514,  272,  677,  514,  273,  870,  274,  871,  677,  706,
      872,  873,  478,  478,  483,  681,  274,  714,  706,   85,
       85,  707,  681,  514,   85,  514,   85,   85,  483,  874,
      885,  713,   85,  713,  868,  916,   85,  706,  929,  483,
      714,  874,  681,  938,  714,  930,  706,  727,  514,  918,
       85,  694,  919,  483,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  882,   85,  882,   85,  714,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  886,   85,  887,
       85,   85,  888,  889,  886,   85,  887,  709,  709,  888,
      889,  920, 1127,  702,  922,  710,  710,   85,   85,   85,
       85,  890,  921,  932,   85,  926,  931,  884,  714,   85,
       85,  933,  709,  709,  928,  714,   85,  934,  936,  939,
       85,   85,  710,  710,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  952,  890,  714,  957,  955,  937,   85,
       85,   85,  714,  892,  892,  892,  892,  892,  892,  892,
      892,  892,   85,  897,   85,  898, 1325,   85,  899,  900,

       85,  940,  893,  941,  894,  942,  951,  895,  893,   85,
       85,  893,   85,  897,   85,  898,  514,  901,  899,  900,
      986,  953,  896,  954,   85,  958,   85,  893,   85,  894,
       85,  956,  895,  959,  893,  960,  514,   85,   85,  970,
      722,  514,  722,  964,  893,  723,  723,  723,  723,  723,
      723,  723,  723,  723,   85,  962,  965,   85,  971,  961,
       85,  514,  966,  901,   85,  968,  963,   85,   85,  969,
       85,   85,  967,   85,   85,   85,   85,  973,   85,   85,
       85,   85,  978,  980,   85,  972,  976,   85,  984,  979,
       85,   85,  974,  975,  985,  977,  983,  981,  982,  987,

       85,   85,   85,   85,   85,   85,   85,   85,  988,  991,
       85,   85,  989,   85, 1053,  993,  681,  449,  992,  656,
      990,  656, 1008, 1012,  681,  994,  664,  867,  483,  483,
     1048,  467,  995,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  449,  681,  656, 1013,  656,   85, 1015,  873,
     1055,  681,  700,  483,  483,  265,  467,  465,  695,  465,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  274,
      695, 1295,  845,  850,  850,  850,  850,  850,  850,  850,
      850,  850, 1020,  695,  714, 1021,  889,  714,  514, 1029,
      514,   85,  461,  900,  463,  695,  492,  464,  465,  859,

       85,  465,   85,   85, 1047, 1039,   85,   85,  492, 1041,
     1021,  714,  851,  514,  714,  514, 1042,  461, 1040,  463,
     1052, 1057,  464, 1325,  465,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  465, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018,  892,  892,  892,  892,  892,  892,
      892,  892,  892,   85,  893,   85,  894,   85, 1043,  895,
      893,   85, 1022,  893, 1023,   85,   85, 1024, 1025, 1051,
     1054, 1294, 1050,   85, 1019, 1066,   85,   85, 1049,  893,
     1061,  894, 1063,  896,  895, 1021,  893,   85, 1044,   85,
     1045, 1064,  882, 1046,  882, 1056,  893,  883,  883,  883,

      883,  883,  883,  883,  883,  883, 1026,   85, 1027, 1058,
     1021, 1060, 1026,   85,   85, 1026,   85,   85,   85, 1069,
       85,   85, 1067,   85, 1059,   85,   85,   85,   85,   85,
     1062, 1026,   85, 1027, 1065, 1080, 1068,   85, 1026,   85,
     1079, 1082, 1070, 1088, 1089, 1085, 1084, 1083, 1026, 1086,
     1081,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85, 1095, 1094, 1087, 1096, 1090, 1097,
       85,   85, 1099, 1092, 1091, 1093,   85,   85, 1101, 1100,
       85,  656,  695, 1098,   85, 1204, 1102,  850,  850,  850,
      850,  850,  850,  850,  850,  850, 1103, 1109, 1112,   85,

     1113,  893,   85, 1114, 1115, 1125,  656,  695,  892,  892,
      892,  892,  892,  892,  892,  892,  892, 1128, 1132,  465,
      492,   85, 1131, 1325, 1325, 1196, 1006, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1129,   85,   85,   85,
     1130, 1135,   85, 1134, 1133, 1136,  893, 1028,  894, 1126,
       85,  895,  893,   85,   85,  893,   85, 1137,   85,   85,
       85,   85,   85,   85, 1139, 1143, 1019, 1149, 1155, 1142,
       85,  893,   85,  894, 1141, 1140,  895, 1138,  893, 1145,
       85, 1148,   85, 1147, 1144, 1146,   85,   85,  893, 1150,
       85,   85,   85,   85,   85, 1151,   85, 1154, 1152, 1153,

       85,   85,   85, 1164,   85, 1156,   85, 1171,   85,   85,
     1166, 1168,   85,   85,   85,   85,   85,   85,   85, 1195,
     1325, 1165, 1169, 1167, 1177, 1176, 1172, 1170, 1021, 1173,
     1021, 1183,   85, 1198, 1174, 1026,   85, 1175, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1192,   85, 1193,
       85,   85, 1194, 1021,   85, 1021, 1200,   85, 1197,   85,
       85,   85,   85, 1209, 1210, 1207,  893, 1199,  893, 1201,
     1202,   85,   85, 1217,   85, 1211, 1205, 1108,   85, 1021,
     1203, 1212,   85,   85, 1208,   85, 1213, 1206,   85, 1218,
       85, 1215, 1214, 1216,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85, 1021, 1225, 1239, 1240,   85,   85,
     1241,   85, 1223,   85,   85, 1226,   85,  893, 1224, 1246,
       85, 1228, 1227,   85,   85,   85, 1229, 1249, 1250, 1252,
       85, 1245, 1244, 1248, 1242,   85, 1243, 1273, 1251,   85,
       85,   85,   85,   85,   85, 1247, 1253, 1256,   85, 1263,
       85, 1257, 1254, 1258,   85,   85,   85, 1255,   85,   85,
       85,   85,   85, 1259,   85, 1276,   85, 1265, 1275,   85,
       85, 1264,   85, 1277,   85, 1266,   85, 1281, 1278, 1283,
       85, 1274,   85,   85,   85, 1285,   85, 1289, 1279, 1282,
       85,   85, 1290,   85, 1280, 1292, 1291,   85, 1297, 1296,

     1298, 1299, 1284,   85,   85,   85,   85, 1301, 1300, 1302,
       85,   85,   85, 1303,   85, 1310,   85,   85,   85, 1312,
     1313,   85,   85,   85, 1311, 1308, 1309,   85,   85,   85,
       85,   85, 1318,   85, 1287,   85,   85, 1317,   85,   85,
     1315, 1319, 1316, 1324,   85,   85,   85,   85, 1322, 1320,
     1321,   85, 1325, 1323,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   84, 1325,

     1272,   84,   84,   84,   84,   84,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  232, 1270,  232,
      232, 1026,  232,  232,  232,  232, 1325,  232,  240, 1268,
     1325,  240,  240,  240,  240,  240,  240, 1267,  240,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      303,  303,  303,   85,   85,  303,  333,   85, 1262, 1325,
      333,  333,  333,  333,  335,  335, 1325,   85,  335,  337,
      337,   85,   85,  337,  363,   85,   85,   85,  363,  363,
      363,  363,  434,  434, 1325, 1238,  434,  436,  436, 1237,
     1325,  436,  438,  438, 1026, 1026,  438,  445,  445, 1234,

     1325,  445,  447,  447, 1233, 1325,  447,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  505,  505,
      303,  303,  303,  529, 1231,   85,  529,  529,  529,  529,
      529,  533,  533,   85,   85,  533,  335,  335,  535,  535,
       85,   85,  535,  337,  337,   84,   85,   85,   84,   84,
       84,   84,   84,  566, 1325, 1325,  566,  566,  566,  566,
      566,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  637,  637, 1325, 1221,  637,  434,  434,
      639,  639, 1325, 1220,  639,  436,  436,  641,  641,   85,

       85,  641,  438,  438,  643,  643,   85,   85,  643,  445,
      445,  645,  645,   85,   85,  645,  447,  447,  705,  705,
      705,   85,  705,  505,  505,  505, 1325,  505,  529, 1191,
     1325,  529,  529,  529,  529,  529,  735,  735, 1325, 1325,
      735,  737,  737, 1188, 1325,  737,  739,  739, 1187, 1026,
      739,  533,  533,  741,  741, 1185, 1184,  741,  535,  535,
       84, 1182,  700,   84,   84,   84,   84,   84,  566,  664,
     1181,  566,  566,  566,  566,  566,  775,  775, 1179,   85,
      775,  777,  777,   85,   85,  777,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  837,  837,   85,

       85,  837,  637,  637,  839,  839,   85,   85,  839,  639,
      639,  641,  641,   85,   85,  641,  841,  841,   85,   85,
      841,  643,  643,  843,  843,   85, 1163,  843,  645,  645,
      705,  705,  705, 1162,  705,  507,  507, 1160, 1158,  507,
      902,  902,   85,   85,  902,  904,  904, 1124, 1122,  904,
      906,  906, 1121, 1119,  906,  735,  735,  908,  908, 1117,
      900,  908,  737,  737,  910,  910,  893, 1111,  910,  739,
      739,  912,  912, 1110,  889,  912,  741,  741,   84, 1108,
      700,   84,   84,   84,   84,   84,  943,  943,  700, 1107,
      943,  945,  945,  873,  867,  945,  947,  947,  475,  664,

      947,  775,  775,  949,  949,  664, 1106,  949,  777,  777,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  998,  998,  457,  997,  998,  837,  837, 1000, 1000,
       85,   85, 1000,  839,  839, 1002, 1002,   85,   85, 1002,
      841,  841,   84,   84,   85,   85,   84,  843,  843,  705,
      705,   85,   85,  705, 1030, 1030,   85,   85, 1030,  902,
      902, 1032, 1032,   85,   85, 1032,  904,  904, 1034, 1034,
       85,   85, 1034,  906,  906, 1036, 1036,   85,   85, 1036,
      908,  908, 1038, 1038,  910,  910,   84,   85,   85,   84,
       84,   84,   84,   84,  912,  912, 1071, 1071,   85,   85,

     1071,  943,  943, 1073, 1073, 1078, 1076, 1073,  945,  945,
     1075, 1075, 1074, 1072, 1075,  947,  947, 1077, 1077,   85,
     1037, 1077,  949,  949,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996, 1104, 1104,  998,  998, 1000,
     1000, 1105, 1105, 1002, 1002,   84,   84, 1116, 1116, 1035,
     1033, 1116, 1030, 1030, 1118, 1118, 1031,  900, 1118, 1032,
     1032, 1120, 1120,  900, 1028, 1120, 1034, 1034,  333,  333,
      720,  889,  333, 1036, 1036, 1123, 1123,  889,  885, 1123,
     1157, 1157,  700, 1017, 1157, 1071, 1071, 1159, 1159, 1016,
     1014, 1159, 1073, 1073, 1161, 1161,  873,  873, 1161, 1075,

     1075,  363,  363,  687,  867,  363, 1077, 1077, 1178, 1178,
      867,  475, 1178, 1180, 1180,  475, 1011, 1180, 1186, 1186,
      664, 1010, 1186,  529,  529, 1009, 1007,  529, 1189, 1189,
     1190, 1190, 1006,  457, 1190, 1219, 1219,  457, 1005, 1219,
      566,  566, 1004, 1003,  566, 1222, 1222, 1230, 1230, 1001,
      999, 1230, 1232, 1232,  997,   85, 1232, 1235, 1235, 1186,
     1186, 1236, 1236,   85,   85, 1236,  912,  912,   85,   85,
      912, 1260, 1260, 1261, 1261,   85,   85, 1261, 1000, 1000,
       85,   85, 1000,   84,   84,   85,   85,   84, 1269, 1269,
       85,   85, 1269, 1271, 1271,  950,  948, 1271, 1286, 1286,

      946,  944, 1286, 1288, 1288,   85,  913, 1288, 1293, 1293,
      911,  909, 1293,  333,  333,  907,  905,  333, 1304, 1304,
      903,  527, 1304,  363,  363,  521,  730,  363,  720,  720,
      503,  497,  492,  877,  876,  687,  687,  475,  863,  862,
      860,  859,  465,  854,  853,  457,  849,  848,  846,  845,
      844,  842,  642,  642,  840,  838,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,  778,  776,  567,  742,
      740,  738,  736,  530,  527,  527,  317,  521,  521,  503,
      503,  295,  497,  497,  702,  694,  274,  671,  670,  666,
      265,  651,  650,  646,  644,  441,  441,  642,  640,  638,

       85,   85,  567,  537,  536,  534,  530,  329,  328,  317,
      317,  302,  295,  295,  268,  459,  448,  446,  444,  441,
      440,  439,  437,  435,  229,   85,   85,  364,  339,  338,
      336,  329,  334,  332,  329,  327,  326,  325,  268,  259,
      258,   83,   83,   85,  231,  172,  152,  132,  127,   85,
     1325,   71,   71,   11, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,

     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325
    } ;

static const flex_int16_t yy_chk[4146] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    8,    9,   10,    2,   19,   19,    2,

        9,   10,   20,    7,    8,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   16,   24,   16,
       24,   25,   36,   36,   20,   28,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   34,   50,   25,   29,
       25,   27,   27,   27,   29,   43,   41,   43,    7,    8,
        9,   10,   50,   46,   50,   57,   34,   29,   34,   34,
       39,   65,   52,   50,   57,   39,   41,   44,   44,   44,
       44,   52,   44,   44,   46,   44,   46,   44,   53,   47,
       52,   44,   44,   63,   47,   85, 1324,   44,   53,  113,
       44,   54,   63,   41,  192,   53,   55,   27,   30,   47,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   54,
       39,  192,   85,   39,   55,   65,   62,   30,  162,   55,
       30,   62,   49,   30,   30,   30,   30,   30,   62,   62,
      113,   49,   30,   30,   30,   49,  162,  164,   48,   30,
       49,   56,   30,   48,   49,   30,  164,  180,   30,   30,
       48,   30,   67,   30,   67,   30,   48,  180,   56,   30,
      182,   56,   30,   56,   30,   31,  124,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   59,   68,   68,   68,
       68,   68,   68,  182,  136,   68,  136,   31,   59,   59,
       31,   31,   31,   31,   31,   51,   59, 1323,   59,   31,

       51,   31,  170,   59,   60,  163,   31,  124,   51,   60,
       51,   61,   31,   51,  170,   31,   31,   51,   31,  137,
       31,  137,   31,  163,   61,   60,   31,  105,  105,   61,
      140,   31,   37,   61,  183,  167,   37,   37,  168,   37,
       58,   37,   37,  139,   37,  139,   37,  140,  142,  140,
      142,  167,   58,   58,   60,  165,  168,   60,   37,   37,
       37,  183,   58,   58,  141,   58,  105,   69,   69,  395,
      165,   60,   69,   78,   78,   78,   78,   78,   78,  141,
      395,  141,   37,   37,  144,   37,  144,   37,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   80,   80,   80,

       80,   80,   80,   81,   81,   81,   81,   81,   81,  145,
      145,  145,   37,   37,   75,   75,  189,  143,  143,   75,
      143,   75,  147,  148,  147,  148,   75,  103,  103,  103,
      103,  103,  103,  103,  189,   75,   75,   75,   75,   75,
       75,   75,  155,  151,  103,  151,  106,  155,  106,   75,
      161,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      103,  166,  169,  173,  174,  161,  103,   75, 1315,  103,
      166,   75,  161,  107,  107,  175,   75,   75,  176,  173,
       75,   75,  107,  181,  169,  184,  174,  176,   75,  103,
      106,   75,  155,   75,   75,   75,  175,   75,   83,  107,

      191,  177,   83,   83,  181,   83,  184,   83,   83,  107,
       83,  104,   83,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  177,  177,   83,   83,   83,  191,  110,  108,
      187,  108,  108,  104,  193,  201,  110, 1314,  108,  186,
      190,  112,  112,  112,  112,  187,  186,  188,   83,   83,
      178,   83,  104,  110,  108,  178,  193,  108,  104,  108,
      190,  186,  201,  110,  188,  108,  112,  112,  178,  112,
      185,  112,  109,  188,  109,  185,  600,  109,  109,   83,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  179,
      196,  211,  114,  185,  198,  109,  109,  197,  179,   98,

       98,   98,  207,  109,   98,   98,  179,  196,   98,  179,
      600,  114,  199,  195,  197,  207,  198,  206,  211,   98,
      109,  199,  203,  204,   98,   98,   98,  114,  195,   98,
      109,   98,  217,  114,  204,  195,  114,  217,  206,  209,
      203,   98,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  204,  116,  208,  116,  209,  114,  116,  116,  205,
      115,  102,  102,  102,  205,  358,  102,  102,  115,  121,
      102,  118,  118,  208,  358,  116,  218,  121,  213,  205,
      118,  102,  212,  116,  115,  115,  102,  102,  102,  218,
      242,  102,  242,  102,  121,  115,  119,  118,  119,  119,

      116,  212,  116,  102,  121,  119,  120,  118,  120,  125,
      116,  120,  120,  123,  123,  123,  123,  125,  233,  233,
      210,  119,  347,  233,  119,  210,  119,  347,  213,  120,
      120,  213,  119,  125,  125,  214,  379,  120,  123,  123,
      126,  123,  126,  123,  125,  126,  126,  210,  214,  215,
      280,  280,  171,  216,  120,  379,  214,  171,  171,  171,
      220,  171,  171,  126,  120,  171,  216,  171,  216,  215,
      202,  126,  171,  171,  171,  171,  171,  202,  243,  221,
      243,  202,  220,  245,  219,  245,  284,  394,  126,  202,
      126,  202,  202,  219,  248,  246,  248,  219,  126,  221,

      225,  225,  225,  225,  225,  225,  226,  226,  225,  247,
      344,  226,  246,  284,  246,  228,  228,  344,  249,  249,
      228,  249,  394,  250,  247,  250,  247,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  230,  230,  251,  251,  251,
      230,  265,  230,  236,  236,  236,  236,  236,  236,  236,
      253,  254,  253,  254,  274,  277,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  255,  265,  255,  261,  286,
      261,  292,  288,  261,  261,  292,  299,  348,  286,  274,
      297,  297,  236,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  306,  261,  310,  261,  277,  348,  261,  288,
      261,  299,  260,  260,  260,  286,  297,  260,  260,  290,
      263,  260,  263,  314,  321,  263,  263,  314,  272,  306,
      272,  310,  260,  272,  272,  290,  349,  260,  260,  260,
      295,  349,  260,  263,  260,  330,  290,  330,  295,  321,
      262,  272,  262,  312,  260,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  264,  295,  264,  354,  263,  312,
      264,  334,  270,  264,  270,  295,  272,  270,  270,  276,
      312,  276,  276,  276,  276,  276,  276,  276,  331,  264,
      331,  264,  300,  354,  262, 1313,  264,  270,  334,  270,

      322,  341,  270,  350,  270,  340,  264,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  300,  300,  340,  341,
      276,  319,  319,  350,  322,  322,  269,  269,  269,  357,
      342,  269,  269,  343,  357,  269,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  308,  269,  319,  342,  343,
      346,  269,  269,  269,  308,  287,  269,  287,  269,  352,
      287,  287, 1310, 1309,  271,  345,  271,  346,  269,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  273,  287,
      273,  308,  352,  345,  273,  355,  287,  273,  353,  275,
      275,  275,  368,  362,  275,  275,  359,  368,  275,  361,

      355,  356,  442,  273,  442,  273,  353,  364,  271,  359,
      273,  362,  361,  287,  275,  275,  275,  356,  356,  275,
      273,  275,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  275,  367,  398,  364,  443,  398,  443,  283,  366,
      283,  367,  278,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  296,  291,  360,  291,  369,  366,  291,  291,
      296,  278,  371,  370,  317,  369,  360,  278,  279,  279,
      370,  385,  317,  406,  298,  418,  298,  296,  372,  298,
      298,  360,  371,  375,  291,  373,  385,  296,  374,  317,
      406,  279,  279,  279,  279,  279,  372,  298,  298,  317,

      279,  375,  279,  291, 1307,  373,  378,  279,  376,  374,
      374,  291,  378,  376,  572,  377,  279,  279,  318,  279,
      377,  279,  298,  279,  381,  418,  318,  279,  572,  382,
      381,  392,  279,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  301,  318,  301,  382,  380,  301,  301,  392,
      383,  384,  282,  318,  282,  380,  390,  282,  282,  383,
      384,  282,  320,  426,  320,  301,  351,  320,  320,  386,
      387,  388,  282, 1306,  386,  390,  388,  282,  393,  282,
      426,  351,  282,  396,  282,  320,  320,  351,  351,  351,
      301,  393,  301,  387,  282,  303,  396,  303,  303,  303,

      303,  303,  303,  303,  303,  303,  399,  423,  634,  400,
      320,  634,  423,  303,  303,  303,  303,  303,  303,  401,
      303,  303,  303,  303,  303,  399,  391,  400,  313,  303,
      313,  303,  401,  313,  313,  391,  303,  404,  303,  303,
      303,  303,  303,  303,  414,  303,  303,  606,  303,  309,
      303,  309,  303,  389,  309,  309,  303,  414,  389,  313,
      404,  303,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  606,  397,  309,  403,  389,  408,  323,  313,  323,
      309,  397,  323,  323,  402,  405,  313,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  403,  407,  408,  409,

      323,  305,  402,  412,  410,  405,  407,  309,  411,  413,
      416,  417,  412,  419,  421,  420,  422,  425,  413,  427,
      417,  412,  409,  410,  422,  323,  324,  323,  420,  416,
      411,  419,  424,  428,  427,  429,  421,  431,  424,  425,
      453,  430,  430,  431,  453,  428,  430,  471,  430, 1305,
     1304,  471,  603,  429,  432,  432,  432,  432,  432,  432,
      432,  433,  433,  433,  433,  433,  433,  433,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  452,  603,  452,
     1303,  465,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  492,  505,  432,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  458,  505,  458,  465,  494,  458,  458,
      497,  494,  498,  451,  521,  451,  492,  500,  451,  451,
      505,  500,  451,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  503,  451, 1302,  515,  504,  497,  451,  498,
      451,  521,  518,  451,  524,  451,  518,  461,  524,  461,
      482,  522,  461,  461,  476,  451,  476,  503,  482,  476,
      476,  504,  459,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  461,  527,  461,  482,  515,  461,  522,  461,
      479,  479,  460,  460,  460,  482,  486,  460,  460,  479,
      463,  460,  463,  528,  486,  463,  463,  559,  527, 1295,

      543,  539,  460,  559,  540,  543,  479,  460,  460,  460,
      486,  486,  460,  463,  460,  530,  479,  539,  528,  540,
      462,  486,  462,  550,  460,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  464,  547,  464,  541,  463,  550,
      464,  551,  530,  464,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  544,  538,  557,  541,  547, 1294,  464,
      557,  464,  544,  551,  462,  538,  464,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  464,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  545,  484,  484,  484,
      484,  506,  552,  567,  542,  546,  469,  545,  469,  508,

      508,  469,  469,  506,  546,  469,  477,  542,  508,  548,
      560,  549,  484,  484,  552,  484,  469,  484,  548,  506,
      567,  469, 1293,  469,  549,  508,  469,  489,  469,  489,
      765,  560,  489,  489,  470,  508,  470,  553,  469,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  478,  478,
      553,  556,  489,  480,  489,  480,  480,  489,  574,  489,
      554,  481,  480,  481,  555,  765,  481,  481,  561,  556,
      574,  478,  478,  478,  478,  478,  554,  554,  480,  561,
      478,  480,  478,  480,  481,  481,  555,  478,  490,  480,
      490,  563,  481,  490,  490,  580,  478,  478,  558,  478,

      487,  478,  487,  478,  576,  487,  487,  478,  562,  481,
      563,  490,  478,  558,  511,  491,  564,  491,  580,  481,
      558,  491,  511,  487,  491,  576,  565,  577,  562,  571,
      581,  487,  578,  564,  577, 1292,  490, 1291,  582,  511,
      491,  565,  491,  509,  582,  509,  509,  491,  487,  511,
      487,  571,  509,  581,  578,  583,  579,  491,  487,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  509,  579,
      583,  509,  584,  509,  513,  513,  513,  513,  488,  509,
      488,  584,  516,  488,  488,  596,  586,  488, 1290,  589,
      516,  590,  588,  593,  596,  592,  595,  591,  488,  513,

      513,  586,  513,  488,  513,  488,  516,  516,  488,  589,
      488,  588,  591,  590,  592,  593,  595,  516,  594,  599,
      488,  507,  614,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  597,  594,  602,  614,  599,  604,  611,  507,
      507,  507,  507,  507,  507,  605,  507,  507,  507,  507,
      507, 1289,  597,  608,  605,  507,  602,  507,  607,  604,
      611,  612,  507,  626,  507,  507,  507,  507,  507,  507,
      612,  507,  507,  608,  507,  510,  507,  510,  507,  607,
      510,  510,  507,  512,  609,  512,  626,  507,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  610,  510,  510,

      613,  616,  620,  517,  609,  517,  510,  615,  517,  517,
      616,  618,  617,  619,  615,  621,  618,  610,  613,  617,
      620,  622,  624,  510,  625,  628,  517,  512,  623,  629,
      622,  632,  630,  510,  517,  625,  623,  621,  619,  624,
      632,  623,  630,  635,  629, 1288,  623,  628,  652,  635,
      650,  517,  652,  517,  636,  636,  636,  636,  636,  636,
      636,  517,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  651,  660,  672,  670,  650,  660,  672,  676,  691,
      680,  647,  757,  647,  689,  689,  647,  647,  650,  665,
      647,  665,  754,  684,  665,  665,  651,  684,  696,  670,

      757,  647,  696,  754,  691,  676,  647,  680,  647,  651,
      689,  647,  670,  647,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  647,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  671,  658,  682,  658,  678,  709,  658,  658,
      717,  708,  658,  692,  717,  678,  701,  713,  701,  743,
      682,  701,  701,  658,  753, 1287, 1286,  671,  658,  753,
      658,  682,  666,  658,  709,  658,  743,  692,  692,  708,
      671,  659,  678,  659,  713,  658,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  679,  755,  679,  687,  755,  679,
      679,  747,  744,  688,  667,  687,  667,  725,  725,  667,
      667,  688, 1284,  667,  683,  744,  683,  747,  679,  683,
      683,  693,  687,  693,  667,  679,  693,  693,  688,  667,
      727,  667,  687,  725,  667,  690,  667,  690,  688,  705,
      690,  690,  694,  694,  693,  683,  667,  715,  707,  759,
      746,  705,  679,  728,  760,  727,  768,  748,  690,  690,
      707,  711,  749,  715,  683,  746, 1281,  705,  759,  693,
      711,  693,  683,  768,  715,  760,  707,  728,  728,  748,
     1278,  694,  749,  690,  702,  702,  702,  702,  702,  702,

      702,  702,  702,  706, 1276,  706, 1042,  711,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  712,  750,  712,
      751,  752,  712,  712,  716,  756,  716,  720,  721,  716,
      716,  750, 1042,  702,  752,  720,  721,  761,  762,  758,
      763,  712,  751,  762,  764,  756,  761,  706,  712,  766,
      769,  763,  720,  721,  758,  716,  767,  764,  766,  769,
      785,  787,  720,  721,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  781,  716,  712,  787,  785,  767,  779,
      781,  771,  716,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  770,  726, 1273,  726, 1272,  822,  726,  726,

      772,  770,  723,  771,  723,  772,  779,  723,  723,  786,
      788,  723,  782,  729,  783,  729,  726,  726,  729,  729,
      822,  782,  723,  783,  789,  788,  791,  723,  795,  723,
      802,  786,  723,  789,  723,  791,  729,  792,  793,  802,
      724,  726,  724,  795,  723,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  794,  793,  797,  798,  803,  792,
      799,  729,  797,  729,  801,  799,  794,  804,  808,  801,
      809,  810,  798,  811,  814,  817,  816,  808,  812,  815,
      820,  818,  814,  816,  819,  804,  811,  803,  820,  815,
      825,  797,  809,  810,  821,  812,  819,  817,  818,  825,

      826,  821,  827,  829,  830,  831,  832,  833,  826,  830,
      835,  925,  827,  920,  925,  832,  867,  846,  831,  853,
      829,  854,  855,  864,  868,  833,  855,  864,  873,  874,
      920,  860,  835,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  846,  867,  853,  870,  854,  927,  878,  870,
      927,  868,  878,  873,  874,  846,  860,  853,  876,  854,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  860,
      877, 1271,  845,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  886,  876,  889,  893,  886,  890,  900,  897,
      901,  919,  850,  897,  850,  877,  876,  850,  850,  859,

      914,  850,  915,  924,  919,  914,  929,  916,  877,  915,
      893,  889,  850,  900,  890,  901,  916,  850,  914,  850,
      924,  929,  850, 1270,  850,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  850,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  917,  883,  921,  883,  926,  917,  883,
      883,  923,  894,  883,  894,  922,  938,  894,  894,  923,
      926, 1269,  922,  928,  883,  938,  936,  933,  921,  883,
      933,  883,  935,  892,  883,  894,  883,  930,  918,  932,
      918,  936,  884,  918,  884,  928,  883,  884,  884,  884,

      884,  884,  884,  884,  884,  884,  895,  931,  895,  930,
      894,  932,  895,  934,  937,  895,  935,  939,  940,  941,
      942,  951,  939,  918,  931,  957,  952,  955,  956,  963,
      934,  895,  961,  895,  937,  952,  940,  958,  895,  964,
      951,  956,  942,  965,  966,  961,  958,  957,  895,  963,
      955,  968,  969,  972,  941,  973,  974,  976, 1140,  982,
      985,  986,  987,  991,  976,  974,  964,  982,  968,  985,
      990,  992,  987,  972,  969,  973,  994,  965,  991,  990,
      966, 1007, 1014,  986, 1039, 1140,  992, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006,  994, 1022, 1027, 1131,

     1027, 1022, 1043, 1027, 1027, 1039, 1007, 1014, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1043, 1046, 1007,
     1014, 1049, 1045, 1268, 1267, 1131, 1006, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1044, 1047, 1048, 1040,
     1044, 1049, 1050, 1048, 1047, 1050, 1018, 1028, 1018, 1040,
     1046, 1018, 1018, 1055, 1051, 1018, 1045, 1051, 1054, 1052,
     1057, 1056, 1058, 1059, 1054, 1058, 1018, 1063, 1069, 1057,
     1044, 1018, 1062, 1018, 1056, 1055, 1018, 1052, 1018, 1060,
     1061, 1062, 1065, 1061, 1059, 1060, 1064, 1068, 1018, 1064,
     1066, 1067, 1070, 1085, 1079, 1065, 1063, 1068, 1066, 1067,

     1080, 1081, 1069, 1079, 1086, 1070, 1082, 1088, 1091, 1094,
     1081, 1085, 1095, 1134, 1060, 1102, 1097, 1100, 1263, 1129,
     1262, 1080, 1086, 1082, 1102, 1100, 1091, 1086, 1110, 1094,
     1111, 1112, 1132, 1134, 1095, 1112, 1088, 1097, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1128, 1129, 1128,
     1135, 1136, 1128, 1110, 1137, 1111, 1136, 1139, 1132, 1141,
     1138, 1142, 1143, 1145, 1146, 1143, 1110, 1135, 1111, 1137,
     1138, 1144, 1148, 1155, 1156, 1148, 1141, 1108, 1149, 1182,
     1139, 1149, 1128, 1150, 1144, 1151, 1150, 1142, 1152, 1156,
     1154, 1152, 1151, 1154, 1164, 1165, 1167, 1145, 1168, 1169,

     1146, 1172, 1155, 1175, 1182, 1167, 1192, 1193, 1195, 1198,
     1194, 1200, 1164, 1201, 1204, 1168, 1202, 1182, 1165, 1202,
     1208, 1172, 1169, 1203, 1205, 1206, 1175, 1205, 1206, 1209,
     1212, 1201, 1200, 1204, 1195, 1214, 1198, 1239, 1208, 1223,
     1192, 1193, 1194, 1211, 1215, 1203, 1211, 1215, 1216, 1223,
     1217, 1216, 1212, 1217, 1218, 1224, 1227, 1214, 1209, 1229,
     1244, 1245, 1246, 1218, 1247, 1246, 1239, 1227, 1245, 1248,
     1249, 1224, 1251, 1247, 1250, 1229, 1255, 1250, 1248, 1255,
     1258, 1244, 1259, 1264, 1265, 1259, 1266, 1261, 1249, 1251,
     1274, 1279, 1264, 1275, 1249, 1266, 1265, 1277, 1275, 1274,

     1277, 1279, 1258, 1280, 1282, 1296, 1283, 1282, 1280, 1283,
     1285, 1297, 1298, 1285, 1299, 1298, 1300, 1301, 1308, 1300,
     1301, 1311, 1312, 1316, 1299, 1296, 1297, 1318, 1317, 1319,
     1320, 1321, 1316, 1322, 1260, 1257, 1256, 1312, 1254, 1253,
     1308, 1317, 1311, 1322, 1252, 1243, 1242, 1241, 1320, 1318,
     1319, 1240, 1238, 1321, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1330, 1237,

     1236, 1330, 1330, 1330, 1330, 1330, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1332, 1235, 1332,
     1332, 1234, 1332, 1332, 1332, 1332, 1233, 1332, 1333, 1232,
     1231, 1333, 1333, 1333, 1333, 1333, 1333, 1230, 1333, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1335, 1335, 1335, 1228, 1226, 1335, 1336, 1225, 1222, 1221,
     1336, 1336, 1336, 1336, 1337, 1337, 1220, 1213, 1337, 1338,
     1338, 1210, 1207, 1338, 1339, 1199, 1197, 1196, 1339, 1339,
     1339, 1339, 1340, 1340, 1191, 1190, 1340, 1341, 1341, 1189,
     1188, 1341, 1342, 1342, 1185, 1184, 1342, 1343, 1343, 1183,

     1181, 1343, 1344, 1344, 1180, 1179, 1344, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1346, 1346,
     1347, 1347, 1347, 1348, 1178, 1177, 1348, 1348, 1348, 1348,
     1348, 1349, 1349, 1176, 1174, 1349, 1350, 1350, 1351, 1351,
     1173, 1171, 1351, 1352, 1352, 1353, 1170, 1166, 1353, 1353,
     1353, 1353, 1353, 1354, 1163, 1162, 1354, 1354, 1354, 1354,
     1354, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1357, 1357, 1160, 1159, 1357, 1358, 1358,
     1359, 1359, 1158, 1157, 1359, 1360, 1360, 1361, 1361, 1153,

     1147, 1361, 1362, 1362, 1363, 1363, 1133, 1130, 1363, 1364,
     1364, 1365, 1365, 1127, 1126, 1365, 1366, 1366, 1367, 1367,
     1367, 1125, 1367, 1368, 1368, 1368, 1124, 1368, 1369, 1123,
     1122, 1369, 1369, 1369, 1369, 1369, 1370, 1370, 1121, 1119,
     1370, 1371, 1371, 1118, 1117, 1371, 1372, 1372, 1116, 1115,
     1372, 1373, 1373, 1374, 1374, 1114, 1113, 1374, 1375, 1375,
     1376, 1109, 1107, 1376, 1376, 1376, 1376, 1376, 1377, 1106,
     1105, 1377, 1377, 1377, 1377, 1377, 1378, 1378, 1104, 1103,
     1378, 1379, 1379, 1101, 1099, 1379, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1098,

     1096, 1381, 1382, 1382, 1383, 1383, 1093, 1092, 1383, 1384,
     1384, 1385, 1385, 1090, 1089, 1385, 1386, 1386, 1087, 1084,
     1386, 1387, 1387, 1388, 1388, 1083, 1077, 1388, 1389, 1389,
     1390, 1390, 1390, 1075, 1390, 1391, 1391, 1073, 1071, 1391,
     1392, 1392, 1053, 1041, 1392, 1393, 1393, 1038, 1036, 1393,
     1394, 1394, 1034, 1032, 1394, 1395, 1395, 1396, 1396, 1030,
     1029, 1396, 1397, 1397, 1398, 1398, 1025, 1024, 1398, 1399,
     1399, 1400, 1400, 1023, 1020, 1400, 1401, 1401, 1402, 1019,
     1017, 1402, 1402, 1402, 1402, 1402, 1403, 1403, 1016, 1015,
     1403, 1404, 1404, 1013, 1012, 1404, 1405, 1405, 1011, 1010,

     1405, 1406, 1406, 1407, 1407, 1009, 1008, 1407, 1408, 1408,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1410, 1410, 1005,  996, 1410, 1411, 1411, 1412, 1412,
      995,  993, 1412, 1413, 1413, 1414, 1414,  989,  988, 1414,
     1415, 1415, 1416, 1416,  984,  983, 1416, 1417, 1417, 1418,
     1418,  981,  980, 1418, 1419, 1419,  979,  978, 1419, 1420,
     1420, 1421, 1421,  977,  975, 1421, 1422, 1422, 1423, 1423,
      971,  970, 1423, 1424, 1424, 1425, 1425,  967,  962, 1425,
     1426, 1426, 1427, 1427, 1428, 1428, 1429,  960,  959, 1429,
     1429, 1429, 1429, 1429, 1430, 1430, 1431, 1431,  954,  953,

     1431, 1432, 1432, 1433, 1433,  949,  947, 1433, 1434, 1434,
     1435, 1435,  945,  943, 1435, 1436, 1436, 1437, 1437,  912,
      908, 1437, 1438, 1438, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1440, 1440, 1441, 1441, 1442,
     1442, 1443, 1443, 1444, 1444, 1445, 1445, 1446, 1446,  906,
      904, 1446, 1447, 1447, 1448, 1448,  902,  899, 1448, 1449,
     1449, 1450, 1450,  898,  896, 1450, 1451, 1451, 1452, 1452,
      891,  888, 1452, 1453, 1453, 1454, 1454,  887,  885, 1454,
     1455, 1455,  881,  880, 1455, 1456, 1456, 1457, 1457,  879,
      875, 1457, 1458, 1458, 1459, 1459,  872,  871, 1459, 1460,

     1460, 1461, 1461,  869,  866, 1461, 1462, 1462, 1463, 1463,
      865,  863, 1463, 1464, 1464,  862,  861, 1464, 1465, 1465,
      858,  857, 1465, 1466, 1466,  856,  852, 1466, 1467, 1467,
     1468, 1468,  851,  849, 1468, 1469, 1469,  848,  847, 1469,
     1470, 1470,  843,  841, 1470, 1471, 1471, 1472, 1472,  839,
      837, 1472, 1473, 1473,  836,  834, 1473, 1474, 1474, 1475,
     1475, 1476, 1476,  828,  824, 1476, 1477, 1477,  823,  813,
     1477, 1478, 1478, 1479, 1479,  807,  806, 1479, 1480, 1480,
      805,  800, 1480, 1481, 1481,  796,  790, 1481, 1482, 1482,
      784,  780, 1482, 1483, 1483,  777,  775, 1483, 1484, 1484,

      774,  773, 1484, 1485, 1485,  745,  741, 1485, 1486, 1486,
      739,  737, 1486, 1487, 1487,  735,  734, 1487, 1488, 1488,
      733,  732, 1488, 1489, 1489,  731,  730, 1489,  719,  718,
      704,  703,  699,  698,  697,  686,  685,  675,  674,  673,
      669,  668,  663,  662,  661,  655,  654,  653,  649,  648,
      645,  643,  642,  641,  639,  637,  633,  631,  627,  601,
      598,  587,  585,  575,  573,  570,  569,  568,  566,  535,
      533,  532,  531,  529,  526,  525,  523,  520,  519,  502,
      501,  499,  496,  495,  493,  485,  474,  473,  472,  466,
      456,  455,  454,  447,  445,  444,  440,  438,  436,  434,

      415,  365,  363,  339,  337,  335,  333,  332,  327,  316,
      315,  304,  294,  293,  267,  266,  257,  256,  252,  244,
      241,  239,  238,  237,  227,  200,  194,  172,  160,  158,
      157,  150,  149,  146,  138,  135,  134,  130,  100,   97,
       96,   93,   91,   84,   71,   45,   38,   35,   32,   18,
       11,    4,    3, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,

     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[227] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Tue Aug 30 18:39:54 2022
 * Update Count     : 760
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

//**************************** Includes and Defines ****************************

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "ParseNode.h"
#include "TypedefTable.h"

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"

// lex uses __null in a boolean context, it's fine.
#pragma GCC diagnostic ignored "-Wnull-conversion"
#line 1949 "Parser/lex.cc"
#line 97 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// ' stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}




#line 1966 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define BKQUOTE 2
#define QUOTE 3
#define STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 172 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 2191 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1326 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4054 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 174 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 196 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 199 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 200 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 201 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 204 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 207 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 208 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 209 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }
	YY_BREAK
/* keywords */
case 10:
YY_RULE_SETUP
#line 212 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 213 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 214 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 217 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 218 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 219 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 220 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 221 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 224 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 225 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT16); }					// GCC
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32); }					// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32X); }					// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64); }					// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64X); }					// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 103:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VALIST); }			// GCC
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 142:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* numeric constants */
case 144:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value */
case 152:
YY_RULE_SETUP
#line 364 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant */
case 155:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 158:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 378 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 161:
YY_RULE_SETUP
#line 381 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 384 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 385 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 386 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 387 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 390 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 391 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 392 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 174:
YY_RULE_SETUP
#line 396 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 397 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 398 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 178:
YY_RULE_SETUP
#line 402 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 403 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 408 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 409 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 413 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 414 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 430 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 436 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 219:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 224:
YY_RULE_SETUP
#line 482 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 225:
YY_RULE_SETUP
#line 494 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 496 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 3476 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BKQUOTE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1326 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1326 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1325);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 496 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " at token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

