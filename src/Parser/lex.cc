
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 242
#define YY_END_OF_BUFFER 243
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1915] =
    {   0,
        0,    0,    0,    0,  162,  162,  165,  165,  243,  241,
        7,    8,    7,  188,  164,  150,  194,  197,  161,  174,
      175,  191,  189,  178,  190,  181,  193,  154,  155,  179,
      180,  199,  201,  200,  202,  170,  150,  172,  192,  173,
      195,  150,  171,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  176,  198,  177,  196,    7,  241,    4,    4,  162,
      163,  169,  165,  166,    7,    7,  206,  235,  150,    0,
      219,  187,  211,  220,  217,  203,  214,  226,  204,  215,
      213,  229,    0,  158,    3,    0,  218,  157,  154,    0,

        0,    0,  154,  154,  154,  154,  154,  154,    0,    0,
      154,  154,  155,  155,  155,  155,  155,  155,  155,    0,
      155,  155,  185,  186,  184,  207,  209,  205,  210,  208,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  225,  182,  164,
      161,  150,    0,  216,    0,    0,  222,    0,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,    0,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,   48,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,   79,  150,  150,  150,  150,  150,   97,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  221,  212,    0,  227,    7,    0,    0,    0,    2,
        0,    5,  162,    0,  168,  167,  167,    0,    0,    0,
      165,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  228,    0,
      230,  183,  158,  158,    0,  158,  158,  158,  158,    0,
        6,  159,  157,    0,  157,  157,  157,  157,  154,    0,
        0,  153,    0,    0,  159,    0,  154,  154,  154,  154,
      154,  154,  154,  154,    0,    0,    0,  154,  154,  154,

      154,  154,  154,  154,    0,  156,    0,    0,  155,  155,
      155,  155,  155,  155,  155,  155,    0,    0,    0,  155,
      155,  155,  155,  155,  155,  155,    0,  223,  224,    0,
      239,  236,    0,    0,    0,  238,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  151,    0,  150,   15,   16,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  150,   72,  150,  150,  150,  150,
       86,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  126,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  232,  231,    0,    0,
      167,    0,    0,    0,    0,    0,  167,    0,    0,  240,
        0,    0,    0,    0,    0,    0,    0,  234,  233,  158,
        0,  158,    0,    0,    0,    0,    0,  158,  158,    0,
      159,  159,    0,  159,  159,  159,  159,  157,    0,  157,
        0,    0,    0,    0,    0,  157,  157,    0,  153,  153,

      153,  153,  153,  153,  153,    0,  153,  153,  159,  159,
      159,  159,  159,  159,    0,    0,    0,  154,  154,    0,
        0,    0,    0,  154,  154,    0,    0,  156,  156,  156,
      156,  156,  156,  156,  156,    0,  156,  156,    0,    0,
        0,  155,  155,    0,    0,    0,    0,  155,  155,  238,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      237,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  151,

        0,    0,    0,  150,   22,  150,  150,   27,  150,   30,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,   51,  150,   53,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,   78,  150,  150,   91,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  139,  150,  150,  150,  146,  150,
      148,  150,    0,    0,    0,    0,    0,    0,  167,    0,
        0,    0,    0,    0,  158,  158,    0,  158,  158,    0,
        0,    0,    0,  159,    0,  159,    0,    0,    0,    0,

        0,  159,  159,    0,  157,  157,    0,  157,  157,    0,
        0,    0,    0,  153,  153,  153,  153,  153,  153,  153,
      153,    0,    0,    0,  153,  153,  153,  153,  153,  153,
      153,    0,  159,    0,    0,    0,    0,  159,  159,    0,
        0,    0,    0,    0,    0,    0,  156,  156,  156,  156,
      156,  156,  156,  156,    0,    0,    0,  156,  156,    0,
      160,    0,  156,  156,  156,  156,  156,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  150,  150,   25,  150,

      150,  150,  150,  150,  150,  150,  150,  150,   17,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,    0,    0,    0,    0,
        0,    0,  150,  150,   26,   28,  150,  150,   34,   38,
      150,  150,   33,  150,  150,  150,  150,   50,  150,  150,
      150,  150,  150,   59,   60,  150,  150,   75,  150,  150,
      150,  150,   93,   96,   98,  150,  150,  150,  150,  150,
      106,  150,  150,  150,  150,  150,  150,  150,  122,  150,
      125,  127,  150,  150,  150,  133,  150,  150,  150,  150,
      150,  150,  147,  150,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  158,    0,  158,  158,  159,  159,
        0,  159,  159,    0,    0,    0,    0,    0,  157,    0,
      157,  157,    0,    0,    0,  153,  153,    0,    0,    0,
        0,  153,  153,    0,  159,  159,    0,    0,    0,    0,
        0,  160,    0,    0,    0,    0,    0,  156,  156,    0,
      160,  160,  160,  160,  160,    0,    0,    0,  156,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      150,    0,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,   81,  150,  150,  150,  150,  150,  150,  150,  150,
      150,    0,    0,    0,    0,    0,    0,    0,    0,  150,
      150,  150,  150,   31,   32,  150,  150,  150,  150,  150,
       49,   52,  150,   56,  150,  150,  150,  150,   73,  150,
      150,   83,   87,  150,  150,  150,  101,  150,  105,  107,
      110,  112,  115,  150,  117,  118,  150,  150,  150,  132,
      129,  150,  150,  150,  143,  150,  150,  149,    0,    1,
        0,    0,  167,    0,    0,    0,    0,  158,    0,  159,
        0,  159,  159,  157,    0,    0,  159,    0,  159,  159,

      160,  160,    0,  160,    0,    0,    0,    0,  160,  160,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  150,  150,   19,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,   18,
      150,  150,  150,  150,   39,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,    0,    0,    0,
        0,    0,    0,    0,    0,    9,   11,  150,  150,  150,
      150,  111,   46,   47,  150,  150,   58,  150,   62,   74,

      150,   92,   99,  150,  150,  150,  116,  150,  150,  124,
      128,  150,  138,  150,  144,  150,    0,    0,  159,  159,
        0,    0,  160,  160,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  152,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,   12,   35,  150,  150,   65,   66,   68,   77,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,   82,   84,   88,  150,  150,  108,  119,  130,

      150,  150,    0,    0,    0,    0,    0,    0,    0,  150,
      150,   41,  150,  150,  150,   64,  150,  100,  102,  150,
      150,  150,  135,  140,  150,    0,    0,    0,    0,  160,
        0,  160,  160,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  150,  150,  150,   70,   67,   69,  150,
       94,  150,  150,   13,  150,  150,  150,   36,   40,  150,
      150,   61,  150,  150,   90,  150,  150,  150,  150,  150,

        0,    0,    0,    0,  150,  150,   42,   54,  150,   76,
      150,  150,  150,  145,    0,    0,    0,    0,  160,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  150,   43,   44,
       71,   80,  150,  150,  150,  150,  150,  150,  150,  150,
       63,   85,   89,  103,  109,  131,  150,  141,    0,    0,
        0,   24,  150,  150,  150,  150,  150,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       45,  150,  150,   14,   20,   23,  150,  150,   37,  150,
      150,  134,  150,    0,    0,    0,    0,   29,   57,  150,
      150,  123,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      150,  150,  150,  150,  150,  150,  104,  142,    0,    0,

        0,  150,  121,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  150,  120,   21,  150,
      150,   55,    0,  114,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  113,  150,  150,  150,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  150,  150,
      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  150,  136,  150,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  150,  137,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   11,   51,   56,   11,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   11,   73,   74,   75,   76,
       77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   88,   89,   90,   91,   92,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[93] =
    {   0,
        1,    2,    3,    2,    2,    2,    2,    1,    4,    1,
        5,    1,    1,    6,    7,    1,    1,    1,    8,    1,
        9,    1,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   11,    1,    1,    1,    1,    1,    1,   12,   12,
       12,   12,   12,   12,    5,    5,    5,    5,    5,   13,
        5,    5,    5,    5,    5,    5,    5,    1,   14,    8,
        1,   15,    1,   12,   12,   12,   12,   12,   12,    5,
        5,    5,    5,    5,    5,    5,    5,   13,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        1,    1

    } ;

static const flex_int16_t yy_base[2392] =
    {   0,
        0,   91, 6259, 6258,   91,   92,   93,   94, 6274, 8778,
      105, 8778,  111,   84, 8778, 6214,   64,   91, 8778, 8778,
     8778,   85,   90, 8778,   94,  111,  111,  166,  234, 6233,
     8778,  131, 6233,   88,  315,  109,  140, 6209,  120, 8778,
      110,  299, 6203,   97,  105,  168,  102,  124,  239,  100,
      142,   99,  158,  171,   89,  283,  300,  353,  197,  214,
      113, 8778,  153, 8778,  211,  384,  393, 8778, 6243,    0,
     8778,  428,    0, 8778,  288,  404, 8778,  507, 6204,  150,
     8778, 8778, 8778, 8778, 8778, 6225, 8778, 6226, 6223, 8778,
     8778,  262, 6238,  575, 8778, 6255, 8778,  638,  420,  507,

      252,  443,  498,  500,  604,  309, 8778,  513,  204,  632,
      330,  666,    0,  574,  653,  696,  403, 8778,  564,  205,
      684,  728, 8778, 8778, 8778, 6222, 8778, 8778, 8778, 6221,
     6220,  125,  264, 6238,  272,  444,  299,  283,  391,  289,
      362, 6216,  294,  310, 6193, 6160,  397, 8778, 8778, 8778,
     8778,  450,  810, 8778, 6181, 6180, 8778, 6144,  421,  191,
      298,  161,  213,  301,  149,  425,  311,  229,  712, 6173,
      355,  374,  304,  325,  418,  430,  419,  462,  750,  256,
      432,  435,  429,  492,  499,  498,  493,  431,  495,  497,
      520,  464,  527, 6170,  534,  519,  555,  533,  573, 6169,

      537,  761,  568,  644,  591,  589,  619,  597,  599,  678,
      624,  620,  700,  669,  686,  674,  671,  675,  701,  634,
      694, 8778, 8778, 6192, 6190,  830,  821, 6219,  871, 8778,
      880, 8778,    0,  796, 8778, 8778,  830, 6158, 6157, 6156,
        0, 6182,  401,  553, 6200,  638,  752,  770,  726,  826,
      769,  829, 6177,  773,  833,  877, 6151, 6150, 8778, 6176,
     6175, 8778,  892,  883,  955,  918,  945,  725, 6147, 6205,
     8778, 1008,  953, 1071,  981, 1037,  841, 1070, 1102,  767,
     1142, 1188,  416, 1017, 1254, 1163,  873, 8778,  886, 1150,
      891, 8778,  921, 1079,  690, 6182, 6179, 1060, 1148,  891,

     1130,  877,  944, 1193,    0, 1319, 6184, 1263,  915, 8778,
     1003, 1327,  971, 8778, 1007, 1244,  796, 6179, 6176, 1169,
     1174, 1020, 1282,  879, 1128, 1370, 1395, 8778, 8778, 6165,
     8778, 8778,  971,  986, 6134, 6127,  974, 1456, 1409, 1064,
     1432, 1443, 1481, 1490, 1467, 1501, 1559, 6123,    0, 6121,
        0, 6086,  803,  705, 1006,  726,  825, 1081,  886,  812,
      908,  894, 1004, 1173,  935, 1086,  913, 1061, 1138, 1005,
     1082,  808, 1065, 1001, 1148, 6115, 1175,  943, 6112, 6111,
     1149, 1089, 1087, 1147, 1002, 1102, 1150, 1159, 1192, 1238,
     1254, 1125, 1185, 1189,  944,  763, 1204, 1244, 1263, 1236,

     1256, 1258, 1277, 1251, 1313, 1345, 1183, 1296, 1293, 1320,
      212, 1319, 1371, 1312,  145, 1373, 1421, 1381, 1423, 1346,
     1372, 1255, 1451, 1397, 1347, 1393, 1431, 1395, 1453, 1460,
     1407, 6110, 1442, 1470, 1458, 1457, 1465, 1476, 1483, 1339,
     1482, 1489, 1492, 1493, 1484, 1497, 8778, 8778, 1570, 1550,
     1557, 1569, 6106,    0, 6104,    0, 6101,    0, 6125, 8778,
     1037, 1541, 6099, 6096,    0, 6095,    0, 8778, 8778, 8778,
     1576, 1613, 1597,  904, 6131, 6127, 6130, 8778, 1584, 1622,
     1676, 1621, 1739, 1684, 1729, 1228, 6090, 8778, 1758, 1792,
     1855, 1587, 6124, 6121, 6123, 8778, 1647, 1801, 1864, 1670,

     1819, 1877, 1611, 8778, 1882, 6083, 1675, 1915, 1976, 1919,
     1822, 1968, 1361, 6082, 1604, 6117, 6114, 1318, 1576, 6110,
     1605, 6114, 6111, 1442, 1607, 1659, 1728, 2041, 1850, 1902,
     2092, 1844, 2107, 2028, 8778, 1525, 1925, 2119, 1645, 6112,
     6109, 1656, 1657, 6105, 1703, 6109, 6105, 1609, 1625, 6059,
     1671, 6047, 6046, 2026, 2148, 6075, 1696, 6044, 6041, 2154,
     2192, 2212, 2223, 2231, 2243, 2255, 6037,    0, 6034,    0,
     8778, 1608, 1674, 1516, 1511, 1732, 1627, 1734, 1682, 1741,
     1529, 1774, 1733, 1701, 1550, 1713, 1735, 1782, 1715, 1776,
     1670, 1788, 1779, 1791, 1740, 1656, 1778, 1833, 1786, 6036,

     1821, 6031, 6030, 1839, 6031, 1841,  566, 6030, 1849, 6029,
     1878, 1630, 1875, 1887, 1905, 1909, 1906, 1912, 1931, 1790,
     1952, 1915, 6026, 1962, 6025, 1956, 1966, 1958, 1980, 1963,
     1997, 1985, 1993, 1916, 1998, 6022, 2035, 1954, 6021, 2004,
     2034, 2064, 1992, 1859, 2033, 2082, 2083, 2085, 2108, 2109,
     2111, 2112, 2113, 2114, 2117, 2128, 2119, 2126, 2130, 2141,
     2197, 2146, 2151, 2149, 6017, 2161, 2180, 2183, 6016, 2208,
     6015,  532, 2092, 2268, 5986,    0, 5978,    0, 5977, 5976,
     5974,    0, 5973,    0, 2316, 5972, 6003, 2193, 2231, 2243,
     6006, 6003, 6006, 8778, 2299, 2379, 2442, 2248, 6003, 5991,

     5994, 8778, 2259, 2325, 2451, 5954, 5985, 2233, 2234, 2275,
     5989, 5986, 5988, 1834, 8778, 2311, 2345, 1926, 8778, 2306,
     2459, 2283, 5978, 5956, 2364, 2367, 2287, 2479, 2134, 2260,
     2505, 2356, 8778, 2284, 5956, 5953, 5955, 8778, 2405, 2530,
     5947, 5945, 2320, 2544, 2334, 2287, 2337, 8778, 2369, 2552,
     2342, 8778, 2361, 2559, 2343, 5949, 5946, 2439, 2445, 2592,
     2620, 2683, 2391, 2608, 2370, 2444, 2519, 5910, 5941, 5939,
     5906, 5904, 5903,    0, 5895,    0, 2606, 5894, 5893, 5892,
        0, 5891,    0, 2622, 2672, 2713, 2719, 2730, 2736, 2751,
     2794, 2809, 5890,    0, 5880,    0, 2225, 2314, 5882, 2317,

     2240, 2374, 2381, 2425, 2428, 2447, 2390, 2431, 2445, 2485,
     2164, 2465, 2257, 2482, 2453, 2473, 2525, 2527, 2572, 2479,
     2521, 2528, 2571, 2593, 2577, 2538, 5878, 5877, 5876,    0,
     5875,    0, 2700, 2582, 5877, 2542, 2598, 2604, 5875, 5874,
     2594, 2601, 5873, 2322, 2531, 2599, 2625, 5871, 2627, 2668,
     2670, 2384, 2626, 5869, 2746, 2689, 2632, 5867, 2685, 2629,
     2067, 2688, 5866, 5865, 5857, 2701, 2708, 2712, 2702, 2716,
     5855, 2631, 2142, 2707, 2721, 2732, 2386, 2726, 2727, 2723,
     5854, 5852, 2750, 2758, 2481, 5851, 2748, 2763, 2760, 2761,
     2762, 2764, 5850, 2769, 5905, 5845,    0, 5836,    0, 5829,

        0, 5828,    0, 2819, 2783, 5859, 5802, 5801, 2868, 5823,
     5831, 2786, 2787, 2827, 5835, 5832, 5834, 2877, 2788, 5824,
     5767, 5766, 2832, 5826, 5821, 2781, 2782, 5816, 2838, 5817,
     5813, 2807, 2837, 5809, 2839, 2841, 2841, 5813, 5810, 5812,
     2931, 2940, 3003, 5772, 2846, 5802, 5799, 2834, 2863, 5780,
     2949, 2873, 2966, 2993, 5745, 2851, 5781, 5777, 2876, 2877,
     5741,    0, 5740,    0, 5739,    0, 5738,    0, 3043, 3049,
     2867, 5736,    0, 5734,    0, 5733,    0, 5732,    0, 3078,
     3084, 3090, 3121, 3127, 3158, 3164, 3171, 3195,    0,    0,
     5733,    0, 2867, 2722, 2819, 2818, 2957, 2862, 2930, 2855,

     2870, 2874, 2934, 2935, 2926, 2941, 2869, 2946, 2940, 2942,
     2958, 2977, 2983, 2999, 3002, 2984, 2884, 3006, 2998, 3039,
     3018, 5727,    0, 5726,    0, 5725,    0, 5724,    0, 3020,
     3044, 3040, 3046, 5726, 5719, 3052, 3045, 3079, 3060, 3047,
     5717, 5716, 3048, 5715, 3077, 3053, 3096, 1752, 5713, 3080,
     3099, 5712, 5711, 3124, 3125, 3082, 5710, 2949, 5708, 5699,
     5698, 3007, 5697, 3120, 5690, 3012, 3086, 3129, 3123, 5688,
     5687, 3126, 3132, 3136, 5685, 3134, 3150, 5684, 5739, 8778,
        0,    0, 8778,    0,    0,    0,    0, 5649, 3241, 3165,
     5704, 5647, 5638, 5637, 5692, 5691, 3166, 5690, 5632, 5622,

     3281, 5639, 5670, 8778, 3122, 5674, 5671, 5674, 8778, 3192,
     3251, 5666, 5632,    0, 5631,    0, 5629,    0, 5628,    0,
     3240, 3282, 3365, 3152, 5627, 5623, 5614, 5612,    0, 5599,
        0, 5598,    0, 5597,    0, 3292, 3314, 3331, 3380, 3390,
     3401, 3411, 3448, 3459, 5587, 3167, 3156, 5588, 3169, 3160,
     3224, 3199, 1169, 3170, 3197, 3180, 3231, 3268, 3214, 5587,
     3280, 3233, 3161, 3263, 3285, 3281, 3351, 3290, 3297, 3329,
     3295, 3305, 3332, 3342, 3320, 3398, 3339, 5583,    0, 5582,
        0, 5580,    0, 5579,    0, 5580, 5577, 3360, 3319, 3361,
     3362, 5576, 5572, 5571, 3299, 3367, 5570, 3400, 5569, 5568,

     3399, 5567, 5560, 3366, 3408, 3198, 5544, 3409, 3388, 5542,
     5541, 3412, 5540, 3413, 5538, 3414, 5534, 5532, 5505, 5502,
     3470, 5557, 3430, 3438, 3406, 5561, 5558, 5560, 5520,    0,
     5512,    0,    0,    0,    0, 3531, 3537, 3420, 3543, 3549,
     3556, 3580, 3619, 3625, 3631, 5511, 5508, 8778, 5507,    0,
     5506,    0, 5505,    0, 5504,    0,    0,    0,    0, 3643,
     3663, 3706, 3712, 3726, 3743, 3749, 3757, 3794, 5502,    0,
     5504, 5502, 5501, 3463, 3452, 5500, 3429, 3471, 5498, 3445,
     3447, 3449, 3446, 3450, 3243, 3507, 3453, 3505, 3455, 3506,
     3542, 3545, 5483, 3511, 3512, 3517, 3462, 3518, 5481, 3551,

     3559, 3581, 5477,    0, 5468,    0,    0,    0,    0, 3582,
     3536, 5470, 3584, 3540, 3594, 5469, 3599, 5467, 5466, 3583,
     3595, 3597, 5465, 5464, 3602, 5460,    0, 5451,    0, 3613,
     5480, 5410, 5407,    0,    0,    0, 5425, 3815, 3831, 5454,
     3618, 5419, 5410, 3837, 3853, 3868, 3874, 3913, 3919, 3932,
     5392,    0, 5391,    0, 5388,    0, 5384,    0,    0,    0,
        0, 5369, 3950, 3963, 3982, 3996, 4014, 4029, 4045, 4060,
     4077, 5368,    0, 3646, 3661, 3635, 3638, 5363, 5362, 3647,
     5350, 3622, 3615, 3629, 3639, 3645, 3677, 3678, 5346, 3623,
     3711, 5329, 3707, 3698, 5328, 3709, 3714, 3715, 3720, 3719,

        0,    0,    0, 5318, 3666, 3708, 5306, 5297, 3733, 5274,
     3713, 3745, 3734, 5273, 5267,    0, 5262,    0, 5235, 5258,
     5255,    0, 4095, 5254, 5230, 5214,    0, 5213,    0, 4110,
     4118, 4125, 4141, 4156, 4176, 4189, 4207, 4220, 5199,    0,
     5190,    0, 5185,    0, 5171,    0, 5168, 5158,    0, 4227,
     4251, 4258, 4289, 4302, 4320, 4351,    0, 3832, 5157, 5139,
     5135, 5121, 3725, 3746, 3748, 3756, 3793, 3805, 3768, 3755,
     5108, 5107, 5079, 3786, 5076, 5062, 3769, 3787, 5043, 5042,
        0, 5035, 3824, 3538, 3825, 3835, 3827,    0,    0, 5018,
        0, 5017,    0, 4309, 4326, 3846, 5001,    0, 4997,    0,

     4977,    0, 4960,    0, 4371, 4391, 4402, 4409, 4422, 4440,
     4460, 4483, 4491, 4959,    0, 4941,    0,    0,    0,    0,
     4936,    0, 4932,    0, 4502, 4522, 4541, 4561, 4580, 4592,
     4931, 3829, 3839, 4927, 3806, 4920, 3871, 3843, 4917, 3846,
     3851, 4905, 3882, 4892,    0, 4887,    0, 4873, 4852, 3770,
     3869, 4833, 4825,    0,    0, 4599, 3849, 4808, 4791, 4787,
        0, 4773,    0, 4770,    0, 4761,    0, 4623, 4629, 4660,
     4666, 4674, 4697, 4705, 4711, 4742,    0,    0,    0, 4752,
     4735,    0,    0, 4756, 4780, 4815, 4822, 4333, 4853, 4874,
     3807, 3888, 3887, 3889, 3901, 3912, 4734, 4722, 4711,    0,

        0, 3891, 4710,    0, 4680, 4676, 4673,    0, 4665,    0,
     4635,    0, 4628,    0,    0,    0,    0, 4859, 4892, 4898,
     4933, 4941, 4956, 4964, 4978, 5022, 4613, 4612,    0,    0,
     5046, 4748, 5028, 4801, 4001, 5064, 3924, 4598, 4594, 3900,
     3965, 4578,    0, 4564, 4557,    0, 4517,    0, 4516,    0,
     4512,    0,    0,    0,    0, 4509, 5070, 5086, 5105, 5137,
     5149, 5155, 5168, 5186, 5200, 4498,    0, 4495,    0, 5219,
     4034, 4067, 5233, 5254, 4493, 3937, 3931, 3920, 4478,    0,
     4473,    0, 4459,    0, 4455,    0, 4439, 4429, 4421, 5252,
     5267, 5283, 5299, 5341, 5347, 5357, 4420, 4417, 4408, 4082,

     5291, 5415, 5365, 5388, 5479, 4398, 4395, 4390, 4028, 3953,
     3994, 4386,    0, 4378,    0,    0,    0,    0, 4374,    0,
     4373,    0, 5453, 5430, 5462, 5512, 5530, 5543,    0, 5549,
     5574, 5581, 4370, 4360, 4357, 5589, 5629, 4356,    0, 4340,
        0, 5686,    0, 3917, 4342, 4036,    0,    0,    0, 4328,
     4322,    0,    0, 5618, 5660, 5700, 5758, 5408, 5734, 5777,
     5788, 5796, 4318, 4305, 4304,    0, 5853,    0, 4130, 5840,
     4301,    0, 4297,    0, 5920,    0, 3985, 4292, 4285, 4284,
     4240, 4227, 5826, 5666, 5868, 5677, 4146, 5899, 4161, 5967,
     4226, 4222, 4219, 4215,    0,    0, 4205, 4189, 4188, 4184,

     4186, 4175, 4145, 4135, 4124, 5995, 4238, 4240, 6003, 6018,
     4114, 4113, 4109, 4094,    0, 4090, 4340, 4073, 4072, 4045,
     4041, 4341, 6047, 6096, 6055, 6018, 6088, 4028, 4027, 4024,
        0, 4016, 4361, 4012, 4006, 3995, 6063, 6124, 6164, 3980,
     3964, 3946, 6172, 6212, 3945, 3805, 3726, 3681, 6269, 3680,
     3621, 3510, 3465, 6221, 6261, 3412, 3375, 3374, 3299, 6336,
     3252, 4362, 6298, 3169, 3082,  242,  341,    0,    0,  485,
      622,  642,  729, 4378, 6365,  776,  819,  906, 1009,    0,
        0, 1048, 1245, 1416, 1495, 1600, 1673, 1750, 1751, 1933,
     1987, 2066,    0, 2191, 6402, 2256, 2300,    0, 2351, 4379,

     2397, 2434, 2484, 2536, 2578, 2666, 2668, 2776, 2821, 2823,
     2870, 2942, 3011, 8778, 6471, 6486, 6501, 6512, 6527, 6542,
     6557, 6572, 6579, 6590, 6604, 6610, 6616, 6627, 6633, 6639,
     6645, 6660, 6666, 6672, 6687, 3593, 6694, 6702, 6716, 6730,
     6736, 3677, 6742, 3899, 6753, 6764, 6779, 6794, 6800, 3965,
     6806, 4015, 6812, 4028, 6818, 4046, 6824, 4059, 6830, 6836,
     6847, 6853, 6859, 6873, 6879, 6885, 6891, 4096, 6897, 4128,
     6908, 6919, 6925, 6931, 6946, 6952, 4141, 6958, 4155, 6964,
     6970, 4156, 6976, 4162, 6982, 6988, 6994, 7000, 7006, 4175,
     7012, 4191, 7026, 7032, 7038, 7044, 4192, 7050, 4206, 7064,

     7070, 4207, 7076, 4226, 7087, 7093, 7099, 7105, 4230, 7111,
     4258, 7126, 7132, 4261, 7138, 4262, 7144, 4266, 7150, 4270,
     7156, 7162, 4275, 7168, 4288, 7174, 4308, 7180, 4350, 7194,
     7208, 7214, 4379, 7220, 4421, 7226, 4439, 7232, 4443, 7246,
     4446, 4459, 7257, 4463, 7263, 4464, 7269, 4468, 7275, 4490,
     7281, 4500, 7296, 4501, 4504, 4508, 4520, 4521, 4526, 7302,
     4529, 7308, 4539, 7314, 4543, 7320, 4546, 7334, 7348, 7354,
     7360, 7366, 4560, 7372, 4565, 7378, 4578, 7384, 4579, 7398,
     7404, 7415, 7421, 4597, 7427, 4598, 7433, 4601, 7439, 4604,
     7445, 7451, 7457, 4605, 7463, 4628, 4631, 4632, 4636, 7477,

     7491, 7497, 7503, 7509, 4637, 7515, 4640, 7521, 4644, 7527,
     4673, 4674, 4677, 4681, 7541, 7547, 4684, 7558, 7564, 4710,
     7570, 4711, 4714, 4720, 4724, 7576, 4729, 7582, 4755, 4756,
     4766, 4767, 7588, 7602, 7608, 7614, 7620, 4779, 7626, 4780,
     7632, 4786, 7638, 4790, 4801, 4821, 4826, 7644, 7658, 7664,
     4832, 7675, 4833, 4836, 4840, 7681, 7687, 4857, 7693, 4861,
     7699, 7705, 4874, 7719, 7725, 7731, 7737, 4878, 7743, 4897,
     7757, 7763, 4898, 7769, 4904, 7775, 4905, 7781, 4909, 7787,
     7793, 4910, 7807, 4913, 7818, 7824, 7830, 4916, 4919, 4940,
     7836, 4943, 7842, 4962, 7856, 7870, 7876, 4965, 7882, 4977,

     7888, 4981, 7894, 4985, 7908, 7914, 4989, 7920, 4992, 4996,
     4997, 5001, 7926, 5002, 7932, 5007, 7946, 7957, 7963, 5008,
     7969, 5028, 7975, 5032, 5033, 7989, 7995, 8001, 8007, 5045,
     8013, 5046, 8019, 5052, 8025, 5073, 8039, 5074, 5087, 5088,
     8045, 8051, 5091, 5103, 8065, 8076, 8082, 5104, 5107, 5110,
     8088, 8094, 8100, 5114, 8106, 5115, 8112, 5118, 8118, 5121,
     5124, 5136, 5137, 8132, 8138, 8144, 5153, 5166, 8158, 8173,
     8184, 5167, 8190, 5173, 8196, 5174, 8202, 5185, 8208, 5189,
     5199, 5200, 5205, 8214, 8220, 5231, 8226, 5234, 8241, 8256,
     8262, 5238, 8268, 5241, 8274, 5254, 8280, 5255, 8286, 8292,

     8298, 8304, 8310, 8316, 8327, 8333, 5298, 8339, 5302, 5315,
     5329, 5345, 8345, 5365, 8351, 5366, 8365, 5373, 8371, 8377,
     8383, 8398, 8404, 5374, 8410, 5386, 5387, 8421, 5391, 5392,
     5408, 8427, 8433, 5415, 5416, 8439, 8445, 5435, 5439, 8451,
     5451, 8457, 5461, 8468, 8474, 8480, 8495, 8501, 8507, 8513,
     8519, 8525, 8531, 8546, 8552, 8558, 5465, 8573, 8579, 8585,
     8591, 8597, 5466, 8612, 8618, 8624, 8630, 8636, 8642, 8648,
     8654, 8660, 8666, 8672, 8678, 8684, 8690, 8696, 8702, 8708,
     8714, 8720, 8726, 8732, 8738, 5480, 5499, 8744, 8750, 8756,
     8762

    } ;

static const flex_int16_t yy_def[2392] =
    {   0,
     1914,    1, 1915, 1915, 1916, 1916, 1917, 1917, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1918, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1918, 1914, 1914, 1914,
     1914, 1918, 1914, 1918, 1918, 1918, 1918, 1918, 1918, 1918,
     1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918,
     1918, 1914, 1914, 1914, 1914, 1914, 1919, 1914, 1914, 1920,
     1914, 1914, 1921, 1914, 1914, 1914, 1914, 1914, 1918, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1922, 1914, 1914,   28, 1914,

     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1923,   28,
     1914, 1914,   29, 1914, 1914, 1914, 1914, 1914, 1914,   29,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1924, 1914, 1914, 1914, 1914, 1914,
     1914, 1918, 1925, 1914, 1926, 1927, 1914, 1914, 1918, 1918,
     1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1928,
     1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918,
     1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918,
     1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918,

     1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918,
     1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918,
     1918, 1914, 1914, 1914, 1914, 1914, 1919, 1919, 1919, 1914,
     1919, 1914, 1920, 1914, 1914, 1914, 1914, 1929, 1930, 1931,
     1932, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1933, 1934, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,  263, 1935,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,  110,  279,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1936, 1914, 1937, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1938, 1914, 1939, 1940, 1914,
     1940, 1940, 1940, 1940, 1940, 1940, 1940, 1941, 1942, 1943,
     1944, 1914, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1946, 1914, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,

     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1914, 1914, 1947, 1948,
     1914, 1914, 1949, 1950, 1951, 1952, 1953, 1954, 1914, 1914,
     1914, 1914, 1914, 1955, 1956, 1957, 1958, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914,  481, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1914,  499, 1914, 1914, 1914, 1914,
     1914, 1914, 1914,  509, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1959, 1960, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914,  528, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1961,
     1914, 1962, 1963, 1914, 1964, 1914, 1914, 1965, 1966, 1964,
     1964, 1964, 1964, 1964, 1964, 1964, 1967, 1968, 1969, 1970,
     1914, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1972,

     1914, 1973, 1974, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1971, 1971, 1975, 1914, 1976, 1977, 1978, 1979, 1980, 1980,
     1981, 1982, 1983, 1984, 1914,  685, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1914,  705, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1985, 1914, 1985, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1986, 1914, 1914,
     1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
     1997, 1998, 1999, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2000, 2000, 2001, 2002, 2003, 2004, 2005, 2005, 2005, 2005,

     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2006, 2007, 2008, 2009,
     2010, 2011, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2012, 2013, 2014, 2015, 2016, 2017,

     2018, 2019, 2020, 1914, 1914, 1914, 1914, 1914, 1914,  909,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 2021, 1914, 1914, 1914, 1914, 1914, 1914,
      942, 1914, 1914, 1914,  951, 1914, 1914, 1914, 1914, 1914,
     2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
     1914, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2041, 2042,
     2043, 2044, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,

     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2053, 1914,
     2054, 2055, 1914, 2056, 2057, 2058, 2059, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1101, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
     1914, 2068, 2069, 1914, 1914, 2070, 2071, 2072, 2073, 2074,
     2075, 2076, 2077, 2078, 2079, 2080, 2080, 2080, 2080, 2080,
     2080, 2080, 2080, 2080, 2081, 2082, 2082, 2082, 2082, 2082,
     2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082,
     2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082,
     2082, 2082, 2082, 2082, 2082, 2082, 2082, 2083, 2084, 2085,
     2086, 2087, 2088, 2089, 2090, 2082, 2082, 2082, 2082, 2082,
     2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082,

     2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082, 2082,
     2082, 2082, 2082, 2082, 2082, 2082, 2091, 2092, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 2093, 2094,
     2095, 2096, 2097, 2098, 2099, 2100, 2101, 1914, 2101, 2101,
     2101, 2101, 2101, 2101, 2101, 2102, 2103, 1914, 2104, 2105,
     2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2116, 2117,
     2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118,
     2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118,
     2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118,

     2118, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2118,
     2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118,
     2118, 2118, 2118, 2118, 2118, 2126, 2127, 2128, 2129, 1914,
     1914, 1914, 1914, 2130, 2131, 2132, 2133, 1914, 2134, 1914,
     1914, 2135, 2136, 2134, 2134, 2134, 2134, 2134, 2134, 2134,
     2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146,
     2147, 2148, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149,
     1914, 2150, 2151, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152,

     2153, 2154, 2155, 2156, 2152, 2152, 2152, 2152, 2152, 2152,
     2152, 2152, 2152, 2152, 2157, 2158, 2159, 2160, 1914, 2161,
     2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
     2171, 2171, 2171, 2171, 2171, 2171, 2171, 2171, 2172, 2173,
     2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183,
     2183, 2183, 2183, 2183, 2183, 2183, 2184, 2185, 2185, 2185,
     2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185,
     2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2186, 2187,
     2188, 2185, 2185, 2185, 2185, 2185, 2185, 2189, 2190, 2191,
     2192, 2193, 2194, 2195, 2196, 1914, 2197, 2198, 2199, 2200,

     2201, 2202, 2203, 2204, 2205, 2205, 2205, 2205, 2205, 2205,
     2205, 2205, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212,
     2213, 2214, 2215, 2216, 2217, 2217, 2217, 2217, 2217, 2217,
     2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
     2218, 2218, 2218, 2219, 2220, 2221, 2222, 2218, 2218, 2218,
     2218, 2218, 2223, 2224, 2225, 2226, 1914, 2227, 2228, 2229,
     2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2237, 2237,
     2237, 2237, 2237, 2237, 2237, 2237, 2238, 2239, 2240, 2241,
     2242, 2243, 2244, 2245, 2245, 2245, 1914, 1914, 2245, 2245,
     2246, 2246, 2246, 2246, 2246, 2246, 2246, 2246, 2247, 2248,

     2249, 2246, 2246, 2250, 2251, 2252, 2253, 2254, 2255, 2256,
     2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2264, 2264,
     2264, 2264, 2264, 2264, 2264, 2264, 2265, 2266, 2267, 2268,
     1914, 1914, 2269, 1914, 2270, 2269, 2271, 2271, 2271, 2271,
     2271, 2271, 2272, 2271, 2273, 2274, 2275, 2276, 2277, 2278,
     2279, 2280, 2281, 2282, 2283, 2284, 2264, 2264, 2264, 2264,
     2264, 2264, 2264, 2264, 1914, 2285, 2286, 2287, 2288, 1914,
     2289, 2290, 1914, 1914, 2271, 2271, 2271, 2271, 2291, 2292,
     2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2284, 2264,
     2264, 2264, 2264, 2264, 2264, 2264, 2301, 2285, 2287, 2289,

     1914, 1914, 1914, 1914, 2290, 2302, 2303, 2304, 2305, 2305,
     2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314,
     2315, 2316, 2317, 2317, 2317, 2317, 2317, 2317, 2318, 1914,
     1914, 2289, 2319, 2320, 2321, 2322, 2322, 2323, 2324, 2325,
     2326, 2322, 2327, 2328, 2328, 2328, 2329, 2330, 2331, 2332,
     2333, 2334, 2335, 2317, 2317, 2317, 1914, 1914, 2317, 2317,
     2289, 2289, 2336, 2319, 2337, 2338, 2289, 2339, 2322, 2322,
     2340, 2341, 2342, 2343, 2322, 1775, 2344, 2344, 2345, 2346,
     2332, 2333, 1914, 1914, 2317, 1914, 2347, 2317, 2289, 2289,
     2348, 2336, 2349, 2337, 1767, 1767, 2350, 2340, 2351, 2342,

     2344, 2352, 2345, 2353, 2346, 1914, 2354, 2347, 1914, 1914,
     2355, 2348, 2356, 2349, 2357, 2350, 2358, 2351, 2359, 2352,
     2353, 2354, 1914, 1914, 1914, 1914, 2347, 2360, 2361, 2362,
     2363, 2355, 2364, 2356, 2365, 2359, 1914, 1914, 2354, 2366,
     2367, 2368, 2347, 2347, 2369, 2360, 2370, 2361, 2347, 2362,
     2371, 2372, 2365, 2354, 2354, 2373, 2366, 2374, 2367, 2354,
     2368, 2347, 2347, 2375, 2369, 2376, 2370, 1849, 1849, 2377,
     2371, 2378, 2372, 2354, 2354, 2379, 2373, 2380, 2374, 1860,
     1860, 2381, 2375, 2382, 2376, 2383, 2377, 2378, 2384, 2379,
     2385, 2380, 2386, 2381, 1849, 2382, 2383, 2387, 2384, 2354,

     2385, 2388, 2389, 2390, 2388, 2391, 2389, 2382, 2390, 2385,
     2391, 2382, 2385,    0, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914

    } ;

static const flex_int16_t yy_nxt[8871] =
    {   0,
       10,   11,   12,   13,   13,   13,   11,   14,   15,   10,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   29,   29,   29,   29,   29,   29,
       29,   30,   31,   32,   33,   34,   35,   36,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   37,   16,   16,
       16,   16,   16,   16,   37,   16,   16,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       16,   51,   16,   52,   53,   16,   54,   16,   16,   55,
       56,   57,   58,   59,   60,   16,   16,   61,   62,   63,
       64,   65,   66,   71,   71,   74,   74,   66,   81,   82,

       67,   74,   74,   83,   71,   71,   75,   86,   76,   76,
       76,   75,   75,   89,   76,   76,   76,   75,   77,   85,
       78,   78,  129,  130,   87,   84,   78,   95,   90,   91,
       78,   93,   96,   94,   94,   94,   94,   94,   94,   94,
       94,   94,  124,  148,  157,   97,  158,   80,  150,   72,
       72,   72,   72,  151,  154,   80,  202,   80,   80,  330,
       80,  331,  125,   80,  126,  127,  149,  192,  175,  180,
      171,   80,  172,  181,  155,  196,  193,  173,  182,  174,
      221,   88,   80,  183,  176,   92,   98,  222,   99,   99,
       99,   99,   99,   99,   99,  100,  100,  184,   80,  185,

       80,  152,  156,   80,  257,  101,  642,   80,  102,  186,
      194,  103,  104,  105,  106,  107,   80,  195,  224,   80,
      108,  109,  107,  360,  305, 1914,   80,  110,  357,   80,
      101,  177,  258,  102,  197,  638,  111,  104,  178,  112,
      198,  106,  223,  107,  179,  225,  199,   78,  108,   80,
      200,  109,  201,  107,   98,   80,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  307,  327,  355,  215,  260,
       80,   80,   80,  216,  282,  282,  102,  218,  217,  114,
      115,  116,  117,  118,  219,  220,  358,   80,  119,   75,
      118,   76,   76,   76,   75,  120,  261,   80,  330,  363,

      331,  102,  187, 1885,  121,  115,  330,  122,  331,  117,
      188,  118,  189,  283,   80,  190,  119,  330,  332,  331,
      191,  118,  131,  330,  393,  331,  132,  133,  330,  134,
      331,  135,  136,  330,  137,  331,  138,  159,  160,  161,
      162,   80,  163,  164,  330,  165,  331,  166,  139,  140,
      141,  167,  168,  203,  204,  287,   80,   80,   80,   80,
      169,  150,   80,  288,  205,  206,  151,  207,  359,   80,
      208,  209,  142,  143,  356,  144,  287,  145,  380,  210,
      287,  211,  213,   80,  288,  226,  212,   76,   76,   76,
      226,  288,  362,  227,  229,  230,  330,  334,  331,  229,

      106,  287, 1914,  146,  147,   75,  381,   76,   76,   76,
       75,   80,  288,   80,  152,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  333,  330,  378,  331,  214,  234,
      235,  330,   80,  331,  234,  459,  236,  460,  282,  282,
      379,  236,  279,  279,  279,  279,  279,  279,  279,  309,
      237,  237,  237,  237,  237,  237,  237,  310,  150, 1914,
      284,  332,  284,  151,  236,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  309, 1914,   80,   80,  330,   80,
      331,  280,  238,   80, 1914,  310,  236,   80,   80,   80,
       80,  236,  236,   80,  353,  236,  236,  383,  382,  384,

      385,  361,  354,  236,  286, 1914,  403,  236,   80,  236,
      239,  236,  394,  240,  242,  396,  404,  395,  243,  244,
       80,  245,   80,  246,  247,  386,  248,   98,  249,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  387,  408,
      250,  251,  252,  106,  287,  289, 1887,  290,  291,  102,
       80,   80,  288,   80,  292,   80,   80,   80,  300,  288,
      301,  302,  398,  400,  253,  254,  402,  255,  281,  287,
      293,  405,  397,  294,  102,  291,  406,   80,   80,  401,
      288,  399,  292,  303,  288,   80,  304,  459,  302,  460,
       80,   80,   80,  894,  412,   80,  256,  263,  263,  263,

      263,  263,  263,  263,  263,  263,  407,  410,  409,  322,
      310,  323,  324,   80,  414,  411,  264,  265,  266,  117,
      309,  267,  268,  416,   80,  268,   80,  295,  310,  296,
      413,   80,  297,  298,  325,  310,  269,  326,  835,  324,
      415,  264,  265,  266,  422,  309,  267,   80,  268,   80,
      287,  299, 1914,  268,  425,   80,  310,   80,  288,  268,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  427,
      426, 1914,  459,  430,  460,  287,  429,   80,   80,  273,
      274,  275,   80, 1914,  276,  277,  288, 1914,  277,  295,
      428,  296,   80,  308,  297,  298, 1914,  434,  311,  278,

      312,  313,   80, 1888,  273,  274,  275,  314,  150,  276,
      433,  277,  287,  423,  520,  445,  277, 1914,  298,  317,
      288,  318,  277,  315,  319,  320,  316,   80,  313,   80,
      309,  424,   80,   80,  441,  314,   80,  287,  310,  299,
      436,  431,  309,  321,   80,  439,  442,  440,  288,  437,
      310,  317,   80,  318,  117,  309,  319,  320,   80,   80,
      459,  435,  460,   80,  432,  438,  310,  309,  443,  460,
       80,  470,  444,  446,  309,  364,  365,  366,  310,  367,
      368,  573,  310,  369,   80,  370,  459, 1914,  460,  460,
     1914,  371,  372,  373,  374,  375,  470,  234,  235,  309,

      575,  321,  234,  459,  459,  460,  460,  459,   80,  460,
      310,  338,  338,  338,  338,  338,  338,  388,  389,   80,
      544,   80,  229,  230,  320,  390,  417,  229,  498,  391,
      418,  226,  392,   76,   76,   76,  226, 1890,  419,  227,
      622,  420,  421,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  451,  451,  451,  451,  451,  451,  451,  461,
      459,   80,  460,  459,  462,  460,   80,  459,  340,  460,
       80,  341,  229,  230,  572,  579,  342,  229,  343,  595,
     1914,  449,  230,   80,  344,  345,  449,  488,  450,  346,
      576,  452,  347,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  459,  488,  460,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  107,  470,  118,  470,  288,  687,  470,
      470,  291,  268,  264,  265,  266,  302,  107,  267,  268,
      292,  474,  268,  475,   80,  292,  476,  477,  107,  470,
      118,  470,   80,  269,  470,  288,  470,  581,  264,  265,
      266,  578,  107,  267,  470,  268,   80, 1892,  292,  310,
      268,   80,  471,  292,  471,  292,  268,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  478,  580,  479,  470,
      107,  291,  478,   80,  488,  478,  488,  310,  589,  488,

      488,   80,   80,  292,  492,  330,  493,  331,  621,  494,
      495,  478,  604,  479,  302,  107,  473,  587,  478,  488,
      330,  488,  331,  478,  488,  314,  488,  488,  552,  478,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  313,  482,
      483,  484,  488,  314,  485,  486,  553,  314,  486,   80,
       80,  314,   80,   80,   80,  324,  118,  609,  593,  487,
     1914,  459,  598,  460,  482,  483,  484,  313,  496,  485,
      497,  486,  574,  582,  496,  314,  486,  496,  489,  314,
      489,  118,  486,  490,  490,  490,  490,  490,  490,  490,

      490,  490,  515,  496,  516,  497,  287,  517,  518, 1894,
      496,  273,  274,  275,  288,  496,  276,  277,  558,   80,
      277,  496,   98,   80,  279,  279,  279,  279,  279,  279,
      279,  287,  491,  292,  590,  596,  273,  274,  275,   80,
       80,  276,  288,  277,   80,   80,  559,   80,  277,  594,
      607,  597,  519,  521,  277,  522,  606,  577,  523,  524,
       80,  292,  588,  280,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  515,  118,  516,  107,  525,  517,  518,
      284,  610,  284,   80,  102,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  287, 1278,   80,  519,  324,  118,

      618,  107,  288,  308,  292,   80,   80,   80,   80,  102,
      499,  499,  591,  592,  608,  309,  521,   80,  522,  287,
      309,  523,  524,  310,  599,  605,  611,   80,  310,  602,
      288,   80,  292,  500,  501,  502,  503,  504,  612,  107,
      309,   80,  505,   80,  504,  309,  583,   80,  619,  506,
       80,  310,  620,  584,  585,  586,  310,  603,  507,  501,
      634,  508,   80,  503,  107,  504,  525,  539,  613,  540,
      505,  623,  541,  542,  694,  504,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  100,  100,  100,  100,  100,
      100,  100,  100,  100,   80,  510,   80,  511,  314,  694,

      512,  513,   80,  626,  513,  545, 1914,  546,  624,   80,
      547,  548,   80,   80,   80,  514,   80,  543,  614,  615,
      510,   80,  511,  627,  308,  512,  314,  513,  118,  549,
      616,  628,  513,  630,  649,   80,  617,  625,  513,  527,
      629,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      539,   80,  540,  118,   80,  541,  542,  528,  528,  528,
      528,  528,  528,  635,  529,  530,  531,  532,  533,  636,
       80,   80,  292,  534,  543,  535,  631,   80,   80,  641,
      536,  314,  528,  528,  528,  528,  528,  528,  639,  537,
      530,  637,  538,  545,  532,  546,  533,   80,  547,  548,

      292,  534,  666,   80,   80,   80,  535,  733,  632,  314,
      554,  554,  554,  554,  554,  554,  118,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  633,  647,  652,   80,
       80,   80,  733,  554,  554,  554,  554,  554,  554,   80,
      556,  118,  640,  549,  554,  554,  554,  554,  554,  554,
      643,   80,  645,   80,  648,   80,  327,  338,  338,  338,
      338,  338,  338,  556,  651,   80,  150,  557,  554,  554,
      554,  554,  554,  554,  556,  653,  655, 1896,  659,   80,
      560,   80,  554,  554,  554,  554,  554,  554,  107,   80,
      557,  554,  554,  554,  554,  554,  554,  644,  556,  646,

       80,  557,  554,  554,  554,  554,  554,  554,  654,   80,
      561,   80,  556,  107,  340,   80,   80,  341,   80,  660,
      656,  556,  342,   80,  343,  557,  650,  658,   80,  657,
      344,  345,  556,  662,   80,  346,  663,  661,  347,  557,
       80,   80,   80,  564,  562, 1914,  667,   80,  557,  665,
       80,   80,  230,  563,  671,   80, 1914,  664,  228,  557,
      554,  554,  554,  554,  554,  554,  670,  669,  565,   80,
      668,  449,  230,  672,   80,  459,  449,  460,  450,  236,
      236,  236,  236,  236,  236,  236,  768,   80,  800,  799,
      556,  451,  451,  451,  451,  451,  451,  451,  472,  472,

      472,  472,  472,  472,  472,  472,  472,  690,   80,  691,
      806,  707,  692,  693,  471,  277,  471,  557,  674,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  741,  742,
      292,  810,  518,  524,  566,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  107,  264,  118,  266,  714,  292,  267,
      268, 1897,  694,  268,  694,  715,   80,  694,  694,  769,
      710,  118,  711,  542,  686,  712,  713,  797,  107,  264,
      118,  266,  714,  480,  267,   80,  268,  694,   80,  694,
      802,  268,  694,  715,  694,  838,  118,  268,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  698,  744,  699,
      314,  314,  700,  701,   80,  503,  714,  482,  483,  484,
      745,  714,  485,  486,  715,  771,  486,  770,   80,  715,
      694,  548,   80,  817, 1914,  823,  744,  487,  314,  314,
       80,  714,  482,  483,  484,  503,  714,  485,  798,  486,
      778,  804,  715,  772,  486,  694,  695,  715,  695,   80,
      486,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      702,   80,  703,   80, 1199,  809,  702,  744,  779,  702,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  746,
       80,   80,   80,   80,  811,  702,  815,  703,   80,   80,

      697,  803,  702,  801,  808,  744,  812,  702,  805,  822,
       80, 1914, 1899,  702,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  279,  279,  279,  279,  279,  279,  279,
      100,  100,   80,  273,   80,  275,   80,   80,  276,  277,
       80,  807,  277,  820,   80,  734,   80,  735,   80,   80,
      736,  737,  816,  706,  846,  824,  813,  814,  273,  826,
      275,  818,  498,  276,  716,  277,  717,  718,  733,  819,
      277,  821,  489,  719,  489,  827,  277,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  499,  499,  715,  720,
      747,   80,  721,  733,  718,  532,  747,   80,  748,   80,

      722,  719,  723,  828,  748,  724,  725,   80,  825,  500,
      501,  502,  503,  504,  833,  747,  715,   80,  505,  836,
      504,  747,  834,  714,  726,  506,  748,  727,  715,  728,
      729,  715,  748,   80,  507,  501,   80,  508,  722,  503,
      723,  504,  866,  724,  725,   80,  505,  749,  714,  750,
      751,  504,  730,  715,  839,  731,  752,  729,  837,  715,
      733,  714,  733,   80,   80,  733,  733,   80,  840,  715,
       80,  747,  753,   80,   80,  754,  841,  751,  861,  748,
      719,  843,  848,  858,  752,  733,  714,  733,  726,   80,
      733,  842,  733,  844, 1914,  532,  747,  715,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  748,  719,  738,
       80,  739,   80,  845,   80,  738,   80,  510,  738,  511,
       80,   80,  512,  513,   80,  847,  513,  554,  554,  554,
      554,  554,  554,  850,  738,  849,  739,  514,   80,  852,
      854,  738,  510,   80,  511,  851,  738,  512, 1901,  513,
       80,   80,  738,  853,  513,   80,   80,  556,  856,  865,
      513,  527,   80,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  857,  763,  748,  764,  765,  859,  855,  528,
      528,  528,  528,  528,  528,  862,  529,  530,  531,  532,
      533,   80,   80,   80,  230,  534, 1053,  535,  766,  748,

      895,  767,  536,  765,  528,  528,  528,  528,  528,  528,
      860,  537,  530,  867,  538,  755,  532,  756,  533,  863,
      757,  758,   80,  534,  760,   80,  760, 1914,  535,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  747,  759,
       80,   80,  755,   80,  756,  864,  748,  757,  758,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  868,  869,  747,  870,  747,   80,   80,  762,   80,
       80,   80,   80,  748,  748,   80,  872,   80,  875,  556,
      504,  876,  877,  874,   80,  556,   80,  873,   80,  871,
      747,  878,  759,  554,  554,  554,  554,  554,  554,   80,

       80,  748,  880,  879,   80,  504,  557,   80,  882,   80,
     1061,  881,  557,  554,  554,  554,  554,  554,  554,   80,
      887,  886,   80,  556,  554,  554,  554,  554,  554,  554,
      784,  888,  554,  554,  554,  554,  554,  554,   80,  470,
     1006,   80,  889,  556,  554,  554,  554,  554,  554,  554,
      557,  891, 1914,  890,  556,   80,  554,  554,  554,  554,
      554,  554,  556,  883,  470,  892,   80,  906,  884,  785,
      557,  478,  911,  885,  556,  893,  486,  470,  268,  488,
      488,  557,  914,   80,  915,  786,  556,  916,  917,  557,
      236,  236,  236,  236,  236,  236,  236,  788,   80,  920,

      993,  557,  470,  496,  488,  488,  504,  928,  934,  787,
      789,  725,  513,  557,  996,   80,  268, 1914,  277,  277,
      790,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      729,  504,  729,  504, 1008,  791,  744,  792,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  718,  264,  504,  266,
      719, 1914,  267,  268,  744,  719,  268,  950,  923,  744,
      924,  758,   80,  925,  926,   80,  718,  686,  499,  499,
       80,  745,  264,  744,  266,  994,  704,  267,  719,  268,
      995,  748,  927,  719,  268,  944,  752,  744, 1038,  719,

      268,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      714,  744, 1914,  714,  751,  752,  535,  732,  715,  748,
      482,  715,  484,  752,  752,  485,  486,  719,  937,  486,
      938,  751,   80,  939,  940,  714,  765,  535,  714,   80,
      910,  535,   80,  752,   80,  482,  715,  484,   80,  715,
      485,  752,  486, 1002, 1045,  997, 1065,  486, 1914,  695,
      998,  695,  535,  486,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  923,   80,  924,  747,   80,  925,  926,   80,
      535,  747,  273,  748,  275, 1905,  999,  276,  277,  748,

     1003,  277,  929,   80,  930,   80, 1004,  931,  932, 1000,
      747,   80,  706,  719,  765,  535,  747,  273, 1001,  275,
     1010,  748,  276,   80,  277,  504,  933,  748,  929,  277,
      930,   80,  927,  931,  932,  277, 1011,   80, 1007,   80,
       80,  719,  956,   80,  957, 1907, 1015,  958,  959, 1071,
      504,  504,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  941, 1009,  941, 1005,  535,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  945,  504,  946,  933,   80,
      947,  948,  945,   80,  946,   80,   80,  947,  948,   80,
      535,  740,  960, 1033, 1012, 1014,   80, 1909, 1013,  949,

       80, 1021, 1016, 1017, 1039,  943,  752,  969,  969,  969,
      969,  969,  969,  752,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  554,  554,  554,  554,  554,  554,   80,
       80,  956,  949,  957,  752,   80,  958,  959, 1018, 1914,
       80,  752,  951,  951,  951,  951,  951,  951,  951,  951,
      951,   80,   80,  556,  535,  960,   80,   80, 1020,   80,
     1019,  952,   80,  953,  971, 1034,  954,  952, 1032, 1036,
      952, 1035, 1040,  554,  554,  554,  554,  554,  554,  535,
      557,  955, 1037,   80,   80,   80,  952,   80,  953,   80,
       80,  954, 1041,  952, 1042, 1050, 1052, 1060,  952, 1046,

      760,  980,  760,  556,  952,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,   80, 1911,   80, 1914,
      557,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,   80,  556, 1044,   80,   80, 1051, 1043,
      556,  981,  554,  554,  554,  554,  554,  554,   80,   80,
       80,  556, 1049, 1030, 1054,   80,   80,  556, 1055, 1047,
       80,  557, 1062, 1058,   80, 1048, 1031,  557, 1067,   80,
       80,   80,  556,  983,   80,   80,  982, 1148,  557, 1056,
       80, 1059, 1066, 1057,  557,  554,  554,  554,  554,  554,

      554,  984, 1063,  985,   80, 1068,   80, 1064,   80,  557,
      554,  554,  554,  554,  554,  554,   80, 1069,   80,   80,
       80,   80,   80, 1072, 1070,  556, 1073,   80, 1075,  470,
      986, 1074,  694,  694,  488,  719,  719, 1912, 1076, 1077,
      556,  685,  685,  685,  685,  685,  685,  685,  685,  685,
     1078, 1091,  557,  504,  470,  702, 1095,  694,  694,  488,
      926,  987, 1096,  719,  719, 1098,  932,  557,  268,  738,
     1103,  486,  486,  277,  948, 1112,   80,   80,  504,  959,
      904, 1150, 1914,  504, 1913,  733, 1149,  733,  752,  988,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  504,  482,
      733,  484,  733,   80,  485,  486,  752,  752,  486, 1104,
       80, 1126,  535,  535,  513,   80,  513,   80,   80,  910,
     1146, 1914,   80, 1154,  482, 1157,  484, 1156,  918,  485,
     1158,  486,   80, 1147, 1104,  752,  486,  535,  535, 1127,
     1163, 1173,  486,  942,  942,  942,  942,  942,  942,  942,
      942,  942, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101,  951,  951,  951,  951,  951,  951,  951,  951,  951,
     1151,  952, 1152,  953,   80, 1153,  954,  952,   80, 1105,
      952, 1106,   80,   80, 1107, 1108, 1160, 1161,   80,   80,

       80, 1102, 1162, 1914,   80, 1155,  952,   80,  953, 1159,
      955,  954, 1104,  952, 1205,   80,   80, 1166,  952, 1164,
      941, 1165,  941, 1170,  952,  942,  942,  942,  942,  942,
      942,  942,  942,  942, 1109,   80, 1110, 1104, 1168, 1167,
     1109,   80,   80, 1109,  969,  969,  969,  969,  969,  969,
     1121, 1121, 1121, 1121, 1121, 1121,   80,   80, 1169, 1109,
       80, 1110, 1176, 1172,   80,   80, 1109, 1123, 1206, 1174,
       80, 1109, 1914, 1208, 1175, 1171,   80, 1109,   80,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,   80,   80, 1177,

     1186,  971,   80,   80,   80,   80,   80, 1124, 1125,  556,
       80,   80, 1187, 1189, 1194,  556, 1191, 1188,   80, 1195,
     1198,  556,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554, 1190,   80,  557,   80,   80, 1197,
       80, 1193,  557, 1914,   80, 1136, 1222, 1192,  557, 1204,
      952, 1137,  556, 1209,   80, 1200, 1196,   80,  556,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554, 1138,  554,  554,  554,  554,  554,  554,   80,  557,
     1201,   80,   80,   80,   80,  557, 1207,   80, 1139,  556,
       80, 1211,   80, 1212,   80,  556,  554,  554,  554,  554,

      554,  554,  556, 1202, 1203, 1213, 1246, 1140,   80, 1214,
     1210,  694,  733, 1215,   80, 1225,  557, 1226,   80,   80,
     1227, 1228,  557, 1277, 1272,   80,  556,   80,   80,  557,
     1883, 1216, 1287, 1274, 1247, 1279,  694,  733,   80, 1141,
     1142, 1121, 1121, 1121, 1121, 1121, 1121, 1271, 1275, 1143,
      486,  513, 1276,  557, 1273,   80,   80,   80, 1123, 1281,
     1280, 1320, 1144,  909,  909,  909,  909,  909,  909,  909,
      909,  909,   80,  951,  951,  951,  951,  951,  951,  951,
      951,  951,   80, 1121, 1121, 1121, 1121, 1121, 1121,   80,
     1284,   80, 1282,  554,  554,  554,  554,  554,  554, 1125,

     1123,   80, 1089, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1111, 1914, 1286,  554,  554,  554,  554,  554,
      554,   80,  952,  556,  953, 1385,   80,  954,  952, 1283,
     1288,  952,  554,  554,  554,  554,  554,  554,   80,   80,
     1124, 1125, 1102,   80, 1285,  556, 1289,  952,   80,  953,
      557, 1293,  954,   80,  952,   80, 1296,   80, 1295,  952,
     1914, 1290,  556,   80, 1294,  952, 1236, 1236, 1236, 1236,
     1236, 1236,  557, 1260, 1291, 1314, 1297,   80,   80, 1261,
     1292,  554,  554,  554,  554,  554,  554,   80, 1300,  557,
       80,  554,  554,  554,  554,  554,  554,   80, 1298, 1311,

       80, 1262,  554,  554,  554,  554,  554,  554, 1299,   80,
     1302,  556,  554,  554,  554,  554,  554,  554,   80,   80,
       80,  556, 1301, 1238,   80,   80, 1239, 1310, 1312, 1316,
     1331, 1240,  556, 1241, 1109, 1879, 1914, 1313,  557, 1242,
     1243, 1263,  556, 1315, 1244, 1318,   80, 1245,  557,  554,
      554,  554,  554,  554,  554, 1264,   80,   80,   80,  557,
      554,  554,  554,  554,  554,  554,   80,   80, 1322,  557,
       80,   80,   80, 1877, 1342, 1317, 1104, 1266, 1323,  556,
     1324, 1377, 1321, 1265, 1104, 1325, 1374,   80, 1375, 1319,
      556, 1376, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1104, 1343,   80,   80,   80,  557,   80,   80, 1104,
       80,   80, 1382,   80, 1378,  952, 1389,  557, 1384, 1383,
       80,   80, 1381,  952, 1380, 1268, 1914, 1396, 1387,   80,
     1267, 1221, 1236, 1236, 1236, 1236, 1236, 1236, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1379, 1338, 1338, 1338,
     1338, 1338, 1338,   80,   80,   80, 1391, 1392, 1340,   80,
       80, 1873, 1393, 1394, 1340,   80,   80, 1390, 1395, 1397,
     1340, 1338, 1338, 1338, 1338, 1338, 1338, 1340, 1399, 1238,
     1388, 1344, 1239, 1386,   80, 1341,   80, 1240,   80, 1241,

       80, 1341,  526,   80,  526, 1242, 1243, 1341, 1549,   80,
     1244, 1340, 1398, 1245, 1341, 1408, 1345,   80, 1406, 1346,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1341,   80,
       80,   80,   80, 1347,  554,  554,  554,  554,  554,  554,
     1340, 1407,   80,   80, 1400,   80, 1340,   80, 1405, 1104,
       80, 1460, 1340, 1411,  554,  554,  554,  554,  554,  554,
     1458, 1412, 1424,   80,  556, 1414, 1409, 1341, 1410, 1413,
       80,   80, 1871, 1341, 1104, 1459,  348,   80,  348, 1341,
     1465, 1464, 1349,   80,  556, 1348,   80,   80,  952, 1470,

     1425,  557, 1463,   80,   80,   80, 1350,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,   80,
     1466,  557, 1467, 1461,   80, 1363, 1364,  554,  554,  554,
      554,  554,  554, 1462, 1482,   80,   80,  556, 1468, 1469,
     1471, 1914, 1914,  556,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,   80,  556,  554,  554,
      554,  554,  554,  554,  557,   80,   80,   80, 1472,   80,
      557,   80,   80,   80,  556, 1475, 1476,   80,   80, 1473,
      556, 1477, 1483,   80,  557, 1365, 1478, 1867,  556, 1367,
     1474,   80,   80, 1485, 1366, 1371, 1371, 1371, 1371, 1371,

     1371,  557, 1484,   80,   80, 1532,   80,  557, 1487, 1534,
     1486, 1533, 1123,   80,   80,  557, 1338, 1338, 1338, 1338,
     1338, 1338, 1368, 1535, 1370,  556,   80,   80,   80, 1539,
     1540, 1369, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338,   80,   80, 1340, 1541, 1543, 1602,
     1542,   80,  557, 1125, 1338, 1338, 1338, 1338, 1338, 1338,
     1536, 1531, 1340,   80,   80,   80, 1914, 1593, 1340, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1537,   80,   80, 1340,   80, 1637,   80, 1538, 1341,
       80, 1548, 1550,   80, 1552, 1341, 1591,   80, 1551, 1340,

     1558,   80, 1592, 1605,   80, 1340, 1595, 1596,  350,   80,
      350, 1341, 1597, 1430, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1341,   80, 1559,   80,
     1431, 1606, 1341, 1338, 1338, 1338, 1338, 1338, 1338, 1594,
       80, 1432, 1603, 1598, 1340,   80,   80,   80, 1639,   80,
     1340,  554,  554,  554,  554,  554,  554, 1640,   80,   80,
     1433, 1638, 1641, 1340,  554,  554,  554,  554,  554,  554,
       80, 1341, 1644, 1642,  453,   80,  453, 1341,   80, 1434,
     1676,  556,   80,  554,  554,  554,  554,  554,  554,   80,
     1341, 1711, 1435, 1777,  556,   80, 1436,  554,  554,  554,

      554,  554,  554, 1673, 1709, 1675, 1865, 1861,  557, 1673,
     1710,   80, 1437,  556, 1438,  554,  554,  554,  554,  554,
      554,  557, 1745,   80,  455, 1859,  455,  556, 1677, 1450,
      554,  554,  554,  554,  554,  554, 1701,  457, 1678,  457,
      557, 1857, 1701,   80, 1451,  556,  554,  554,  554,  554,
      554,  554,   80, 1801,  557,  464, 1914,  464, 1452, 1674,
      556,  554,  554,  554,  554,  554,  554, 1853,  466, 1673,
      466, 1453,  557, 1914, 1746, 1673,  556, 1914, 1371, 1371,
     1371, 1371, 1371, 1371, 1701, 1850,   80,  557, 1848, 1846,
     1701,  556, 1702, 1454,   80, 1123, 1494, 1494, 1494, 1494,

     1494, 1494, 1914,  557, 1268,  567, 1914,  567,  556, 1744,
     1455, 1338, 1338, 1338, 1338, 1338, 1338, 1778,  557, 1338,
     1338, 1338, 1338, 1338, 1338, 1674, 1338, 1338, 1338, 1338,
     1338, 1338, 1673, 1836, 1914, 1456, 1125,  569, 1673,  569,
     1702, 1340, 1338, 1338, 1338, 1338, 1338, 1338, 1809, 1340,
      675, 1914,  675, 1496, 1809, 1914, 1340, 1338, 1338, 1338,
     1338, 1338, 1338, 1701,  677,  681,  677,  681, 1341, 1701,
     1834,  683, 1340,  683, 1914, 1832, 1341, 1338, 1338, 1338,
     1338, 1338, 1338, 1341,  773, 1914,  773, 1340, 1674, 1505,
     1338, 1338, 1338, 1338, 1338, 1338, 1821, 1506, 1507, 1341,

      775,  780,  775,  780, 1810, 1508, 1914, 1340, 1338, 1338,
     1338, 1338, 1338, 1338, 1341,  782,  793,  782,  793, 1702,
     1340, 1338, 1338, 1338, 1338, 1338, 1338, 1509,  554,  554,
      554,  554,  554,  554, 1341,  795, 1820,  795, 1340,  829,
     1823,  829, 1809, 1510,   80, 1914, 1823, 1341, 1809, 1818,
     1914, 1340,  554,  554,  554,  554,  554,  554,  556,  554,
      554,  554,  554,  554,  554, 1341, 1816,  831, 1511,  831,
      896,  898,  896,  898, 1512,  900, 1914,  900, 1341,  902,
     1814,  902,  556, 1914,  961,  557,  961, 1812, 1914,  556,
      554,  554,  554,  554,  554,  554, 1824,  963, 1810,  963,

     1513, 1914, 1268,  554,  554,  554,  554,  554,  554,  557,
     1494, 1494, 1494, 1494, 1494, 1494,  557,  965, 1525,  965,
      556,  554,  554,  554,  554,  554,  554, 1121, 1121, 1121,
     1121, 1121, 1121,  556, 1634, 1634, 1634, 1634, 1634, 1634,
     1526, 1635, 1673, 1823, 1123, 1805, 1803,  557, 1673, 1823,
       80,  556,  554,  554,  554,  554,  554,  554, 1800,  967,
      557,  967, 1798, 1701, 1809, 1794, 1914, 1496, 1528, 1701,
     1809, 1527, 1338, 1338, 1338, 1338, 1338, 1338,  557, 1792,
     1823, 1823,  556, 1782, 1557, 1125, 1823, 1823,  972, 1781,
      972, 1529, 1338, 1338, 1338, 1338, 1338, 1338, 1674, 1824,

       80, 1774, 1340, 1338, 1338, 1338, 1338, 1338, 1338,  557,
     1338, 1338, 1338, 1338, 1338, 1338, 1530, 1772, 1768, 1702,
     1810, 1766, 1340, 1338, 1338, 1338, 1338, 1338, 1338, 1341,
      974, 1764,  974, 1340, 1753, 1752, 1824, 1824, 1568, 1749,
     1340, 1338, 1338, 1338, 1338, 1338, 1338, 1748,  976, 1341,
      976, 1743,  978, 1340,  978, 1145, 1741, 1145, 1569, 1739,
     1341, 1338, 1338, 1338, 1338, 1338, 1338, 1341,  989, 1914,
      989, 1340,  991, 1022,  991, 1022, 1571, 1024, 1914, 1024,
     1341, 1729, 1914, 1570, 1338, 1338, 1338, 1338, 1338, 1338,
     1722, 1340, 1338, 1338, 1338, 1338, 1338, 1338, 1341, 1026,

     1720, 1026, 1572,  554,  554,  554,  554,  554,  554, 1028,
     1217, 1028, 1217, 1081, 1340, 1081, 1718, 1083, 1341, 1083,
     1717, 1573, 1340,  554,  554,  554,  554,  554,  554, 1218,
     1085, 1218, 1085,  556, 1715,   79, 1574,   79, 1113, 1713,
     1113, 1341,  554,  554,  554,  554,  554,  554, 1115, 1341,
     1115,   80, 1117,  556, 1117, 1119, 1699, 1119, 1576, 1698,
      557, 1575, 1587, 1587, 1587, 1587, 1587, 1587, 1584, 1128,
     1689, 1128,  556, 1686, 1130, 1588, 1130, 1684, 1682, 1123,
      557,  554,  554,  554,  554,  554,  554, 1132, 1134, 1132,
     1134, 1585,  556,  554,  554,  554,  554,  554,  554,  557,

     1121, 1121, 1121, 1121, 1121, 1121, 1178, 1180, 1178, 1180,
     1182,  556, 1182, 1184, 1229, 1184, 1229, 1123, 1680,  557,
     1125, 1586,   80,  556, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338,   80, 1231,  557, 1231,
     1337, 1233, 1337, 1233, 1589,  336, 1249,  336, 1249, 1251,
      557, 1251,   80, 1253, 1340, 1253,   80, 1557, 1125, 1590,
     1340, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1669, 1667, 1338, 1338, 1338, 1338, 1338,
     1338, 1341, 1255, 1362, 1255, 1362, 1257, 1341, 1257, 1655,
      339, 1340,  339, 1269, 1619, 1269, 1654, 1340, 1338, 1338,

     1338, 1338, 1338, 1338, 1618, 1340, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1341, 1303,
     1305, 1303, 1305, 1404, 1341, 1404, 1652, 1621, 1340, 1307,
     1620, 1307, 1341,  376, 1650,  376, 1340, 1648, 1326, 1622,
     1326, 1646, 1340, 1338, 1338, 1338, 1338, 1338, 1338, 1670,
     1670, 1670, 1670, 1670, 1670, 1341, 1671, 1631, 1631, 1631,
     1631, 1631, 1631, 1341, 1328, 1420, 1328, 1420,   80, 1341,
     1632, 1624, 1643, 1340, 1123, 1334,  550, 1334,  550, 1623,
       80,  554,  554,  554,  554,  554,  554,  556, 1351, 1353,
     1351, 1353,   80, 1625, 1914, 1355, 1630, 1355, 1914, 1357,

     1341, 1357, 1634, 1634, 1634, 1634, 1634, 1634, 1626, 1635,
     1447,  556, 1447, 1629,  557, 1125,  554,  554,  554,  554,
      554,  554, 1617, 1587, 1587, 1587, 1587, 1587, 1587, 1914,
     1359, 1616, 1359, 1914, 1614,  555, 1588,  555,  557, 1914,
     1123, 1372, 1479, 1372, 1479, 1401,  556, 1401, 1612,  600,
     1268,  600, 1610,  556,  554,  554,  554,  554,  554,  554,
     1338, 1338, 1338, 1338, 1338, 1338, 1415, 1914, 1415, 1608,
     1417, 1914, 1417,  557, 1914,  554,  554,  554,  554,  554,
      554, 1125, 1633, 1421,  556, 1421, 1604, 1426, 1914, 1426,
     1340,   80, 1914, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338,  556, 1428, 1439, 1428, 1439,
       80,  557, 1914, 1441, 1443, 1441, 1443, 1341, 1445, 1448,
     1445, 1448,  991, 1340,  991, 1480, 1636, 1480, 1083, 1340,
     1083,   80,  557, 1914, 1338, 1338, 1338, 1338, 1338, 1338,
     1268, 1657, 1338, 1338, 1338, 1338, 1338, 1338, 1601,   79,
     1341,   79, 1490, 1600, 1490, 1658, 1341, 1338, 1338, 1338,
     1338, 1338, 1338,   80, 1340, 1338, 1338, 1338, 1338, 1338,
     1338, 1492, 1340, 1492, 1497,   80, 1497, 1659,   80, 1338,
     1338, 1338, 1338, 1338, 1338,   80, 1499, 1340, 1499,   80,
     1501, 1341, 1501, 1583, 1503, 1340, 1503, 1582, 1514, 1341,

     1514, 1516, 1579, 1516, 1661, 1580, 1518, 1580, 1518, 1340,
      970, 1521,  970, 1521, 1341, 1660, 1523, 1544, 1523, 1544,
     1578, 1567, 1341, 1665, 1665, 1665, 1665, 1665, 1665,  554,
      554,  554,  554,  554,  554, 1662, 1341, 1546, 1565, 1546,
     1123, 1553,  336, 1553,  336, 1664, 1663, 1631, 1631, 1631,
     1631, 1631, 1631, 1340, 1560, 1562, 1560, 1562, 1563,  556,
     1632, 1564, 1561, 1564, 1123,  554,  554,  554,  554,  554,
      554, 1338, 1338, 1338, 1338, 1338, 1338,  556, 1555, 1554,
     1341, 1125, 1566, 1627, 1566, 1627,  557, 1338, 1338, 1338,
     1338, 1338, 1338,   80, 1268,  556, 1577, 1122, 1577, 1122,

     1581, 1340, 1581, 1547, 1545, 1125, 1338, 1338, 1338, 1338,
     1338, 1338,  339, 1599,  339, 1599,  376, 1340,  376,  550,
       80,  550,  557, 1607, 1609, 1607, 1609, 1611, 1341, 1611,
     1613, 1268, 1613, 1656,   80, 1656, 1340,   80, 1338, 1338,
     1338, 1338, 1338, 1338, 1341, 1615, 1237, 1615, 1237, 1690,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1628, 1341, 1628,   80,   80, 1691, 1340, 1338,
     1338, 1338, 1338, 1338, 1338,  555,  600,  555,  600,   80,
     1340, 1692, 1645, 1647, 1645, 1647, 1340, 1338, 1338, 1338,
     1338, 1338, 1338,   80, 1649, 1341, 1649,   80, 1651, 1340,

     1651, 1665, 1665, 1665, 1665, 1665, 1665, 1341, 1687, 1653,
     1687, 1653, 1693, 1341, 1339,   80, 1339, 1340, 1123, 1524,
     1670, 1670, 1670, 1670, 1670, 1670, 1341, 1671, 1694, 1522,
     1626, 1340, 1520, 1695, 1703, 1703, 1703, 1703, 1703, 1703,
     1666, 1635, 1666, 1668, 1341, 1668, 1519, 1679, 1704, 1679,
     1681, 1517, 1681, 1338, 1338, 1338, 1338, 1338, 1338, 1125,
     1515, 1696, 1672, 1683, 1685, 1683, 1685, 1672, 1338, 1338,
     1338, 1338, 1338, 1338, 1504, 1502, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1340, 1338, 1338, 1338, 1338, 1338, 1338,
     1672, 1500, 1730, 1730, 1730, 1730, 1730, 1730, 1340, 1671,

     1338, 1338, 1338, 1338, 1338, 1338, 1731, 1712, 1706, 1712,
     1341, 1714, 1672, 1714, 1340, 1498, 1493, 1672, 1672, 1491,
     1109, 1672, 1672, 1489, 1750, 1341, 1750, 1626, 1488, 1672,
     1340,   80,   80, 1672, 1723, 1672, 1707, 1672, 1716, 1708,
     1716, 1341, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1495,   80, 1495, 1341, 1338, 1338,
     1338, 1338, 1338, 1338,   80, 1724, 1703, 1703, 1703, 1703,
     1703, 1703, 1340, 1635, 1719, 1721, 1719, 1721, 1340, 1481,
     1704, 1725, 1122, 1738, 1122, 1738,   80,   80, 1340, 1121,
     1121, 1121, 1121, 1121, 1121, 1740, 1742, 1740, 1742, 1341,

     1779, 1747, 1779, 1747,   80, 1341, 1123, 1726,   80, 1786,
     1786, 1786, 1786, 1786, 1786, 1341, 1787, 1556, 1727, 1556,
       80,   80, 1728, 1700, 1751, 1237, 1751, 1237, 1700, 1457,
     1449, 1338, 1338, 1338, 1338, 1338, 1338, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1765, 1446, 1765, 1125, 1767, 1444,
     1767, 1700, 1442, 1440, 1338, 1338, 1338, 1338, 1338, 1338,
     1771, 1340, 1771, 1338, 1338, 1338, 1338, 1338, 1338, 1733,
     1773, 1429, 1773, 1700, 1835, 1851, 1835, 1851, 1700, 1700,
     1427, 1673, 1700, 1700, 1340, 1423, 1422, 1673, 1341, 1902,
     1700, 1902, 1109, 1340, 1700, 1109, 1700, 1734, 1700, 1755,

     1735, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1903, 1419,
     1903, 1341, 1418, 1757, 1757, 1757, 1757, 1757, 1757, 1754,
     1341, 1416,   80,   80,   80,   80, 1758,   80,   80, 1403,
     1123, 1338, 1338, 1338, 1338, 1338, 1338, 1674, 1402,   80,
     1737,   80, 1756, 1340, 1338, 1338, 1338, 1338, 1338, 1338,
     1730, 1730, 1730, 1730, 1730, 1730,   80, 1671,   80,   80,
       80, 1340,   80, 1373, 1731, 1361, 1360, 1358, 1356, 1354,
     1341, 1125, 1352, 1336, 1340, 1121, 1121, 1121, 1121, 1121,
     1121, 1335, 1109, 1701, 1333, 1332, 1330,  738, 1341, 1701,
      702, 1673, 1123, 1329, 1759, 1327,   80, 1673,   80,   80,

       80, 1341,   80, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1760, 1769, 1769, 1769, 1769, 1769, 1769, 1769,   80, 1783,
     1783, 1783, 1783, 1783, 1783,   80,   80,   80,   80,   80,
       80, 1673, 1784, 1125,   80,   80, 1123, 1673,   80, 1702,
     1309, 1308, 1762, 1306, 1304,   80,   80, 1674, 1270, 1340,
     1770, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1259, 1258,
     1256, 1338, 1338, 1338, 1338, 1338, 1338, 1806, 1806, 1806,
     1806, 1806, 1806, 1254, 1807, 1252, 1341, 1125, 1786, 1786,
     1786, 1786, 1786, 1786, 1250, 1787, 1248, 1674, 1673, 1235,
     1234, 1340, 1232, 1230, 1673,  959,  952, 1224, 1223,  948,

     1221, 1338, 1338, 1338, 1338, 1338, 1338,  738, 1775, 1775,
     1775, 1775, 1775, 1775, 1775, 1775, 1775,  738, 1341, 1220,
      932,  926,  496,  702, 1775, 1775, 1775, 1775, 1775, 1775,
     1626, 1340,  702, 1219,  478, 1338, 1338, 1338, 1338, 1338,
     1338, 1080,   80,   80, 1674,   80,   80, 1776,   80, 1775,
     1775, 1775, 1775, 1775, 1775,   80,   80,   80, 1341, 1757,
     1757, 1757, 1757, 1757, 1757, 1340,   80, 1785,   80,   80,
       80,   80, 1758,   80,   80,   80, 1123,   80, 1338, 1338,
     1338, 1338, 1338, 1338,   80, 1185, 1183, 1181, 1179, 1340,
     1701,   80, 1341, 1135, 1133, 1131, 1701, 1129, 1701, 1120,

     1118, 1116, 1114,  959, 1701,  959, 1111, 1788, 1340,  758,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1125, 1761, 1761,
     1761, 1761, 1761, 1761, 1761,  948,  948, 1783, 1783, 1783,
     1783, 1783, 1783,  944,  738, 1341, 1100, 1099, 1097,  932,
     1784,  932, 1673, 1626, 1123,  725, 1702,  926, 1673, 1790,
      926,  496,  496, 1094, 1702, 1701,  702, 1340, 1093, 1092,
     1090, 1701, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1338,
     1338, 1338, 1338, 1338, 1338, 1795, 1795, 1795, 1795, 1795,
     1795, 1795, 1795, 1795, 1089, 1125,  478,  478, 1088, 1087,
     1086, 1795, 1795, 1795, 1795, 1795, 1795, 1084, 1674, 1340,

     1338, 1338, 1338, 1338, 1338, 1338, 1082, 1080,   80,   80,
       80, 1702,   80,   80, 1796,   80, 1795, 1795, 1795, 1795,
     1795, 1795, 1673,   80,   80,   80, 1341,   80, 1673,   80,
     1340,   80,   80,   80, 1626,   80, 1029, 1027, 1025, 1023,
       80,  992, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775,
     1775,  990,  979,  977,  975,  973,  968, 1341, 1775, 1775,
     1775, 1775, 1775, 1775,  966,  964, 1626,  962,  548, 1701,
      542,  768,  758,  758,  524, 1701,  518,  513, 1674,  936,
      935, 1776,  725, 1775, 1775, 1775, 1775, 1775, 1775, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1806, 1806, 1806, 1806,

     1806, 1806,  725, 1807, 1825, 1825, 1825, 1825, 1825, 1825,
      496, 1787,  922,  921,  919,  918,  486,  913, 1826, 1121,
     1121, 1121, 1121, 1121, 1121, 1702, 1808,  912,  478,  908,
      907, 1808,  905,  904,  903,  901, 1123,  680,  680,  899,
     1827, 1827, 1827, 1827, 1827, 1827, 1827,  897, 1837, 1837,
     1837, 1837, 1837, 1837, 1808, 1807, 1825, 1825, 1825, 1825,
     1825, 1825, 1838, 1787, 1837, 1837, 1837, 1837, 1837, 1837,
     1826, 1807, 1828,   80,   80,   80, 1808, 1125, 1838,   80,
       80, 1808, 1808,   80,   80, 1808, 1808,   80,   80,   80,
     1809,  832,  830, 1808,  601,  796, 1809, 1808,  794, 1808,

     1829, 1808,  783, 1830, 1822,  781,  777,  776,  774, 1822,
     1843, 1843, 1843, 1843, 1843, 1843, 1843,  551, 1839, 1839,
     1839, 1839, 1839, 1839, 1839, 1121, 1121, 1121, 1121, 1121,
     1121,  548, 1822,  548,  320,  542,  542,  524,  524,  298,
      518,  518, 1123,  740,  732,  277, 1810,  709,  708, 1844,
     1840,  704,  268,  689, 1822,  688,  684,  682,  460, 1822,
     1822,  460,  680, 1822, 1822,  678, 1823,  676,   80,   80,
       80, 1822, 1823,  601, 1809, 1822,  571, 1822, 1841, 1822,
     1809, 1842,  570, 1125,  568,  551, 1854, 1854, 1854, 1854,
     1854, 1854, 1854,  332, 1862, 1862, 1862, 1862, 1862, 1862,

     1862,  331,  320,  320,  305,  298,  298,  271,  480,  469,
      468,  467,  465,  463, 1809,  460,  459,  458,  456,  454,
     1809,  230, 1824, 1823,  448, 1855,  447,   80,   80, 1823,
     1810,  377,  352, 1863, 1843, 1843, 1843, 1843, 1843, 1843,
     1843,  351,  349, 1874, 1874, 1874, 1874, 1874, 1874, 1874,
      332,  337,  335,  332,  330,  329,  328,  271,  262,   78,
      259,   78,   80, 1823,  232,  170,  153,  128,  123, 1823,
     1810, 1809,   80, 1914,   69,   69, 1914, 1809, 1914, 1824,
     1914, 1914, 1875, 1854, 1854, 1854, 1854, 1854, 1854, 1854,
     1914, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868,

     1809, 1914, 1914, 1914, 1914, 1914, 1809, 1868, 1868, 1868,
     1868, 1868, 1868, 1914, 1914, 1914, 1914, 1914, 1914, 1824,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1810, 1914, 1914,
     1869, 1914, 1868, 1868, 1868, 1868, 1868, 1868, 1823, 1914,
     1914, 1914, 1914, 1914, 1823, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1810, 1914, 1880, 1880,
     1880, 1880, 1880, 1880, 1880, 1880, 1880, 1823, 1914, 1914,
     1914, 1914, 1914, 1823, 1880, 1880, 1880, 1880, 1880, 1880,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1874, 1874, 1874,
     1874, 1874, 1874, 1874, 1824, 1914, 1914, 1881, 1914, 1880,

     1880, 1880, 1880, 1880, 1880, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1824, 1808, 1808, 1808, 1808, 1808, 1808,
     1808, 1808, 1808, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1808, 1808, 1808, 1808, 1808, 1808, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1808, 1914, 1808, 1808, 1808, 1808, 1808,
     1808,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,

       70,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   79, 1914, 1914, 1914,
     1914,   79, 1914,   79,   79,   79,   79,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  233,  233, 1914,  233,  233, 1914,  233,  233,
      233,  233,  233,  233,  233, 1914,  233,  241,  241, 1914,
     1914,  241,  241,  241,  241,  241,  241,  241,  241,  241,
     1914,  241,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  306,  306, 1914,
      306, 1914, 1914,  306,  336, 1914, 1914, 1914, 1914, 1914,

     1914,  336,  336,  336,  336,  339,  339, 1914,  339, 1914,
     1914, 1914, 1914, 1914, 1914,  339,  339,  339,  339,  348,
     1914,  348, 1914, 1914,  348,  350, 1914,  350, 1914, 1914,
      350,  376, 1914, 1914, 1914, 1914, 1914, 1914,  376,  376,
      376,  376,  453, 1914,  453, 1914, 1914,  453,  455, 1914,
      455, 1914, 1914,  455,  457, 1914,  457, 1914, 1914,  457,
      241,  241, 1914, 1914,  241,  241,  241,  241,  241,  241,
      241,  241,  241, 1914,  241,  464, 1914,  464, 1914, 1914,
      464,  466, 1914,  466, 1914, 1914,  466,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  306,  306, 1914,  306,  550, 1914, 1914, 1914,
     1914,  550, 1914,  550,  550,  550,  550,  339,  339, 1914,
      339, 1914, 1914, 1914, 1914, 1914, 1914,  339,  339,  339,
      339,  555,  555, 1914,  555, 1914, 1914, 1914, 1914,  555,
      555,  555,  555,  555,  555,  567, 1914,  567, 1914, 1914,
      567,  569, 1914,  569, 1914, 1914,  569,   79, 1914, 1914,
     1914, 1914,   79, 1914,   79,   79,   79,   79,  600, 1914,
     1914, 1914, 1914,  600, 1914,  600,  600,  600,  600,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  675,
     1914,  675, 1914, 1914,  675,  677, 1914,  677, 1914, 1914,
      677,  679, 1914,  679, 1914, 1914,  679,  681, 1914,  681,
     1914, 1914,  681,  683, 1914,  683, 1914, 1914,  683,  743,
     1914,  743,  743, 1914,  743,  526, 1914,  526,  526, 1914,
      526,  550, 1914, 1914, 1914, 1914,  550, 1914,  550,  550,
      550,  550,  773, 1914,  773, 1914, 1914,  773,  775, 1914,
      775, 1914, 1914,  775,  555,  555, 1914,  555, 1914, 1914,
     1914, 1914,  555,  555,  555,  555,  555,  555,  780, 1914,
      780, 1914, 1914,  780,  782, 1914,  782, 1914, 1914,  782,

      793, 1914,  793, 1914, 1914,  793,  795, 1914,  795, 1914,
     1914,  795,   79, 1914, 1914, 1914, 1914,   79, 1914,   79,
       79,   79,   79,  600, 1914, 1914, 1914, 1914,  600, 1914,
      600,  600,  600,  600,  829, 1914,  829, 1914, 1914,  829,
      831, 1914,  831, 1914, 1914,  831,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  896, 1914,  896, 1914, 1914,  896,  898, 1914,  898,
     1914, 1914,  898,  679, 1914,  679, 1914, 1914,  679,  900,
     1914,  900, 1914, 1914,  900,  902, 1914,  902, 1914, 1914,
      902,  743, 1914,  743,  743, 1914,  743,  528, 1914,  528,

     1914, 1914,  528,  961, 1914,  961, 1914, 1914,  961,  963,
     1914,  963, 1914, 1914,  963,  965, 1914,  965, 1914, 1914,
      965,  967, 1914,  967, 1914, 1914,  967,  970,  970, 1914,
      970, 1914, 1914, 1914, 1914, 1914, 1914,  970,  970,  970,
      970,  972, 1914,  972, 1914, 1914,  972,  974, 1914,  974,
     1914, 1914,  974,  976, 1914,  976, 1914, 1914,  976,  978,
     1914,  978, 1914, 1914,  978,  555,  555, 1914,  555, 1914,
     1914, 1914, 1914,  555,  555,  555,  555,  555,  555,  989,
     1914,  989, 1914, 1914,  989,  991, 1914,  991, 1914, 1914,
      991,   79, 1914, 1914, 1914, 1914,   79, 1914,   79,   79,

       79,   79, 1022, 1914, 1022, 1914, 1914, 1022, 1024, 1914,
     1024, 1914, 1914, 1024, 1026, 1914, 1026, 1914, 1914, 1026,
     1028, 1914, 1028, 1914, 1914, 1028, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1081, 1914, 1081, 1914, 1914, 1081, 1083, 1914, 1083,
     1914, 1914, 1083, 1085, 1914, 1085, 1914, 1914, 1085,   79,
     1914,   79, 1914, 1914,   79,  743, 1914,  743, 1914, 1914,
      743, 1113, 1914, 1113, 1914, 1914, 1113, 1115, 1914, 1115,
     1914, 1914, 1115, 1117, 1914, 1117, 1914, 1914, 1117, 1119,
     1914, 1119, 1914, 1914, 1119,  970,  970, 1914,  970, 1914,

     1914, 1914, 1914, 1914, 1914,  970,  970,  970,  970, 1122,
     1122, 1914, 1122, 1914, 1914, 1122, 1914, 1122, 1914, 1122,
     1122, 1122, 1122, 1128, 1914, 1128, 1914, 1914, 1128, 1130,
     1914, 1130, 1914, 1914, 1130, 1132, 1914, 1132, 1914, 1914,
     1132, 1134, 1914, 1134, 1914, 1914, 1134,  555,  555, 1914,
      555, 1914, 1914, 1914, 1914,  555,  555,  555,  555,  555,
      555,   79, 1914, 1914, 1914, 1914,   79, 1914,   79,   79,
       79,   79, 1178, 1914, 1178, 1914, 1914, 1178, 1180, 1914,
     1180, 1914, 1914, 1180, 1182, 1914, 1182, 1914, 1914, 1182,
     1184, 1914, 1184, 1914, 1914, 1184, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1229, 1914, 1229, 1914, 1914, 1229, 1231, 1914, 1231,
     1914, 1914, 1231, 1233, 1914, 1233, 1914, 1914, 1233,  336,
     1914,  336, 1914, 1914,  336, 1122, 1122, 1914, 1122, 1914,
     1914, 1122, 1914, 1122, 1914, 1122, 1122, 1122, 1122, 1237,
     1237, 1914, 1237, 1914, 1914, 1914, 1914, 1914, 1914, 1237,
     1237, 1237, 1237, 1249, 1914, 1249, 1914, 1914, 1249, 1251,
     1914, 1251, 1914, 1914, 1251, 1253, 1914, 1253, 1914, 1914,
     1253, 1255, 1914, 1255, 1914, 1914, 1255, 1257, 1914, 1257,
     1914, 1914, 1257,  339, 1914,  339, 1914, 1914,  339,  555,

      555, 1914,  555, 1914, 1914, 1914, 1914,  555,  555,  555,
      555,  555,  555, 1269, 1914, 1269, 1914, 1914, 1269,   79,
     1914, 1914, 1914, 1914,   79, 1914,   79,   79,   79,   79,
     1303, 1914, 1303, 1914, 1914, 1303, 1305, 1914, 1305, 1914,
     1914, 1305, 1307, 1914, 1307, 1914, 1914, 1307,  376, 1914,
      376, 1914, 1914,  376, 1326, 1914, 1326, 1914, 1914, 1326,
     1328, 1914, 1328, 1914, 1914, 1328, 1334, 1914, 1334, 1914,
     1914, 1334,  550, 1914,  550, 1914, 1914,  550, 1237, 1237,
     1914, 1237, 1914, 1914, 1914, 1914, 1914, 1914, 1237, 1237,
     1237, 1237, 1339, 1339, 1914, 1339, 1914, 1914, 1914, 1914,

     1339, 1339, 1339, 1339, 1339, 1339, 1351, 1914, 1351, 1914,
     1914, 1351, 1353, 1914, 1353, 1914, 1914, 1353, 1355, 1914,
     1355, 1914, 1914, 1355, 1357, 1914, 1357, 1914, 1914, 1357,
     1359, 1914, 1359, 1914, 1914, 1359,  555, 1914,  555, 1914,
     1914,  555,  555,  555, 1914,  555, 1914, 1914, 1914, 1914,
      555,  555,  555,  555,  555,  555, 1372, 1914, 1372, 1914,
     1914, 1372,   79, 1914, 1914, 1914, 1914,   79, 1914,   79,
       79,   79,   79, 1401, 1914, 1401, 1914, 1914, 1401,  600,
     1914,  600, 1914, 1914,  600, 1415, 1914, 1415, 1914, 1914,
     1415, 1417, 1914, 1417, 1914, 1914, 1417, 1421, 1914, 1421,

     1914, 1914, 1421, 1339, 1339, 1914, 1339, 1914, 1914, 1914,
     1914, 1339, 1339, 1339, 1339, 1339, 1339, 1426, 1914, 1426,
     1914, 1914, 1426, 1428, 1914, 1428, 1914, 1914, 1428, 1439,
     1914, 1439, 1914, 1914, 1439, 1441, 1914, 1441, 1914, 1914,
     1441, 1443, 1914, 1443, 1914, 1914, 1443, 1445, 1914, 1445,
     1914, 1914, 1445, 1448, 1914, 1448, 1914, 1914, 1448,  555,
      555, 1914,  555, 1914, 1914, 1914, 1914,  555,  555,  555,
      555,  555,  555,  991, 1914,  991, 1914, 1914,  991,   79,
     1914, 1914, 1914, 1914,   79, 1914,   79,   79,   79,   79,
     1480, 1914, 1480, 1914, 1914, 1480, 1083, 1914, 1083, 1914,

     1914, 1083,   79, 1914,   79, 1914, 1914,   79, 1490, 1914,
     1490, 1914, 1914, 1490, 1492, 1914, 1492, 1914, 1914, 1492,
     1495, 1495, 1914, 1495, 1914, 1914, 1914, 1914, 1914, 1914,
     1495, 1495, 1495, 1495, 1497, 1914, 1497, 1914, 1914, 1497,
     1499, 1914, 1499, 1914, 1914, 1499, 1501, 1914, 1501, 1914,
     1914, 1501, 1503, 1914, 1503, 1914, 1914, 1503, 1339, 1339,
     1914, 1339, 1914, 1914, 1914, 1914, 1339, 1339, 1339, 1339,
     1339, 1339, 1514, 1914, 1514, 1914, 1914, 1514, 1516, 1914,
     1516, 1914, 1914, 1516, 1518, 1914, 1518, 1914, 1914, 1518,
      970, 1914,  970, 1914, 1914,  970, 1521, 1914, 1521, 1914,

     1914, 1521, 1523, 1914, 1523, 1914, 1914, 1523,  555,  555,
     1914,  555, 1914, 1914, 1914, 1914,  555,  555,  555,  555,
      555,  555,   79, 1914, 1914, 1914, 1914,   79, 1914,   79,
       79,   79,   79, 1544, 1914, 1544, 1914, 1914, 1544, 1546,
     1914, 1546, 1914, 1914, 1546, 1553, 1914, 1553, 1914, 1914,
     1553,  336, 1914,  336, 1914, 1914,  336, 1495, 1495, 1914,
     1495, 1914, 1914, 1914, 1914, 1914, 1914, 1495, 1495, 1495,
     1495, 1556, 1556, 1914, 1556, 1914, 1914, 1556, 1914, 1556,
     1914, 1556, 1556, 1556, 1556, 1560, 1914, 1560, 1914, 1914,
     1560, 1562, 1914, 1562, 1914, 1914, 1562, 1564, 1914, 1564,

     1914, 1914, 1564, 1566, 1914, 1566, 1914, 1914, 1566, 1339,
     1339, 1914, 1339, 1914, 1914, 1914, 1914, 1339, 1339, 1339,
     1339, 1339, 1339, 1577, 1914, 1577, 1914, 1914, 1577, 1122,
     1914, 1122, 1914, 1914, 1122, 1581, 1914, 1581, 1914, 1914,
     1581,  339, 1914,  339, 1914, 1914,  339,  555,  555, 1914,
      555, 1914, 1914, 1914, 1914,  555,  555,  555,  555,  555,
      555,   79, 1914, 1914, 1914, 1914,   79, 1914,   79,   79,
       79,   79, 1599, 1914, 1599, 1914, 1914, 1599,  376, 1914,
      376, 1914, 1914,  376,  550, 1914,  550, 1914, 1914,  550,
     1556, 1556, 1914, 1556, 1914, 1914, 1556, 1914, 1556, 1914,

     1556, 1556, 1556, 1556, 1607, 1914, 1607, 1914, 1914, 1607,
     1609, 1914, 1609, 1914, 1914, 1609, 1611, 1914, 1611, 1914,
     1914, 1611, 1613, 1914, 1613, 1914, 1914, 1613, 1615, 1914,
     1615, 1914, 1914, 1615, 1237, 1914, 1237, 1914, 1914, 1237,
     1339, 1339, 1914, 1339, 1914, 1914, 1914, 1914, 1339, 1339,
     1339, 1339, 1339, 1339, 1628, 1914, 1628, 1914, 1914, 1628,
      555, 1914,  555, 1914, 1914,  555,  555,  555, 1914,  555,
     1914,  555,  555, 1914,  555,  555,  555,  555,  555,  555,
       79, 1914, 1914, 1914, 1914,   79, 1914,   79,   79,   79,
       79,  600, 1914,  600, 1914, 1914,  600, 1645, 1914, 1645,

     1914, 1914, 1645, 1647, 1914, 1647, 1914, 1914, 1647, 1649,
     1914, 1649, 1914, 1914, 1649, 1651, 1914, 1651, 1914, 1914,
     1651, 1653, 1914, 1653, 1914, 1914, 1653, 1339, 1914, 1339,
     1914, 1914, 1339, 1339, 1339, 1914, 1339, 1914, 1914, 1914,
     1914, 1339, 1339, 1339, 1339, 1339, 1339, 1666, 1914, 1666,
     1914, 1914, 1666, 1668, 1914, 1668, 1914, 1914, 1668,  555,
      555, 1914,  555, 1914, 1914, 1914, 1914,  555,  555,  555,
      555,  555,  555, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,   79, 1914,
     1914, 1914, 1914,   79, 1914,   79,   79,   79,   79, 1679,

     1914, 1679, 1914, 1914, 1679, 1681, 1914, 1681, 1914, 1914,
     1681, 1683, 1914, 1683, 1914, 1914, 1683, 1685, 1914, 1685,
     1914, 1914, 1685, 1688, 1914, 1688, 1914, 1914, 1688, 1697,
     1914, 1697, 1914, 1914, 1697,  970, 1914,  970, 1914, 1914,
      970, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1712, 1914, 1712, 1914, 1914, 1712, 1714, 1914, 1714,
     1914, 1914, 1714, 1716, 1914, 1716, 1914, 1914, 1716, 1495,
     1914, 1495, 1914, 1914, 1495, 1719, 1914, 1719, 1914, 1914,

     1719, 1721, 1914, 1721, 1914, 1914, 1721, 1122, 1914, 1122,
     1914, 1914, 1122, 1738, 1914, 1738, 1914, 1914, 1738, 1740,
     1914, 1740, 1914, 1914, 1740, 1742, 1914, 1742, 1914, 1914,
     1742,   79, 1914, 1914, 1914, 1914,   79, 1914,   79,   79,
       79,   79, 1747, 1914, 1747, 1914, 1914, 1747, 1556, 1914,
     1556, 1914, 1914, 1556, 1751, 1914, 1751, 1914, 1914, 1751,
     1237, 1914, 1237, 1914, 1914, 1237, 1339, 1339, 1914, 1339,
     1914, 1914, 1914, 1914, 1339, 1339, 1339, 1339, 1339, 1339,
     1763, 1914, 1763, 1914, 1914, 1763, 1765, 1914, 1765, 1914,
     1914, 1765, 1767, 1914, 1767, 1914, 1914, 1767, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1771, 1914, 1771, 1914, 1914, 1771, 1773,
     1914, 1773, 1914, 1914, 1773,   79, 1914, 1914, 1914, 1914,
       79, 1914,   79,   79,   79,   79, 1780, 1914, 1780, 1914,
     1914, 1780, 1339, 1914, 1339, 1914, 1914, 1339, 1791, 1914,
     1791, 1914, 1914, 1791, 1793, 1914, 1793, 1914, 1914, 1793,
     1797, 1914, 1797, 1914, 1914, 1797, 1799, 1914, 1799, 1914,
     1914, 1799,   79, 1914, 1914, 1914, 1914,   79, 1914,   79,
       79,   79,   79, 1802, 1914, 1802, 1914, 1914, 1802, 1804,
     1914, 1804, 1914, 1914, 1804, 1808, 1808, 1808, 1808, 1808,

     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
     1811, 1914, 1811, 1914, 1914, 1811, 1813, 1914, 1813, 1914,
     1914, 1813, 1815, 1914, 1815, 1914, 1914, 1815, 1817, 1914,
     1817, 1914, 1914, 1817, 1819, 1914, 1819, 1914, 1914, 1819,
     1495, 1914, 1495, 1914, 1914, 1495, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
     1822, 1831, 1914, 1831, 1914, 1914, 1831, 1833, 1914, 1833,
     1914, 1914, 1833, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1556, 1914,
     1556, 1914, 1914, 1556, 1845, 1914, 1845, 1914, 1914, 1845,

     1847, 1914, 1847, 1914, 1914, 1847, 1849, 1914, 1849, 1914,
     1914, 1849, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1852, 1914, 1852,
     1914, 1914, 1852, 1856, 1914, 1856, 1914, 1914, 1856, 1858,
     1914, 1858, 1914, 1914, 1858, 1860, 1914, 1860, 1914, 1914,
     1860, 1864, 1914, 1864, 1914, 1914, 1864, 1866, 1914, 1866,
     1914, 1914, 1866, 1870, 1914, 1870, 1914, 1914, 1870, 1872,
     1914, 1872, 1914, 1914, 1872, 1876, 1914, 1876, 1914, 1914,
     1876, 1878, 1914, 1878, 1914, 1914, 1878, 1882, 1914, 1882,
     1914, 1914, 1882, 1884, 1914, 1884, 1914, 1914, 1884, 1886,

     1914, 1886, 1914, 1914, 1886, 1817, 1914, 1817, 1914, 1914,
     1817, 1889, 1914, 1889, 1914, 1914, 1889, 1891, 1914, 1891,
     1914, 1914, 1891, 1893, 1914, 1893, 1914, 1914, 1893, 1895,
     1914, 1895, 1914, 1914, 1895, 1833, 1914, 1833, 1914, 1914,
     1833, 1898, 1914, 1898, 1914, 1914, 1898, 1900, 1914, 1900,
     1914, 1914, 1900, 1904, 1914, 1904, 1914, 1914, 1904, 1906,
     1914, 1906, 1914, 1914, 1906, 1908, 1914, 1908, 1914, 1914,
     1908, 1910, 1914, 1910, 1914, 1914, 1910,    9, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914
    } ;

static const flex_int16_t yy_chk[8871] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    5,    6,    7,    8,    2,   17,   17,

        2,    7,    8,   18,    5,    6,   11,   23,   11,   11,
       11,   11,   13,   25,   13,   13,   13,   13,   14,   22,
       14,   22,   34,   34,   23,   18,   23,   27,   25,   25,
       25,   26,   27,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   32,   36,   41,   27,   41,   55,   37,    5,
        6,    7,    8,   37,   39,   44,   55,   52,   50,  132,
       47,  132,   32,   45,   32,   32,   36,   50,   45,   47,
       44,   61,   44,   47,   39,   52,   50,   44,   47,   44,
       61,   23,   48,   47,   45,   25,   28,   63,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   48,   37,   48,

       51,   37,   39,  415,   80,   28,  415,  165,   28,   48,
       51,   28,   28,   28,   28,   28,   53,   51,   65,  162,
       28,   28,   28,  165,  109,  120,   46,   28,  162,   54,
       28,   46,   80,   28,   53,  411,   28,   28,   46,   28,
       53,   28,   63,   28,   46,   65,   54,   65,   28,  160,
       54,   28,   54,   28,   29,   59,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  109,  120,  160,   59,   92,
      411,  163,   60,   59,  101,  101,   29,   60,   59,   29,
       29,   29,   29,   29,   60,   60,  163,  168,   29,   75,
       29,   75,   75,   75,   75,   29,   92,   49,  133,  168,

      133,   29,   49, 1866,   29,   29,  135,   29,  135,   29,
       49,   29,   49,  101,  180,   49,   29,  138,  137,  138,
       49,   29,   35,  140,  180,  140,   35,   35,  143,   35,
      143,   35,   35,  137,   35,  137,   35,   42,   42,   42,
       42,   56,   42,   42,  144,   42,  144,   42,   35,   35,
       35,   42,   42,   56,   56,  106,  161,   42,   57,  164,
       42,   58,  173,  106,   56,   56,   58,   56,  164,  167,
       57,   57,   35,   35,  161,   35,  111,   35,  173,   57,
      106,   57,   58,  174,  111,   66,   57,   66,   66,   66,
       66,  106,  167,   66,   67,   67,  141,  141,  141,   67,

      111,  111, 1867,   35,   35,   76,  174,   76,   76,   76,
       76,   58,  111,  171,   58,   67,   67,   67,   67,   67,
       67,   67,   67,   67,  139,  139,  171,  139,   58,   72,
       72,  147,  172,  147,   72,  243,   72,  243,  283,  283,
      172,   72,   99,   99,   99,   99,   99,   99,   99,  117,
       72,   72,   72,   72,   72,   72,   72,  117,  152,   99,
      102,  136,  102,  152,   72,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  117,   99,  175,  177,  136,  159,
      136,   99,   72,  166,   99,  117,   72,  183,  176,  188,
      181,   72,   72,  182,  159,   72,   72,  176,  175,  177,

      177,  166,  159,   72,  102,   99,  188,   72,  152,   72,
       72,   72,  181,   72,   78,  183,  188,  182,   78,   78,
      178,   78,  192,   78,   78,  178,   78,  100,   78,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  178,  192,
       78,   78,   78,  103,  103,  104, 1870,  104,  104,  100,
      184,  187,  103,  189,  104,  190,  186,  185,  108,  108,
      108,  108,  185,  186,   78,   78,  187,   78,  100,  103,
      104,  189,  184,  104,  100,  104,  190,  196,  191,  186,
      103,  185,  104,  108,  108,  193,  108,  244,  108,  244,
      672,  198,  195,  672,  196,  201,   78,   94,   94,   94,

       94,   94,   94,   94,   94,   94,  191,  195,  193,  119,
      119,  119,  119,  197,  198,  195,   94,   94,   94,  114,
      114,   94,   94,  201,  607,   94,  203,  105,  114,  105,
      197,  199,  105,  105,  119,  119,   94,  119,  607,  119,
      199,   94,   94,   94,  203,  114,   94,  206,   94,  205,
      105,  105,  110,   94,  205,  208,  114,  209,  105,   94,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  206,
      205,  110,  246,  209,  246,  105,  208,  207,  212,   98,
       98,   98,  211, 1871,   98,   98,  105,  110,   98,  112,
      207,  112,  220,  110,  112,  112,  110,  212,  115,   98,

      115,  115,  204, 1872,   98,   98,   98,  115,  213,   98,
      211,   98,  112,  204,  295,  220,   98,  110,  295,  116,
      112,  116,   98,  115,  116,  116,  115,  214,  115,  217,
      121,  204,  216,  218,  217,  115,  210,  112,  121,  112,
      214,  210,  116,  116,  215,  216,  218,  216,  112,  214,
      116,  122,  221,  122,  121,  121,  122,  122,  213,  219,
      249,  213,  249,  354,  210,  215,  121,  116,  219,  247,
      169,  268,  219,  221,  122,  169,  169,  169,  116,  169,
      169,  354,  122,  169,  356,  169,  247,  280,  247,  248,
     1873,  169,  169,  169,  169,  169,  268,  234,  234,  122,

      356,  122,  234,  251,  248,  251,  248,  254,  179,  254,
      122,  153,  153,  153,  153,  153,  153,  179,  179,  202,
      317,  396,  227,  227,  317,  179,  202,  227,  280,  179,
      202,  226,  179,  226,  226,  226,  226, 1876,  202,  226,
      396,  202,  202,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  237,  237,  237,  237,  237,  237,  237,  250,
      250,  353,  250,  252,  252,  252,  372,  255,  153,  255,
      360,  153,  229,  229,  353,  360,  153,  229,  153,  372,
     1877,  231,  231,  357,  153,  153,  231,  277,  231,  153,
      357,  237,  153,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  256,  277,  256,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  302,  264,  324,  264,  287,  474,  264,
      264,  289,  474,  263,  263,  263,  300,  300,  263,  263,
      289,  266,  263,  266,  359,  291,  266,  266,  302,  264,
      324,  264,  362,  263,  264,  287,  264,  362,  263,  263,
      263,  359,  300,  263,  266,  263,  361, 1878,  289,  309,
      263,  367,  265,  291,  265,  293,  263,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  267,  361,  267,  266,
      303,  293,  267,  365,  273,  267,  273,  309,  367,  273,

      273,  378,  395,  293,  275,  333,  275,  333,  395,  275,
      275,  267,  378,  267,  303,  303,  265,  365,  267,  273,
      334,  273,  334,  267,  273,  313,  273,  275,  337,  267,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  311,  272,
      272,  272,  275,  313,  272,  272,  337,  311,  272,  374,
      385,  315,  363,  370,  355,  322,  322,  385,  370,  272,
     1879,  461,  374,  461,  272,  272,  272,  315,  276,  272,
      276,  272,  355,  363,  276,  311,  272,  276,  274,  315,
      274,  322,  272,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  294,  276,  294,  276,  298,  294,  294, 1882,
      276,  278,  278,  278,  298,  276,  278,  278,  340,  368,
      278,  276,  279,  373,  279,  279,  279,  279,  279,  279,
      279,  298,  274,  294,  368,  373,  278,  278,  278,  358,
      371,  278,  298,  278,  366,  383,  340,  382,  278,  371,
      383,  373,  294,  301,  278,  301,  382,  358,  301,  301,
      386,  294,  366,  279,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  290,  325,  290,  301,  301,  290,  290,
      286,  386,  286,  392,  281,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  299, 1153,  369,  290,  325,  325,

      392,  301,  299,  281,  290,  384,  375,  381,  387,  281,
      282,  282,  369,  369,  384,  320,  304,  388,  304,  299,
      321,  304,  304,  320,  375,  381,  387, 1153,  321,  377,
      299,  364,  290,  282,  282,  282,  282,  282,  388,  304,
      320,  407,  282,  393,  282,  321,  364,  394,  393,  282,
      389,  320,  394,  364,  364,  364,  321,  377,  282,  282,
      407,  282,  397,  282,  304,  282,  304,  316,  389,  316,
      282,  397,  316,  316,  486,  282,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  400,  285,  390,  285,  316,  486,

      285,  285,  398,  400,  285,  323, 1883,  323,  398,  404,
      323,  323,  391,  422,  401,  285,  402,  316,  390,  390,
      285,  399,  285,  401,  308,  285,  316,  285,  323,  323,
      391,  402,  285,  404,  422,  403,  391,  399,  285,  306,
      403,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      312,  409,  312,  323,  408,  312,  312,  306,  306,  306,
      306,  306,  306,  408,  306,  306,  306,  306,  306,  409,
      414,  405,  518,  306,  312,  306,  405,  412,  410,  414,
      306,  312,  306,  306,  306,  306,  306,  306,  412,  306,
      306,  410,  306,  326,  306,  326,  306,  440,  326,  326,

      518,  306,  440,  406,  420,  425,  306,  513,  406,  312,
      339,  339,  339,  339,  339,  339,  326,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  406,  420,  425,  413,
      421,  416,  513,  341,  341,  341,  341,  341,  341,  418,
      339,  326,  413,  326,  342,  342,  342,  342,  342,  342,
      416,  426,  418,  428,  421,  424,  327,  338,  338,  338,
      338,  338,  338,  341,  424,  431,  435,  339,  345,  345,
      345,  345,  345,  345,  342,  426,  428, 1884,  431,  417,
      341,  419,  343,  343,  343,  343,  343,  343,  524,  427,
      341,  344,  344,  344,  344,  344,  344,  417,  345,  419,

      433,  342,  346,  346,  346,  346,  346,  346,  427,  423,
      342,  429,  343,  524,  338,  436,  435,  338,  430,  433,
      429,  344,  338,  437,  338,  345,  423,  430,  434,  429,
      338,  338,  346,  436,  438,  338,  437,  434,  338,  343,
      441,  439,  445,  345,  343,  536,  441,  442,  344,  439,
      443,  444,  450,  344,  445,  446, 1885,  438,  450,  346,
      347,  347,  347,  347,  347,  347,  444,  443,  346,  575,
      442,  449,  449,  446,  574,  462,  449,  462,  449,  451,
      451,  451,  451,  451,  451,  451,  536,  581,  575,  574,
      347,  452,  452,  452,  452,  452,  452,  452,  471,  471,

      471,  471,  471,  471,  471,  471,  471,  479,  585,  479,
      581,  492,  479,  479,  473,  492,  473,  347,  451,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  515,  521,
      519,  585,  515,  521,  347,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  525,  472,  548,  472,  503,  519,  472,
      472, 1886,  482,  472,  482,  503,  572,  482,  482,  539,
      497,  549,  497,  539,  472,  497,  497,  572,  525,  472,
      548,  472,  503,  480,  472,  577,  472,  482,  612,  482,
      577,  472,  482,  503,  482,  612,  549,  472,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  484,  526,  484,
      542,  543,  484,  484,  596,  500,  500,  481,  481,  481,
      526,  507,  481,  481,  500,  551,  481,  545,  591,  507,
      484,  545,  573,  591, 1887,  596,  526,  481,  542,  543,
      579,  500,  481,  481,  481,  507,  507,  481,  573,  481,
      557,  579,  500,  551,  481,  484,  483,  507,  483,  584,
      481,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      485,  586,  485,  589, 1048,  584,  485,  527,  557,  485,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  527,
      576,  583,  578,  587,  586,  485,  589,  485,  595,  580,

      483,  578,  485,  576,  583,  527,  587,  485,  580,  595,
     1048, 1888, 1889,  485,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  582,  490,  590,  490,  597,  593,  490,  490,
      588,  582,  490,  593,  599,  511,  592,  511,  620,  594,
      511,  511,  590,  490,  620,  597,  588,  588,  490,  599,
      490,  592,  498,  490,  501,  490,  501,  501,  511,  592,
      490,  594,  491,  501,  491,  601,  490,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  499,  499,  714,  501,
      532,  598,  501,  511,  501,  529,  529,  604,  532,  606,

      502,  501,  502,  601,  529,  502,  502,  609,  598,  499,
      499,  499,  499,  499,  604,  532,  714,  644,  499,  609,
      499,  529,  606,  502,  502,  499,  532,  505,  505,  505,
      505,  502,  529,  613,  499,  499,  611,  499,  508,  499,
      508,  499,  644,  508,  508,  614,  499,  530,  502,  530,
      530,  499,  505,  505,  613,  505,  530,  505,  611,  502,
      510,  508,  510,  615,  617,  510,  510,  616,  614,  508,
      618,  537,  530,  622,  634,  530,  615,  530,  638,  537,
      718,  617,  622,  634,  530,  510,  508,  510,  508,  619,
      510,  616,  510,  618, 1890,  537,  537,  508,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  537,  718,  512,
      621,  512,  638,  619,  626,  512,  628,  509,  512,  509,
      624,  630,  509,  509,  627,  621,  509,  554,  554,  554,
      554,  554,  554,  626,  512,  624,  512,  509,  629,  628,
      630,  512,  509,  632,  509,  627,  512,  509, 1891,  509,
      643,  633,  512,  629,  509,  631,  635,  554,  632,  643,
      509,  528,  640,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  633,  534,  534,  534,  534,  635,  631,  528,
      528,  528,  528,  528,  528,  640,  528,  528,  528,  528,
      528,  645,  641,  637,  673,  528,  861,  528,  534,  534,

      673,  534,  528,  534,  528,  528,  528,  528,  528,  528,
      637,  528,  528,  645,  528,  531,  528,  531,  528,  641,
      531,  531,  642,  528,  533,  861,  533, 1892,  528,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  531,  531,
      646,  647,  538,  648,  538,  642,  531,  538,  538,  555,
      555,  555,  555,  555,  555,  560,  560,  560,  560,  560,
      560,  646,  647,  531,  648,  538,  649,  650,  533,  651,
      652,  653,  654,  538,  531,  655,  650,  657,  653,  555,
      729,  654,  655,  652,  658,  560,  656,  651,  659,  649,
      538,  656,  538,  561,  561,  561,  561,  561,  561,  660,

      873,  538,  658,  657,  662,  729,  555,  664,  660,  663,
      873,  659,  560,  562,  562,  562,  562,  562,  562,  666,
      663,  662,  811,  561,  563,  563,  563,  563,  563,  563,
      560,  664,  564,  564,  564,  564,  564,  564,  667,  688,
      811,  668,  666,  562,  565,  565,  565,  565,  565,  565,
      561,  668, 1894,  667,  563,  661,  566,  566,  566,  566,
      566,  566,  564,  661,  688,  668,  670,  690,  661,  561,
      562,  690,  698,  661,  565,  670,  698,  689,  688,  708,
      709,  563,  703,  797,  703,  562,  566,  703,  703,  564,
      674,  674,  674,  674,  674,  674,  674,  564,  801,  710,

      797,  565,  689,  710,  708,  709,  730,  722,  734,  563,
      564,  722,  734,  566,  801,  813,  689, 1896,  708,  709,
      565,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      730,  730,  727,  727,  813,  566,  746,  566,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  716,  685,  727,  685,
      720, 1897,  685,  685,  746,  716,  685,  755,  717,  743,
      717,  755,  798,  717,  717,  800,  720,  685,  732,  732,
      844,  743,  685,  745,  685,  798,  704,  685,  720,  685,
      800,  747,  717,  716,  685,  745,  751,  743,  844,  717,

      685,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      725,  745, 1899,  726,  749,  753,  765,  732,  725,  747,
      696,  726,  696,  749,  751,  696,  696,  717,  739,  696,
      739,  753,  802,  739,  739,  725,  763,  763,  726,  803,
      696,  765,  852,  753,  877,  696,  725,  696,  807,  726,
      696,  749,  696,  807,  852,  802,  877,  696, 1901,  697,
      803,  697,  763,  696,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  721,  804,  721,  758,  805,  721,  721,  808,
      766,  759,  705,  758,  705, 1902,  804,  705,  705,  759,

      808,  705,  728,  809,  728,  806,  809,  728,  728,  805,
      758,  815,  705,  721,  766,  766,  759,  705,  806,  705,
      815,  758,  705,  812,  705,  728,  728,  759,  731,  705,
      731,  816,  721,  731,  731,  705,  816,  820,  812,  885,
      814,  721,  767,  810,  767, 1903,  820,  767,  767,  885,
      728,  731,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  744,  814,  744,  810,  767,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  750,  731,  750,  731,  821,
      750,  750,  754,  817,  754,  818,  822,  754,  754,  845,
      767,  740,  767,  836,  817,  819,  826, 1904,  818,  750,

      836,  826,  821,  822,  845,  744,  750,  777,  777,  777,
      777,  777,  777,  754,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  784,  784,  784,  784,  784,  784,  823,
      819,  764,  754,  764,  750,  825,  764,  764,  823, 1905,
      834,  754,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  824,  841,  784,  764,  764,  837,  846,  825,  842,
      824,  761,  838,  761,  777,  837,  761,  761,  834,  841,
      761,  838,  846,  785,  785,  785,  785,  785,  785,  764,
      784,  761,  842,  847,  853,  849,  761,  860,  761,  872,
      857,  761,  847,  761,  849,  857,  860,  872,  761,  853,

      762,  784,  762,  785,  761,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  786,  786,  786,  786,  786,  786,
      787,  787,  787,  787,  787,  787,  850, 1906,  851, 1907,
      785,  788,  788,  788,  788,  788,  788,  789,  789,  789,
      789,  789,  789,  859,  786,  851,  862,  856,  859,  850,
      787,  785,  790,  790,  790,  790,  790,  790,  833,  866,
      869,  788,  856,  833,  862,  874,  867,  789,  866,  855,
      868,  786,  874,  869,  870,  855,  833,  787,  879,  875,
      994,  880,  790,  787,  878,  879,  786,  994,  788,  867,
      876,  870,  878,  868,  789,  791,  791,  791,  791,  791,

      791,  788,  875,  789,  855,  880,  887,  876,  883,  790,
      792,  792,  792,  792,  792,  792,  884,  883,  889,  890,
      891,  888,  892,  887,  884,  791,  888,  894,  890,  905,
      790,  889,  912,  913,  919,  926,  927, 1908,  891,  892,
      792,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      894,  914,  791,  932,  905,  914,  923,  912,  913,  919,
      923,  791,  929,  926,  927,  937,  929,  792,  905,  937,
      945,  912,  913,  919,  945,  956,  996,  995,  932,  956,
      904,  996, 1909,  933, 1910,  935,  995,  936,  948,  792,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  918,

      918,  918,  918,  918,  918,  918,  918,  918,  933,  909,
      935,  909,  936, 1000,  909,  909,  948,  949,  909,  952,
      998,  971,  959,  960,  935,  993,  936, 1007, 1001,  909,
      993, 1911, 1002,  998,  909, 1001,  909, 1000,  918,  909,
     1002,  909, 1017,  993,  952,  949,  909,  959,  960,  971,
     1007, 1017,  909,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      997,  942,  997,  942, 1005,  997,  942,  942,  999,  953,
      942,  953, 1003, 1004,  953,  953, 1004, 1005, 1009, 1006,

     1010,  942, 1006, 1912, 1008,  999,  942, 1058,  942, 1003,
      951,  942,  953,  942, 1058,  997, 1011, 1010,  942, 1008,
      943, 1009,  943, 1014,  942,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  954, 1012,  954,  953, 1012, 1011,
      954, 1013, 1016,  954,  969,  969,  969,  969,  969,  969,
      970,  970,  970,  970,  970,  970, 1019, 1014, 1013,  954,
     1015,  954, 1020, 1016, 1018, 1062,  954,  970, 1062, 1018,
     1066,  954, 1913, 1066, 1019, 1015, 1021,  954, 1030,  980,
      980,  980,  980,  980,  980,  981,  981,  981,  981,  981,
      981,  982,  982,  982,  982,  982,  982, 1020, 1032, 1021,

     1030,  969, 1031, 1037, 1033, 1040, 1043,  970,  970,  980,
     1036, 1046, 1031, 1033, 1040,  981, 1037, 1032, 1039, 1043,
     1047,  982,  983,  983,  983,  983,  983,  983,  984,  984,
      984,  984,  984,  984, 1036, 1045,  980, 1038, 1050, 1046,
     1056, 1039,  981, 1865, 1067,  980, 1105, 1038,  982, 1056,
     1105,  981,  983, 1067, 1047, 1050, 1045, 1051,  984,  985,
      985,  985,  985,  985,  985,  986,  986,  986,  986,  986,
      986,  982,  987,  987,  987,  987,  987,  987, 1064,  983,
     1051, 1069, 1054, 1055, 1072,  984, 1064, 1068,  983,  985,
     1073, 1069, 1076, 1072, 1074,  986,  988,  988,  988,  988,

      988,  988,  987, 1054, 1055, 1073, 1124,  984, 1077, 1074,
     1068, 1090, 1097, 1076, 1147, 1110,  985, 1110, 1150, 1163,
     1110, 1110,  986, 1152, 1147, 1146,  988, 1149, 1154,  987,
     1864, 1077, 1163, 1150, 1124, 1154, 1090, 1097, 1156,  985,
      986, 1121, 1121, 1121, 1121, 1121, 1121, 1146, 1151,  987,
     1090, 1097, 1151,  988, 1149, 1155, 1206, 1152, 1121, 1156,
     1155, 1206,  988, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1159, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1151, 1122, 1122, 1122, 1122, 1122, 1122, 1157,
     1159, 1162, 1157, 1136, 1136, 1136, 1136, 1136, 1136, 1121,

     1122, 1285, 1089, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1111, 1861, 1162, 1137, 1137, 1137, 1137, 1137,
     1137, 1164, 1101, 1136, 1101, 1285, 1158, 1101, 1101, 1158,
     1164, 1101, 1138, 1138, 1138, 1138, 1138, 1138, 1161, 1166,
     1122, 1122, 1101, 1165, 1161, 1137, 1165, 1101, 1168, 1101,
     1136, 1168, 1101, 1171, 1101, 1169, 1171, 1195, 1170, 1101,
     1859, 1166, 1138, 1172, 1169, 1101, 1123, 1123, 1123, 1123,
     1123, 1123, 1137, 1136, 1167, 1195, 1172, 1189, 1175, 1137,
     1167, 1139, 1139, 1139, 1139, 1139, 1139, 1170, 1175, 1138,
     1173, 1140, 1140, 1140, 1140, 1140, 1140, 1177, 1173, 1189,

     1174, 1138, 1141, 1141, 1141, 1141, 1141, 1141, 1174, 1167,
     1177, 1139, 1142, 1142, 1142, 1142, 1142, 1142, 1188, 1190,
     1191, 1140, 1176, 1123, 1204, 1196, 1123, 1188, 1190, 1198,
     1225, 1123, 1141, 1123, 1225, 1858, 1857, 1191, 1139, 1123,
     1123, 1139, 1142, 1196, 1123, 1204, 1209, 1123, 1140, 1143,
     1143, 1143, 1143, 1143, 1143, 1140, 1176, 1201, 1198, 1141,
     1144, 1144, 1144, 1144, 1144, 1144, 1205, 1208, 1209, 1142,
     1212, 1214, 1216, 1856, 1238, 1201, 1223, 1142, 1212, 1143,
     1214, 1275, 1208, 1141, 1224, 1216, 1274, 1277, 1274, 1205,
     1144, 1274, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,

     1221, 1223, 1238, 1280, 1283, 1281, 1143, 1282, 1284, 1224,
     1275, 1287, 1282, 1289, 1277, 1223, 1289, 1144, 1284, 1283,
     1297, 1274, 1281, 1224, 1280, 1144, 1853, 1297, 1287, 1278,
     1143, 1221, 1236, 1236, 1236, 1236, 1236, 1236, 1237, 1237,
     1237, 1237, 1237, 1237, 1239, 1239, 1239, 1239, 1239, 1239,
     1240, 1240, 1240, 1240, 1240, 1240, 1278, 1241, 1241, 1241,
     1241, 1241, 1241, 1288, 1290, 1286, 1291, 1292, 1237, 1294,
     1295, 1852, 1294, 1295, 1239, 1296, 1298, 1290, 1296, 1298,
     1240, 1242, 1242, 1242, 1242, 1242, 1242, 1241, 1301, 1236,
     1288, 1239, 1236, 1286, 1311, 1237, 1484, 1236, 1314, 1236,

     1291, 1239, 1936, 1292, 1936, 1236, 1236, 1240, 1484, 1300,
     1236, 1242, 1300, 1236, 1241, 1314, 1240, 1301, 1311, 1241,
     1243, 1243, 1243, 1243, 1243, 1243, 1244, 1244, 1244, 1244,
     1244, 1244, 1245, 1245, 1245, 1245, 1245, 1245, 1242, 1302,
     1310, 1320, 1313, 1242, 1260, 1260, 1260, 1260, 1260, 1260,
     1243, 1313, 1315, 1321, 1302, 1322, 1244, 1317, 1310, 1330,
     1325, 1376, 1245, 1320, 1261, 1261, 1261, 1261, 1261, 1261,
     1374, 1321, 1341, 1383, 1260, 1325, 1315, 1243, 1317, 1322,
     1382, 1390, 1851, 1244, 1330, 1375, 1942, 1384, 1942, 1245,
     1384, 1383, 1244, 1376, 1261, 1243, 1377, 1385, 1330, 1390,

     1341, 1260, 1382, 1386, 1374, 1380, 1245, 1262, 1262, 1262,
     1262, 1262, 1262, 1263, 1263, 1263, 1263, 1263, 1263, 1375,
     1385, 1261, 1386, 1377, 1405, 1260, 1261, 1264, 1264, 1264,
     1264, 1264, 1264, 1380, 1405, 1387, 1388, 1262, 1387, 1388,
     1391, 1850, 1848, 1263, 1265, 1265, 1265, 1265, 1265, 1265,
     1266, 1266, 1266, 1266, 1266, 1266, 1394, 1264, 1267, 1267,
     1267, 1267, 1267, 1267, 1262, 1393, 1406, 1396, 1393, 1391,
     1263, 1411, 1397, 1398, 1265, 1397, 1398, 1400, 1399, 1394,
     1266, 1399, 1406, 1463, 1264, 1262, 1400, 1847, 1267, 1264,
     1396, 1409, 1413, 1411, 1263, 1268, 1268, 1268, 1268, 1268,

     1268, 1265, 1409, 1412, 1464, 1463, 1465, 1266, 1413, 1465,
     1412, 1464, 1268, 1470, 1466, 1267, 1338, 1338, 1338, 1338,
     1338, 1338, 1265, 1466, 1267, 1268, 1469, 1477, 1550, 1469,
     1470, 1266, 1339, 1339, 1339, 1339, 1339, 1339, 1344, 1344,
     1344, 1344, 1344, 1344, 1474, 1478, 1338, 1474, 1478, 1550,
     1477, 1467, 1268, 1268, 1345, 1345, 1345, 1345, 1345, 1345,
     1467, 1458, 1339, 1468, 1535, 1591, 1846, 1535, 1344, 1346,
     1346, 1346, 1346, 1346, 1346, 1347, 1347, 1347, 1347, 1347,
     1347, 1468, 1483, 1485, 1345, 1487, 1591, 1532, 1468, 1339,
     1458, 1483, 1485, 1486, 1487, 1344, 1532, 1533, 1486, 1346,

     1496, 1538, 1533, 1557, 1540, 1347, 1538, 1540, 1944, 1541,
     1944, 1345, 1541, 1344, 1348, 1348, 1348, 1348, 1348, 1348,
     1349, 1349, 1349, 1349, 1349, 1349, 1346, 1551, 1496, 1537,
     1345, 1557, 1347, 1350, 1350, 1350, 1350, 1350, 1350, 1537,
     1543, 1346, 1551, 1543, 1348, 1593, 1592, 1594, 1593, 1602,
     1349, 1363, 1363, 1363, 1363, 1363, 1363, 1594, 1640, 1595,
     1347, 1592, 1595, 1350, 1364, 1364, 1364, 1364, 1364, 1364,
     1596, 1348, 1602, 1596, 1950, 1744, 1950, 1349, 1678, 1348,
     1640, 1363, 1637, 1365, 1365, 1365, 1365, 1365, 1365, 1677,
     1350, 1678, 1348, 1744, 1364, 1676, 1349, 1366, 1366, 1366,

     1366, 1366, 1366, 1635, 1676, 1637, 1845, 1842, 1363, 1635,
     1677, 1710, 1350, 1365, 1350, 1367, 1367, 1367, 1367, 1367,
     1367, 1364, 1710, 1641, 1952, 1841, 1952, 1366, 1641, 1363,
     1368, 1368, 1368, 1368, 1368, 1368, 1671, 1954, 1641, 1954,
     1365, 1840, 1671, 1777, 1364, 1367, 1369, 1369, 1369, 1369,
     1369, 1369, 1711, 1777, 1366, 1956, 1836, 1956, 1365, 1635,
     1368, 1370, 1370, 1370, 1370, 1370, 1370, 1835, 1958, 1672,
     1958, 1366, 1367, 1834, 1711, 1672, 1369, 1832, 1371, 1371,
     1371, 1371, 1371, 1371, 1700, 1830, 1709, 1368, 1829, 1828,
     1700, 1370, 1671, 1367, 1746, 1371, 1423, 1423, 1423, 1423,

     1423, 1423, 1821, 1369, 1368, 1968, 1820, 1968, 1371, 1709,
     1369, 1430, 1430, 1430, 1430, 1430, 1430, 1746, 1370, 1431,
     1431, 1431, 1431, 1431, 1431, 1672, 1432, 1432, 1432, 1432,
     1432, 1432, 1769, 1819, 1818, 1370, 1371, 1970, 1769, 1970,
     1700, 1430, 1433, 1433, 1433, 1433, 1433, 1433, 1787, 1431,
     1977, 1816, 1977, 1423, 1787, 1814, 1432, 1434, 1434, 1434,
     1434, 1434, 1434, 1789, 1979, 1982, 1979, 1982, 1430, 1789,
     1813, 1984, 1433, 1984, 1812, 1811, 1431, 1435, 1435, 1435,
     1435, 1435, 1435, 1432, 1990, 1805, 1990, 1434, 1769, 1430,
     1436, 1436, 1436, 1436, 1436, 1436, 1804, 1431, 1432, 1433,

     1992, 1997, 1992, 1997, 1787, 1433, 1803, 1435, 1437, 1437,
     1437, 1437, 1437, 1437, 1434, 1999, 2002, 1999, 2002, 1789,
     1436, 1438, 1438, 1438, 1438, 1438, 1438, 1434, 1450, 1450,
     1450, 1450, 1450, 1450, 1435, 2004, 1802, 2004, 1437, 2009,
     1807, 2009, 1808, 1435, 1801, 1800, 1807, 1436, 1808, 1799,
     1798, 1438, 1451, 1451, 1451, 1451, 1451, 1451, 1450, 1452,
     1452, 1452, 1452, 1452, 1452, 1437, 1797, 2011, 1436, 2011,
     2014, 2016, 2014, 2016, 1437, 2018, 1794, 2018, 1438, 2020,
     1793, 2020, 1451, 1792, 2023, 1450, 2023, 1791, 1782, 1452,
     1453, 1453, 1453, 1453, 1453, 1453, 1807, 2025, 1808, 2025,

     1438, 1781, 1450, 1454, 1454, 1454, 1454, 1454, 1454, 1451,
     1494, 1494, 1494, 1494, 1494, 1494, 1452, 2027, 1451, 2027,
     1453, 1455, 1455, 1455, 1455, 1455, 1455, 1495, 1495, 1495,
     1495, 1495, 1495, 1454, 1588, 1588, 1588, 1588, 1588, 1588,
     1452, 1588, 1817, 1822, 1495, 1780, 1779, 1453, 1817, 1822,
     1778, 1455, 1456, 1456, 1456, 1456, 1456, 1456, 1773, 2029,
     1454, 2029, 1771, 1833, 1862, 1765, 1764, 1494, 1454, 1833,
     1862, 1453, 1505, 1505, 1505, 1505, 1505, 1505, 1455, 1763,
     1874, 1900, 1456, 1751, 1495, 1495, 1874, 1900, 2033, 1750,
     2033, 1455, 1506, 1506, 1506, 1506, 1506, 1506, 1817, 1822,

     1745, 1740, 1505, 1507, 1507, 1507, 1507, 1507, 1507, 1456,
     1508, 1508, 1508, 1508, 1508, 1508, 1456, 1738, 1735, 1833,
     1862, 1734, 1506, 1509, 1509, 1509, 1509, 1509, 1509, 1505,
     2035, 1733, 2035, 1507, 1721, 1719, 1874, 1900, 1505, 1714,
     1508, 1510, 1510, 1510, 1510, 1510, 1510, 1712, 2037, 1506,
     2037, 1708, 2039, 1509, 2039, 2041, 1707, 2041, 1506, 1706,
     1507, 1511, 1511, 1511, 1511, 1511, 1511, 1508, 2042, 1699,
     2042, 1510, 2044, 2046, 2044, 2046, 1508, 2048, 1698, 2048,
     1509, 1697, 1689, 1507, 1512, 1512, 1512, 1512, 1512, 1512,
     1688, 1511, 1513, 1513, 1513, 1513, 1513, 1513, 1510, 2050,

     1687, 2050, 1509, 1525, 1525, 1525, 1525, 1525, 1525, 2052,
     2054, 2052, 2054, 2055, 1512, 2055, 1685, 2056, 1511, 2056,
     1683, 1510, 1513, 1526, 1526, 1526, 1526, 1526, 1526, 2057,
     2058, 2057, 2058, 1525, 1681, 2059, 1511, 2059, 2061, 1679,
     2061, 1512, 1527, 1527, 1527, 1527, 1527, 1527, 2063, 1513,
     2063, 1675, 2065, 1526, 2065, 2067, 1668, 2067, 1513, 1666,
     1525, 1512, 1528, 1528, 1528, 1528, 1528, 1528, 1525, 2073,
     1656, 2073, 1527, 1651, 2075, 1528, 2075, 1649, 1647, 1528,
     1526, 1529, 1529, 1529, 1529, 1529, 1529, 2077, 2079, 2077,
     2079, 1526, 1528, 1530, 1530, 1530, 1530, 1530, 1530, 1527,

     1556, 1556, 1556, 1556, 1556, 1556, 2084, 2086, 2084, 2086,
     2088, 1529, 2088, 2090, 2094, 2090, 2094, 1556, 1645, 1528,
     1528, 1527, 1644, 1530, 1568, 1568, 1568, 1568, 1568, 1568,
     1569, 1569, 1569, 1569, 1569, 1569, 1642, 2096, 1529, 2096,
     2097, 2098, 2097, 2098, 1529, 2099, 2105, 2099, 2105, 2107,
     1530, 2107, 1639, 2109, 1568, 2109, 1638, 1556, 1556, 1530,
     1569, 1570, 1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571,
     1571, 1571, 1571, 1628, 1627, 1572, 1572, 1572, 1572, 1572,
     1572, 1568, 2111, 2112, 2111, 2112, 2113, 1569, 2113, 1613,
     2114, 1570, 2114, 2117, 1569, 2117, 1611, 1571, 1573, 1573,

     1573, 1573, 1573, 1573, 1568, 1572, 1574, 1574, 1574, 1574,
     1574, 1574, 1575, 1575, 1575, 1575, 1575, 1575, 1570, 2120,
     2122, 2120, 2122, 2123, 1571, 2123, 1609, 1571, 1573, 2124,
     1570, 2124, 1572, 2125, 1607, 2125, 1574, 1606, 2127, 1572,
     2127, 1605, 1575, 1576, 1576, 1576, 1576, 1576, 1576, 1632,
     1632, 1632, 1632, 1632, 1632, 1573, 1632, 1584, 1584, 1584,
     1584, 1584, 1584, 1574, 2129, 2130, 2129, 2130, 1603, 1575,
     1584, 1574, 1599, 1576, 1584, 2131, 2132, 2131, 2132, 1573,
     1598, 1585, 1585, 1585, 1585, 1585, 1585, 1584, 2138, 2140,
     2138, 2140, 1597, 1575, 1585, 2142, 1581, 2142, 1585, 2144,

     1576, 2144, 1634, 1634, 1634, 1634, 1634, 1634, 1576, 1634,
     2145, 1585, 2145, 1580, 1584, 1584, 1586, 1586, 1586, 1586,
     1586, 1586, 1566, 1587, 1587, 1587, 1587, 1587, 1587, 1586,
     2146, 1564, 2146, 1586, 1562, 2147, 1587, 2147, 1585, 1585,
     1587, 2151, 2153, 2151, 2153, 2154, 1586, 2154, 1560, 2155,
     1585, 2155, 1559, 1587, 1589, 1589, 1589, 1589, 1589, 1589,
     1618, 1618, 1618, 1618, 1618, 1618, 2158, 1589, 2158, 1558,
     2160, 1589, 2160, 1586, 1586, 1590, 1590, 1590, 1590, 1590,
     1590, 1587, 1586, 2163, 1589, 2163, 1553, 2168, 1590, 2168,
     1618, 1552, 1590, 1619, 1619, 1619, 1619, 1619, 1619, 1620,

     1620, 1620, 1620, 1620, 1620, 1590, 2170, 2173, 2170, 2173,
     1549, 1589, 1589, 2175, 2177, 2175, 2177, 1618, 2179, 2182,
     2179, 2182, 2184, 1619, 2184, 2188, 1589, 2188, 2189, 1620,
     2189, 1548, 1590, 1590, 1621, 1621, 1621, 1621, 1621, 1621,
     1590, 1618, 1622, 1622, 1622, 1622, 1622, 1622, 1546, 2190,
     1619, 2190, 2192, 1544, 2192, 1619, 1620, 1623, 1623, 1623,
     1623, 1623, 1623, 1542, 1621, 1624, 1624, 1624, 1624, 1624,
     1624, 2194, 1622, 2194, 2198, 1539, 2198, 1620, 1536, 1625,
     1625, 1625, 1625, 1625, 1625, 1534, 2200, 1623, 2200, 1531,
     2202, 1621, 2202, 1523, 2204, 1624, 2204, 1521, 2207, 1622,

     2207, 2209, 1516, 2209, 1622, 2210, 2211, 2210, 2211, 1625,
     2212, 2214, 2212, 2214, 1623, 1621, 2216, 2220, 2216, 2220,
     1514, 1503, 1624, 1626, 1626, 1626, 1626, 1626, 1626, 1633,
     1633, 1633, 1633, 1633, 1633, 1623, 1625, 2222, 1501, 2222,
     1626, 2224, 2225, 2224, 2225, 1625, 1624, 1631, 1631, 1631,
     1631, 1631, 1631, 1626, 2230, 2232, 2230, 2232, 1499, 1633,
     1631, 2234, 1497, 2234, 1631, 1636, 1636, 1636, 1636, 1636,
     1636, 1657, 1657, 1657, 1657, 1657, 1657, 1631, 1492, 1490,
     1626, 1626, 2236, 2238, 2236, 2238, 1633, 1658, 1658, 1658,
     1658, 1658, 1658, 1482, 1633, 1636, 2239, 2240, 2239, 2240,

     2243, 1657, 2243, 1480, 1479, 1631, 1659, 1659, 1659, 1659,
     1659, 1659, 2244, 2248, 2244, 2248, 2249, 1658, 2249, 2250,
     1476, 2250, 1636, 2254, 2256, 2254, 2256, 2258, 1657, 2258,
     2260, 1636, 2260, 2261, 1475, 2261, 1659, 1473, 1660, 1660,
     1660, 1660, 1660, 1660, 1658, 2262, 2263, 2262, 2263, 1657,
     1661, 1661, 1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662,
     1662, 1662, 2267, 1659, 2267, 1472, 1471, 1658, 1660, 1663,
     1663, 1663, 1663, 1663, 1663, 2268, 2272, 2268, 2272, 1462,
     1661, 1659, 2274, 2276, 2274, 2276, 1662, 1664, 1664, 1664,
     1664, 1664, 1664, 1461, 2278, 1660, 2278, 1460, 2280, 1663,

     2280, 1665, 1665, 1665, 1665, 1665, 1665, 1661, 2281, 2282,
     2281, 2282, 1660, 1662, 2283, 1459, 2283, 1664, 1665, 1448,
     1670, 1670, 1670, 1670, 1670, 1670, 1663, 1670, 1661, 1447,
     1662, 1665, 1445, 1663, 1673, 1673, 1673, 1673, 1673, 1673,
     2286, 1673, 2286, 2288, 1664, 2288, 1443, 2292, 1673, 2292,
     2294, 1441, 2294, 1690, 1690, 1690, 1690, 1690, 1690, 1665,
     1439, 1664, 1674, 2296, 2298, 2296, 2298, 1674, 1691, 1691,
     1691, 1691, 1691, 1691, 1428, 1426, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1690, 1692, 1692, 1692, 1692, 1692, 1692,
     1674, 1425, 1701, 1701, 1701, 1701, 1701, 1701, 1691, 1701,

     1693, 1693, 1693, 1693, 1693, 1693, 1701, 2307, 1674, 2307,
     1690, 2309, 1674, 2309, 1692, 1424, 1421, 1674, 1674, 1420,
     1419, 1674, 1674, 1417, 2310, 1691, 2310, 1690, 1415, 1674,
     1693, 1414, 1410, 1674, 1691, 1674, 1674, 1674, 2311, 1674,
     2311, 1692, 1694, 1694, 1694, 1694, 1694, 1694, 1695, 1695,
     1695, 1695, 1695, 1695, 2312, 1408, 2312, 1693, 1696, 1696,
     1696, 1696, 1696, 1696, 1407, 1692, 1703, 1703, 1703, 1703,
     1703, 1703, 1694, 1703, 2314, 2316, 2314, 2316, 1695, 1404,
     1703, 1693, 2318, 2324, 2318, 2324, 1395, 1392, 1696, 1704,
     1704, 1704, 1704, 1704, 1704, 2326, 2327, 2326, 2327, 1694,

     2329, 2330, 2329, 2330, 1389, 1695, 1704, 1694, 1381, 1758,
     1758, 1758, 1758, 1758, 1758, 1696, 1758, 2331, 1695, 2331,
     1379, 1378, 1696, 1702, 2334, 2335, 2334, 2335, 1702, 1372,
     1362, 1724, 1724, 1724, 1724, 1724, 1724, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 2338, 1357, 2338, 1704, 2339, 1355,
     2339, 1702, 1353, 1351, 1723, 1723, 1723, 1723, 1723, 1723,
     2341, 1724, 2341, 1725, 1725, 1725, 1725, 1725, 1725, 1702,
     2343, 1343, 2343, 1702, 2357, 2363, 2357, 2363, 1702, 1702,
     1342, 1705, 1702, 1702, 1723, 1340, 1337, 1705, 1724, 2386,
     1702, 2386, 1333, 1725, 1702, 1332, 1702, 1702, 1702, 1724,

     1702, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 2387, 1331,
     2387, 1723, 1328, 1726, 1726, 1726, 1726, 1726, 1726, 1723,
     1725, 1326, 1324, 1323, 1319, 1318, 1726, 1316, 1312, 1305,
     1726, 1727, 1727, 1727, 1727, 1727, 1727, 1705, 1303, 1299,
     1705, 1293, 1725, 1726, 1728, 1728, 1728, 1728, 1728, 1728,
     1730, 1730, 1730, 1730, 1730, 1730, 1279, 1730, 1276, 1273,
     1272, 1727, 1271, 1269, 1730, 1255, 1253, 1251, 1249, 1247,
     1726, 1726, 1246, 1231, 1728, 1731, 1731, 1731, 1731, 1731,
     1731, 1229, 1228, 1732, 1227, 1226, 1222, 1220, 1727, 1732,
     1219, 1736, 1731, 1218, 1727, 1217, 1215, 1736, 1213, 1211,

     1210, 1728, 1207, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1728, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1203, 1754,
     1754, 1754, 1754, 1754, 1754, 1202, 1200, 1199, 1197, 1194,
     1193, 1737, 1754, 1731, 1192, 1187, 1754, 1737, 1186, 1732,
     1184, 1182, 1732, 1180, 1178, 1160, 1148, 1736, 1145, 1754,
     1736, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1134, 1132,
     1130, 1755, 1755, 1755, 1755, 1755, 1755, 1784, 1784, 1784,
     1784, 1784, 1784, 1128, 1784, 1127, 1754, 1754, 1786, 1786,
     1786, 1786, 1786, 1786, 1126, 1786, 1125, 1737, 1742, 1119,
     1117, 1755, 1115, 1113, 1742, 1112, 1108, 1107, 1106, 1103,

     1102, 1756, 1756, 1756, 1756, 1756, 1756, 1100, 1742, 1742,
     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1099, 1755, 1098,
     1096, 1095, 1094, 1093, 1742, 1742, 1742, 1742, 1742, 1742,
     1755, 1756, 1092, 1091, 1088, 1759, 1759, 1759, 1759, 1759,
     1759, 1079, 1078, 1075, 1742, 1071, 1070, 1742, 1065, 1742,
     1742, 1742, 1742, 1742, 1742, 1063, 1061, 1060, 1756, 1757,
     1757, 1757, 1757, 1757, 1757, 1759, 1059, 1756, 1057, 1053,
     1052, 1049, 1757, 1044, 1042, 1041, 1757, 1035, 1760, 1760,
     1760, 1760, 1760, 1760, 1034, 1028, 1026, 1024, 1022, 1757,
     1761,  991, 1759,  978,  976,  974, 1761,  972, 1762,  967,

      965,  963,  961,  958, 1762,  957,  955, 1759, 1760,  950,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1757, 1762, 1762,
     1762, 1762, 1762, 1762, 1762,  947,  946, 1783, 1783, 1783,
     1783, 1783, 1783,  944,  940, 1760,  939,  938,  934,  931,
     1783,  930, 1770, 1760, 1783,  928, 1761,  925, 1770, 1761,
      924,  922,  921,  920, 1762, 1767,  917, 1783,  916,  915,
      911, 1767, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1785,
     1785, 1785, 1785, 1785, 1785, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767,  910, 1783,  908,  907,  906,  902,
      900, 1767, 1767, 1767, 1767, 1767, 1767,  898, 1770, 1785,

     1788, 1788, 1788, 1788, 1788, 1788,  896,  895,  893,  886,
      882, 1767,  881,  871, 1767,  865, 1767, 1767, 1767, 1767,
     1767, 1767, 1775,  864,  863,  858, 1785,  854, 1775,  848,
     1788,  843,  840,  839, 1785,  835,  831,  829,  828,  827,
      799,  795, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775,
     1775,  793,  782,  780,  779,  778,  775, 1788, 1775, 1775,
     1775, 1775, 1775, 1775,  773,  772, 1788,  771,  770, 1790,
      769,  768,  757,  756,  742, 1790,  741,  737, 1775,  736,
      735, 1775,  724, 1775, 1775, 1775, 1775, 1775, 1775, 1790,
     1790, 1790, 1790, 1790, 1790, 1790, 1806, 1806, 1806, 1806,

     1806, 1806,  723, 1806, 1809, 1809, 1809, 1809, 1809, 1809,
      713, 1809,  712,  711,  707,  706,  701,  700, 1809, 1826,
     1826, 1826, 1826, 1826, 1826, 1790, 1810,  699,  693,  692,
      691, 1810,  687,  686,  683,  681, 1826,  680,  679,  677,
     1810, 1810, 1810, 1810, 1810, 1810, 1810,  675, 1823, 1823,
     1823, 1823, 1823, 1823, 1810, 1823, 1825, 1825, 1825, 1825,
     1825, 1825, 1823, 1825, 1837, 1837, 1837, 1837, 1837, 1837,
     1825, 1837, 1810,  671,  669,  665, 1810, 1826, 1837,  639,
      636, 1810, 1810,  625,  623, 1810, 1810,  610,  608,  605,
     1827,  603,  602, 1810,  600,  569, 1827, 1810,  567, 1810,

     1810, 1810,  559, 1810, 1824,  558,  556,  553,  552, 1824,
     1827, 1827, 1827, 1827, 1827, 1827, 1827,  550, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1838, 1838, 1838, 1838, 1838,
     1838,  547, 1824,  546,  544,  541,  540,  523,  522,  520,
      517,  516, 1838,  514,  506,  495, 1827,  494,  493, 1827,
     1824,  487,  477,  476, 1824,  475,  466,  464,  463, 1824,
     1824,  459,  457, 1824, 1824,  455, 1839,  453,  432,  380,
      379, 1824, 1839,  376, 1843, 1824,  352, 1824, 1824, 1824,
     1843, 1824,  350, 1838,  348,  336, 1839, 1839, 1839, 1839,
     1839, 1839, 1839,  335, 1843, 1843, 1843, 1843, 1843, 1843,

     1843,  330,  319,  318,  307,  297,  296,  270,  269,  261,
      260,  258,  257,  253, 1844,  245,  242,  240,  239,  238,
     1844,  228, 1839, 1854,  225, 1839,  224,  200,  194, 1854,
     1843,  170,  158, 1843, 1844, 1844, 1844, 1844, 1844, 1844,
     1844,  156,  155, 1854, 1854, 1854, 1854, 1854, 1854, 1854,
      146,  145,  142,  134,  131,  130,  126,   96,   93,   89,
       88,   86,   79, 1855,   69,   43,   38,   33,   30, 1855,
     1844, 1849,   16,    9,    4,    3,    0, 1849,    0, 1854,
        0,    0, 1854, 1855, 1855, 1855, 1855, 1855, 1855, 1855,
        0, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,

     1863,    0,    0,    0,    0,    0, 1863, 1849, 1849, 1849,
     1849, 1849, 1849,    0,    0,    0,    0,    0,    0, 1855,
     1863, 1863, 1863, 1863, 1863, 1863, 1863, 1849,    0,    0,
     1849,    0, 1849, 1849, 1849, 1849, 1849, 1849, 1860,    0,
        0,    0,    0,    0, 1860,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1863,    0, 1860, 1860,
     1860, 1860, 1860, 1860, 1860, 1860, 1860, 1875,    0,    0,
        0,    0,    0, 1875, 1860, 1860, 1860, 1860, 1860, 1860,
        0,    0,    0,    0,    0,    0,    0, 1875, 1875, 1875,
     1875, 1875, 1875, 1875, 1860,    0,    0, 1860,    0, 1860,

     1860, 1860, 1860, 1860, 1860,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1875, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895,    0,    0,    0,    0,    0,    0,    0,
     1895, 1895, 1895, 1895, 1895, 1895,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1895,    0, 1895, 1895, 1895, 1895, 1895,
     1895, 1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915,
     1915, 1915, 1915, 1915, 1915, 1915, 1916, 1916, 1916, 1916,
     1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916,

     1916, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1918,    0,    0,    0,
        0, 1918,    0, 1918, 1918, 1918, 1918, 1919, 1919, 1919,
     1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919,
     1919, 1919, 1920, 1920,    0, 1920, 1920,    0, 1920, 1920,
     1920, 1920, 1920, 1920, 1920,    0, 1920, 1921, 1921,    0,
        0, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
        0, 1921, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922,
     1922, 1922, 1922, 1922, 1922, 1922, 1922, 1923, 1923,    0,
     1923,    0,    0, 1923, 1924,    0,    0,    0,    0,    0,

        0, 1924, 1924, 1924, 1924, 1925, 1925,    0, 1925,    0,
        0,    0,    0,    0,    0, 1925, 1925, 1925, 1925, 1926,
        0, 1926,    0,    0, 1926, 1927,    0, 1927,    0,    0,
     1927, 1928,    0,    0,    0,    0,    0,    0, 1928, 1928,
     1928, 1928, 1929,    0, 1929,    0,    0, 1929, 1930,    0,
     1930,    0,    0, 1930, 1931,    0, 1931,    0,    0, 1931,
     1932, 1932,    0,    0, 1932, 1932, 1932, 1932, 1932, 1932,
     1932, 1932, 1932,    0, 1932, 1933,    0, 1933,    0,    0,
     1933, 1934,    0, 1934,    0,    0, 1934, 1935, 1935, 1935,
     1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935,

     1935, 1935, 1937, 1937,    0, 1937, 1938,    0,    0,    0,
        0, 1938,    0, 1938, 1938, 1938, 1938, 1939, 1939,    0,
     1939,    0,    0,    0,    0,    0,    0, 1939, 1939, 1939,
     1939, 1940, 1940,    0, 1940,    0,    0,    0,    0, 1940,
     1940, 1940, 1940, 1940, 1940, 1941,    0, 1941,    0,    0,
     1941, 1943,    0, 1943,    0,    0, 1943, 1945,    0,    0,
        0,    0, 1945,    0, 1945, 1945, 1945, 1945, 1946,    0,
        0,    0,    0, 1946,    0, 1946, 1946, 1946, 1946, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1948, 1948, 1948, 1948, 1948, 1948,

     1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1949,
        0, 1949,    0,    0, 1949, 1951,    0, 1951,    0,    0,
     1951, 1953,    0, 1953,    0,    0, 1953, 1955,    0, 1955,
        0,    0, 1955, 1957,    0, 1957,    0,    0, 1957, 1959,
        0, 1959, 1959,    0, 1959, 1960,    0, 1960, 1960,    0,
     1960, 1961,    0,    0,    0,    0, 1961,    0, 1961, 1961,
     1961, 1961, 1962,    0, 1962,    0,    0, 1962, 1963,    0,
     1963,    0,    0, 1963, 1964, 1964,    0, 1964,    0,    0,
        0,    0, 1964, 1964, 1964, 1964, 1964, 1964, 1965,    0,
     1965,    0,    0, 1965, 1966,    0, 1966,    0,    0, 1966,

     1967,    0, 1967,    0,    0, 1967, 1969,    0, 1969,    0,
        0, 1969, 1971,    0,    0,    0,    0, 1971,    0, 1971,
     1971, 1971, 1971, 1972,    0,    0,    0,    0, 1972,    0,
     1972, 1972, 1972, 1972, 1973,    0, 1973,    0,    0, 1973,
     1974,    0, 1974,    0,    0, 1974, 1975, 1975, 1975, 1975,
     1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975,
     1975, 1976,    0, 1976,    0,    0, 1976, 1978,    0, 1978,
        0,    0, 1978, 1980,    0, 1980,    0,    0, 1980, 1981,
        0, 1981,    0,    0, 1981, 1983,    0, 1983,    0,    0,
     1983, 1985,    0, 1985, 1985,    0, 1985, 1986,    0, 1986,

        0,    0, 1986, 1987,    0, 1987,    0,    0, 1987, 1988,
        0, 1988,    0,    0, 1988, 1989,    0, 1989,    0,    0,
     1989, 1991,    0, 1991,    0,    0, 1991, 1993, 1993,    0,
     1993,    0,    0,    0,    0,    0,    0, 1993, 1993, 1993,
     1993, 1994,    0, 1994,    0,    0, 1994, 1995,    0, 1995,
        0,    0, 1995, 1996,    0, 1996,    0,    0, 1996, 1998,
        0, 1998,    0,    0, 1998, 2000, 2000,    0, 2000,    0,
        0,    0,    0, 2000, 2000, 2000, 2000, 2000, 2000, 2001,
        0, 2001,    0,    0, 2001, 2003,    0, 2003,    0,    0,
     2003, 2005,    0,    0,    0,    0, 2005,    0, 2005, 2005,

     2005, 2005, 2006,    0, 2006,    0,    0, 2006, 2007,    0,
     2007,    0,    0, 2007, 2008,    0, 2008,    0,    0, 2008,
     2010,    0, 2010,    0,    0, 2010, 2012, 2012, 2012, 2012,
     2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,
     2012, 2013,    0, 2013,    0,    0, 2013, 2015,    0, 2015,
        0,    0, 2015, 2017,    0, 2017,    0,    0, 2017, 2019,
        0, 2019,    0,    0, 2019, 2021,    0, 2021,    0,    0,
     2021, 2022,    0, 2022,    0,    0, 2022, 2024,    0, 2024,
        0,    0, 2024, 2026,    0, 2026,    0,    0, 2026, 2028,
        0, 2028,    0,    0, 2028, 2030, 2030,    0, 2030,    0,

        0,    0,    0,    0,    0, 2030, 2030, 2030, 2030, 2031,
     2031,    0, 2031,    0,    0, 2031,    0, 2031,    0, 2031,
     2031, 2031, 2031, 2032,    0, 2032,    0,    0, 2032, 2034,
        0, 2034,    0,    0, 2034, 2036,    0, 2036,    0,    0,
     2036, 2038,    0, 2038,    0,    0, 2038, 2040, 2040,    0,
     2040,    0,    0,    0,    0, 2040, 2040, 2040, 2040, 2040,
     2040, 2043,    0,    0,    0,    0, 2043,    0, 2043, 2043,
     2043, 2043, 2045,    0, 2045,    0,    0, 2045, 2047,    0,
     2047,    0,    0, 2047, 2049,    0, 2049,    0,    0, 2049,
     2051,    0, 2051,    0,    0, 2051, 2053, 2053, 2053, 2053,

     2053, 2053, 2053, 2053, 2053, 2053, 2053, 2053, 2053, 2053,
     2053, 2060,    0, 2060,    0,    0, 2060, 2062,    0, 2062,
        0,    0, 2062, 2064,    0, 2064,    0,    0, 2064, 2066,
        0, 2066,    0,    0, 2066, 2068, 2068,    0, 2068,    0,
        0, 2068,    0, 2068,    0, 2068, 2068, 2068, 2068, 2069,
     2069,    0, 2069,    0,    0,    0,    0,    0,    0, 2069,
     2069, 2069, 2069, 2070,    0, 2070,    0,    0, 2070, 2071,
        0, 2071,    0,    0, 2071, 2072,    0, 2072,    0,    0,
     2072, 2074,    0, 2074,    0,    0, 2074, 2076,    0, 2076,
        0,    0, 2076, 2078,    0, 2078,    0,    0, 2078, 2080,

     2080,    0, 2080,    0,    0,    0,    0, 2080, 2080, 2080,
     2080, 2080, 2080, 2081,    0, 2081,    0,    0, 2081, 2082,
        0,    0,    0,    0, 2082,    0, 2082, 2082, 2082, 2082,
     2083,    0, 2083,    0,    0, 2083, 2085,    0, 2085,    0,
        0, 2085, 2087,    0, 2087,    0,    0, 2087, 2089,    0,
     2089,    0,    0, 2089, 2091,    0, 2091,    0,    0, 2091,
     2092,    0, 2092,    0,    0, 2092, 2093,    0, 2093,    0,
        0, 2093, 2095,    0, 2095,    0,    0, 2095, 2100, 2100,
        0, 2100,    0,    0,    0,    0,    0,    0, 2100, 2100,
     2100, 2100, 2101, 2101,    0, 2101,    0,    0,    0,    0,

     2101, 2101, 2101, 2101, 2101, 2101, 2102,    0, 2102,    0,
        0, 2102, 2103,    0, 2103,    0,    0, 2103, 2104,    0,
     2104,    0,    0, 2104, 2106,    0, 2106,    0,    0, 2106,
     2108,    0, 2108,    0,    0, 2108, 2110,    0, 2110,    0,
        0, 2110, 2115, 2115,    0, 2115,    0,    0,    0,    0,
     2115, 2115, 2115, 2115, 2115, 2115, 2116,    0, 2116,    0,
        0, 2116, 2118,    0,    0,    0,    0, 2118,    0, 2118,
     2118, 2118, 2118, 2119,    0, 2119,    0,    0, 2119, 2121,
        0, 2121,    0,    0, 2121, 2126,    0, 2126,    0,    0,
     2126, 2128,    0, 2128,    0,    0, 2128, 2133,    0, 2133,

        0,    0, 2133, 2134, 2134,    0, 2134,    0,    0,    0,
        0, 2134, 2134, 2134, 2134, 2134, 2134, 2135,    0, 2135,
        0,    0, 2135, 2136,    0, 2136,    0,    0, 2136, 2137,
        0, 2137,    0,    0, 2137, 2139,    0, 2139,    0,    0,
     2139, 2141,    0, 2141,    0,    0, 2141, 2143,    0, 2143,
        0,    0, 2143, 2148,    0, 2148,    0,    0, 2148, 2149,
     2149,    0, 2149,    0,    0,    0,    0, 2149, 2149, 2149,
     2149, 2149, 2149, 2150,    0, 2150,    0,    0, 2150, 2152,
        0,    0,    0,    0, 2152,    0, 2152, 2152, 2152, 2152,
     2156,    0, 2156,    0,    0, 2156, 2157,    0, 2157,    0,

        0, 2157, 2159,    0, 2159,    0,    0, 2159, 2161,    0,
     2161,    0,    0, 2161, 2162,    0, 2162,    0,    0, 2162,
     2164, 2164,    0, 2164,    0,    0,    0,    0,    0,    0,
     2164, 2164, 2164, 2164, 2165,    0, 2165,    0,    0, 2165,
     2166,    0, 2166,    0,    0, 2166, 2167,    0, 2167,    0,
        0, 2167, 2169,    0, 2169,    0,    0, 2169, 2171, 2171,
        0, 2171,    0,    0,    0,    0, 2171, 2171, 2171, 2171,
     2171, 2171, 2172,    0, 2172,    0,    0, 2172, 2174,    0,
     2174,    0,    0, 2174, 2176,    0, 2176,    0,    0, 2176,
     2178,    0, 2178,    0,    0, 2178, 2180,    0, 2180,    0,

        0, 2180, 2181,    0, 2181,    0,    0, 2181, 2183, 2183,
        0, 2183,    0,    0,    0,    0, 2183, 2183, 2183, 2183,
     2183, 2183, 2185,    0,    0,    0,    0, 2185,    0, 2185,
     2185, 2185, 2185, 2186,    0, 2186,    0,    0, 2186, 2187,
        0, 2187,    0,    0, 2187, 2191,    0, 2191,    0,    0,
     2191, 2193,    0, 2193,    0,    0, 2193, 2195, 2195,    0,
     2195,    0,    0,    0,    0,    0,    0, 2195, 2195, 2195,
     2195, 2196, 2196,    0, 2196,    0,    0, 2196,    0, 2196,
        0, 2196, 2196, 2196, 2196, 2197,    0, 2197,    0,    0,
     2197, 2199,    0, 2199,    0,    0, 2199, 2201,    0, 2201,

        0,    0, 2201, 2203,    0, 2203,    0,    0, 2203, 2205,
     2205,    0, 2205,    0,    0,    0,    0, 2205, 2205, 2205,
     2205, 2205, 2205, 2206,    0, 2206,    0,    0, 2206, 2208,
        0, 2208,    0,    0, 2208, 2213,    0, 2213,    0,    0,
     2213, 2215,    0, 2215,    0,    0, 2215, 2217, 2217,    0,
     2217,    0,    0,    0,    0, 2217, 2217, 2217, 2217, 2217,
     2217, 2218,    0,    0,    0,    0, 2218,    0, 2218, 2218,
     2218, 2218, 2219,    0, 2219,    0,    0, 2219, 2221,    0,
     2221,    0,    0, 2221, 2223,    0, 2223,    0,    0, 2223,
     2226, 2226,    0, 2226,    0,    0, 2226,    0, 2226,    0,

     2226, 2226, 2226, 2226, 2227,    0, 2227,    0,    0, 2227,
     2228,    0, 2228,    0,    0, 2228, 2229,    0, 2229,    0,
        0, 2229, 2231,    0, 2231,    0,    0, 2231, 2233,    0,
     2233,    0,    0, 2233, 2235,    0, 2235,    0,    0, 2235,
     2237, 2237,    0, 2237,    0,    0,    0,    0, 2237, 2237,
     2237, 2237, 2237, 2237, 2241,    0, 2241,    0,    0, 2241,
     2242,    0, 2242,    0,    0, 2242, 2245, 2245,    0, 2245,
        0, 2245, 2245,    0, 2245, 2245, 2245, 2245, 2245, 2245,
     2246,    0,    0,    0,    0, 2246,    0, 2246, 2246, 2246,
     2246, 2247,    0, 2247,    0,    0, 2247, 2251,    0, 2251,

        0,    0, 2251, 2252,    0, 2252,    0,    0, 2252, 2253,
        0, 2253,    0,    0, 2253, 2255,    0, 2255,    0,    0,
     2255, 2257,    0, 2257,    0,    0, 2257, 2259,    0, 2259,
        0,    0, 2259, 2264, 2264,    0, 2264,    0,    0,    0,
        0, 2264, 2264, 2264, 2264, 2264, 2264, 2265,    0, 2265,
        0,    0, 2265, 2266,    0, 2266,    0,    0, 2266, 2269,
     2269,    0, 2269,    0,    0,    0,    0, 2269, 2269, 2269,
     2269, 2269, 2269, 2270, 2270, 2270, 2270, 2270, 2270, 2270,
     2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2271,    0,
        0,    0,    0, 2271,    0, 2271, 2271, 2271, 2271, 2273,

        0, 2273,    0,    0, 2273, 2275,    0, 2275,    0,    0,
     2275, 2277,    0, 2277,    0,    0, 2277, 2279,    0, 2279,
        0,    0, 2279, 2284,    0, 2284,    0,    0, 2284, 2285,
        0, 2285,    0,    0, 2285, 2287,    0, 2287,    0,    0,
     2287, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289,
     2289, 2289, 2289, 2289, 2289, 2289, 2290, 2290, 2290, 2290,
     2290, 2290, 2290, 2290, 2290, 2290, 2290, 2290, 2290, 2290,
     2290, 2291,    0, 2291,    0,    0, 2291, 2293,    0, 2293,
        0,    0, 2293, 2295,    0, 2295,    0,    0, 2295, 2297,
        0, 2297,    0,    0, 2297, 2299,    0, 2299,    0,    0,

     2299, 2300,    0, 2300,    0,    0, 2300, 2301,    0, 2301,
        0,    0, 2301, 2302,    0, 2302,    0,    0, 2302, 2303,
        0, 2303,    0,    0, 2303, 2304,    0, 2304,    0,    0,
     2304, 2305,    0,    0,    0,    0, 2305,    0, 2305, 2305,
     2305, 2305, 2306,    0, 2306,    0,    0, 2306, 2308,    0,
     2308,    0,    0, 2308, 2313,    0, 2313,    0,    0, 2313,
     2315,    0, 2315,    0,    0, 2315, 2317, 2317,    0, 2317,
        0,    0,    0,    0, 2317, 2317, 2317, 2317, 2317, 2317,
     2319,    0, 2319,    0,    0, 2319, 2320,    0, 2320,    0,
        0, 2320, 2321,    0, 2321,    0,    0, 2321, 2322, 2322,

     2322, 2322, 2322, 2322, 2322, 2322, 2322, 2322, 2322, 2322,
     2322, 2322, 2322, 2323,    0, 2323,    0,    0, 2323, 2325,
        0, 2325,    0,    0, 2325, 2328,    0,    0,    0,    0,
     2328,    0, 2328, 2328, 2328, 2328, 2332,    0, 2332,    0,
        0, 2332, 2333,    0, 2333,    0,    0, 2333, 2336,    0,
     2336,    0,    0, 2336, 2337,    0, 2337,    0,    0, 2337,
     2340,    0, 2340,    0,    0, 2340, 2342,    0, 2342,    0,
        0, 2342, 2344,    0,    0,    0,    0, 2344,    0, 2344,
     2344, 2344, 2344, 2345,    0, 2345,    0,    0, 2345, 2346,
        0, 2346,    0,    0, 2346, 2347, 2347, 2347, 2347, 2347,

     2347, 2347, 2347, 2347, 2347, 2347, 2347, 2347, 2347, 2347,
     2348,    0, 2348,    0,    0, 2348, 2349,    0, 2349,    0,
        0, 2349, 2350,    0, 2350,    0,    0, 2350, 2351,    0,
     2351,    0,    0, 2351, 2352,    0, 2352,    0,    0, 2352,
     2353,    0, 2353,    0,    0, 2353, 2354, 2354, 2354, 2354,
     2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354,
     2354, 2355,    0, 2355,    0,    0, 2355, 2356,    0, 2356,
        0,    0, 2356, 2358, 2358, 2358, 2358, 2358, 2358, 2358,
     2358, 2358, 2358, 2358, 2358, 2358, 2358, 2358, 2359,    0,
     2359,    0,    0, 2359, 2360,    0, 2360,    0,    0, 2360,

     2361,    0, 2361,    0,    0, 2361, 2362,    0, 2362,    0,
        0, 2362, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2365,    0, 2365,
        0,    0, 2365, 2366,    0, 2366,    0,    0, 2366, 2367,
        0, 2367,    0,    0, 2367, 2368,    0, 2368,    0,    0,
     2368, 2369,    0, 2369,    0,    0, 2369, 2370,    0, 2370,
        0,    0, 2370, 2371,    0, 2371,    0,    0, 2371, 2372,
        0, 2372,    0,    0, 2372, 2373,    0, 2373,    0,    0,
     2373, 2374,    0, 2374,    0,    0, 2374, 2375,    0, 2375,
        0,    0, 2375, 2376,    0, 2376,    0,    0, 2376, 2377,

        0, 2377,    0,    0, 2377, 2378,    0, 2378,    0,    0,
     2378, 2379,    0, 2379,    0,    0, 2379, 2380,    0, 2380,
        0,    0, 2380, 2381,    0, 2381,    0,    0, 2381, 2382,
        0, 2382,    0,    0, 2382, 2383,    0, 2383,    0,    0,
     2383, 2384,    0, 2384,    0,    0, 2384, 2385,    0, 2385,
        0,    0, 2385, 2388,    0, 2388,    0,    0, 2388, 2389,
        0, 2389,    0,    0, 2389, 2390,    0, 2390,    0,    0,
     2390, 2391,    0, 2391,    0,    0, 2391, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[243] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Thu Jun  5 22:38:35 2025
 * Update Count     : 885
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.hpp"                          // for DeclarationNode
#include "ExpressionNode.hpp"                           // for LabelNode
#include "InitializerNode.hpp"                          // for InitializerNode
#include "ParseNode.hpp"
#include "ParserTypes.hpp"                              // for Token
#include "StatementNode.hpp"                            // for CondCtrl, ForCtrl
#include "TypedefTable.hpp"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 3263 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// " stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}
				// C23 attributes, CPP also handles missing quote delimiter



#line 3280 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define QUOTE 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 187 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 3504 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1915 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8778 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 189 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 211 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 214 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 219 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }			// do nothing
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }					// reset column counter
	YY_BREAK
/* keywords */
case 9:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CORUN); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COFOR); }				// CFA
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT16); }					// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32); }					// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32X); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64X); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128X); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 106:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COUNTOF); }			// GCC
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 362 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 363 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 364 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 367 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 150:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* C23 attributes */
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	strtext = new string( &yytext[2], yyleng - 4 );		// remove delimiters "[[" and "]]"
	RETURN_STR(C23_ATTRIBUTE);
}
	YY_BREAK
/* numeric constants */
case 153:
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 384 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 385 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 386 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 387 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 390 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value, CPP also handles missing quote delimiter */
case 161:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant, CPP also handles missing quote delimiter */
case 164:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 167:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 170:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 413 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 414 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATTR); }				// CFA, attribute shorthand
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 184:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 188:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 436 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 452 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 457 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 463 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 464 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 465 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 466 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 467 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 468 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 469 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 471 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 472 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpLt); }			// CFA
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 473 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpLe); }			// CFA
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 474 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpLe); }			// CFA
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 475 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownGt); }		// CFA
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 476 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownGe); }		// CFA
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 477 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeEq); }			// CFA
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 478 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeNe); }			// CFA
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 479 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 480 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownNe); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 235:
YY_RULE_SETUP
#line 483 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 484 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 485 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 486 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 491 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 240:
YY_RULE_SETUP
#line 518 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 241:
YY_RULE_SETUP
#line 530 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 532 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 4874 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1915 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1915 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1914);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 532 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

