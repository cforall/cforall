
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 247
#define YY_END_OF_BUFFER 248
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1953] =
    {   0,
        0,    0,    0,    0,  167,  167,  170,  170,  248,  246,
        7,    8,    7,  193,  169,  155,  199,  202,  166,  179,
      180,  196,  194,  183,  195,  186,  198,  159,  160,  184,
      185,  204,  206,  205,  207,  175,  155,  177,  197,  178,
      200,  155,  176,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  181,  203,  182,  201,    7,  246,    4,    4,  167,
      168,  174,  170,  171,    7,    7,  211,  240,  155,    0,
      224,  192,  216,  225,  222,  208,  219,  231,  209,  220,
      218,  234,    0,  163,    3,    0,  223,  162,  159,    0,

        0,    0,  159,  159,  159,  159,  159,  159,    0,    0,
      159,  159,  160,  160,  160,  160,  160,  160,  160,    0,
      160,  160,  190,  191,  189,  212,  214,  210,  215,  213,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  230,  187,  169,
      166,  155,    0,  221,    0,    0,  227,    0,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,    0,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,   49,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,   84,  155,  155,  155,  155,  155,  102,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  226,  217,    0,  232,    7,    0,    0,    0,    2,
        0,    5,  167,    0,  173,  172,  172,    0,    0,    0,
      170,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  233,    0,
      235,  188,  163,  163,    0,  163,  163,  163,  163,    0,
        6,  164,  162,    0,  162,  162,  162,  162,  159,    0,
        0,  158,    0,    0,  164,    0,  159,  159,  159,  159,
      159,  159,  159,  159,    0,    0,    0,  159,  159,  159,

      159,  159,  159,  159,    0,  161,    0,    0,  160,  160,
      160,  160,  160,  160,  160,  160,    0,    0,    0,  160,
      160,  160,  160,  160,  160,  160,    0,  228,  229,    0,
      244,  241,    0,    0,    0,  243,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  156,    0,  155,
       15,   16,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,   77,  155,  155,
      155,  155,   91,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  131,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  237,  236,
        0,    0,  172,    0,    0,    0,    0,    0,  172,    0,
        0,  245,    0,    0,    0,    0,    0,    0,    0,  239,
      238,  163,    0,  163,    0,    0,    0,    0,    0,  163,
      163,    0,  164,  164,    0,  164,  164,  164,  164,  162,
        0,  162,    0,    0,    0,    0,    0,  162,  162,    0,

      158,  158,  158,  158,  158,  158,  158,    0,  158,  158,
      164,  164,  164,  164,  164,  164,    0,    0,    0,  159,
      159,    0,    0,    0,    0,  159,  159,    0,    0,  161,
      161,  161,  161,  161,  161,  161,  161,    0,  161,  161,
        0,    0,    0,  160,  160,    0,    0,    0,    0,  160,
      160,  243,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  242,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  156,    0,    0,    0,  155,   22,  155,
      155,   28,  155,   31,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,   52,  155,   54,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,   83,
      155,  155,   96,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  144,  155,
      155,  155,  151,  155,  153,  155,    0,    0,    0,    0,
        0,    0,  172,    0,    0,    0,    0,    0,  163,  163,
        0,  163,  163,    0,    0,    0,    0,  164,    0,  164,

        0,    0,    0,    0,    0,  164,  164,    0,  162,  162,
        0,  162,  162,    0,    0,    0,    0,  158,  158,  158,
      158,  158,  158,  158,  158,    0,    0,    0,  158,  158,
      158,  158,  158,  158,  158,    0,  164,    0,    0,    0,
        0,  164,  164,    0,    0,    0,    0,    0,    0,    0,
      161,  161,  161,  161,  161,  161,  161,  161,    0,    0,
        0,  161,  161,    0,  165,    0,  161,  161,  161,  161,
      161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      155,  155,   25,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,   17,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,    0,    0,    0,    0,    0,    0,  155,
      155,   27,   29,  155,  155,   35,   39,  155,  155,   34,
      155,  155,  155,  155,   51,  155,  155,  155,  155,  155,
       60,   61,  155,  155,   80,  155,  155,  155,  155,   98,
      101,  103,  155,  155,  155,  155,  155,  111,  155,  155,
      155,  155,  155,  155,  155,  127,  155,  130,  132,  155,
      155,  155,  138,  155,  155,  155,  155,  155,  155,  152,

      155,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  163,    0,  163,  163,  164,  164,    0,  164,  164,
        0,    0,    0,    0,    0,  162,    0,  162,  162,    0,
        0,    0,  158,  158,    0,    0,    0,    0,  158,  158,
        0,  164,  164,    0,    0,    0,    0,    0,  165,    0,
        0,    0,    0,    0,  161,  161,    0,  165,  165,  165,
      165,  165,    0,    0,    0,  161,  161,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  155,    0,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,   86,  155,  155,  155,  155,  155,  155,  155,  155,
      155,    0,    0,    0,    0,    0,    0,    0,    0,  155,
      155,  155,  155,   32,   33,  155,  155,  155,  155,  155,
       50,   53,  155,   57,  155,  155,  155,  155,   78,  155,
      155,   88,   92,  155,  155,  155,  106,  155,  110,  112,
      115,  117,  120,  155,  122,  123,  155,  155,  155,  137,
      134,  155,  155,  155,  148,  155,  155,  154,    0,    1,
        0,    0,  172,    0,    0,    0,    0,  163,    0,  164,

        0,  164,  164,  162,    0,    0,  164,    0,  164,  164,
      165,  165,    0,  165,    0,    0,    0,    0,  165,  165,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  155,  155,   19,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,   18,  155,  155,  155,  155,   40,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
        0,    0,    0,    0,    0,    0,    0,    0,    9,   11,

      155,  155,  155,  155,  116,   47,   48,  155,  155,   59,
      155,   63,   79,  155,   97,  104,  155,  155,  155,  121,
      155,  155,  129,  133,  155,  143,  155,  149,  155,    0,
        0,  164,  164,    0,    0,  165,  165,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      157,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   10,   12,   36,  155,  155,   66,   67,
       69,   82,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,   87,
       89,   93,  155,  155,  113,  124,  135,  155,  155,    0,
        0,    0,    0,    0,    0,    0,  155,  155,   42,  155,
      155,  155,   65,  155,  105,  107,  155,  155,  155,  140,
      145,  155,    0,    0,    0,    0,  165,    0,  165,  165,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,  155,  155,   71,   68,   70,  155,   99,  155,  155,

      155,  155,  155,  155,   13,  155,  155,  155,   37,   41,
      155,  155,   62,  155,  155,   95,  155,  155,  155,  155,
      155,    0,    0,    0,    0,  155,  155,   43,   55,  155,
       81,  155,  155,  155,  150,    0,    0,    0,    0,  165,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  155,   44,
       45,   72,   85,  155,  155,  155,  155,   26,  155,  155,
      155,  155,  155,  155,  155,  155,   64,   90,   94,  108,

      114,  136,  155,  146,    0,    0,    0,   24,  155,  155,
      155,  155,  155,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   46,  155,  155,  155,
      155,  155,  155,   14,   20,   23,  155,  155,   38,  155,
      155,  139,  155,    0,    0,    0,    0,   30,   58,  155,
      155,  128,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      109,  147,    0,    0,    0,  155,  126,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,  125,   73,   74,   75,   76,   21,  155,  155,   56,
        0,  119,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  118,  155,  155,  155,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  155,  155,  155,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  155,  141,  155,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  155,  142,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  100,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   56,   51,   57,   11,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,

       69,   70,   71,   72,   73,   11,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[94] =
    {   0,
        1,    2,    3,    2,    2,    2,    2,    1,    4,    1,
        5,    1,    1,    6,    7,    1,    1,    1,    8,    1,
        9,    1,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   11,    1,    1,    1,    1,    1,    1,   12,   12,
       12,   12,   12,   12,    5,    5,    5,    5,    5,   13,
        5,    5,    5,    5,    5,    5,    5,    5,    1,   14,
        8,    1,   15,    1,   12,   12,   12,   12,   12,   12,
        5,    5,    5,    5,    5,    5,    5,    5,   13,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    1

    } ;

static const flex_int16_t yy_base[2430] =
    {   0,
        0,   92, 6392, 6391,   92,   93,   94,   95, 6407, 8816,
      106, 8816,  112,   85, 8816, 6346,   65,   92, 8816, 8816,
     8816,   86,   91, 8816,   95,  112,  112,  168,  237, 6369,
     8816,  132, 6359,   89,  319,  110,  142, 6333,  122, 8816,
      111,  303, 6327,   98,  100,  164,  221,   99,  173,  101,
      108,  112,  123,  193,  102,  286,  247,  245,  149,  302,
      143, 8816,  128, 8816,  236,  380,  389, 8816, 6368,    0,
     8816,  419,    0, 8816,  393,  399, 8816,  499, 6329,  155,
     8816, 8816, 8816, 8816, 8816, 6351, 8816, 6352, 6349, 8816,
     8816,  242, 6364,  568, 8816, 6381, 8816,  632,  412,  499,

      255,  435,  256,  492,  597,  421, 8816,  502,  209,  452,
      498,  642,    0,  534,  636,  680,  499, 8816,  557,  228,
      567,  695, 8816, 8816, 8816, 6348, 8816, 8816, 8816, 6347,
     6345,  261,  278, 6363,  288,  390,  414,  314,  395,  336,
      435, 6341,  445,  446, 6317, 6284,  456, 8816, 8816, 8816,
     8816,  351,  778, 8816, 6305, 6303, 8816, 6275,  477,  316,
      329,  144,  160,  228,  241,  417,  278,  308,  819, 6303,
      127,  363,  317,  407,  342,  264,  483,  568,  662,  427,
      426,  209,  496,  450,  471,  518,  513,  548,  542,  605,
      589,  540,  503, 6295,  613,  587,  590,  609,  618, 6294,

      656,  669,  564,  670,  633,  527,  484,  673,  685,  698,
      674,  677,  714,  687,  695,  715,  634,  630,  718,  689,
      711, 8816, 8816, 6317, 6316,  791,  797, 6347,  806, 8816,
      888, 8816,    0,  800, 8816, 8816,  842, 6286, 6278, 6277,
        0, 6304,  730,  775, 6322,  779,  821,  840,  780,  808,
      812,  815, 6300,  839,  843,  846, 6263, 6262, 8816, 6289,
     6288, 8816,  897,  888,  961,  969,  952,  771, 6251, 6308,
     8816, 1020,  905, 1084,  981, 1050,  814, 1080, 1053,  790,
     1114, 1161,  126, 1144, 1228, 1168,  809, 8816,  853, 1213,
      854, 8816,  878, 1254,  425, 6285, 6282,  957,  982,  896,

     1132,  882,  929, 1264,    0, 1319, 6287, 1292,  913, 8816,
      968, 1349,  951, 8816,  981, 1376,  881, 6280, 6277, 1079,
     1157,  987, 1388,  884,  984, 1395, 1448, 8816, 8816, 6264,
     8816, 8816,  861,  978, 6239, 6239,  985, 1510, 1450, 1003,
     1460, 1491, 1497, 1532, 1539, 1598, 1604, 6235,    0, 6234,
        0, 6203,  746,  886,  948,  697,  161,  961,  780,  729,
     1010,  894, 1015, 1024, 1061, 1143,  304, 1025,  847, 1127,
     1105, 1086,  813,  999, 1118, 1013, 1153, 6234, 1080,  911,
     6233, 6232, 1154,  949, 1094, 1160,  222, 1140, 1157, 1141,
     1168, 1184, 1187, 1200, 1204, 1221,  959, 1203, 1235, 1239,

     1213, 1264, 1265, 1225, 1227, 1045, 1242, 1270, 1252, 1267,
     1250, 1059, 1037, 1281, 1116, 1311, 1291, 1253, 1312, 1189,
     1321,  891, 1323, 1335, 1316, 1341, 1349, 1353, 1351, 1355,
     1380, 1360, 1297, 6231, 1362, 1374, 1214, 1366, 1386, 1367,
     1296, 1363, 1379, 1423, 1409, 1430,  441, 1429, 8816, 8816,
     1478, 1515, 1596, 1614, 6227,    0, 6226,    0, 6225,    0,
     6250, 8816, 1484, 1490, 6225, 6222,    0, 6221,    0, 8816,
     8816, 8816, 1621, 1659, 1645, 1459, 6258, 6255, 6251, 8816,
     1502, 1668, 1723, 1506, 1787, 1631, 1693, 1483, 6210, 8816,
     1688, 1828, 1801, 1530, 6239, 6236, 6237, 8816, 1537, 1810,

     1892, 1543, 1834, 1837, 1717, 8816, 1710, 6196, 1722, 1899,
     1961, 1888, 1949, 1953, 1502, 6195, 1540, 6231, 6226, 1528,
     1529, 6221, 1543, 6225, 6222, 1541, 1581, 1725, 1799, 2027,
     1840, 1965, 2079, 1847, 2094, 2014, 8816, 1470, 2060, 2111,
     1604, 6223, 6220, 1624, 1625, 6215, 1606, 6219, 6216, 1653,
     1655, 6182, 1678, 6178, 6177, 2143, 2165, 6207, 1700, 6175,
     6174, 2174, 2185, 2196, 2205, 2216, 2236, 2256, 6173,    0,
     6172,    0, 8816, 1487, 1517, 1602, 1536, 1522, 1660, 1661,
     1718, 1739, 1737, 1800, 1462, 1804, 1593, 1558, 1740, 1762,
     1663, 1828, 1782, 1664, 1678, 1862, 1566, 1720, 1873, 1700,

     1811, 1840, 1837, 6174, 1864, 6170, 6169, 1866, 6164, 1874,
     1833, 6155, 1908, 6149, 1786, 1814, 1889, 1899, 1893, 1867,
     1900, 1933, 1934, 1940, 1942, 1938, 6148, 1950, 6147, 1959,
     1983, 2005, 1955, 1966, 2018, 1984, 2050, 2012, 2070, 6144,
     2076, 1680, 6142, 2078, 2068, 2079, 2096, 2069, 1817, 2083,
     2113, 2123, 2099, 2136, 2020, 2153, 2164, 2167, 2184, 1967,
     2169, 2082, 2133, 2197, 2207, 2155, 1975, 2170, 6141, 2186,
     2175, 2217, 6140, 2210, 6136, 2218, 2244, 2279, 6130,    0,
     6129,    0, 6128, 6127, 6125,    0, 6124,    0, 2318, 6123,
     6155, 2225, 2226, 1818, 6158, 6155, 6157, 8816, 2294, 2382,

     2446, 2054, 6154, 6151, 6154, 8816, 2265, 2304, 2455, 6113,
     6145, 2227, 2263, 2257, 6149, 6146, 6149, 2029, 8816, 2306,
     2344, 2130, 8816, 2299, 2412, 2326, 6146, 6143, 2330, 2347,
     2311, 2371, 2236, 2306, 2464, 2352, 8816, 2334, 6144, 6141,
     6144, 8816, 2430, 2519, 6135, 6134, 2372, 2533, 2384, 2337,
     2341, 8816, 2377, 2483, 2362, 8816, 2436, 2542, 2414, 6138,
     6135, 2518, 2522, 2584, 2604, 2668, 2454, 2574, 2264, 2442,
     2612, 6098, 6130, 6129, 6088, 6079, 6078,    0, 6077,    0,
     2583, 6076, 6073, 6069,    0, 6066,    0, 2698, 2704, 2711,
     2717, 2735, 2749, 2785, 2794, 2800, 6065,    0, 6063,    0,

     2279, 2367, 6065, 2435, 2173, 2438, 2377, 2432, 2457, 2456,
     2388, 2459, 2304, 2495, 2462, 2515, 2520, 2474, 2519, 2514,
     2444, 2320, 2516, 2545, 2564, 2266, 2523, 2579, 2563, 2584,
     2585, 2590, 2560, 6060, 6059, 6058,    0, 6055,    0, 2598,
      678, 6057, 2597, 2596, 2600, 6054, 6053, 2601, 2606, 6052,
     2476, 2524, 2608, 2611, 6048, 2665, 2652, 2604, 2610, 2669,
     6047, 2702, 2671, 2668, 6046, 2685, 2688, 2733, 2687, 6020,
     6011, 6010, 2699, 2701, 2750, 2700, 2734, 6009, 2706, 1892,
     2709, 2752, 2753, 2710, 2712, 2762, 2755, 6008, 6006, 2756,
     2759, 2761, 6005, 2760, 2763, 2769, 2774, 2778, 2764, 6003,

     2776, 6059, 5998,    0, 5997,    0, 5994,    0, 5993,    0,
     2844, 2803, 6017, 5959, 5958, 2885, 5981, 6013, 2804, 2805,
     2815, 6017, 6006, 6008, 2871, 2806, 5993, 5933, 5924, 2832,
     5972, 5954, 2800, 2803, 5943, 2856, 5947, 5944, 2815, 2833,
     5940, 2857, 2858, 2892, 5944, 5940, 5943, 2949, 2958, 3022,
     5902, 2893, 5939, 5936, 2865, 2868, 5925, 2967, 2877, 2987,
     3013, 5890, 2910, 5927, 5923, 2878, 2881, 5879,    0, 5878,
        0, 5877,    0, 5875,    0, 3063, 3070, 2882, 5874,    0,
     5873,    0, 5865,    0, 5864,    0, 3100, 3106, 3112, 3122,
     3144, 3181, 3195, 3203, 3212,    0,    0, 5866,    0, 2878,

     2859, 2899, 2881, 2975, 2897, 2787, 2805, 2880, 2901, 2954,
     2947, 2958, 2826, 2715, 2950, 2786, 2960, 2952, 2979, 2955,
     2996, 2904, 2964, 2823, 3003, 2882, 3011, 2943, 3022, 2998,
     3037, 5861,    0, 5850,    0, 5849,    0, 5848,    0, 3061,
     2959, 3062, 3025, 5850, 5849, 3073, 3079, 3026, 3075, 3032,
     5841, 5839, 3080, 5838, 3074, 2361, 3111, 3031, 5837, 3082,
     3085, 5835, 5832, 3096, 3113, 3101, 5831, 3107, 5830, 5829,
     5826, 3024, 5825, 3030, 5821, 3102, 3120, 3151, 3133, 5818,
     5817, 3121, 3103, 3104, 5816, 3152, 3160, 5815, 5871, 8816,
        0,    0, 8816,    0,    0,    0,    0, 5786, 3222, 3149,

     5835, 5777, 5776, 5767, 5816, 5813, 3181, 5811, 5753, 5752,
     3263, 5775, 5807, 8816, 3196, 5810, 5807, 5809, 8816, 3232,
     3272, 5801, 5766,    0, 5765,    0, 5762,    0, 5761,    0,
     3313, 3348, 3408, 3175, 5762, 5759, 5758, 5757,    0, 5749,
        0, 5748,    0, 5747,    0, 3356, 3366, 3374, 3387, 3397,
     3438, 3449, 3456, 3497, 5745, 3178, 3169, 5747, 3180, 3182,
     3246, 3206, 1188, 3209, 3172, 3244, 3214, 3219, 3315, 3205,
     3248, 3249, 5746, 3218, 3262, 3261, 3268, 3279, 3264, 3406,
     3322, 3287, 3327, 3323, 3324, 3280, 3357, 3335, 3304, 3347,
     5742,    0, 5740,    0, 5731,    0, 5730,    0, 5726, 5724,

     3358, 3405, 3362, 3361, 5723, 5721, 5720, 3252, 3389, 5719,
     3336, 5718, 5711, 3412, 5710, 5709, 3388, 3413, 3363, 5708,
     3419, 3415, 5700, 5697, 3364, 5696, 3414, 5695, 3420, 5691,
     5681, 5656, 5649, 3507, 5705, 3439, 3466, 3466, 5709, 5706,
     5709, 5666,    0, 5665,    0,    0,    0,    0, 3569, 3545,
     3422, 3557, 3578, 3589, 3595, 3609, 3659, 3669, 5664, 5663,
     8816, 5660,    0, 5659,    0, 5658,    0, 5657,    0,    0,
        0,    0, 3675, 3690, 3706, 3737, 3758, 3768, 3774, 3805,
     3836, 5656,    0, 5656, 5655, 5638, 3481, 3484, 5637, 3455,
     3458, 5635, 3465, 3451, 3459, 3448, 3495, 1525, 3506, 3496,

     3498, 3483, 3530, 3526, 3467, 3544, 3549, 3563, 3564, 5634,
     3565, 3570, 3571, 3559, 3580, 5626, 3588, 3548, 3560, 5622,
        0, 5621,    0,    0,    0,    0, 3592, 3584, 5622, 3598,
     3582, 3630, 5621, 3576, 5620, 5619, 3623, 3624, 3639, 5617,
     5616, 3625, 5612,    0, 5611,    0, 3680, 5641, 5583, 5581,
        0,    0,    0, 5603, 3857, 3873, 5626, 3631, 5584, 5583,
     3879, 3888, 3896, 3910, 3919, 3956, 3970, 5580,    0, 5567,
        0, 5560,    0, 5557,    0,    0,    0,    0, 5545, 3978,
     3987, 4001, 4018, 4037, 4060, 4069, 4078, 4084, 5538,    0,
     3664, 3673, 3661, 3643, 5538, 5519, 3644, 5506, 3665, 3656,

     3658, 3671, 3666, 3691, 3694, 3708, 3677, 3722, 3723, 5461,
     3724, 3676, 5455, 3729, 3733, 5454, 3734, 3735, 3736, 3741,
     3745,    0,    0,    0, 5446, 3743, 3755, 5440, 5435, 3759,
     5422, 3762, 3760, 3769, 5421, 5409,    0, 5395,    0, 5370,
     5391, 5378,    0, 4102, 5361, 5350, 5342,    0, 5303,    0,
     4119, 4128, 4137, 4161, 4169, 4178, 4200, 4211, 4246, 5302,
        0, 5288,    0, 5287,    0, 5283,    0, 5279, 5271,    0,
     4252, 4261, 4283, 4292, 4329, 4342, 4351,    0, 3794, 5259,
     5241, 5232, 5218, 3765, 3766, 3809, 3807, 5200, 3810, 3844,
     3788, 3797, 3849, 3859, 3790, 3796, 5187, 5177, 5163, 3847,

     5151, 5142, 3846, 3867, 5138, 5134,    0, 5121, 3871, 3874,
     3872, 3878, 3876,    0,    0, 5114,    0, 5110,    0, 4335,
     4366, 3880, 5093,    0, 5089,    0, 5078,    0, 5073,    0,
     4375, 4417, 4427, 4434, 4448, 4458, 4465, 4510, 4517, 5058,
        0, 5043,    0,    0,    0,    0, 5027,    0, 5012,    0,
     4529, 4548, 4560, 4569, 4600, 4607, 5005, 3909, 3887, 3890,
     3905, 3936, 3949, 4998, 3951, 4995, 3957, 3889, 4988, 3955,
     3966, 4971, 3968, 4967,    0, 4960,    0, 4956, 4940, 3827,
     3926, 4925, 4913,    0,    0, 4619, 3911, 4902, 4899, 4886,
        0, 4872,    0, 4864,    0, 4863,    0, 4641, 4649, 4680,

     4686, 4693, 4701, 4724, 4761, 4767,    0,    0,    0, 4854,
     4850,    0,    0, 4776, 4798, 4836, 4858, 4270, 4876, 4896,
     3953, 3976, 3972, 3977, 3985, 4017, 3986, 3988, 3993, 4033,
     4833, 4816, 4812,    0,    0, 4034, 4811,    0, 4803, 4794,
     4793,    0, 4790,    0, 4770,    0, 4756,    0,    0,    0,
        0, 4882, 4918, 4927, 4941, 4986, 4992, 5000, 5007, 5031,
     4752, 4748,    0,    0, 5038, 4298, 5075, 4732, 4110, 5091,
     4067, 4746, 4738, 4737, 4730, 4716, 4702, 4096, 4159, 4699,
        0, 4698, 4691,    0, 4688,    0, 4684,    0, 4669,    0,
        0,    0,    0, 4660, 5098, 5106, 5112, 5122, 5143, 5181,

     5189, 5202, 5212, 4651,    0, 4647,    0, 4965, 4186, 4222,
     5223, 5271, 4642, 4042, 4068, 4039, 4631,    0, 4615,    0,
     4602,    0, 4595,    0, 4587, 4586, 4578, 5261, 5284, 5300,
     5307, 5366, 5372, 5383, 4577, 4565, 4564, 4232, 5390, 5442,
     5405, 5433, 5507, 4536, 4532, 4524, 4094, 4086, 4126, 4519,
        0, 4515,    0,    0,    0,    0, 4506,    0, 4505,    0,
     5481, 5457, 5540, 5549, 5555, 5571,    0, 5586, 5622, 5609,
     4497, 4496, 4485, 5636, 5664, 4475,    0, 4474,    0, 5722,
        0, 4162, 4441, 4179,    0,    0,    0, 4432, 4429,    0,
        0, 5698, 5646, 5735, 5794, 5248, 5770, 5812, 5824, 5833,

     4422, 4421, 4415,    0, 5891,    0, 4305, 5879, 4395,    0,
     4383,    0, 5959,    0, 4088, 4368, 4362, 4353, 4350, 4346,
     5864, 5471, 5972, 5705, 4357, 5989, 4383, 5920, 4341, 4335,
     4324, 4321,    0,    0, 4312, 4300, 4296, 4288, 4290, 4264,
     4263, 4250, 4247, 6003, 4385, 4387, 6032, 6050, 4228, 4220,
     4207, 4206,    0, 4198, 4396, 4182, 4181, 4174, 4173, 4397,
     6079, 6129, 6087, 6011, 6194, 4170, 4167, 4160,    0, 4157,
     4439, 4148, 4136, 4135, 6095, 6048, 6202, 4128, 4124, 4090,
     6243, 6121, 4089, 4084, 4052, 4051, 6304, 4035, 3994, 3934,
     3892, 6252, 6293, 3825, 3809,  394,  550, 6372,  590, 4479,

     6333,  742,  954, 1070, 1243,    0,    0, 1263, 1384, 1385,
     1445, 4480, 6401, 1593, 1713, 1936, 2111,    0,    0, 2229,
     2309, 2402, 2469, 2555, 2556, 2612, 2664, 2899, 2996, 3032,
        0, 3074, 6439, 3129, 3160,    0, 3161, 4497, 3207, 3260,
     3302, 3372, 3374, 3419, 3458, 3593, 3685, 3689, 3725, 3783,
     3789, 8816, 6509, 6524, 6539, 6550, 6565, 6580, 6595, 6610,
     6617, 6628, 6642, 6648, 6654, 6665, 6671, 6677, 6683, 6698,
     6704, 6710, 6725, 4149, 6732, 6740, 6754, 6768, 6774, 4180,
     6780, 4184, 6791, 6802, 6817, 6832, 6838, 4216, 6844, 4299,
     6850, 4306, 6856, 4307, 6862, 4310, 6868, 6874, 6885, 6891,

     6897, 6911, 6917, 6923, 6929, 4313, 6935, 4352, 6946, 6957,
     6963, 6969, 6984, 6990, 4381, 6996, 4391, 7002, 7008, 4398,
     7014, 4402, 7020, 7026, 7032, 7038, 7044, 4463, 7050, 4464,
     7064, 7070, 7076, 7082, 4469, 7088, 4481, 7102, 7108, 4486,
     7114, 4492, 7125, 7131, 7137, 7143, 4495, 7149, 4499, 7164,
     7170, 4516, 7176, 4517, 7182, 4534, 7188, 4535, 7194, 7200,
     4546, 7206, 4569, 7212, 4573, 7218, 4581, 7232, 7246, 7252,
     4584, 7258, 4588, 7264, 4605, 7270, 4606, 7284, 4621, 4624,
     7295, 4625, 7301, 4647, 7307, 4651, 7313, 4652, 7319, 4658,
     7334, 4659, 4662, 4665, 4701, 4705, 4709, 7340, 4710, 7346,

     4732, 7352, 4733, 7358, 4738, 7372, 7386, 7392, 7398, 7404,
     4745, 7410, 4765, 7416, 4776, 7422, 4777, 7436, 7442, 7453,
     7459, 4784, 7465, 4797, 7471, 4800, 7477, 4804, 7483, 7489,
     7495, 4808, 7501, 4812, 4813, 4816, 4819, 7515, 7529, 7535,
     7541, 7547, 4822, 7553, 4834, 7559, 4837, 7565, 4838, 4842,
     4857, 4862, 7579, 7585, 4882, 7596, 7602, 4894, 7608, 4897,
     4900, 4906, 4928, 7614, 4929, 7620, 4942, 4943, 4948, 4951,
     7626, 7640, 7646, 7652, 7658, 4965, 7664, 4969, 7670, 4970,
     7676, 4974, 5005, 5009, 5010, 7682, 7696, 7702, 5016, 7713,
     5017, 5037, 5044, 7719, 7725, 5049, 7731, 5052, 7737, 7743,

     5056, 7757, 7763, 7769, 7775, 5059, 7781, 5062, 7795, 7801,
     5073, 7807, 5076, 7813, 5077, 7819, 5110, 7825, 7831, 5121,
     7845, 5122, 7856, 7862, 7868, 5127, 5130, 5143, 7874, 5147,
     7880, 5151, 7894, 7908, 7914, 5152, 7920, 5155, 7926, 5158,
     7932, 5159, 7946, 7952, 5164, 7958, 5168, 5188, 5200, 5210,
     7964, 5223, 7970, 5226, 7984, 7995, 8001, 5230, 8007, 5233,
     8013, 5236, 5249, 8027, 8033, 8039, 8045, 5259, 8051, 5260,
     8057, 5264, 8063, 5265, 8077, 5271, 5272, 5305, 8083, 8089,
     5308, 5312, 8103, 8114, 8120, 5313, 5317, 5318, 8126, 8132,
     8138, 5323, 8144, 5333, 8150, 5337, 8156, 5347, 5351, 5352,

     5370, 8170, 8176, 8182, 5371, 5390, 8196, 8211, 8222, 5391,
     8228, 5406, 8234, 5407, 8240, 5410, 8246, 5413, 5417, 5418,
     5421, 8252, 8258, 5432, 8264, 5436, 8279, 8294, 8300, 5437,
     8306, 5443, 8312, 5480, 8318, 5481, 8324, 8330, 8336, 8342,
     8348, 8354, 8365, 8371, 5486, 8377, 5489, 5493, 5494, 5508,
     8383, 5512, 8389, 5527, 8403, 5528, 8409, 8415, 8421, 8436,
     8442, 5538, 8448, 5553, 5559, 8459, 5570, 5573, 5574, 8465,
     8471, 5584, 5587, 8477, 8483, 5594, 5595, 8489, 5601, 8495,
     5604, 8506, 8512, 8518, 8533, 8539, 8545, 8551, 8557, 8563,
     8569, 8584, 8590, 8596, 5607, 8611, 8617, 8623, 8629, 8635,

     5632, 8650, 8656, 8662, 8668, 8674, 8680, 8686, 8692, 8698,
     8704, 8710, 8716, 8722, 8728, 8734, 8740, 8746, 8752, 8758,
     8764, 8770, 8776, 5644, 5645, 8782, 8788, 8794, 8800
    } ;

static const flex_int16_t yy_def[2430] =
    {   0,
     1952,    1, 1953, 1953, 1954, 1954, 1955, 1955, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1956, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1956, 1952, 1952, 1952,
     1952, 1956, 1952, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1952, 1952, 1952, 1952, 1952, 1957, 1952, 1952, 1958,
     1952, 1952, 1959, 1952, 1952, 1952, 1952, 1952, 1956, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1960, 1952, 1952,   28, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1961,   28,
     1952, 1952,   29, 1952, 1952, 1952, 1952, 1952, 1952,   29,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1962, 1952, 1952, 1952, 1952, 1952,
     1952, 1956, 1963, 1952, 1964, 1965, 1952, 1952, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1966,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,

     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1952, 1952, 1952, 1952, 1952, 1957, 1957, 1957, 1952,
     1957, 1952, 1958, 1952, 1952, 1952, 1952, 1967, 1968, 1969,
     1970, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1971, 1972, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,  263, 1973,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,  110,  279,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1974, 1952, 1975, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1976, 1952, 1977, 1978, 1952,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1979, 1980, 1981,
     1982, 1952, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1984, 1952, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983,

     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1952, 1952,
     1985, 1986, 1952, 1952, 1987, 1988, 1989, 1990, 1991, 1992,
     1952, 1952, 1952, 1952, 1952, 1993, 1994, 1995, 1996, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,  483, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952,  501, 1952, 1952,
     1952, 1952, 1952, 1952, 1952,  511, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1997, 1998, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952,  530, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1999, 1952, 2000, 2001, 1952, 2002, 1952, 1952, 2003,
     2004, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2005, 2006,
     2007, 2008, 1952, 2009, 2009, 2009, 2009, 2009, 2009, 2009,
     2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009,
     2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009,

     2009, 2009, 2009, 2010, 1952, 2011, 2012, 2009, 2009, 2009,
     2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009,
     2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009,
     2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009,
     2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009,
     2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009,
     2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009,
     2009, 2009, 2009, 2009, 2009, 2009, 2013, 1952, 2014, 2015,
     2016, 2017, 2018, 2018, 2019, 2020, 2021, 2022, 1952,  689,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,  709,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 2023, 1952, 2023, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 2024, 1952, 1952, 2025, 2026, 2027, 2028, 2029, 2030,
     2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2039, 2040, 2041, 2042,

     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
     2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,

     2043, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
     1952, 1952, 1952, 1952, 1952, 1952,  916, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     2059, 1952, 1952, 1952, 1952, 1952, 1952,  949, 1952, 1952,
     1952,  958, 1952, 1952, 1952, 1952, 1952, 2060, 2061, 2062,
     2063, 2064, 2065, 2066, 2067, 2068, 2069, 1952, 2070, 2071,
     2072, 2073, 2074, 2075, 2076, 2077, 2078, 2078, 2078, 2078,
     2078, 2078, 2078, 2078, 2078, 2079, 2080, 2081, 2082, 2081,

     2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081,
     2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081,
     2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081,
     2081, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2081,
     2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081,
     2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081,
     2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081,
     2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081,
     2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2091, 1952,
     2092, 2093, 1952, 2094, 2095, 2096, 2097, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1111, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
     1952, 2106, 2107, 1952, 1952, 2108, 2109, 2110, 2111, 2112,
     2113, 2114, 2115, 2116, 2117, 2118, 2118, 2118, 2118, 2118,
     2118, 2118, 2118, 2118, 2119, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2120, 2120,

     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2129,
     2130, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139,
     1952, 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2140, 2141,
     1952, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150,
     2151, 2152, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153,
     2153, 2154, 2155, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,

     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2157,
     2158, 2159, 2160, 2161, 2162, 2163, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156,
     2156, 2156, 2164, 2165, 2166, 2167, 1952, 1952, 1952, 1952,
     2168, 2169, 2170, 2171, 1952, 2172, 1952, 1952, 2173, 2174,
     2172, 2172, 2172, 2172, 2172, 2172, 2172, 2175, 2176, 2177,
     2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187,
     2187, 2187, 2187, 2187, 2187, 2187, 2187, 1952, 2188, 2189,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
     2190, 2191, 2192, 2193, 2194, 2190, 2190, 2190, 2190, 2190,
     2190, 2190, 2190, 2190, 2190, 2195, 2196, 2197, 2198, 1952,
     2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208,
     2209, 2209, 2209, 2209, 2209, 2209, 2209, 2209, 2209, 2210,
     2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220,
     2221, 2221, 2221, 2221, 2221, 2221, 2221, 2222, 2223, 2223,
     2223, 2223, 2223, 2223, 2223, 2223, 2223, 2223, 2223, 2223,
     2223, 2223, 2223, 2223, 2223, 2223, 2223, 2223, 2223, 2223,

     2223, 2223, 2223, 2223, 2224, 2225, 2226, 2223, 2223, 2223,
     2223, 2223, 2223, 2227, 2228, 2229, 2230, 2231, 2232, 2233,
     2234, 1952, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242,
     2243, 2243, 2243, 2243, 2243, 2243, 2243, 2243, 2243, 2244,
     2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254,
     2255, 2255, 2255, 2255, 2255, 2255, 2256, 2256, 2256, 2256,
     2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256,
     2256, 2256, 2256, 2257, 2258, 2259, 2260, 2256, 2256, 2256,
     2256, 2256, 2261, 2262, 2263, 2264, 1952, 2265, 2266, 2267,
     2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2275, 2275,

     2275, 2275, 2275, 2275, 2275, 2275, 2276, 2277, 2278, 2279,
     2280, 2281, 2282, 2283, 2283, 2283, 1952, 1952, 2283, 2283,
     2284, 2284, 2284, 2284, 2284, 2284, 2284, 2284, 2284, 2284,
     2284, 2284, 2285, 2286, 2287, 2284, 2284, 2288, 2289, 2290,
     2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300,
     2301, 2302, 2302, 2302, 2302, 2302, 2302, 2302, 2302, 2302,
     2303, 2304, 2305, 2306, 1952, 1952, 2307, 1952, 2308, 2307,
     2309, 2309, 2309, 2309, 2309, 2309, 2309, 2309, 2309, 2309,
     2310, 2309, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318,
     2319, 2320, 2321, 2322, 2302, 2302, 2302, 2302, 2302, 2302,

     2302, 2302, 1952, 2323, 2324, 2325, 2326, 1952, 2327, 2328,
     1952, 1952, 2309, 2309, 2309, 2309, 2329, 2330, 2331, 2332,
     2333, 2334, 2335, 2336, 2337, 2338, 2322, 2302, 2302, 2302,
     2302, 2302, 2302, 2302, 2339, 2323, 2325, 2327, 1952, 1952,
     1952, 1952, 2328, 2340, 2341, 2342, 2343, 2343, 2343, 2344,
     2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354,
     2355, 2355, 2355, 2355, 2355, 2355, 2356, 1952, 1952, 2327,
     2357, 2358, 2359, 2360, 2360, 2361, 2362, 2363, 2364, 2360,
     2365, 2366, 2366, 2366, 2367, 2368, 2369, 2370, 2371, 2372,
     2373, 2355, 2355, 2355, 1952, 1952, 2355, 2355, 2327, 2327,

     2374, 2357, 2375, 2376, 2327, 2377, 2360, 2360, 2378, 2379,
     2380, 2381, 2360, 1813, 2382, 2382, 2383, 2384, 2370, 2371,
     1952, 1952, 2355, 1952, 2385, 2355, 2327, 2327, 2386, 2374,
     2387, 2375, 1805, 1805, 2388, 2378, 2389, 2380, 2382, 2390,
     2383, 2391, 2384, 1952, 2392, 2385, 1952, 1952, 2393, 2386,
     2394, 2387, 2395, 2388, 2396, 2389, 2397, 2390, 2391, 2392,
     1952, 1952, 1952, 1952, 2385, 2398, 2399, 2400, 2401, 2393,
     2402, 2394, 2403, 2397, 1952, 1952, 2392, 2404, 2405, 2406,
     2385, 2385, 2407, 2398, 2408, 2399, 2385, 2400, 2409, 2410,
     2403, 2392, 2392, 2411, 2404, 2412, 2405, 2392, 2406, 2385,

     2385, 2413, 2407, 2414, 2408, 1887, 1887, 2415, 2409, 2416,
     2410, 2392, 2392, 2417, 2411, 2418, 2412, 1898, 1898, 2419,
     2413, 2420, 2414, 2421, 2415, 2416, 2422, 2417, 2423, 2418,
     2424, 2419, 1887, 2420, 2421, 2425, 2422, 2392, 2423, 2426,
     2427, 2428, 2426, 2429, 2427, 2420, 2428, 2423, 2429, 2420,
     2423,    0, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952
    } ;

static const flex_int16_t yy_nxt[8910] =
    {   0,
       10,   11,   12,   13,   13,   13,   11,   14,   15,   10,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   29,   29,   29,   29,   29,   29,
       29,   30,   31,   32,   33,   34,   35,   36,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   37,   16,   16,
       16,   16,   16,   16,   37,   16,   16,   16,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   16,   51,   16,   52,   53,   16,   54,   16,   16,
       55,   56,   57,   58,   59,   60,   16,   16,   61,   62,
       63,   64,   65,   66,   71,   71,   74,   74,   66,   81,

       82,   67,   74,   74,   83,   71,   71,   75,   86,   76,
       76,   76,   75,   75,   89,   76,   76,   76,   75,   77,
       85,   78,   78,  129,  130,   87,   84,   78,   95,   90,
       91,   78,   93,   96,   94,   94,   94,   94,   94,   94,
       94,   94,   94,  124,  148,  157,   97,  158,  282,  282,
      150,   72,   72,   72,   72,  151,  154,   80,   80,   80,
       80,   80,  222,  125,  175,  126,  127,   80,  149,  192,
      202,   80,  171,  184,  172,  185,  155,  194,  193,  173,
      176,  174,   80,   88,  195,  186,   80,   92,   98,  196,
       99,   99,   99,   99,   99,   99,   99,  100,  100,  380,

      197,   80,   80,   80,  152,  156,  198,  101,   80,  257,
      102,  221,  357,  103,  104,  105,  106,  107,  223,   80,
       80,  215,  108,   80,  109,  107,  216,  578,  177,  305,
      110,  217,   80,  101,  358,  178,  102,  187,  258,  111,
      104,  179,  112,  224,  106,  188,  107,  189, 1952,  260,
      190,  108,   80,  150,  109,  191,  107,   98,  151,  113,
      113,  113,  113,  113,  113,  113,  113,  113,   80,  199,
      225,  307,   78,  200,  213,  201,  261,  282,  282,  102,
       80,   80,  114,  115,  116,  117,  118,   80,  613,  180,
      327,  119,  397,  181,  118,  330,  359,  331,  182,  120,

       80,  106,  287,  183,   80,  102,   80,  152,  121,  115,
      288,  122,  330,  117,  331,  118,  360,  283,  208,  209,
      119,  214,  330,   80,  331,  118,  131,  210,  287,  211,
      132,  133,  385,  134,  212,  135,  136,   80,  137,  288,
      138,  159,  160,  161,  162,   80,  163,  164,  330,  165,
      331,  166,  139,  140,  141,  167,  168,  203,  204,  150,
      362,   80,   80,   80,  151,  169,  218,   80,  205,  206,
      330,  207,  331,  219,  220,   80,   80,  142,  143,  363,
      144,  226,  145,   76,   76,   76,  226,  591,   80,  227,
      229,  230,  382,  355,   75,  229,   76,   76,   76,   75,

       75,   80,   76,   76,   76,   75,  356,  332,  146,  147,
       80,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      234,  235,   80,  384,  330,  234,  331,  236,  333,  330,
      381,  331,  236,  332,  279,  279,  279,  279,  279,  279,
      279,  237,  237,  237,  237,  237,  237,  237,  330,  522,
      331, 1952,  284,  298,  284,  236, 1917,  285,  285,  285,
      285,  285,  285,  285,  285,  285,   80,  287, 1952,  330,
      334,  331, 1952,  238,  280,  288,   80, 1952,  236,  330,
      330,  331,  331,  236,  236,   80,   80,  236,  236,  383,
      330, 1952,  331,  287,  361,  236,  395,  286, 1952,  236,

       80,  236,  239,  236,  288,  240,  242,  396, 1952,   80,
      243,  244,  675,  245,  308,  246,  247, 1952,  248,   98,
      249,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       80,  399,  250,  251,  252,  400,   80,  289, 1952,  290,
      291,  102,   80,   80,  287,  309,  292,  300,  288,  301,
      302,  353,  288,  310,  401,   80,  430,  253,  254,  354,
      255,  281,   80,  293,  386,  387,  294,  102,  291,  106,
      287,  309,   80,  303,  288,  292,  304,   80,  302,  117,
      309,  288,  310,  398,  402,  411,   80,  404,  310,  256,
      263,  263,  263,  263,  263,  263,  263,  263,  263,   80,

      403,   80,  322,  310,  323,  324,  309,   80,  429,  264,
      265,  266, 1952,  309,  267,  268,  410,  310,  268,  407,
      295,  310,  296,   80,  405,  297,  298,   80,  325,  310,
      269,  326,  388,  324,  406,  264,  265,  266,  117,  309,
      267,  424,  268,  287,  299,  389,   80,  268,   80,   80,
      310,  288, 1952,  268,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  414,   80,  295,  415,  296,   80,  287,
      297,  298,   80,  273,  274,  275,  409,   80,  276,  277,
      288,  311,  277,  312,  313,  408,  417,  412,  287,   80,
      314,  416,   80,   80,  278,  413,  288,  427,  443,  273,

      274,  275,  444,  317,  276,  318,  277,  315,  319,  320,
      316,  277,  313,  428,  287,   80,  299,  277,  317,  314,
      318,   80,  150,  319,  320,  288,  309,  321,   80,   80,
      390,  391,   80,   80,  310,  419,   80,   80,  392,  420,
      425,  309,  393,  418,   80,  394,   80,  421,   80,  310,
      422,  423,  309,  431,   80,  436,   80,   80,  426,  438,
      432,  435,  433,  310,  461, 1042,  462,  309,  439,  321,
       80,  447,  577,   80,   80,  440,  437,   80,  310,  338,
      338,  338,  338,  338,  338,  434,  445,  441,   80,  442,
      446,  448,  226,  581,   76,   76,   76,  226,  229,  230,

      227,  234,  235,  229, 1921,   80,  234,  229,  230,  461,
     1952,  462,  229,  461,  461,  462,  462,  472,  574,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  340,  462,   80,
      341,  463,  461,  472,  462,  342,  461,  343,  462,  461,
      464,  462,  500,  344,  345,  461,  580,  462,  346,  462,
      490,  347,  364,  288,  453,  453,  453,  453,  453,  453,
      453,  365,   80,  461,  461,  462,  462,  461,   80,  462,
      461,  598,  462,  366,  367,  368,  490,  369,  370,  451,
      230,  371,  288,  372,  451,  330,  452,  331,  291,  373,

      374,  375,  376,  377,  454,  546,   80,  292,  292,  320,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  107,  472,
      118,  472,  292,  593,  472,  472,  292,  292,  264,  265,
      266,  302,  107,  267,  268,   80,  490,  268,  490,  291,
       80,  490,  490,   80,  107,  472,  118,  472,  583,  269,
      472,  292,  472,  575,  264,  265,  266,  310,  107,  267,
       80,  268,  490,  651,  490,  107,  268,  490,  473,  490,
      473,  608,  268,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  476,  480,  477,  481,  310,  478,  479,  480,

      302,  107,  480,  287,  494,  314,  495,   80,   80,  496,
      497,  288,  330,  313,  331,  472, 1952,  610,   80,  480,
       80,  481,  314,  475,  625,  576,  480,  490,  287,  287,
      118,  480,  324,  118,  314,  314,  288,  480,  579,  554,
      288,  472,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  314,  313,  490,  287,  324,  118,  560,   80,  118,
      642,  484,  485,  486,  314,  288,  487,  488,  555,   80,
      488,  599,   80,   98,   80,  279,  279,  279,  279,  279,
      279,  279,  489,   80,   80,  602,  561,  484,  485,  486,
      582,  498,  487,  499,  488,  584,   80,  498,  585,  488,

      498,  491,  592,  491,   80,  488,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  280,  586,  498,   80,  499,
       80,  273,  274,  275,  498,  309,  276,  277,  634,  498,
      277,  641, 1923,  310,  606,  498,  100,  100,  100,  100,
      100,  100,  100,  100,  100,   80,  493,  273,  274,  275,
      597,  309,  276,   80,  277,  523,  102,  524,  611,  277,
      525,  526,  310,  607,   80,  277,  285,  285,  285,  285,
      285,  285,  285,  285,  285,   80,  308,   80,  107,  527,
      595,  596,  102,  501,  501,  284,   80,  284,  644,  600,
      285,  285,  285,  285,  285,  285,  285,  285,  285,   80,

       80,  594,   80,  309,  107,  601,  502,  503,  504,  505,
      506,  310,   80,   80, 1291,  507,   80,  587,  506,   80,
      614,  616,  150,  508,  588,  589,  590,   80,  612,  309,
      603,  609,  509,  503,  615,  510,  517,  505,  518,  506,
      310,  519,  520,   80,  507,  617,   80,   80,   80,  506,
      511,  511,  511,  511,  511,  511,  511,  511,  511,   80,
      521,  649,   80,   80,  620,  618,  619,  292,  623,  512,
      621,  513,   80,   80,  514,  515,  622,  517,  515,  518,
       80,  626,  519,  520,   80,  624,   80,  523,  629,  524,
      516,  633,  525,  526,   80,  512,  292,  513,   80,  632,

      514,   80,  515,  627,  628, 1952,  635,  515,  292,   80,
      107,   80,   80,  515,  100,  100,  100,  100,  100,  100,
      100,  100,  100,   80,   80, 1925,   80,  640,  521,   80,
      638,  647,  630,  631,  636,  639,  107,  292,  527,  529,
       80,  530,  530,  530,  530,  530,  530,  530,  530,  530,
       80,  643,  637,  646,  308,   80,   80,  530,  530,  530,
      530,  530,  530,  669,  531,  532,  533,  534,  535,  663,
       80,   80,  541,  536,  542,   80,  537,  543,  544,  645,
       80,  538,   80,  530,  530,  530,  530,  530,  530,  648,
      539,  532,  654,  540,   80,  534,  545,  535,  650,  541,

       80,  542,  536,  314,  543,  544,  652,  537,   80,  655,
       80,  547,   80,  548,   80,  653,  549,  550,  547,   80,
      548,   80,   80,  549,  550,   80,   80,  670,  662,  658,
      314,  656,  314,   80,  118,  551,  657,  659,   80,   80,
      664,  118,  665,  666,  671,   80, 1952, 1926,  660,  668,
      545,  556,  556,  556,  556,  556,  556,  661,  667,  314,
      118,  556,  556,  556,  556,  556,  556,  118,   80,  551,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  451,
      230,  558,   80,  691,  451,  673,  452,  268,   80,   80,
     1952,  558,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  674,  672,  676, 1952,  562,  559,
      327,  338,  338,  338,  338,  338,  338,  230,  461,  559,
      462,   80,  558,  228,  461,  694,  462,  695,  558,  698,
      696,  697,  772,  556,  556,  556,  556,  556,  556,  812,
      556,  556,  556,  556,  556,  556,   80,  698,  737,  698,
      559, 1402,  698,  698,  711,  698,  559,  801,  277,  563,
      714,  564,  715,  558,  745,  716,  717,  746,  520,  340,
      558,  526,  341,  698,  737,  698,   80,  342,  698,  343,
      698,   80,  292,  292,   80,  344,  345,  107,  505,  718,
      346,  559,  802,  347,  805,   80,  565,  719,  559,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  292,  292,  107,  804,  718,  566,   80,  236,  236,
      236,  236,  236,  236,  236,   80,  719,  107,  773,  558,
      774,  827,  544,  816,  550,  558,  453,  453,  453,  453,
      453,  453,  453,  474,  474,  474,  474,  474,  474,  474,
      474,  474,   80,  107,  702, 1928,  703,  559,  678,  704,
      705,   80,  473,  559,  473,  815,  567,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  803,  698,  314,  314,
      568,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  118,

      264,  118,  266,  698,  868,  267,  268,  314,  314,  268,
      492,  492,  492,  492,  492,  492,  492,  492,  492,   80,
       80,  690,   80,   80,  806,  118,  264,  118,  266,  807,
      482,  267,  775,  268,  706,  819,  707,   80,  268,   80,
      706,  823,  824,  706,  268,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  782,  731,  719,  732,  733,   80,
      706,  776,  707,  718,  484,  485,  486,  706,  718,  487,
      488,  719,  706,  488,  748, 1952,  719,   80,  706,   80,
      830,  734,  719,  783,  735,  489,  733,  749,  808,  718,
      484,  485,  486,  505,  718,  487,   80,  488,   80,   80,

      719,  828,  488,  748,  699,  719,  699,  809,  488,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  491,  810,
      491,   80,  817,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  279,  279,  279,  279,  279,  279,  279,  100,
      100,   80,  913,  813,  818,   80,  480,  814,  748,  701,
      709,  709,  709,  709,  709,  709,  709,  709,  709,   80,
      726,  750,  727,   80,  822,  728,  729,  844,  811,  273,
       80,  275,  500,   80,  276,  277,   80,  748,  277,  720,
      845,  721,  722,  718,  730,  534,  751,   80,  723,  831,
      710,  719,   80,  751,  752,  273,   80,  275,  874,   80,

      276,  752,  277,  820,  821,  724,  842,  277,  725,  718,
      722,  833,  751,  277,  501,  501,  832,  723,  834,  751,
      719,   80,  726,  752,  727,   80,   80,  728,  729,  737,
      752,  737,   80,   80,  737,  737,  825,  502,  503,  504,
      505,  506,  840,  829,  826,  718,  507,  835,   80,  506,
      849,   80,   80,  719,  508,  737,  841,  737,   80,   80,
      737, 1071,  737,  509,  503,  848,  510,   80,  505,  846,
      506,  718,  738,  730,  739,  507,  850,  740,  741,  843,
      506,  847,  719,  511,  511,  511,  511,  511,  511,  511,
      511,  511,   80,   80,  742,  737,  743,   80, 1930,   80,

      742,   80,  512,  742,  513,  853,  855,  514,  515,   80,
      753,  515,  754,  755,   80,  851,  854,  852,   80,  756,
      742,  737,  743,  516,  856,   80,   80,  742,  512,  860,
      513,  885,  742,  514,   80,  515,  757,  857,  742,  758,
      515,  755,   80,   80,  861,  894,  515,  529,  756,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  863,  767,
      752,  768,  769,  858,   80,  530,  530,  530,  530,  530,
      530,   80,  531,  532,  533,  534,  535,   80,  918,   80,
      865,  536,  488,  719,  537,  770,  752,  859,  771,  538,
      769,  530,  530,  530,  530,  530,  530,  880,  539,  532,

      862,  540,  759,  534,  760,  535,  751,  761,  762,   80,
      536,  764,  719,  764,  752,  537,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  751,  763,   80,   80,   80,
      864,  534,  751,  752,  759,   80,  760,   80,   80,  761,
      762,   80,   80,  752,  556,  556,  556,  556,  556,  556,
      866,  751,  867,  873,  870,   80,  766,  751,   80,  887,
      869,  871,  752,  875,  872,  752,  556,  556,  556,  556,
      556,  556,   80, 1952,  558,  556,  556,  556,  556,  556,
      556,  878,   80,  751,  723,  763,  556,  556,  556,  556,
      556,  556,   80,  876,  752,   80,  558,  556,  556,  556,

      556,  556,  556,  877,  879,  558,  556,  556,  556,  556,
      556,  556,   80,  723,   80,  888,  558,  556,  556,  556,
      556,  556,  556,   80,  559,  881,   80,  558,   80,   80,
      882,  893,   80,  559,   80,  883,  558,  556,  556,  556,
      556,  556,  556,   80,  559,   80,  230,  558, 1003,  897,
      884,  788,  902,  895,  886,  559,   80,  556,  556,  556,
      556,  556,  556,  789,  559,  889,   80,  558,  896,   80,
      790,  472,  472,  490,  890,  559,   80,   80,  900,  891,
      901,  927,  506,  792,  892,  498,  898,  558,  921, 1024,
      922, 1932,  791,  923,  924,  559,  793,  472,  472,  490,

      899,  236,  236,  236,  236,  236,  236,  236,  506,  490,
      537,  268,  268,  277,  794,  559,  700,  700,  700,  700,
      700,  700,  700,  700,  700,   80,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  490,  537,  795,   80,  796,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  277,
      935,  722,  506,  723,  729, 1000,  733,  506,  941,  264,
      723,  266,  515,   80,  267,  268,  708,  930,  268,  931,
      722, 1952,  932,  933,  501,  501,  718,  733,  506,   80,
      690, 1011,  723,  506,  719,  264,  748,  266, 1020,  723,
      267,  934,  268,  718,  936,  752,  937,  268,  723,  938,

      939,  719,  718,  268,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  719,  736,  748,  756,  506,  940,  718,
       80,  748,  755,  484,  752,  486,   80,  723,  487,  488,
      719,  756,  488,  748,  749,  930,   80,  931,  957, 1001,
      932,  933,  762,  506,  917,  756,  951,   80, 1210,  484,
      748,  486, 1009,  944,  487,  945,  488, 1005,  946,  947,
      756,  488,  748,  699, 1934,  699,  723,  488,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  934,  936,  537,  937,
      756,   80,  938,  939,   80,  723,  273,   80,  275,  769,

      537,  276,  277,   80, 1006,  277,  952,  755,  953, 1002,
      506,  954,  955,  769,  537,   80,   80,  710,   80,  756,
     1004,   80,  273, 1010,  275, 1019,  537,  276, 1008,  277,
      956, 1952, 1013,   80,  277,   80,  506,  756,  940, 1007,
      277,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      948, 1016,  948, 1048,   80,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  751,  952,  756,  953,  751, 1012,
      954,  955,  752,   80,   80,   80,  752, 1014,   80,   80,
     1021,  744,   80,   80,  976,  976,  976,  976,  976,  976,
      751, 1025, 1018, 1017,  751,  950,  756,  963, 1049,  964,

     1015,  752,  965,  966,   80,  752,  765,  765,  765,  765,
      765,  765,  765,  765,  765, 1022,  956, 1935, 1952,   80,
      537,  967,   80,   80, 1031,  756,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  963, 1023,  964,   80, 1027,
      965,  966,  978,   80,   80,  959,  537,  960, 1043,   80,
      961,  959, 1028, 1029,  959,   80,   80,   80,  537,   80,
       80, 1026, 1040,   80, 1044,   80,  962,   80, 1045,   80,
       80,  959, 1030,  960, 1952, 1041,  961, 1046,  959, 1051,
     1054, 1055, 1050,  959,  537,  764,  967,  764, 1047,  959,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,   80,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,   80, 1057, 1937,   80,   80,  558,
       80, 1058, 1060, 1052, 1053,  558,  556,  556,  556,  556,
      556,  556,  558, 1056,   80, 1059,   80,   80,  558, 1061,
      556,  556,  556,  556,  556,  556, 1062,  559,   80,   80,
       80,   80, 1063,  559, 1064,   80,  558, 1065,   80,   80,
      559,   80, 1068, 1070,   80, 1072,  559, 1173,  987, 1076,
      558, 1075,  990, 1066,  988,  989,  556,  556,  556,  556,
      556,  556,   80,   80,  559,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  991,  559,   80,
     1069,   80,   80, 1077,   80,   80,  558,  992,   80,   80,
       80,   80,   80,   80, 1079,  558, 1080, 1083,   80, 1074,
     1081,  558, 1067,   80, 1073,   80, 1082,   80, 1078, 1101,
     1087, 1084, 1085,  706,  559,   80,   80, 1183, 1175,  472,
      698,  698,  490,  559,  723, 1086, 1105,  723, 1088,  559,
      933,  506,  994, 1165,   80,  993,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  472,  698,  698,  490,  506,
     1106,  995,   80,  723,  939,   80,  723,  506, 1166,  268,
      488,  488,  277,  709,  709,  709,  709,  709,  709,  709,

      709,  709, 1172,  737,  737,  506,  911,  916,  916,  916,
      916,  916,  916,  916,  916,  916, 1108, 1113,   80,  756,
      742,  955,  756, 1114,  537, 1158,  484,  537,  486,  737,
      737,  487,  488,  925, 1122,  488, 1136,   80,  966,   80,
       80,   80, 1156,  515,  515, 1160, 1167,  917,  756, 1114,
      537,  756,  484,  537,  486, 1157,   80,  487,   80,  488,
       80, 1952, 1185,   80,  488, 1137, 1181, 1159, 1168, 1164,
      488,  949,  949,  949,  949,  949,  949,  949,  949,  949,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,  958,
      958,  958,  958,  958,  958,  958,  958,  958, 1161,  959,

     1162,  960,   80, 1163,  961,  959,   80, 1187,  959,   80,
     1115,   80, 1116,   80,   80, 1117, 1118,   80,   80,   80,
     1112, 1189, 1174,   80, 1170,  959, 1177,  960, 1200,  962,
      961, 1179,  959, 1114,   80, 1171, 1169,  959,   80,  948,
     1182,  948, 1176,  959,  949,  949,  949,  949,  949,  949,
      949,  949,  949, 1212, 1119,   80, 1120,   80, 1939, 1114,
     1119, 1178,   80, 1119,  976,  976,  976,  976,  976,  976,
       80, 1131, 1131, 1131, 1131, 1131, 1131, 1184, 1180, 1186,
     1119,   80, 1120,   80,   80,   80, 1219, 1119, 1133,   80,
       80,   80, 1119, 1202, 1952, 1205,   80, 1220, 1119, 1188,

     1207,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556, 1190,
       80,   80,  978,  556,  556,  556,  556,  556,  556, 1134,
     1135,  558,   80,   80,   80, 1211, 1952,  558,   80,   80,
     1201,   80, 1199,  558,   80,  556,  556,  556,  556,  556,
      556, 1204, 1208,  558, 1209,   80, 1203, 1206, 1213,  559,
       80,   80,   80,   80, 1221,  559,   80, 1214, 1146, 1217,
       80,  559,   80, 1218, 1147,  558, 1215, 1226, 1227,   80,
       80,  559,  556,  556,  556,  556,  556,  556, 1222, 1225,
     1149, 1952,   80, 1216, 1148,  698,  556,  556,  556,  556,

      556,  556, 1224,  559,  556,  556,  556,  556,  556,  556,
       80,   80,  558,  556,  556,  556,  556,  556,  556,   80,
     1235,  698, 1952, 1952,  959, 1150,  558,  737,   80, 1259,
     1290,   80, 1228, 1223,  558,  488, 1293,   80, 1285,   80,
      559,   80, 1229,  558,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  737,  559, 1238, 1287, 1239, 1260, 1284,
     1240, 1241,  559, 1151,   80,   80, 1286,  515,   80, 1952,
     1288,  559, 1152,   80, 1289, 1292, 1295,   80,   80, 1299,
     1154, 1296, 1153, 1302, 1099, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111,  958,  958,  958,  958,  958,  958,

      958,  958,  958,   80,  959,   80,  960,   80,   80,  961,
      959,   80, 1300,  959, 1131, 1131, 1131, 1131, 1131, 1131,
       80,   80, 1943,   80, 1294, 1112, 1301,   80, 1318, 1331,
      959, 1133,  960, 1304, 1121,  961, 1305,  959,   80,   80,
     1297, 1306,  959, 1298, 1303, 1307,   80, 1315,  959, 1131,
     1131, 1131, 1131, 1131, 1131, 1311, 1312,  556,  556,  556,
      556,  556,  556,   80, 1945, 1333, 1133,  556,  556,  556,
      556,  556,  556, 1135,   80,  556,  556,  556,  556,  556,
      556,   80,   80,   80, 1310, 1313,   80,  558,  556,  556,
      556,  556,  556,  556,   80,   80, 1314,  558,  556,  556,

      556,  556,  556,  556, 1317,  558,   80, 1134, 1135, 1249,
     1249, 1249, 1249, 1249, 1249,  559,   80,   80,  558, 1319,
       80,   80,   80,   80, 1316,  559, 1327, 1337,  558, 1308,
     1329, 1340, 1274,  559, 1947, 1309, 1952, 1330, 1273,  556,
      556,  556,  556,  556,  556, 1275,  559,   80,   80, 1276,
      556,  556,  556,  556,  556,  556,  559,  556,  556,  556,
      556,  556,  556, 1277,   80,   80, 1332, 1251, 1335,  558,
     1252,   80,   80,   80,   80, 1253, 1359, 1254,   80,   80,
      558, 1949, 1341, 1255, 1256, 1114, 1328,  558, 1257, 1334,
     1348, 1258, 1342, 1338, 1119, 1336, 1339,  559,  556,  556,

      556,  556,  556,  556, 1391, 1360, 1392,   80,  559, 1393,
       80, 1114, 1114, 1394,   80,  559, 1279,   80,   80, 1401,
     1952, 1278, 1400, 1399,   80,  959,   80, 1398,  558, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1114, 1280,
       80, 1395,   80,   80, 1396, 1397, 1355, 1355, 1355, 1355,
     1355, 1355,  959, 1409,   80,   80,  559,   80, 1355, 1355,
     1355, 1355, 1355, 1355, 1281,   80, 1406, 1405, 1403, 1234,
     1249, 1249, 1249, 1249, 1249, 1249, 1357, 1420, 1404, 1355,
     1355, 1355, 1355, 1355, 1355,   80, 1413, 1412, 1357,   80,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,

     1355, 1355, 1408,   80, 1358, 1361, 1410,   80,   80, 1357,
     1355, 1355, 1355, 1355, 1355, 1355, 1358, 1407,   80,   80,
     1357, 1411,   80,   80,   80, 1417, 1357, 1414, 1251,   80,
       80, 1252, 1415, 1416, 1421,   80, 1253, 1358, 1254,   80,
     1357,   80, 1418,   80, 1255, 1256, 1362,   80, 1358, 1257,
     1419,   80, 1258, 1363, 1358, 1950, 1431,   80, 1429, 1364,
     1355, 1355, 1355, 1355, 1355, 1355, 1428, 1427, 1358, 1426,
     1355, 1355, 1355, 1355, 1355, 1355,  556,  556,  556,  556,
      556,  556,   80,   80,   80, 1445, 1365, 1481, 1479,   80,
     1357,  556,  556,  556,  556,  556,  556, 1480,   80, 1435,

     1357, 1433,   80,   80, 1432, 1497,  558,  556,  556,  556,
      556,  556,  556, 1430, 1446,   80, 1489,   80, 1358, 1490,
       80,  558, 1434,   80,   80,   80, 1114, 1366, 1358, 1482,
       80, 1483,   80, 1485,  559,   80,   80,  558,  556,  556,
      556,  556,  556,  556, 1486, 1367, 1484, 1952, 1488,  559,
       80, 1951, 1114,   80, 1381, 1493, 1491, 1487, 1380,  556,
      556,  556,  556,  556,  556,  559,  959,   80,  558,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,   80,   80,   80, 1494, 1495, 1382, 1952,   80,  558,
     1492, 1498,   80,   80,   80,   80,  559, 1501, 1502,  558,

       80, 1496,   80, 1503,   80,  558,  556,  556,  556,  556,
      556,  556, 1508, 1504,   80, 1499, 1500,  559,   80,   80,
     1383,   80, 1384, 1557,   80,   80, 1512,  559,   80, 1510,
     1509, 1561, 1559,  559, 1562, 1560,  558, 1388, 1388, 1388,
     1388, 1388, 1388, 1511, 1513, 1952, 1558,   80, 1385,   80,
     1564, 1952, 1569,   80, 1133,   80,   80, 1386, 1355, 1355,
     1355, 1355, 1355, 1355,  559, 1565,   80,  558,   80,   80,
     1563, 1952, 1570, 1387, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355,   80, 1915, 1357, 1355,
     1355, 1355, 1355, 1355, 1355,  559, 1135, 1355, 1355, 1355,

     1355, 1355, 1355,   80, 1357,   80,   80, 1636,   80, 1571,
     1357, 1355, 1355, 1355, 1355, 1355, 1355, 1566,   80, 1357,
     1355, 1355, 1355, 1355, 1355, 1355,   80, 1357, 1572, 1573,
       80,   80, 1358,   80, 1588,   80, 1567,   80, 1358, 1578,
     1580, 1357, 1581, 1568, 1582, 1579,   80, 1358,   80,   80,
     1357, 1622, 1623, 1629, 1952, 1358, 1451, 1355, 1355, 1355,
     1355, 1355, 1355, 1589,   80, 1639, 1452, 1624,   80, 1358,
     1453, 1355, 1355, 1355, 1355, 1355, 1355, 1621, 1358,  556,
      556,  556,  556,  556,  556,   80, 1455, 1357,  556,  556,
      556,  556,  556,  556, 1640,   80, 1911, 1454, 1625, 1456,

     1637, 1357,  556,  556,  556,  556,  556,  556,   80,  558,
       80, 1626,   80, 1627,   80, 1358,   80, 1630,  558,  556,
      556,  556,  556,  556,  556,   80, 1628,   80, 1631, 1358,
     1632,   80,  558, 1671, 1457,   80,   80,  559,  556,  556,
      556,  556,  556,  556,   80,   80,  559,   80, 1677,  558,
     1672, 1458,   80, 1459, 1673, 1679, 1909, 1678, 1471, 1674,
      559,  556,  556,  556,  556,  556,  556, 1675,  558, 1472,
      556,  556,  556,  556,  556,  556,   80,  559, 1473,  556,
      556,  556,  556,  556,  556, 1388, 1388, 1388, 1388, 1388,
     1388,  558,   80,   80, 1474, 1680,  559, 1952,   80, 1676,

      558,   80, 1133, 1520, 1520, 1520, 1520, 1520, 1520,  558,
     1747, 1749, 1711, 1952, 1905,  558, 1682, 1475, 1711,  559,
     1355, 1355, 1355, 1355, 1355, 1355,   80,   80,  559, 1355,
     1355, 1355, 1355, 1355, 1355, 1476, 1281,  559, 1355, 1355,
     1355, 1355, 1355, 1355, 1135,   80, 1952,   80, 1748, 1713,
     1357, 1903, 1899,   80, 1477,   80, 1783, 1839,  528, 1357,
      528, 1522, 1355, 1355, 1355, 1355, 1355, 1355, 1357, 1712,
     1355, 1355, 1355, 1355, 1355, 1355, 1782, 1714, 1358, 1355,
     1355, 1355, 1355, 1355, 1355,   80, 1897, 1358, 1739,  348,
     1895,  348, 1357,  350, 1739,  350, 1358, 1952, 1891, 1531,

     1357, 1355, 1355, 1355, 1355, 1355, 1355, 1784, 1532, 1357,
     1952, 1533, 1355, 1355, 1355, 1355, 1355, 1355,   80, 1952,
     1358,   80, 1888, 1715, 1711,  455, 1534,  455, 1358, 1886,
     1711, 1357, 1884, 1716, 1739, 1952, 1952, 1358,   80, 1815,
     1739, 1535, 1357, 1874, 1952, 1740, 1536, 1355, 1355, 1355,
     1355, 1355, 1355,  556,  556,  556,  556,  556,  556, 1358,
     1952, 1816,  556,  556,  556,  556,  556,  556, 1952, 1872,
     1358, 1668, 1668, 1668, 1668, 1668, 1668, 1357, 1669, 1538,
     1537, 1712, 1952,  558,  556,  556,  556,  556,  556,  556,
     1870, 1740,  558,  556,  556,  556,  556,  556,  556, 1708,

     1708, 1708, 1708, 1708, 1708, 1358, 1709, 1711,  457, 1952,
      457,  559, 1859, 1711,  558,  459,  466,  459,  466,  468,
      559,  468,  569,  558,  569, 1952, 1858, 1539, 1281, 1551,
      556,  556,  556,  556,  556,  556, 1520, 1520, 1520, 1520,
     1520, 1520,  559,  556,  556,  556,  556,  556,  556,   80,
     1952,  559,  556,  556,  556,  556,  556,  556, 1856, 1847,
      558,  571, 1952,  571, 1712, 1847, 1552, 1131, 1131, 1131,
     1131, 1131, 1131,  558, 1854, 1553, 1355, 1355, 1355, 1355,
     1355, 1355,  558, 1952, 1133, 1739, 1852, 1861,  559, 1847,
      679, 1739,  679, 1861, 1522, 1847, 1554, 1952, 1711, 1861,

      681,  559,  681, 1850, 1711, 1861, 1357,  685, 1952,  685,
      559,  687, 1952,  687, 1555, 1843, 1848, 1556, 1355, 1355,
     1355, 1355, 1355, 1355, 1841, 1587, 1135,   80, 1355, 1355,
     1355, 1355, 1355, 1355, 1358, 1355, 1355, 1355, 1355, 1355,
     1355, 1739, 1740, 1598, 1862, 1838, 1848, 1739, 1357, 1355,
     1355, 1355, 1355, 1355, 1355, 1712, 1862, 1836, 1357, 1355,
     1355, 1355, 1355, 1355, 1355, 1357, 1355, 1355, 1355, 1355,
     1355, 1355,  777,  779,  777,  779, 1358, 1832,  784, 1357,
      784, 1847, 1861, 1952, 1830, 1599, 1358, 1847, 1861, 1357,
      786, 1820,  786, 1358, 1819,  797, 1357,  797, 1740, 1861,

       80,  799, 1601,  799,  836, 1861,  836, 1358,  838, 1600,
      838, 1355, 1355, 1355, 1355, 1355, 1355, 1358, 1355, 1355,
     1355, 1355, 1355, 1355, 1358,  903,  905,  903,  905, 1602,
      556,  556,  556,  556,  556,  556, 1812, 1810, 1848, 1862,
     1603, 1357, 1604,  907,  909,  907,  909, 1806, 1357,  556,
      556,  556,  556,  556,  556,  968, 1862,  968, 1804, 1802,
      558,  556,  556,  556,  556,  556,  556, 1791, 1790, 1358,
     1617, 1617, 1617, 1617, 1617, 1617, 1358, 1787,  970,  558,
      970, 1786,  972, 1618,  972, 1606, 1781, 1133,  559, 1605,
      974,  558,  974,  979, 1779,  979, 1614,  981, 1777,  981,

      558,  556,  556,  556,  556,  556,  556,  559,  556,  556,
      556,  556,  556,  556,  983,  985,  983,  985, 1615,  559,
     1131, 1131, 1131, 1131, 1131, 1131, 1952, 1952,  559, 1135,
     1155,  558, 1155,  996,  998,  996,  998, 1133,  558, 1767,
     1952, 1616, 1355, 1355, 1355, 1355, 1355, 1355, 1760, 1758,
     1355, 1355, 1355, 1355, 1355, 1355, 1032, 1756, 1032,  559,
     1034, 1036, 1034, 1036, 1755, 1619,  559, 1038, 1230, 1038,
     1230, 1091, 1357, 1091, 1093, 1620, 1093, 1753, 1587, 1135,
     1357, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1751, 1355, 1355, 1355, 1355, 1355, 1355,

     1358,   80, 1355, 1355, 1355, 1355, 1355, 1355, 1358, 1737,
     1231, 1357, 1231, 1736, 1095, 1653, 1095, 1357,   79, 1123,
       79, 1123, 1727, 1652, 1357, 1355, 1355, 1355, 1355, 1355,
     1355, 1724, 1357, 1668, 1668, 1668, 1668, 1668, 1668, 1358,
     1669, 1125, 1127, 1125, 1127, 1358, 1722, 1129, 1655, 1129,
     1720, 1654, 1358, 1718, 1138, 1357, 1138,   80,   80, 1656,
     1358,   80, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1140,   80, 1140, 1665, 1665, 1665,
     1665, 1665, 1665, 1358, 1657, 1142, 1144, 1142, 1144,   80,
     1666, 1658, 1357, 1191, 1133, 1191,   80,   80, 1357,  556,

      556,  556,  556,  556,  556,   80, 1193,  558, 1193, 1195,
     1707, 1195, 1952, 1197, 1705, 1197, 1952, 1242, 1693, 1242,
     1358, 1244, 1354, 1244, 1354, 1246, 1358, 1246,  336,  558,
      336, 1262, 1692, 1262, 1660,  559, 1135,  556,  556,  556,
      556,  556,  556, 1264, 1659, 1264, 1266, 1268, 1266, 1268,
     1952, 1379, 1690, 1379, 1952, 1688, 1686,  559, 1952, 1617,
     1617, 1617, 1617, 1617, 1617, 1684, 1270,  558, 1270, 1281,
       80,  339, 1618,  339, 1681,   80, 1133,  556,  556,  556,
      556,  556,  556, 1355, 1355, 1355, 1355, 1355, 1355,  558,
     1952, 1282,   80, 1282, 1952,  559, 1952,  556,  556,  556,

      556,  556,  556, 1320, 1667, 1320, 1322,  558, 1322, 1425,
     1952, 1425, 1664, 1357, 1952, 1324, 1663, 1324, 1135, 1355,
     1355, 1355, 1355, 1355, 1355, 1651, 1650,  558, 1355, 1355,
     1355, 1355, 1355, 1355, 1648,  559, 1952,  378, 1343,  378,
     1343, 1358, 1355, 1355, 1355, 1355, 1355, 1355, 1646, 1357,
     1670, 1345, 1441, 1345, 1441,  559, 1952, 1351, 1357, 1351,
      552, 1644,  552, 1281, 1642, 1695, 1708, 1708, 1708, 1708,
     1708, 1708, 1357, 1709, 1368, 1638, 1368, 1358, 1370, 1372,
     1370, 1372, 1696, 1374,   80, 1374, 1358, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,   80,

     1358, 1355, 1355, 1355, 1355, 1355, 1355, 1697, 1355, 1355,
     1355, 1355, 1355, 1355, 1468,   80, 1468, 1357, 1376,  557,
     1376,  557, 1635, 1357, 1698, 1389, 1505, 1389, 1505, 1634,
       80, 1357, 1703, 1703, 1703, 1703, 1703, 1703, 1357, 1665,
     1665, 1665, 1665, 1665, 1665, 1358, 1422,   80, 1422, 1133,
     1699, 1358, 1666,  604,   80,  604, 1133,   80, 1436, 1358,
     1436, 1438, 1357, 1438,   80, 1442, 1358, 1442, 1447,  558,
     1447, 1449, 1700, 1449, 1613, 1702,  556,  556,  556,  556,
      556,  556, 1460, 1701, 1460, 1462, 1464, 1462, 1464, 1612,
     1358, 1135,  556,  556,  556,  556,  556,  556, 1135, 1355,

     1355, 1355, 1355, 1355, 1355, 1609,  558, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1466,
     1608, 1466,  558, 1355, 1355, 1355, 1355, 1355, 1355, 1357,
     1469,  998, 1469,  998,  559, 1597, 1506, 1357, 1506, 1093,
     1595, 1093, 1281, 1357, 1355, 1355, 1355, 1355, 1355, 1355,
      559, 1593,   79, 1357,   79, 1591, 1516, 1358, 1516, 1281,
     1518, 1523, 1518, 1523, 1525, 1358, 1525, 1527, 1529, 1527,
     1529, 1358, 1585, 1540, 1357, 1540, 1584, 1542, 1728, 1542,
       80, 1358, 1355, 1355, 1355, 1355, 1355, 1355, 1729, 1730,
     1355, 1355, 1355, 1355, 1355, 1355, 1577, 1610, 1731, 1610,

     1575,   80, 1358, 1355, 1355, 1355, 1355, 1355, 1355, 1544,
       80, 1544, 1357, 1703, 1703, 1703, 1703, 1703, 1703,  977,
     1357,  977,   80, 1732, 1741, 1741, 1741, 1741, 1741, 1741,
     1133, 1669, 1547, 1357, 1547, 1549,   80, 1549, 1742, 1574,
     1358, 1574, 1576, 1357, 1576, 1583,   80, 1583, 1358, 1824,
     1824, 1824, 1824, 1824, 1824, 1733, 1825, 1660,  336,   80,
      336, 1358, 1355, 1355, 1355, 1355, 1355, 1355, 1590, 1592,
     1590, 1592, 1135, 1594, 1596, 1594, 1596,   80, 1734, 1710,
     1661, 1607, 1661, 1607, 1710, 1355, 1355, 1355, 1355, 1355,
     1355,   80, 1357, 1743, 1743, 1743, 1743, 1743, 1743, 1743,

       80, 1355, 1355, 1355, 1355, 1355, 1355, 1710, 1355, 1355,
     1355, 1355, 1355, 1355, 1132, 1357, 1132, 1611,   80, 1611,
     1358,  339, 1633,  339, 1633, 1744,  378,  552,  378,  552,
     1710, 1357, 1641, 1550, 1641, 1710, 1710, 1660, 1357, 1710,
     1710, 1548, 1643, 1358, 1643, 1546, 1645, 1710, 1645, 1545,
     1543, 1710, 1761, 1710, 1745, 1710, 1647, 1746, 1647, 1358,
     1694, 1649, 1694, 1649, 1541, 1530, 1358, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1250,
     1662, 1250, 1662, 1762, 1355, 1355, 1355, 1355, 1355, 1355,
     1763, 1768, 1768, 1768, 1768, 1768, 1768, 1357, 1709,  557,

      604,  557,  604, 1357, 1528, 1769, 1741, 1741, 1741, 1741,
     1741, 1741, 1526, 1669, 1357, 1683, 1685, 1683, 1685, 1687,
     1742, 1687, 1689, 1524, 1689, 1358, 1725, 1691, 1725, 1691,
     1356, 1358, 1356, 1764, 1131, 1131, 1131, 1131, 1131, 1131,
     1519, 1704, 1358, 1704, 1765, 1706, 1717, 1706, 1717, 1766,
     1738, 1133, 1719, 1517, 1719, 1738, 1119, 1515, 1355, 1355,
     1355, 1355, 1355, 1355, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1514, 1844, 1844, 1844, 1844, 1844, 1844, 1738, 1845,
       80,   80, 1355, 1355, 1355, 1355, 1355, 1355, 1357, 1721,
     1723, 1721, 1723, 1135,   80, 1750, 1771, 1750, 1752,   80,

     1752, 1738, 1788, 1754, 1788, 1754, 1738, 1738, 1507, 1711,
     1738, 1738, 1357,   80,   80, 1711, 1358, 1521, 1738, 1521,
       80, 1757, 1738, 1757, 1738, 1772, 1738, 1793, 1773, 1774,
     1774, 1774, 1774, 1774, 1774, 1774, 1759, 1132, 1759, 1132,
     1358, 1355, 1355, 1355, 1355, 1355, 1355, 1776, 1792, 1776,
     1795, 1795, 1795, 1795, 1795, 1795, 1355, 1355, 1355, 1355,
     1355, 1355, 1778, 1796, 1778,   80, 1712, 1133, 1780, 1775,
     1780, 1357, 1355, 1355, 1355, 1355, 1355, 1355,   80, 1817,
     1357, 1817, 1785, 1586, 1785, 1586, 1357, 1768, 1768, 1768,
     1768, 1768, 1768, 1789, 1709, 1789, 1250,   80, 1250, 1358,

     1478, 1769, 1357, 1803, 1805, 1803, 1805, 1470, 1358, 1135,
     1809, 1739, 1809, 1811, 1358, 1811, 1873, 1739, 1873, 1467,
     1797, 1794, 1465, 1131, 1131, 1131, 1131, 1131, 1131, 1463,
     1358, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1711, 1798,
     1133, 1889, 1461, 1889, 1711, 1450, 1448, 1355, 1355, 1355,
     1355, 1355, 1355, 1940, 1941, 1940, 1941, 1444, 1807, 1807,
     1807, 1807, 1807, 1807, 1807, 1443, 1711, 1119, 1740, 1119,
     1440, 1800, 1711, 1439, 1437,   80,   80, 1357,   80,   80,
       80,   80, 1135, 1424, 1423,   80, 1774, 1774, 1774, 1774,
     1774, 1774, 1774,   80,   80, 1712,   80,   80, 1808, 1821,

     1821, 1821, 1821, 1821, 1821, 1358, 1824, 1824, 1824, 1824,
     1824, 1824, 1822, 1825,   80,   80, 1133, 1660, 1390, 1378,
     1377, 1375, 1373, 1712, 1711, 1371, 1369, 1353, 1352, 1357,
     1711, 1119, 1350, 1349, 1347,  742, 1355, 1355, 1355, 1355,
     1355, 1355,  706, 1346, 1813, 1813, 1813, 1813, 1813, 1813,
     1813, 1813, 1813, 1344,   80,   80,   80, 1358, 1135,   80,
     1813, 1813, 1813, 1813, 1813, 1813, 1357,   80,   80,   80,
       80, 1355, 1355, 1355, 1355, 1355, 1355,   80,   80,   80,
       80, 1712,   80,   80, 1814,   80, 1813, 1813, 1813, 1813,
     1813, 1813, 1326, 1325, 1358, 1795, 1795, 1795, 1795, 1795,

     1795, 1357, 1323, 1823, 1321,   80,   80, 1283, 1796, 1272,
     1271, 1269, 1133, 1355, 1355, 1355, 1355, 1355, 1355, 1267,
     1265, 1263, 1261, 1248, 1247, 1357, 1739, 1245, 1243, 1358,
      966,  959, 1739, 1237, 1236, 1739,  955, 1234,  742,  742,
     1233, 1739,  939, 1357, 1826,  933, 1827, 1827, 1827, 1827,
     1827, 1827, 1827,  498, 1135, 1799, 1799, 1799, 1799, 1799,
     1799, 1799,  706,  706, 1232, 1821, 1821, 1821, 1821, 1821,
     1821, 1358,  480, 1090,   80,   80,   80,   80, 1822, 1660,
       80, 1711, 1133, 1740,   80,   80, 1828, 1711,   80,   80,
       80,   80, 1740, 1739,   80, 1357,   80,   80,   80, 1739,

       80, 1807, 1807, 1807, 1807, 1807, 1807, 1807,   80,   80,
     1198, 1196, 1194, 1833, 1833, 1833, 1833, 1833, 1833, 1833,
     1833, 1833, 1739, 1192, 1135,   80, 1145, 1143, 1739, 1833,
     1833, 1833, 1833, 1833, 1833, 1141, 1139, 1130, 1712, 1128,
     1126, 1124, 1827, 1827, 1827, 1827, 1827, 1827, 1827,  966,
     1740,  966, 1121, 1834,  762, 1833, 1833, 1833, 1833, 1833,
     1833, 1711,  955,  955,  951,  742, 1110, 1711, 1109, 1107,
      939,  939,  729, 1355, 1355, 1355, 1355, 1355, 1355, 1740,
      933, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813,
     1355, 1355, 1355, 1355, 1355, 1355,  933, 1813, 1813, 1813,

     1813, 1813, 1813, 1357, 1844, 1844, 1844, 1844, 1844, 1844,
      498, 1845, 1131, 1131, 1131, 1131, 1131, 1131, 1712,  498,
     1357, 1814, 1104, 1813, 1813, 1813, 1813, 1813, 1813, 1133,
      706, 1358, 1103, 1863, 1863, 1863, 1863, 1863, 1863, 1660,
     1825, 1102, 1100, 1099,  480,  480, 1098, 1864, 1358, 1131,
     1131, 1131, 1131, 1131, 1131, 1097, 1096, 1660, 1846, 1094,
     1092, 1090,   80, 1846,   80,   80, 1133,   80,   80,   80,
       80, 1135, 1865, 1865, 1865, 1865, 1865, 1865, 1865,   80,
     1875, 1875, 1875, 1875, 1875, 1875, 1846, 1845, 1863, 1863,
     1863, 1863, 1863, 1863, 1876, 1825, 1875, 1875, 1875, 1875,

     1875, 1875, 1864, 1845, 1866,   80,   80,   80, 1135, 1846,
     1876,   80,   80,   80, 1846, 1846,   80, 1039, 1846, 1846,
     1037, 1035, 1033, 1847,   80,  999, 1846,  997,  986, 1847,
     1846,  984, 1846, 1867, 1846,  982, 1868, 1860,  980,  975,
      973,  971, 1860, 1881, 1881, 1881, 1881, 1881, 1881, 1881,
      969, 1877, 1877, 1877, 1877, 1877, 1877, 1877,  550,  544,
      772,  762,  762,  526,  520, 1860,  515,  943,  942,  729,
      729,  498,  929,  928,  926,  925,  488,  920,  919,  480,
     1848,  915,  914, 1878,  912,  911,  910,  908, 1860,  684,
      684,  906,  904, 1860, 1860,   80, 1847, 1860, 1860,   80,

       80,   80, 1847,   80, 1861, 1860,   80,   80,   80, 1860,
     1861, 1860, 1879, 1860,   80, 1880, 1881, 1881, 1881, 1881,
     1881, 1881, 1881,   80, 1892, 1892, 1892, 1892, 1892, 1892,
     1892,  839,  837,  605,  800,  798,  787,  785,  781,  780,
      778,  553,  550,  550,  320, 1847,  544,  544,  526,  526,
      298, 1847,  520, 1848, 1861,  520, 1882,  744,  736,  277,
     1861, 1862,  713,  712, 1893, 1900, 1900, 1900, 1900, 1900,
     1900, 1900,  708,  268, 1912, 1912, 1912, 1912, 1912, 1912,
     1912,  693,  692,  688,  686,  462,  462,  684,  682,  680,
       80,   80,   80,  605,  573, 1861,  572,  570,  553,  332,

      331, 1861, 1848,  320,  320, 1901, 1847,  305,  298,  298,
      271, 1862, 1847,  482, 1913, 1892, 1892, 1892, 1892, 1892,
     1892, 1892,  471,  470,  469,  467, 1906, 1906, 1906, 1906,
     1906, 1906, 1906, 1906, 1906, 1847,  465,  462,  461,  460,
      458, 1847, 1906, 1906, 1906, 1906, 1906, 1906,  456,  230,
      450,  449, 1862,   80,   80, 1900, 1900, 1900, 1900, 1900,
     1900, 1900,  379, 1848,  352,  351, 1907,  349, 1906, 1906,
     1906, 1906, 1906, 1906, 1861,  332,  337,  335,  332,  330,
     1861,  329,  328,  271,  262,   78,  259,   78,   80,  232,
      170,  153, 1848,  128, 1918, 1918, 1918, 1918, 1918, 1918,

     1918, 1918, 1918, 1861,  123,   80, 1952,   69,   69, 1861,
     1918, 1918, 1918, 1918, 1918, 1918, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1912, 1912, 1912, 1912, 1912, 1912, 1912,
     1952, 1862, 1952, 1952, 1919, 1952, 1918, 1918, 1918, 1918,
     1918, 1918, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1862, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1846, 1846, 1846,
     1846, 1846, 1846, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1846, 1952, 1846, 1846, 1846, 1846, 1846, 1846,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   79, 1952, 1952, 1952, 1952,   79,
     1952,   79,   79,   79,   79,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      233,  233, 1952,  233,  233, 1952,  233,  233,  233,  233,
      233,  233,  233, 1952,  233,  241,  241, 1952, 1952,  241,

      241,  241,  241,  241,  241,  241,  241,  241, 1952,  241,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  306,  306, 1952,  306, 1952,
     1952,  306,  336, 1952, 1952, 1952, 1952, 1952, 1952,  336,
      336,  336,  336,  339,  339, 1952,  339, 1952, 1952, 1952,
     1952, 1952, 1952,  339,  339,  339,  339,  348, 1952,  348,
     1952, 1952,  348,  350, 1952,  350, 1952, 1952,  350,  378,
     1952, 1952, 1952, 1952, 1952, 1952,  378,  378,  378,  378,
      455, 1952,  455, 1952, 1952,  455,  457, 1952,  457, 1952,
     1952,  457,  459, 1952,  459, 1952, 1952,  459,  241,  241,

     1952, 1952,  241,  241,  241,  241,  241,  241,  241,  241,
      241, 1952,  241,  466, 1952,  466, 1952, 1952,  466,  468,
     1952,  468, 1952, 1952,  468,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      306,  306, 1952,  306,  552, 1952, 1952, 1952, 1952,  552,
     1952,  552,  552,  552,  552,  339,  339, 1952,  339, 1952,
     1952, 1952, 1952, 1952, 1952,  339,  339,  339,  339,  557,
      557, 1952,  557, 1952, 1952, 1952, 1952,  557,  557,  557,
      557,  557,  557,  569, 1952,  569, 1952, 1952,  569,  571,
     1952,  571, 1952, 1952,  571,   79, 1952, 1952, 1952, 1952,

       79, 1952,   79,   79,   79,   79,  604, 1952, 1952, 1952,
     1952,  604, 1952,  604,  604,  604,  604,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  679, 1952,  679,
     1952, 1952,  679,  681, 1952,  681, 1952, 1952,  681,  683,
     1952,  683, 1952, 1952,  683,  685, 1952,  685, 1952, 1952,
      685,  687, 1952,  687, 1952, 1952,  687,  747, 1952,  747,
      747, 1952,  747,  528, 1952,  528,  528, 1952,  528,  552,
     1952, 1952, 1952, 1952,  552, 1952,  552,  552,  552,  552,

      777, 1952,  777, 1952, 1952,  777,  779, 1952,  779, 1952,
     1952,  779,  557,  557, 1952,  557, 1952, 1952, 1952, 1952,
      557,  557,  557,  557,  557,  557,  784, 1952,  784, 1952,
     1952,  784,  786, 1952,  786, 1952, 1952,  786,  797, 1952,
      797, 1952, 1952,  797,  799, 1952,  799, 1952, 1952,  799,
       79, 1952, 1952, 1952, 1952,   79, 1952,   79,   79,   79,
       79,  604, 1952, 1952, 1952, 1952,  604, 1952,  604,  604,
      604,  604,  836, 1952,  836, 1952, 1952,  836,  838, 1952,
      838, 1952, 1952,  838,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  903,

     1952,  903, 1952, 1952,  903,  905, 1952,  905, 1952, 1952,
      905,  683, 1952,  683, 1952, 1952,  683,  907, 1952,  907,
     1952, 1952,  907,  909, 1952,  909, 1952, 1952,  909,  747,
     1952,  747,  747, 1952,  747,  530, 1952,  530, 1952, 1952,
      530,  968, 1952,  968, 1952, 1952,  968,  970, 1952,  970,
     1952, 1952,  970,  972, 1952,  972, 1952, 1952,  972,  974,
     1952,  974, 1952, 1952,  974,  977,  977, 1952,  977, 1952,
     1952, 1952, 1952, 1952, 1952,  977,  977,  977,  977,  979,
     1952,  979, 1952, 1952,  979,  981, 1952,  981, 1952, 1952,
      981,  983, 1952,  983, 1952, 1952,  983,  985, 1952,  985,

     1952, 1952,  985,  557,  557, 1952,  557, 1952, 1952, 1952,
     1952,  557,  557,  557,  557,  557,  557,  996, 1952,  996,
     1952, 1952,  996,  998, 1952,  998, 1952, 1952,  998,   79,
     1952, 1952, 1952, 1952,   79, 1952,   79,   79,   79,   79,
     1032, 1952, 1032, 1952, 1952, 1032, 1034, 1952, 1034, 1952,
     1952, 1034, 1036, 1952, 1036, 1952, 1952, 1036, 1038, 1952,
     1038, 1952, 1952, 1038, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1091,
     1952, 1091, 1952, 1952, 1091, 1093, 1952, 1093, 1952, 1952,
     1093, 1095, 1952, 1095, 1952, 1952, 1095,   79, 1952,   79,

     1952, 1952,   79,  747, 1952,  747, 1952, 1952,  747, 1123,
     1952, 1123, 1952, 1952, 1123, 1125, 1952, 1125, 1952, 1952,
     1125, 1127, 1952, 1127, 1952, 1952, 1127, 1129, 1952, 1129,
     1952, 1952, 1129,  977,  977, 1952,  977, 1952, 1952, 1952,
     1952, 1952, 1952,  977,  977,  977,  977, 1132, 1132, 1952,
     1132, 1952, 1952, 1132, 1952, 1132, 1952, 1132, 1132, 1132,
     1132, 1138, 1952, 1138, 1952, 1952, 1138, 1140, 1952, 1140,
     1952, 1952, 1140, 1142, 1952, 1142, 1952, 1952, 1142, 1144,
     1952, 1144, 1952, 1952, 1144,  557,  557, 1952,  557, 1952,
     1952, 1952, 1952,  557,  557,  557,  557,  557,  557,   79,

     1952, 1952, 1952, 1952,   79, 1952,   79,   79,   79,   79,
     1191, 1952, 1191, 1952, 1952, 1191, 1193, 1952, 1193, 1952,
     1952, 1193, 1195, 1952, 1195, 1952, 1952, 1195, 1197, 1952,
     1197, 1952, 1952, 1197, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1242,
     1952, 1242, 1952, 1952, 1242, 1244, 1952, 1244, 1952, 1952,
     1244, 1246, 1952, 1246, 1952, 1952, 1246,  336, 1952,  336,
     1952, 1952,  336, 1132, 1132, 1952, 1132, 1952, 1952, 1132,
     1952, 1132, 1952, 1132, 1132, 1132, 1132, 1250, 1250, 1952,
     1250, 1952, 1952, 1952, 1952, 1952, 1952, 1250, 1250, 1250,

     1250, 1262, 1952, 1262, 1952, 1952, 1262, 1264, 1952, 1264,
     1952, 1952, 1264, 1266, 1952, 1266, 1952, 1952, 1266, 1268,
     1952, 1268, 1952, 1952, 1268, 1270, 1952, 1270, 1952, 1952,
     1270,  339, 1952,  339, 1952, 1952,  339,  557,  557, 1952,
      557, 1952, 1952, 1952, 1952,  557,  557,  557,  557,  557,
      557, 1282, 1952, 1282, 1952, 1952, 1282,   79, 1952, 1952,
     1952, 1952,   79, 1952,   79,   79,   79,   79, 1320, 1952,
     1320, 1952, 1952, 1320, 1322, 1952, 1322, 1952, 1952, 1322,
     1324, 1952, 1324, 1952, 1952, 1324,  378, 1952,  378, 1952,
     1952,  378, 1343, 1952, 1343, 1952, 1952, 1343, 1345, 1952,

     1345, 1952, 1952, 1345, 1351, 1952, 1351, 1952, 1952, 1351,
      552, 1952,  552, 1952, 1952,  552, 1250, 1250, 1952, 1250,
     1952, 1952, 1952, 1952, 1952, 1952, 1250, 1250, 1250, 1250,
     1356, 1356, 1952, 1356, 1952, 1952, 1952, 1952, 1356, 1356,
     1356, 1356, 1356, 1356, 1368, 1952, 1368, 1952, 1952, 1368,
     1370, 1952, 1370, 1952, 1952, 1370, 1372, 1952, 1372, 1952,
     1952, 1372, 1374, 1952, 1374, 1952, 1952, 1374, 1376, 1952,
     1376, 1952, 1952, 1376,  557, 1952,  557, 1952, 1952,  557,
      557,  557, 1952,  557, 1952, 1952, 1952, 1952,  557,  557,
      557,  557,  557,  557, 1389, 1952, 1389, 1952, 1952, 1389,

       79, 1952, 1952, 1952, 1952,   79, 1952,   79,   79,   79,
       79, 1422, 1952, 1422, 1952, 1952, 1422,  604, 1952,  604,
     1952, 1952,  604, 1436, 1952, 1436, 1952, 1952, 1436, 1438,
     1952, 1438, 1952, 1952, 1438, 1442, 1952, 1442, 1952, 1952,
     1442, 1356, 1356, 1952, 1356, 1952, 1952, 1952, 1952, 1356,
     1356, 1356, 1356, 1356, 1356, 1447, 1952, 1447, 1952, 1952,
     1447, 1449, 1952, 1449, 1952, 1952, 1449, 1460, 1952, 1460,
     1952, 1952, 1460, 1462, 1952, 1462, 1952, 1952, 1462, 1464,
     1952, 1464, 1952, 1952, 1464, 1466, 1952, 1466, 1952, 1952,
     1466, 1469, 1952, 1469, 1952, 1952, 1469,  557,  557, 1952,

      557, 1952, 1952, 1952, 1952,  557,  557,  557,  557,  557,
      557,  998, 1952,  998, 1952, 1952,  998,   79, 1952, 1952,
     1952, 1952,   79, 1952,   79,   79,   79,   79, 1506, 1952,
     1506, 1952, 1952, 1506, 1093, 1952, 1093, 1952, 1952, 1093,
       79, 1952,   79, 1952, 1952,   79, 1516, 1952, 1516, 1952,
     1952, 1516, 1518, 1952, 1518, 1952, 1952, 1518, 1521, 1521,
     1952, 1521, 1952, 1952, 1952, 1952, 1952, 1952, 1521, 1521,
     1521, 1521, 1523, 1952, 1523, 1952, 1952, 1523, 1525, 1952,
     1525, 1952, 1952, 1525, 1527, 1952, 1527, 1952, 1952, 1527,
     1529, 1952, 1529, 1952, 1952, 1529, 1356, 1356, 1952, 1356,

     1952, 1952, 1952, 1952, 1356, 1356, 1356, 1356, 1356, 1356,
     1540, 1952, 1540, 1952, 1952, 1540, 1542, 1952, 1542, 1952,
     1952, 1542, 1544, 1952, 1544, 1952, 1952, 1544,  977, 1952,
      977, 1952, 1952,  977, 1547, 1952, 1547, 1952, 1952, 1547,
     1549, 1952, 1549, 1952, 1952, 1549,  557,  557, 1952,  557,
     1952, 1952, 1952, 1952,  557,  557,  557,  557,  557,  557,
       79, 1952, 1952, 1952, 1952,   79, 1952,   79,   79,   79,
       79, 1574, 1952, 1574, 1952, 1952, 1574, 1576, 1952, 1576,
     1952, 1952, 1576, 1583, 1952, 1583, 1952, 1952, 1583,  336,
     1952,  336, 1952, 1952,  336, 1521, 1521, 1952, 1521, 1952,

     1952, 1952, 1952, 1952, 1952, 1521, 1521, 1521, 1521, 1586,
     1586, 1952, 1586, 1952, 1952, 1586, 1952, 1586, 1952, 1586,
     1586, 1586, 1586, 1590, 1952, 1590, 1952, 1952, 1590, 1592,
     1952, 1592, 1952, 1952, 1592, 1594, 1952, 1594, 1952, 1952,
     1594, 1596, 1952, 1596, 1952, 1952, 1596, 1356, 1356, 1952,
     1356, 1952, 1952, 1952, 1952, 1356, 1356, 1356, 1356, 1356,
     1356, 1607, 1952, 1607, 1952, 1952, 1607, 1132, 1952, 1132,
     1952, 1952, 1132, 1611, 1952, 1611, 1952, 1952, 1611,  339,
     1952,  339, 1952, 1952,  339,  557,  557, 1952,  557, 1952,
     1952, 1952, 1952,  557,  557,  557,  557,  557,  557,   79,

     1952, 1952, 1952, 1952,   79, 1952,   79,   79,   79,   79,
     1633, 1952, 1633, 1952, 1952, 1633,  378, 1952,  378, 1952,
     1952,  378,  552, 1952,  552, 1952, 1952,  552, 1586, 1586,
     1952, 1586, 1952, 1952, 1586, 1952, 1586, 1952, 1586, 1586,
     1586, 1586, 1641, 1952, 1641, 1952, 1952, 1641, 1643, 1952,
     1643, 1952, 1952, 1643, 1645, 1952, 1645, 1952, 1952, 1645,
     1647, 1952, 1647, 1952, 1952, 1647, 1649, 1952, 1649, 1952,
     1952, 1649, 1250, 1952, 1250, 1952, 1952, 1250, 1356, 1356,
     1952, 1356, 1952, 1952, 1952, 1952, 1356, 1356, 1356, 1356,
     1356, 1356, 1662, 1952, 1662, 1952, 1952, 1662,  557, 1952,

      557, 1952, 1952,  557,  557,  557, 1952,  557, 1952,  557,
      557, 1952,  557,  557,  557,  557,  557,  557,   79, 1952,
     1952, 1952, 1952,   79, 1952,   79,   79,   79,   79,  604,
     1952,  604, 1952, 1952,  604, 1683, 1952, 1683, 1952, 1952,
     1683, 1685, 1952, 1685, 1952, 1952, 1685, 1687, 1952, 1687,
     1952, 1952, 1687, 1689, 1952, 1689, 1952, 1952, 1689, 1691,
     1952, 1691, 1952, 1952, 1691, 1356, 1952, 1356, 1952, 1952,
     1356, 1356, 1356, 1952, 1356, 1952, 1952, 1952, 1952, 1356,
     1356, 1356, 1356, 1356, 1356, 1704, 1952, 1704, 1952, 1952,
     1704, 1706, 1952, 1706, 1952, 1952, 1706,  557,  557, 1952,

      557, 1952, 1952, 1952, 1952,  557,  557,  557,  557,  557,
      557, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1710, 1710,   79, 1952, 1952, 1952,
     1952,   79, 1952,   79,   79,   79,   79, 1717, 1952, 1717,
     1952, 1952, 1717, 1719, 1952, 1719, 1952, 1952, 1719, 1721,
     1952, 1721, 1952, 1952, 1721, 1723, 1952, 1723, 1952, 1952,
     1723, 1726, 1952, 1726, 1952, 1952, 1726, 1735, 1952, 1735,
     1952, 1952, 1735,  977, 1952,  977, 1952, 1952,  977, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1710, 1710, 1710, 1710, 1710, 1710,

     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1750,
     1952, 1750, 1952, 1952, 1750, 1752, 1952, 1752, 1952, 1952,
     1752, 1754, 1952, 1754, 1952, 1952, 1754, 1521, 1952, 1521,
     1952, 1952, 1521, 1757, 1952, 1757, 1952, 1952, 1757, 1759,
     1952, 1759, 1952, 1952, 1759, 1132, 1952, 1132, 1952, 1952,
     1132, 1776, 1952, 1776, 1952, 1952, 1776, 1778, 1952, 1778,
     1952, 1952, 1778, 1780, 1952, 1780, 1952, 1952, 1780,   79,
     1952, 1952, 1952, 1952,   79, 1952,   79,   79,   79,   79,
     1785, 1952, 1785, 1952, 1952, 1785, 1586, 1952, 1586, 1952,
     1952, 1586, 1789, 1952, 1789, 1952, 1952, 1789, 1250, 1952,

     1250, 1952, 1952, 1250, 1356, 1356, 1952, 1356, 1952, 1952,
     1952, 1952, 1356, 1356, 1356, 1356, 1356, 1356, 1801, 1952,
     1801, 1952, 1952, 1801, 1803, 1952, 1803, 1952, 1952, 1803,
     1805, 1952, 1805, 1952, 1952, 1805, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1809, 1952, 1809, 1952, 1952, 1809, 1811, 1952, 1811,
     1952, 1952, 1811,   79, 1952, 1952, 1952, 1952,   79, 1952,
       79,   79,   79,   79, 1818, 1952, 1818, 1952, 1952, 1818,
     1356, 1952, 1356, 1952, 1952, 1356, 1829, 1952, 1829, 1952,
     1952, 1829, 1831, 1952, 1831, 1952, 1952, 1831, 1835, 1952,

     1835, 1952, 1952, 1835, 1837, 1952, 1837, 1952, 1952, 1837,
       79, 1952, 1952, 1952, 1952,   79, 1952,   79,   79,   79,
       79, 1840, 1952, 1840, 1952, 1952, 1840, 1842, 1952, 1842,
     1952, 1952, 1842, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1849, 1952,
     1849, 1952, 1952, 1849, 1851, 1952, 1851, 1952, 1952, 1851,
     1853, 1952, 1853, 1952, 1952, 1853, 1855, 1952, 1855, 1952,
     1952, 1855, 1857, 1952, 1857, 1952, 1952, 1857, 1521, 1952,
     1521, 1952, 1952, 1521, 1860, 1860, 1860, 1860, 1860, 1860,
     1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1869,

     1952, 1869, 1952, 1952, 1869, 1871, 1952, 1871, 1952, 1952,
     1871, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1710, 1710, 1586, 1952, 1586, 1952,
     1952, 1586, 1883, 1952, 1883, 1952, 1952, 1883, 1885, 1952,
     1885, 1952, 1952, 1885, 1887, 1952, 1887, 1952, 1952, 1887,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1890, 1952, 1890, 1952, 1952,
     1890, 1894, 1952, 1894, 1952, 1952, 1894, 1896, 1952, 1896,
     1952, 1952, 1896, 1898, 1952, 1898, 1952, 1952, 1898, 1902,
     1952, 1902, 1952, 1952, 1902, 1904, 1952, 1904, 1952, 1952,

     1904, 1908, 1952, 1908, 1952, 1952, 1908, 1910, 1952, 1910,
     1952, 1952, 1910, 1914, 1952, 1914, 1952, 1952, 1914, 1916,
     1952, 1916, 1952, 1952, 1916, 1920, 1952, 1920, 1952, 1952,
     1920, 1922, 1952, 1922, 1952, 1952, 1922, 1924, 1952, 1924,
     1952, 1952, 1924, 1855, 1952, 1855, 1952, 1952, 1855, 1927,
     1952, 1927, 1952, 1952, 1927, 1929, 1952, 1929, 1952, 1952,
     1929, 1931, 1952, 1931, 1952, 1952, 1931, 1933, 1952, 1933,
     1952, 1952, 1933, 1871, 1952, 1871, 1952, 1952, 1871, 1936,
     1952, 1936, 1952, 1952, 1936, 1938, 1952, 1938, 1952, 1952,
     1938, 1942, 1952, 1942, 1952, 1952, 1942, 1944, 1952, 1944,

     1952, 1952, 1944, 1946, 1952, 1946, 1952, 1952, 1946, 1948,
     1952, 1948, 1952, 1952, 1948,    9, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952
    } ;

static const flex_int16_t yy_chk[8910] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    5,    6,    7,    8,    2,   17,

       17,    2,    7,    8,   18,    5,    6,   11,   23,   11,
       11,   11,   11,   13,   25,   13,   13,   13,   13,   14,
       22,   14,   22,   34,   34,   23,   18,   23,   27,   25,
       25,   25,   26,   27,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   32,   36,   41,   27,   41,  283,  283,
       37,    5,    6,    7,    8,   37,   39,   44,   48,   45,
       50,   55,   63,   32,   45,   32,   32,   51,   36,   50,
       55,   52,   44,   48,   44,   48,   39,   51,   50,   44,
       45,   44,   53,   23,   51,   48,  171,   25,   28,   52,
       28,   28,   28,   28,   28,   28,   28,   28,   28,  171,

       53,   37,   61,  162,   37,   39,   53,   28,   59,   80,
       28,   61,  162,   28,   28,   28,   28,   28,   63,  163,
      357,   59,   28,   46,   28,   28,   59,  357,   46,  109,
       28,   59,   49,   28,  163,   46,   28,   49,   80,   28,
       28,   46,   28,   65,   28,   49,   28,   49,  120,   92,
       49,   28,   54,   58,   28,   49,   28,   29,   58,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  182,   54,
       65,  109,   65,   54,   58,   54,   92,  101,  101,   29,
       47,  387,   29,   29,   29,   29,   29,  164,  387,   47,
      120,   29,  182,   47,   29,  132,  164,  132,   47,   29,

      165,  103,  103,   47,   58,   29,   57,   58,   29,   29,
      103,   29,  133,   29,  133,   29,  165,  101,   57,   57,
       29,   58,  135,  176,  135,   29,   35,   57,  103,   57,
       35,   35,  176,   35,   57,   35,   35,  167,   35,  103,
       35,   42,   42,   42,   42,   56,   42,   42,  138,   42,
      138,   42,   35,   35,   35,   42,   42,   56,   56,  152,
      167,   60,   42,  367,  152,   42,   60,  168,   56,   56,
      140,   56,  140,   60,   60,  160,  173,   35,   35,  168,
       35,   66,   35,   66,   66,   66,   66,  367,  161,   66,
       67,   67,  173,  160,   75,   67,   75,   75,   75,   75,

       76,  175,   76,   76,   76,   76,  161,  136,   35,   35,
      152,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       72,   72,  172,  175,  136,   72,  136,   72,  139,  139,
      172,  139,   72,  137,   99,   99,   99,   99,   99,   99,
       99,   72,   72,   72,   72,   72,   72,   72,  137,  295,
      137,   99,  102,  295,  102,   72, 1896,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  174,  106,   99,  141,
      141,  141,  110,   72,   99,  106,  166,   99,   72,  143,
      144,  143,  144,   72,   72,  181,  180,   72,   72,  174,
      147,  110,  147,  106,  166,   72,  180,  102,   99,   72,

      447,   72,   72,   72,  106,   72,   78,  181,  110,  184,
       78,   78,  447,   78,  110,   78,   78,  110,   78,  100,
       78,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      185,  184,   78,   78,   78,  185,  159,  104,  110,  104,
      104,  100,  177,  207,  111,  117,  104,  108,  108,  108,
      108,  159,  111,  117,  185,  183,  207,   78,   78,  159,
       78,  100,  193,  104,  177,  177,  104,  100,  104,  111,
      111,  117,  187,  108,  108,  104,  108,  186,  108,  114,
      114,  111,  117,  183,  186,  193,  206,  187,  114,   78,
       94,   94,   94,   94,   94,   94,   94,   94,   94,  192,

      186,  189,  119,  119,  119,  119,  114,  188,  206,   94,
       94,   94, 1897,  121,   94,   94,  192,  114,   94,  189,
      105,  121,  105,  203,  188,  105,  105,  178,  119,  119,
       94,  119,  178,  119,  188,   94,   94,   94,  121,  121,
       94,  203,   94,  105,  105,  178,  196,   94,  191,  197,
      121,  105, 1899,   94,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  196,  190,  112,  197,  112,  198,  105,
      112,  112,  195,   98,   98,   98,  191,  199,   98,   98,
      105,  115,   98,  115,  115,  190,  199,  195,  112,  218,
      115,  198,  205,  217,   98,  195,  112,  205,  217,   98,

       98,   98,  218,  116,   98,  116,   98,  115,  116,  116,
      115,   98,  115,  205,  112,  201,  112,   98,  122,  115,
      122,  179,  213,  122,  122,  112,  116,  116,  202,  204,
      179,  179,  208,  211,  116,  202,  212,  841,  179,  202,
      204,  122,  179,  201,  209,  179,  214,  202,  220,  122,
      202,  202,  116,  208,  215,  212,  356,  210,  204,  214,
      209,  211,  210,  116,  243,  841,  243,  122,  214,  122,
      221,  220,  356,  213,  216,  215,  213,  219,  122,  153,
      153,  153,  153,  153,  153,  210,  219,  216,  360,  216,
      219,  221,  226,  360,  226,  226,  226,  226,  227,  227,

      226,  234,  234,  227, 1902,  353,  234,  229,  229,  244,
      280,  244,  229,  246,  249,  246,  249,  268,  353,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  153,  247,  359,
      153,  250,  250,  268,  250,  153,  251,  153,  251,  252,
      252,  252,  280,  153,  153,  247,  359,  247,  153,  248,
      277,  153,  169,  287,  237,  237,  237,  237,  237,  237,
      237,  169,  373,  254,  248,  254,  248,  255,  169,  255,
      256,  373,  256,  169,  169,  169,  277,  169,  169,  231,
      231,  169,  287,  169,  231,  333,  231,  333,  289,  169,

      169,  169,  169,  169,  237,  317,  369,  289,  291,  317,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  302,  264,
      324,  264,  293,  369,  264,  264,  289,  291,  263,  263,
      263,  300,  300,  263,  263,  354,  273,  263,  273,  293,
      422,  273,  273,  362,  302,  264,  324,  264,  362,  263,
      264,  293,  264,  354,  263,  263,  263,  309,  300,  263,
      380,  263,  273,  422,  273,  303,  263,  273,  265,  273,
      265,  380,  263,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  266,  267,  266,  267,  309,  266,  266,  267,

      303,  303,  267,  298,  275,  313,  275,  355,  384,  275,
      275,  298,  334,  311,  334,  266, 1903,  384,  397,  267,
      358,  267,  311,  265,  397,  355,  267,  275,  299,  298,
      325,  267,  322,  322,  313,  315,  299,  267,  358,  337,
      298,  266,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  311,  315,  275,  299,  325,  325,  340,  374,  322,
      413,  272,  272,  272,  315,  299,  272,  272,  337,  361,
      272,  374,  376,  279,  363,  279,  279,  279,  279,  279,
      279,  279,  272,  364,  368,  376,  340,  272,  272,  272,
      361,  276,  272,  276,  272,  363,  413,  276,  364,  272,

      276,  274,  368,  274,  406,  272,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  279,  365,  276,  412,  276,
      365,  278,  278,  278,  276,  320,  278,  278,  406,  276,
      278,  412, 1904,  320,  379,  276,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  372,  274,  278,  278,  278,
      372,  320,  278,  385,  278,  301,  281,  301,  385,  278,
      301,  301,  320,  379,  371,  278,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  415,  281,  375,  301,  301,
      371,  371,  281,  282,  282,  286,  370,  286,  415,  375,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  388,

      390,  370,  366,  321,  301,  375,  282,  282,  282,  282,
      282,  321,  377,  383, 1163,  282,  389,  366,  282,  386,
      388,  390,  437,  282,  366,  366,  366,  391,  386,  321,
      377,  383,  282,  282,  389,  282,  290,  282,  290,  282,
      321,  290,  290,  392,  282,  391,  393, 1163,  420,  282,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  394,
      290,  420,  398,  395,  393,  392,  392,  290,  395,  285,
      393,  285,  401,  437,  285,  285,  394,  294,  285,  294,
      396,  398,  294,  294,  404,  396,  405,  304,  401,  304,
      285,  405,  304,  304,  399,  285,  290,  285,  400,  404,

      285,  407,  285,  399,  400, 1905,  407,  285,  294,  411,
      304,  409,  418,  285,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  402,  403, 1908,  410,  411,  294,  408,
      409,  418,  402,  403,  408,  410,  304,  294,  304,  306,
      414,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      417,  414,  408,  417,  308,  441,  433,  306,  306,  306,
      306,  306,  306,  441,  306,  306,  306,  306,  306,  433,
      416,  419,  312,  306,  312,  425,  306,  312,  312,  416,
      421,  306,  423,  306,  306,  306,  306,  306,  306,  419,
      306,  306,  425,  306,  424,  306,  312,  306,  421,  316,

      426,  316,  306,  312,  316,  316,  423,  306,  427,  426,
      429,  323,  428,  323,  430,  424,  323,  323,  326,  432,
      326,  435,  442,  326,  326,  438,  440,  442,  432,  429,
      316,  427,  312,  436,  323,  323,  428,  430,  443,  431,
      435,  326,  436,  438,  443,  439, 1909, 1910,  431,  440,
      316,  339,  339,  339,  339,  339,  339,  431,  439,  316,
      323,  341,  341,  341,  341,  341,  341,  326,  445,  326,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  451,
      451,  339,  444,  476,  451,  445,  451,  476,  448,  446,
      538,  341,  342,  342,  342,  342,  342,  342,  343,  343,

      343,  343,  343,  343,  446,  444,  448, 1911,  341,  339,
      327,  338,  338,  338,  338,  338,  338,  452,  463,  341,
      463,  585,  342,  452,  464,  481,  464,  481,  343,  488,
      481,  481,  538,  344,  344,  344,  344,  344,  344,  585,
      345,  345,  345,  345,  345,  345,  574,  484,  515,  484,
      342, 1298,  484,  484,  494,  488,  343,  574,  494,  342,
      499,  343,  499,  344,  517,  499,  499,  523,  517,  338,
      345,  523,  338,  484,  515,  484,  575,  338,  484,  338,
      484,  578,  520,  521, 1298,  338,  338,  526,  502,  502,
      338,  344,  575,  338,  578,  577,  344,  502,  345,  346,

      346,  346,  346,  346,  346,  347,  347,  347,  347,  347,
      347,  520,  521,  526,  577,  502,  345,  588,  453,  453,
      453,  453,  453,  453,  453,  597,  502,  527,  541,  346,
      547,  597,  541,  588,  547,  347,  454,  454,  454,  454,
      454,  454,  454,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  587,  527,  486, 1914,  486,  346,  453,  486,
      486,  576,  475,  347,  475,  587,  346,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  576,  486,  544,  545,
      347,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  550,

      474,  551,  474,  486,  642,  474,  474,  544,  545,  474,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  579,
      580,  474,  591,  594,  579,  550,  474,  551,  474,  580,
      482,  474,  553,  474,  487,  591,  487,  595,  474,  642,
      487,  594,  595,  487,  474,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  559,  507,  507,  507,  507,  600,
      487,  553,  487,  505,  483,  483,  483,  487,  509,  483,
      483,  505,  487,  483,  528, 1915,  509,  581,  487,  598,
      600,  507,  507,  559,  507,  483,  507,  528,  581,  505,
      483,  483,  483,  509,  509,  483,  583,  483,  582,  589,

      505,  598,  483,  528,  485,  509,  485,  582,  483,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  493,  583,
      493,  590,  589,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  593,  694,  586,  590,  615,  694,  586,  529,  485,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  584,
      504,  529,  504,  586,  593,  504,  504,  615,  584,  492,
      601,  492,  500,  616,  492,  492,  649,  529,  492,  503,
      616,  503,  503,  504,  504,  531,  531,  592,  503,  601,
      492,  504,  611,  534,  531,  492,  603,  492,  649,  602,

      492,  534,  492,  592,  592,  503,  611,  492,  503,  504,
      503,  603,  531,  492,  501,  501,  602,  503,  605,  534,
      504,  596,  510,  531,  510,  608,  620,  510,  510,  512,
      534,  512,  599,  610,  512,  512,  596,  501,  501,  501,
      501,  501,  608,  599,  596,  510,  501,  605,  617,  501,
      620,  880,  619,  510,  501,  512,  610,  512,  618,  621,
      512,  880,  512,  501,  501,  619,  501,  613,  501,  617,
      501,  510,  513,  510,  513,  501,  621,  513,  513,  613,
      501,  618,  510,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  622,  623,  514,  513,  514,  626, 1916,  624,

      514,  625,  511,  514,  511,  624,  626,  511,  511,  628,
      532,  511,  532,  532,  633,  622,  625,  623,  630,  532,
      514,  513,  514,  511,  628,  634,  660,  514,  511,  633,
      511,  660,  514,  511,  667,  511,  532,  630,  514,  532,
      511,  532,  631,  636,  634,  667,  511,  530,  532,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  636,  536,
      536,  536,  536,  631,  632,  530,  530,  530,  530,  530,
      530,  638,  530,  530,  530,  530,  530,  635,  702,  655,
      638,  530,  702,  718,  530,  536,  536,  632,  536,  530,
      536,  530,  530,  530,  530,  530,  530,  655,  530,  530,

      635,  530,  533,  530,  533,  530,  539,  533,  533,  637,
      530,  535,  718,  535,  539,  530,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  533,  533,  645,  648,  639,
      637,  539,  539,  533,  540,  641,  540,  644,  646,  540,
      540,  662,  650,  539,  556,  556,  556,  556,  556,  556,
      639,  533,  641,  648,  645,  647,  535,  540,  653,  662,
      644,  646,  533,  650,  647,  540,  557,  557,  557,  557,
      557,  557,  651, 1917,  556,  562,  562,  562,  562,  562,
      562,  653,  652,  540,  722,  540,  563,  563,  563,  563,
      563,  563,  663,  651,  540,  654,  557,  564,  564,  564,

      564,  564,  564,  652,  654,  562,  565,  565,  565,  565,
      565,  565,  656,  722,  666,  663,  563,  566,  566,  566,
      566,  566,  566,  657,  557,  656,  658,  564,  661,  668,
      657,  666,  805,  562,  671,  658,  565,  567,  567,  567,
      567,  567,  567,  659,  563,  670,  677,  566,  805,  671,
      659,  562,  677,  668,  661,  564,  664,  568,  568,  568,
      568,  568,  568,  563,  565,  664,  665,  567,  670,  674,
      564,  692,  693,  712,  665,  566,  672,  676,  674,  665,
      676,  714,  733,  566,  665,  714,  672,  568,  707,  826,
      707, 1920,  565,  707,  707,  567,  566,  692,  693,  712,

      672,  678,  678,  678,  678,  678,  678,  678,  733,  713,
      769,  692,  693,  712,  567,  568,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  826,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  713,  769,  568,  801,  568,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  713,
      726,  720,  734,  724,  726,  801,  731,  731,  738,  689,
      720,  689,  738,  813,  689,  689,  708,  721,  689,  721,
      724, 1921,  721,  721,  736,  736,  729,  734,  734,  822,
      689,  813,  724,  731,  729,  689,  750,  689,  822,  720,
      689,  721,  689,  730,  732,  751,  732,  689,  721,  732,

      732,  730,  729,  689,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  729,  736,  750,  755,  732,  732,  730,
     1056,  747,  753,  700,  751,  700,  802,  721,  700,  700,
      730,  753,  700,  749,  747,  725,  807,  725,  759,  802,
      725,  725,  759,  732,  700,  755,  749,  811, 1056,  700,
      747,  700,  811,  743,  700,  743,  700,  807,  743,  743,
      753,  700,  749,  701, 1922,  701,  725,  700,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  725,  735,  770,  735,
      757,  808,  735,  735,  804,  725,  709,  806,  709,  767,

      767,  709,  709,  821,  808,  709,  754,  757,  754,  804,
      735,  754,  754,  770,  770,  810,  809,  709,  812,  757,
      806,  815,  709,  812,  709,  821,  767,  709,  810,  709,
      754, 1923,  815,  818,  709,  851,  735,  754,  735,  809,
      709,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      748,  818,  748,  851,  814,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  762,  758,  754,  758,  763,  814,
      758,  758,  762,  820,  816,  823,  763,  816,  819,  817,
      823,  744,  827,  852,  781,  781,  781,  781,  781,  781,
      762,  827,  820,  819,  763,  748,  758,  768,  852,  768,

      817,  762,  768,  768,  824,  763,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  824,  758, 1924, 1925,  833,
      768,  768,  829,  825,  833,  758,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  771,  825,  771,  828,  829,
      771,  771,  781,  830,  831,  765,  768,  765,  843,  832,
      765,  765,  830,  831,  765,  844,  843,  840,  771,  845,
      848,  828,  840,  858,  844,  849,  765,  853,  845,  859,
      854,  765,  832,  765, 1926,  840,  765,  848,  765,  854,
      858,  859,  853,  765,  771,  766,  771,  766,  849,  765,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  788,

      788,  788,  788,  788,  788,  789,  789,  789,  789,  789,
      789,  857,  790,  790,  790,  790,  790,  790,  791,  791,
      791,  791,  791,  791,  856,  862, 1927,  864,  860,  788,
      863,  862,  864,  856,  857,  789,  792,  792,  792,  792,
      792,  792,  790,  860,  866,  863,  869,  867,  791,  866,
      793,  793,  793,  793,  793,  793,  867,  788,  873,  876,
      874,  862,  868,  789,  869,  879,  792,  873,  881,  884,
      790,  885,  876,  879, 1014,  881,  791, 1014,  788,  885,
      793,  884,  791,  874,  789,  790,  794,  794,  794,  794,
      794,  794,  868,  877,  792,  795,  795,  795,  795,  795,

      795,  796,  796,  796,  796,  796,  796,  792,  793,  875,
      877,  882,  883,  886,  887,  890,  794,  793,  891,  894,
      892,  886,  895,  899,  890,  795,  891,  895,  896,  883,
      892,  796,  875,  897,  882,  901,  894,  898,  887,  921,
      899,  896,  897,  921,  794, 1016, 1006, 1024, 1016,  912,
      919,  920,  926,  795,  933,  898,  930,  934,  901,  796,
      930,  939,  795, 1006, 1007,  794,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  912,  919,  920,  926,  940,
      936,  796, 1024,  933,  936, 1013,  934,  939, 1007,  912,
      919,  920,  926,  925,  925,  925,  925,  925,  925,  925,

      925,  925, 1013,  942,  943,  940,  911,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  944,  952, 1001,  955,
      944,  952,  956,  959,  966, 1001,  916,  967,  916,  942,
      943,  916,  916,  925,  963,  916,  978, 1000,  963, 1008,
     1003, 1026, 1000,  942,  943, 1003, 1008,  916,  955,  959,
      966,  956,  916,  967,  916, 1000, 1005,  916, 1002,  916,
     1009, 1928, 1026, 1022,  916,  978, 1022, 1002, 1009, 1005,
      916,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  958,
      958,  958,  958,  958,  958,  958,  958,  958, 1004,  949,

     1004,  949, 1028, 1004,  949,  949, 1011, 1028,  949, 1015,
      960, 1018,  960, 1010, 1020,  960,  960, 1012, 1041, 1017,
      949, 1030, 1015, 1023, 1011,  949, 1018,  949, 1041,  958,
      949, 1020,  949,  960, 1004, 1012, 1010,  949, 1019,  950,
     1023,  950, 1017,  949,  950,  950,  950,  950,  950,  950,
      950,  950,  950, 1058,  961, 1021,  961, 1030, 1929,  960,
      961, 1019, 1025,  961,  976,  976,  976,  976,  976,  976,
     1027,  977,  977,  977,  977,  977,  977, 1025, 1021, 1027,
      961, 1029,  961, 1072, 1043, 1048, 1072,  961,  977, 1074,
     1058, 1050,  961, 1043, 1930, 1048, 1031, 1074,  961, 1029,

     1050,  987,  987,  987,  987,  987,  987,  988,  988,  988,
      988,  988,  988,  989,  989,  989,  989,  989,  989, 1031,
     1040, 1042,  976,  990,  990,  990,  990,  990,  990,  977,
      977,  987, 1046, 1055, 1049, 1057, 1932,  988, 1047, 1053,
     1042, 1060, 1040,  989, 1061,  991,  991,  991,  991,  991,
      991, 1047, 1053,  990, 1055, 1064, 1046, 1049, 1060,  987,
     1066, 1076, 1083, 1084, 1076,  988, 1068, 1061,  987, 1066,
     1057,  989, 1065, 1068,  988,  991, 1064, 1083, 1084, 1077,
     1082,  990,  992,  992,  992,  992,  992,  992, 1077, 1082,
      990, 1934, 1079, 1065,  989, 1100,  993,  993,  993,  993,

      993,  993, 1079,  991,  994,  994,  994,  994,  994,  994,
     1078, 1086,  992,  995,  995,  995,  995,  995,  995, 1087,
     1115, 1100, 1935, 1937, 1115,  991,  993, 1107, 1157, 1134,
     1162, 1165, 1086, 1078,  994, 1100, 1165, 1156, 1157, 1159,
      992, 1160, 1087,  995, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1107,  993, 1120, 1160, 1120, 1134, 1156,
     1120, 1120,  994,  992, 1170, 1162, 1159, 1107, 1164, 1939,
     1161,  995,  993, 1167, 1161, 1164, 1167, 1174, 1168, 1170,
      995, 1168,  994, 1174, 1099, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1121, 1121, 1121, 1121, 1121, 1121,

     1121, 1121, 1121, 1166, 1111, 1161, 1111, 1171, 1172, 1111,
     1111, 1208, 1171, 1111, 1131, 1131, 1131, 1131, 1131, 1131,
     1176, 1175, 1940, 1179, 1166, 1111, 1172, 1177, 1189, 1208,
     1111, 1131, 1111, 1176, 1121, 1111, 1177, 1111, 1178, 1186,
     1169, 1178, 1111, 1169, 1175, 1179, 1182, 1186, 1111, 1132,
     1132, 1132, 1132, 1132, 1132, 1182, 1183, 1146, 1146, 1146,
     1146, 1146, 1146, 1189, 1941, 1211, 1132, 1147, 1147, 1147,
     1147, 1147, 1147, 1131, 1169, 1148, 1148, 1148, 1148, 1148,
     1148, 1181, 1184, 1185, 1181, 1184, 1183, 1146, 1149, 1149,
     1149, 1149, 1149, 1149, 1188, 1211, 1185, 1147, 1150, 1150,

     1150, 1150, 1150, 1150, 1188, 1148, 1190, 1132, 1132, 1133,
     1133, 1133, 1133, 1133, 1133, 1146, 1187, 1201, 1149, 1190,
     1204, 1203, 1219, 1225, 1187, 1147, 1201, 1219, 1150, 1180,
     1203, 1225, 1147, 1148, 1942, 1180, 1943, 1204, 1146, 1151,
     1151, 1151, 1151, 1151, 1151, 1148, 1149, 1217, 1209, 1149,
     1152, 1152, 1152, 1152, 1152, 1152, 1150, 1153, 1153, 1153,
     1153, 1153, 1153, 1150, 1202, 1180, 1209, 1133, 1217, 1151,
     1133, 1214, 1218, 1227, 1222, 1133, 1251, 1133, 1221, 1229,
     1152, 1944, 1227, 1133, 1133, 1236, 1202, 1153, 1133, 1214,
     1238, 1133, 1229, 1221, 1238, 1218, 1222, 1151, 1154, 1154,

     1154, 1154, 1154, 1154, 1287, 1251, 1287, 1296, 1152, 1287,
     1294, 1236, 1237, 1288, 1290, 1153, 1152, 1291, 1295, 1297,
     1945, 1151, 1296, 1295, 1293, 1236, 1305, 1294, 1154, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1237, 1153,
     1287, 1290, 1302, 1288, 1291, 1293, 1250, 1250, 1250, 1250,
     1250, 1250, 1237, 1305, 1297, 1300, 1154, 1301, 1252, 1252,
     1252, 1252, 1252, 1252, 1154, 1299, 1302, 1301, 1299, 1234,
     1249, 1249, 1249, 1249, 1249, 1249, 1250, 1318, 1300, 1253,
     1253, 1253, 1253, 1253, 1253, 1304, 1309, 1308, 1252, 1303,
     1254, 1254, 1254, 1254, 1254, 1254, 1255, 1255, 1255, 1255,

     1255, 1255, 1304, 1306, 1250, 1252, 1306, 1318, 1307, 1253,
     1256, 1256, 1256, 1256, 1256, 1256, 1252, 1303, 1314, 1319,
     1254, 1307, 1308, 1309, 1311, 1314, 1255, 1311, 1249, 1312,
     1313, 1249, 1312, 1313, 1319, 1334, 1249, 1253, 1249, 1315,
     1256, 1331, 1315, 1328, 1249, 1249, 1253, 1317, 1254, 1249,
     1317, 1327, 1249, 1254, 1255, 1946, 1334, 1330, 1331, 1255,
     1257, 1257, 1257, 1257, 1257, 1257, 1330, 1328, 1256, 1327,
     1258, 1258, 1258, 1258, 1258, 1258, 1273, 1273, 1273, 1273,
     1273, 1273, 1337, 1338, 1342, 1358, 1256, 1393, 1391, 1332,
     1257, 1274, 1274, 1274, 1274, 1274, 1274, 1392, 1339, 1342,

     1258, 1338, 1394, 1397, 1337, 1412, 1273, 1275, 1275, 1275,
     1275, 1275, 1275, 1332, 1358, 1400, 1404, 1401, 1257, 1404,
     1393, 1274, 1339, 1391, 1399, 1403, 1347, 1257, 1258, 1394,
     1402, 1397, 1392, 1400, 1273, 1412, 1407, 1275, 1276, 1276,
     1276, 1276, 1276, 1276, 1401, 1258, 1399, 1947, 1403, 1274,
     1404, 1948, 1347, 1405, 1274, 1407, 1405, 1402, 1273, 1277,
     1277, 1277, 1277, 1277, 1277, 1275, 1347, 1406, 1276, 1278,
     1278, 1278, 1278, 1278, 1278, 1279, 1279, 1279, 1279, 1279,
     1279, 1408, 1409, 1411, 1408, 1409, 1275, 1949, 1414, 1277,
     1406, 1414, 1415, 1417, 1418, 1419, 1276, 1418, 1419, 1278,

     1420, 1411, 1426, 1420, 1421, 1279, 1280, 1280, 1280, 1280,
     1280, 1280, 1426, 1421, 1427, 1415, 1417, 1277, 1430, 1433,
     1276, 1432, 1277, 1479, 1484, 1485, 1433, 1278, 1434, 1430,
     1427, 1487, 1485, 1279, 1489, 1486, 1280, 1281, 1281, 1281,
     1281, 1281, 1281, 1432, 1434, 1950, 1484, 1491, 1278, 1495,
     1491, 1951, 1495, 1479, 1281, 1496, 1492, 1279, 1355, 1355,
     1355, 1355, 1355, 1355, 1280, 1492, 1487, 1281, 1486, 1489,
     1490, 1895, 1496, 1280, 1356, 1356, 1356, 1356, 1356, 1356,
     1361, 1361, 1361, 1361, 1361, 1361, 1580, 1894, 1355, 1362,
     1362, 1362, 1362, 1362, 1362, 1281, 1281, 1363, 1363, 1363,

     1363, 1363, 1363, 1490, 1356, 1503, 1500, 1580, 1493, 1500,
     1361, 1364, 1364, 1364, 1364, 1364, 1364, 1493, 1494, 1362,
     1365, 1365, 1365, 1365, 1365, 1365, 1504, 1363, 1503, 1504,
     1509, 1511, 1356, 1510, 1522, 1513, 1494, 1512, 1361, 1509,
     1511, 1364, 1512, 1494, 1513, 1510, 1559, 1362, 1568, 1560,
     1365, 1559, 1560, 1568, 1891, 1363, 1361, 1366, 1366, 1366,
     1366, 1366, 1366, 1522, 1561, 1587, 1362, 1561, 1558, 1364,
     1363, 1367, 1367, 1367, 1367, 1367, 1367, 1558, 1365, 1380,
     1380, 1380, 1380, 1380, 1380, 1581, 1365, 1366, 1381, 1381,
     1381, 1381, 1381, 1381, 1587, 1562, 1890, 1364, 1562, 1365,

     1581, 1367, 1382, 1382, 1382, 1382, 1382, 1382, 1563, 1380,
     1565, 1563, 1621, 1565, 1570, 1366, 1567, 1570, 1381, 1383,
     1383, 1383, 1383, 1383, 1383, 1571, 1567, 1573, 1571, 1367,
     1573, 1623, 1382, 1621, 1366, 1622, 1624, 1380, 1384, 1384,
     1384, 1384, 1384, 1384, 1625, 1627, 1381, 1628, 1627, 1383,
     1622, 1367, 1629, 1367, 1623, 1629, 1889, 1628, 1380, 1624,
     1382, 1385, 1385, 1385, 1385, 1385, 1385, 1625, 1384, 1381,
     1386, 1386, 1386, 1386, 1386, 1386, 1626, 1383, 1382, 1387,
     1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388, 1388,
     1388, 1385, 1630, 1636, 1383, 1630, 1384, 1888, 1716, 1626,

     1386, 1714, 1388, 1444, 1444, 1444, 1444, 1444, 1444, 1387,
     1714, 1716, 1669, 1886, 1885, 1388, 1636, 1384, 1669, 1385,
     1451, 1451, 1451, 1451, 1451, 1451, 1671, 1715, 1386, 1452,
     1452, 1452, 1452, 1452, 1452, 1386, 1385, 1387, 1453, 1453,
     1453, 1453, 1453, 1453, 1388, 1748, 1884, 1815, 1715, 1671,
     1451, 1883, 1880, 1747, 1387, 1678, 1748, 1815, 1974, 1452,
     1974, 1444, 1454, 1454, 1454, 1454, 1454, 1454, 1453, 1669,
     1455, 1455, 1455, 1455, 1455, 1455, 1747, 1678, 1451, 1456,
     1456, 1456, 1456, 1456, 1456, 1749, 1879, 1452, 1709, 1980,
     1878, 1980, 1454, 1982, 1709, 1982, 1453, 1874, 1873, 1451,

     1455, 1457, 1457, 1457, 1457, 1457, 1457, 1749, 1452, 1456,
     1872, 1453, 1458, 1458, 1458, 1458, 1458, 1458, 1679, 1870,
     1454, 1782, 1868, 1679, 1710, 1988, 1454, 1988, 1455, 1867,
     1710, 1457, 1866, 1679, 1738, 1859, 1858, 1456, 1784, 1782,
     1738, 1455, 1458, 1857, 1856, 1709, 1456, 1459, 1459, 1459,
     1459, 1459, 1459, 1471, 1471, 1471, 1471, 1471, 1471, 1457,
     1854, 1784, 1472, 1472, 1472, 1472, 1472, 1472, 1852, 1851,
     1458, 1618, 1618, 1618, 1618, 1618, 1618, 1459, 1618, 1458,
     1457, 1710, 1850, 1471, 1473, 1473, 1473, 1473, 1473, 1473,
     1849, 1738, 1472, 1474, 1474, 1474, 1474, 1474, 1474, 1666,

     1666, 1666, 1666, 1666, 1666, 1459, 1666, 1807, 1990, 1843,
     1990, 1471, 1842, 1807, 1473, 1992, 1994, 1992, 1994, 1996,
     1472, 1996, 2006, 1474, 2006, 1841, 1840, 1459, 1471, 1472,
     1475, 1475, 1475, 1475, 1475, 1475, 1520, 1520, 1520, 1520,
     1520, 1520, 1473, 1476, 1476, 1476, 1476, 1476, 1476, 1839,
     1838, 1474, 1477, 1477, 1477, 1477, 1477, 1477, 1837, 1825,
     1475, 2008, 1836, 2008, 1807, 1825, 1473, 1521, 1521, 1521,
     1521, 1521, 1521, 1476, 1835, 1474, 1531, 1531, 1531, 1531,
     1531, 1531, 1477, 1832, 1521, 1827, 1831, 1845, 1475, 1846,
     2015, 1827, 2015, 1845, 1520, 1846, 1475, 1830, 1855, 1860,

     2017, 1476, 2017, 1829, 1855, 1860, 1531, 2020, 1820, 2020,
     1477, 2022, 1819, 2022, 1476, 1818, 1825, 1477, 1532, 1532,
     1532, 1532, 1532, 1532, 1817, 1521, 1521, 1816, 1533, 1533,
     1533, 1533, 1533, 1533, 1531, 1534, 1534, 1534, 1534, 1534,
     1534, 1871, 1827, 1531, 1845, 1811, 1846, 1871, 1532, 1535,
     1535, 1535, 1535, 1535, 1535, 1855, 1860, 1809, 1533, 1536,
     1536, 1536, 1536, 1536, 1536, 1534, 1537, 1537, 1537, 1537,
     1537, 1537, 2028, 2030, 2028, 2030, 1532, 1803, 2035, 1535,
     2035, 1900, 1912, 1802, 1801, 1532, 1533, 1900, 1912, 1536,
     2037, 1789, 2037, 1534, 1788, 2040, 1537, 2040, 1871, 1938,

     1783, 2042, 1534, 2042, 2047, 1938, 2047, 1535, 2049, 1533,
     2049, 1538, 1538, 1538, 1538, 1538, 1538, 1536, 1539, 1539,
     1539, 1539, 1539, 1539, 1537, 2052, 2054, 2052, 2054, 1535,
     1551, 1551, 1551, 1551, 1551, 1551, 1778, 1776, 1900, 1912,
     1536, 1538, 1537, 2056, 2058, 2056, 2058, 1773, 1539, 1552,
     1552, 1552, 1552, 1552, 1552, 2061, 1938, 2061, 1772, 1771,
     1551, 1553, 1553, 1553, 1553, 1553, 1553, 1759, 1757, 1538,
     1554, 1554, 1554, 1554, 1554, 1554, 1539, 1752, 2063, 1552,
     2063, 1750, 2065, 1554, 2065, 1539, 1746, 1554, 1551, 1538,
     2067, 1553, 2067, 2071, 1745, 2071, 1551, 2073, 1744, 2073,

     1554, 1555, 1555, 1555, 1555, 1555, 1555, 1552, 1556, 1556,
     1556, 1556, 1556, 1556, 2075, 2077, 2075, 2077, 1552, 1553,
     1586, 1586, 1586, 1586, 1586, 1586, 1737, 1736, 1554, 1554,
     2079, 1555, 2079, 2080, 2082, 2080, 2082, 1586, 1556, 1735,
     1727, 1553, 1598, 1598, 1598, 1598, 1598, 1598, 1726, 1725,
     1599, 1599, 1599, 1599, 1599, 1599, 2084, 1723, 2084, 1555,
     2086, 2088, 2086, 2088, 1721, 1555, 1556, 2090, 2092, 2090,
     2092, 2093, 1598, 2093, 2094, 1556, 2094, 1719, 1586, 1586,
     1599, 1600, 1600, 1600, 1600, 1600, 1600, 1601, 1601, 1601,
     1601, 1601, 1601, 1717, 1602, 1602, 1602, 1602, 1602, 1602,

     1598, 1713, 1603, 1603, 1603, 1603, 1603, 1603, 1599, 1706,
     2095, 1600, 2095, 1704, 2096, 1599, 2096, 1601, 2097, 2099,
     2097, 2099, 1694, 1598, 1602, 1604, 1604, 1604, 1604, 1604,
     1604, 1689, 1603, 1668, 1668, 1668, 1668, 1668, 1668, 1600,
     1668, 2101, 2103, 2101, 2103, 1601, 1687, 2105, 1601, 2105,
     1685, 1600, 1602, 1683, 2111, 1604, 2111, 1682, 1680, 1602,
     1603, 1677, 1605, 1605, 1605, 1605, 1605, 1605, 1606, 1606,
     1606, 1606, 1606, 1606, 2113, 1676, 2113, 1614, 1614, 1614,
     1614, 1614, 1614, 1604, 1603, 2115, 2117, 2115, 2117, 1675,
     1614, 1604, 1605, 2122, 1614, 2122, 1674, 1673, 1606, 1615,

     1615, 1615, 1615, 1615, 1615, 1672, 2124, 1614, 2124, 2126,
     1662, 2126, 1615, 2128, 1661, 2128, 1615, 2132, 1647, 2132,
     1605, 2134, 2135, 2134, 2135, 2136, 1606, 2136, 2137, 1615,
     2137, 2143, 1645, 2143, 1606, 1614, 1614, 1616, 1616, 1616,
     1616, 1616, 1616, 2145, 1605, 2145, 2147, 2149, 2147, 2149,
     1616, 2150, 1643, 2150, 1616, 1641, 1640, 1615, 1615, 1617,
     1617, 1617, 1617, 1617, 1617, 1639, 2151, 1616, 2151, 1615,
     1637, 2152, 1617, 2152, 1633, 1632, 1617, 1619, 1619, 1619,
     1619, 1619, 1619, 1652, 1652, 1652, 1652, 1652, 1652, 1617,
     1619, 2155, 1631, 2155, 1619, 1616, 1616, 1620, 1620, 1620,

     1620, 1620, 1620, 2158, 1616, 2158, 2160, 1619, 2160, 2161,
     1620, 2161, 1611, 1652, 1620, 2162, 1610, 2162, 1617, 1653,
     1653, 1653, 1653, 1653, 1653, 1596, 1594, 1620, 1654, 1654,
     1654, 1654, 1654, 1654, 1592, 1619, 1619, 2163, 2165, 2163,
     2165, 1652, 1655, 1655, 1655, 1655, 1655, 1655, 1590, 1653,
     1619, 2167, 2168, 2167, 2168, 1620, 1620, 2169, 1654, 2169,
     2170, 1589, 2170, 1620, 1588, 1652, 1708, 1708, 1708, 1708,
     1708, 1708, 1655, 1708, 2176, 1583, 2176, 1653, 2178, 2180,
     2178, 2180, 1653, 2182, 1582, 2182, 1654, 1656, 1656, 1656,
     1656, 1656, 1656, 1657, 1657, 1657, 1657, 1657, 1657, 1579,

     1655, 1658, 1658, 1658, 1658, 1658, 1658, 1654, 1659, 1659,
     1659, 1659, 1659, 1659, 2183, 1578, 2183, 1656, 2184, 2185,
     2184, 2185, 1576, 1657, 1655, 2189, 2191, 2189, 2191, 1574,
     1572, 1658, 1660, 1660, 1660, 1660, 1660, 1660, 1659, 1665,
     1665, 1665, 1665, 1665, 1665, 1656, 2192, 1569, 2192, 1660,
     1656, 1657, 1665, 2193, 1566, 2193, 1665, 1564, 2196, 1658,
     2196, 2198, 1660, 2198, 1557, 2201, 1659, 2201, 2206, 1665,
     2206, 2208, 1657, 2208, 1549, 1659, 1667, 1667, 1667, 1667,
     1667, 1667, 2211, 1658, 2211, 2213, 2215, 2213, 2215, 1547,
     1660, 1660, 1670, 1670, 1670, 1670, 1670, 1670, 1665, 1695,

     1695, 1695, 1695, 1695, 1695, 1542, 1667, 1696, 1696, 1696,
     1696, 1696, 1696, 1697, 1697, 1697, 1697, 1697, 1697, 2217,
     1540, 2217, 1670, 1698, 1698, 1698, 1698, 1698, 1698, 1695,
     2220, 2222, 2220, 2222, 1667, 1529, 2226, 1696, 2226, 2227,
     1527, 2227, 1667, 1697, 1699, 1699, 1699, 1699, 1699, 1699,
     1670, 1525, 2228, 1698, 2228, 1523, 2230, 1695, 2230, 1670,
     2232, 2236, 2232, 2236, 2238, 1696, 2238, 2240, 2242, 2240,
     2242, 1697, 1518, 2245, 1699, 2245, 1516, 2247, 1695, 2247,
     1508, 1698, 1700, 1700, 1700, 1700, 1700, 1700, 1696, 1697,
     1701, 1701, 1701, 1701, 1701, 1701, 1506, 2248, 1698, 2248,

     1505, 1502, 1699, 1702, 1702, 1702, 1702, 1702, 1702, 2249,
     1501, 2249, 1700, 1703, 1703, 1703, 1703, 1703, 1703, 2250,
     1701, 2250, 1499, 1699, 1711, 1711, 1711, 1711, 1711, 1711,
     1703, 1711, 2252, 1702, 2252, 2254, 1498, 2254, 1711, 2258,
     1700, 2258, 2260, 1703, 2260, 2262, 1497, 2262, 1701, 1796,
     1796, 1796, 1796, 1796, 1796, 1701, 1796, 1700, 2263, 1488,
     2263, 1702, 1728, 1728, 1728, 1728, 1728, 1728, 2268, 2270,
     2268, 2270, 1703, 2272, 2274, 2272, 2274, 1483, 1702, 1712,
     2276, 2277, 2276, 2277, 1712, 1729, 1729, 1729, 1729, 1729,
     1729, 1482, 1728, 1712, 1712, 1712, 1712, 1712, 1712, 1712,

     1481, 1730, 1730, 1730, 1730, 1730, 1730, 1712, 1731, 1731,
     1731, 1731, 1731, 1731, 2278, 1729, 2278, 2281, 1480, 2281,
     1728, 2282, 2286, 2282, 2286, 1712, 2287, 2288, 2287, 2288,
     1712, 1730, 2292, 1469, 2292, 1712, 1712, 1728, 1731, 1712,
     1712, 1468, 2294, 1729, 2294, 1466, 2296, 1712, 2296, 1464,
     1462, 1712, 1729, 1712, 1712, 1712, 2298, 1712, 2298, 1730,
     2299, 2300, 2299, 2300, 1460, 1449, 1731, 1732, 1732, 1732,
     1732, 1732, 1732, 1733, 1733, 1733, 1733, 1733, 1733, 2301,
     2305, 2301, 2305, 1730, 1734, 1734, 1734, 1734, 1734, 1734,
     1731, 1739, 1739, 1739, 1739, 1739, 1739, 1732, 1739, 2306,

     2310, 2306, 2310, 1733, 1447, 1739, 1741, 1741, 1741, 1741,
     1741, 1741, 1446, 1741, 1734, 2312, 2314, 2312, 2314, 2316,
     1741, 2316, 2318, 1445, 2318, 1732, 2319, 2320, 2319, 2320,
     2321, 1733, 2321, 1732, 1742, 1742, 1742, 1742, 1742, 1742,
     1442, 2324, 1734, 2324, 1733, 2326, 2330, 2326, 2330, 1734,
     1740, 1742, 2332, 1441, 2332, 1740, 1440, 1438, 1762, 1762,
     1762, 1762, 1762, 1762, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1436, 1822, 1822, 1822, 1822, 1822, 1822, 1740, 1822,
     1435, 1431, 1761, 1761, 1761, 1761, 1761, 1761, 1762, 2334,
     2336, 2334, 2336, 1742, 1429, 2345, 1740, 2345, 2347, 1428,

     2347, 1740, 2348, 2349, 2348, 2349, 1740, 1740, 1425, 1743,
     1740, 1740, 1761, 1416, 1413, 1743, 1762, 2350, 1740, 2350,
     1410, 2352, 1740, 2352, 1740, 1740, 1740, 1762, 1740, 1743,
     1743, 1743, 1743, 1743, 1743, 1743, 2354, 2356, 2354, 2356,
     1761, 1763, 1763, 1763, 1763, 1763, 1763, 2362, 1761, 2362,
     1764, 1764, 1764, 1764, 1764, 1764, 1765, 1765, 1765, 1765,
     1765, 1765, 2364, 1764, 2364, 1398, 1743, 1764, 2365, 1743,
     2365, 1763, 1766, 1766, 1766, 1766, 1766, 1766, 1396, 2367,
     1764, 2367, 2368, 2369, 2368, 2369, 1765, 1768, 1768, 1768,
     1768, 1768, 1768, 2372, 1768, 2372, 2373, 1395, 2373, 1763,

     1389, 1768, 1766, 2376, 2377, 2376, 2377, 1379, 1764, 1764,
     2379, 1770, 2379, 2381, 1765, 2381, 2395, 1770, 2395, 1374,
     1765, 1763, 1372, 1769, 1769, 1769, 1769, 1769, 1769, 1370,
     1766, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1774, 1766,
     1769, 2401, 1368, 2401, 1774, 1360, 1359, 1793, 1793, 1793,
     1793, 1793, 1793, 2424, 2425, 2424, 2425, 1357, 1774, 1774,
     1774, 1774, 1774, 1774, 1774, 1354, 1775, 1350, 1770, 1349,
     1348, 1770, 1775, 1345, 1343, 1341, 1340, 1793, 1336, 1335,
     1333, 1329, 1769, 1322, 1320, 1316, 1775, 1775, 1775, 1775,
     1775, 1775, 1775, 1310, 1292, 1774, 1289, 1286, 1774, 1792,

     1792, 1792, 1792, 1792, 1792, 1793, 1824, 1824, 1824, 1824,
     1824, 1824, 1792, 1824, 1285, 1284, 1792, 1793, 1282, 1268,
     1266, 1264, 1262, 1775, 1780, 1260, 1259, 1244, 1242, 1792,
     1780, 1241, 1240, 1239, 1235, 1233, 1794, 1794, 1794, 1794,
     1794, 1794, 1232, 1231, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1230, 1228, 1226, 1224, 1792, 1792, 1223,
     1780, 1780, 1780, 1780, 1780, 1780, 1794, 1220, 1216, 1215,
     1213, 1797, 1797, 1797, 1797, 1797, 1797, 1212, 1210, 1207,
     1206, 1780, 1205, 1200, 1780, 1199, 1780, 1780, 1780, 1780,
     1780, 1780, 1197, 1195, 1794, 1795, 1795, 1795, 1795, 1795,

     1795, 1797, 1193, 1794, 1191, 1173, 1158, 1155, 1795, 1144,
     1142, 1140, 1795, 1798, 1798, 1798, 1798, 1798, 1798, 1138,
     1137, 1136, 1135, 1129, 1127, 1795, 1799, 1125, 1123, 1797,
     1122, 1118, 1799, 1117, 1116, 1800, 1113, 1112, 1110, 1109,
     1108, 1800, 1106, 1798, 1797, 1105, 1799, 1799, 1799, 1799,
     1799, 1799, 1799, 1104, 1795, 1800, 1800, 1800, 1800, 1800,
     1800, 1800, 1103, 1102, 1101, 1821, 1821, 1821, 1821, 1821,
     1821, 1798, 1098, 1089, 1088, 1085, 1081, 1080, 1821, 1798,
     1075, 1808, 1821, 1799, 1073, 1071, 1799, 1808, 1070, 1069,
     1067, 1063, 1800, 1805, 1062, 1821, 1059, 1054, 1052, 1805,

     1051, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1045, 1044,
     1038, 1036, 1034, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1828, 1032, 1821,  998,  985,  983, 1828, 1805,
     1805, 1805, 1805, 1805, 1805,  981,  979,  974, 1808,  972,
      970,  968, 1828, 1828, 1828, 1828, 1828, 1828, 1828,  965,
     1805,  964,  962, 1805,  957, 1805, 1805, 1805, 1805, 1805,
     1805, 1813,  954,  953,  951,  947,  946, 1813,  945,  941,
      938,  937,  935, 1823, 1823, 1823, 1823, 1823, 1823, 1828,
      932, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813,
     1826, 1826, 1826, 1826, 1826, 1826,  931, 1813, 1813, 1813,

     1813, 1813, 1813, 1823, 1844, 1844, 1844, 1844, 1844, 1844,
      929, 1844, 1864, 1864, 1864, 1864, 1864, 1864, 1813,  928,
     1826, 1813,  927, 1813, 1813, 1813, 1813, 1813, 1813, 1864,
      924, 1823,  923, 1847, 1847, 1847, 1847, 1847, 1847, 1823,
     1847,  922,  918,  917,  915,  914,  913, 1847, 1826, 1876,
     1876, 1876, 1876, 1876, 1876,  909,  907, 1826, 1848,  905,
      903,  902,  900, 1848,  893,  889, 1876,  888,  878,  872,
      871, 1864, 1848, 1848, 1848, 1848, 1848, 1848, 1848,  870,
     1861, 1861, 1861, 1861, 1861, 1861, 1848, 1861, 1863, 1863,
     1863, 1863, 1863, 1863, 1861, 1863, 1875, 1875, 1875, 1875,

     1875, 1875, 1863, 1875, 1848,  865,  861,  855, 1876, 1848,
     1875,  850,  847,  846, 1848, 1848,  842,  838, 1848, 1848,
      836,  835,  834, 1882,  803,  799, 1848,  797,  786, 1882,
     1848,  784, 1848, 1848, 1848,  783, 1848, 1862,  782,  779,
      777,  776, 1862, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
      775, 1862, 1862, 1862, 1862, 1862, 1862, 1862,  774,  773,
      772,  761,  760,  746,  745, 1862,  741,  740,  739,  728,
      727,  717,  716,  715,  711,  710,  705,  704,  703,  697,
     1882,  696,  695, 1862,  691,  690,  687,  685, 1862,  684,
      683,  681,  679, 1862, 1862,  675, 1865, 1862, 1862,  673,

      669,  643, 1865,  640, 1877, 1862,  629,  627,  614, 1862,
     1877, 1862, 1862, 1862,  612, 1862, 1865, 1865, 1865, 1865,
     1865, 1865, 1865,  609, 1877, 1877, 1877, 1877, 1877, 1877,
     1877,  607,  606,  604,  571,  569,  561,  560,  558,  555,
      554,  552,  549,  548,  546, 1881,  543,  542,  525,  524,
      522, 1881,  519, 1865, 1892,  518, 1865,  516,  508,  497,
     1892, 1877,  496,  495, 1877, 1881, 1881, 1881, 1881, 1881,
     1881, 1881,  489,  479, 1892, 1892, 1892, 1892, 1892, 1892,
     1892,  478,  477,  468,  466,  465,  461,  459,  457,  455,
      434,  382,  381,  378,  352, 1893,  350,  348,  336,  335,

      330, 1893, 1881,  319,  318, 1881, 1887,  307,  297,  296,
      270, 1892, 1887,  269, 1892, 1893, 1893, 1893, 1893, 1893,
     1893, 1893,  261,  260,  258,  257, 1887, 1887, 1887, 1887,
     1887, 1887, 1887, 1887, 1887, 1901,  253,  245,  242,  240,
      239, 1901, 1887, 1887, 1887, 1887, 1887, 1887,  238,  228,
      225,  224, 1893,  200,  194, 1901, 1901, 1901, 1901, 1901,
     1901, 1901,  170, 1887,  158,  156, 1887,  155, 1887, 1887,
     1887, 1887, 1887, 1887, 1898,  146,  145,  142,  134,  131,
     1898,  130,  126,   96,   93,   89,   88,   86,   79,   69,
       43,   38, 1901,   33, 1898, 1898, 1898, 1898, 1898, 1898,

     1898, 1898, 1898, 1913,   30,   16,    9,    4,    3, 1913,
     1898, 1898, 1898, 1898, 1898, 1898,    0,    0,    0,    0,
        0,    0,    0, 1913, 1913, 1913, 1913, 1913, 1913, 1913,
        0, 1898,    0,    0, 1898,    0, 1898, 1898, 1898, 1898,
     1898, 1898,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1913, 1933, 1933, 1933, 1933, 1933, 1933, 1933, 1933, 1933,
        0,    0,    0,    0,    0,    0,    0, 1933, 1933, 1933,
     1933, 1933, 1933,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1933,    0, 1933, 1933, 1933, 1933, 1933, 1933, 1953,
     1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953, 1953,
     1953, 1953, 1953, 1953, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1956,    0,    0,    0,    0, 1956,
        0, 1956, 1956, 1956, 1956, 1957, 1957, 1957, 1957, 1957,
     1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957,
     1958, 1958,    0, 1958, 1958,    0, 1958, 1958, 1958, 1958,
     1958, 1958, 1958,    0, 1958, 1959, 1959,    0,    0, 1959,

     1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959,    0, 1959,
     1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960,
     1960, 1960, 1960, 1960, 1960, 1961, 1961,    0, 1961,    0,
        0, 1961, 1962,    0,    0,    0,    0,    0,    0, 1962,
     1962, 1962, 1962, 1963, 1963,    0, 1963,    0,    0,    0,
        0,    0,    0, 1963, 1963, 1963, 1963, 1964,    0, 1964,
        0,    0, 1964, 1965,    0, 1965,    0,    0, 1965, 1966,
        0,    0,    0,    0,    0,    0, 1966, 1966, 1966, 1966,
     1967,    0, 1967,    0,    0, 1967, 1968,    0, 1968,    0,
        0, 1968, 1969,    0, 1969,    0,    0, 1969, 1970, 1970,

        0,    0, 1970, 1970, 1970, 1970, 1970, 1970, 1970, 1970,
     1970,    0, 1970, 1971,    0, 1971,    0,    0, 1971, 1972,
        0, 1972,    0,    0, 1972, 1973, 1973, 1973, 1973, 1973,
     1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973,
     1975, 1975,    0, 1975, 1976,    0,    0,    0,    0, 1976,
        0, 1976, 1976, 1976, 1976, 1977, 1977,    0, 1977,    0,
        0,    0,    0,    0,    0, 1977, 1977, 1977, 1977, 1978,
     1978,    0, 1978,    0,    0,    0,    0, 1978, 1978, 1978,
     1978, 1978, 1978, 1979,    0, 1979,    0,    0, 1979, 1981,
        0, 1981,    0,    0, 1981, 1983,    0,    0,    0,    0,

     1983,    0, 1983, 1983, 1983, 1983, 1984,    0,    0,    0,
        0, 1984,    0, 1984, 1984, 1984, 1984, 1985, 1985, 1985,
     1985, 1985, 1985, 1985, 1985, 1985, 1985, 1985, 1985, 1985,
     1985, 1985, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986,
     1986, 1986, 1986, 1986, 1986, 1986, 1986, 1987,    0, 1987,
        0,    0, 1987, 1989,    0, 1989,    0,    0, 1989, 1991,
        0, 1991,    0,    0, 1991, 1993,    0, 1993,    0,    0,
     1993, 1995,    0, 1995,    0,    0, 1995, 1997,    0, 1997,
     1997,    0, 1997, 1998,    0, 1998, 1998,    0, 1998, 1999,
        0,    0,    0,    0, 1999,    0, 1999, 1999, 1999, 1999,

     2000,    0, 2000,    0,    0, 2000, 2001,    0, 2001,    0,
        0, 2001, 2002, 2002,    0, 2002,    0,    0,    0,    0,
     2002, 2002, 2002, 2002, 2002, 2002, 2003,    0, 2003,    0,
        0, 2003, 2004,    0, 2004,    0,    0, 2004, 2005,    0,
     2005,    0,    0, 2005, 2007,    0, 2007,    0,    0, 2007,
     2009,    0,    0,    0,    0, 2009,    0, 2009, 2009, 2009,
     2009, 2010,    0,    0,    0,    0, 2010,    0, 2010, 2010,
     2010, 2010, 2011,    0, 2011,    0,    0, 2011, 2012,    0,
     2012,    0,    0, 2012, 2013, 2013, 2013, 2013, 2013, 2013,
     2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2014,

        0, 2014,    0,    0, 2014, 2016,    0, 2016,    0,    0,
     2016, 2018,    0, 2018,    0,    0, 2018, 2019,    0, 2019,
        0,    0, 2019, 2021,    0, 2021,    0,    0, 2021, 2023,
        0, 2023, 2023,    0, 2023, 2024,    0, 2024,    0,    0,
     2024, 2025,    0, 2025,    0,    0, 2025, 2026,    0, 2026,
        0,    0, 2026, 2027,    0, 2027,    0,    0, 2027, 2029,
        0, 2029,    0,    0, 2029, 2031, 2031,    0, 2031,    0,
        0,    0,    0,    0,    0, 2031, 2031, 2031, 2031, 2032,
        0, 2032,    0,    0, 2032, 2033,    0, 2033,    0,    0,
     2033, 2034,    0, 2034,    0,    0, 2034, 2036,    0, 2036,

        0,    0, 2036, 2038, 2038,    0, 2038,    0,    0,    0,
        0, 2038, 2038, 2038, 2038, 2038, 2038, 2039,    0, 2039,
        0,    0, 2039, 2041,    0, 2041,    0,    0, 2041, 2043,
        0,    0,    0,    0, 2043,    0, 2043, 2043, 2043, 2043,
     2044,    0, 2044,    0,    0, 2044, 2045,    0, 2045,    0,
        0, 2045, 2046,    0, 2046,    0,    0, 2046, 2048,    0,
     2048,    0,    0, 2048, 2050, 2050, 2050, 2050, 2050, 2050,
     2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2051,
        0, 2051,    0,    0, 2051, 2053,    0, 2053,    0,    0,
     2053, 2055,    0, 2055,    0,    0, 2055, 2057,    0, 2057,

        0,    0, 2057, 2059,    0, 2059,    0,    0, 2059, 2060,
        0, 2060,    0,    0, 2060, 2062,    0, 2062,    0,    0,
     2062, 2064,    0, 2064,    0,    0, 2064, 2066,    0, 2066,
        0,    0, 2066, 2068, 2068,    0, 2068,    0,    0,    0,
        0,    0,    0, 2068, 2068, 2068, 2068, 2069, 2069,    0,
     2069,    0,    0, 2069,    0, 2069,    0, 2069, 2069, 2069,
     2069, 2070,    0, 2070,    0,    0, 2070, 2072,    0, 2072,
        0,    0, 2072, 2074,    0, 2074,    0,    0, 2074, 2076,
        0, 2076,    0,    0, 2076, 2078, 2078,    0, 2078,    0,
        0,    0,    0, 2078, 2078, 2078, 2078, 2078, 2078, 2081,

        0,    0,    0,    0, 2081,    0, 2081, 2081, 2081, 2081,
     2083,    0, 2083,    0,    0, 2083, 2085,    0, 2085,    0,
        0, 2085, 2087,    0, 2087,    0,    0, 2087, 2089,    0,
     2089,    0,    0, 2089, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2098,
        0, 2098,    0,    0, 2098, 2100,    0, 2100,    0,    0,
     2100, 2102,    0, 2102,    0,    0, 2102, 2104,    0, 2104,
        0,    0, 2104, 2106, 2106,    0, 2106,    0,    0, 2106,
        0, 2106,    0, 2106, 2106, 2106, 2106, 2107, 2107,    0,
     2107,    0,    0,    0,    0,    0,    0, 2107, 2107, 2107,

     2107, 2108,    0, 2108,    0,    0, 2108, 2109,    0, 2109,
        0,    0, 2109, 2110,    0, 2110,    0,    0, 2110, 2112,
        0, 2112,    0,    0, 2112, 2114,    0, 2114,    0,    0,
     2114, 2116,    0, 2116,    0,    0, 2116, 2118, 2118,    0,
     2118,    0,    0,    0,    0, 2118, 2118, 2118, 2118, 2118,
     2118, 2119,    0, 2119,    0,    0, 2119, 2120,    0,    0,
        0,    0, 2120,    0, 2120, 2120, 2120, 2120, 2121,    0,
     2121,    0,    0, 2121, 2123,    0, 2123,    0,    0, 2123,
     2125,    0, 2125,    0,    0, 2125, 2127,    0, 2127,    0,
        0, 2127, 2129,    0, 2129,    0,    0, 2129, 2130,    0,

     2130,    0,    0, 2130, 2131,    0, 2131,    0,    0, 2131,
     2133,    0, 2133,    0,    0, 2133, 2138, 2138,    0, 2138,
        0,    0,    0,    0,    0,    0, 2138, 2138, 2138, 2138,
     2139, 2139,    0, 2139,    0,    0,    0,    0, 2139, 2139,
     2139, 2139, 2139, 2139, 2140,    0, 2140,    0,    0, 2140,
     2141,    0, 2141,    0,    0, 2141, 2142,    0, 2142,    0,
        0, 2142, 2144,    0, 2144,    0,    0, 2144, 2146,    0,
     2146,    0,    0, 2146, 2148,    0, 2148,    0,    0, 2148,
     2153, 2153,    0, 2153,    0,    0,    0,    0, 2153, 2153,
     2153, 2153, 2153, 2153, 2154,    0, 2154,    0,    0, 2154,

     2156,    0,    0,    0,    0, 2156,    0, 2156, 2156, 2156,
     2156, 2157,    0, 2157,    0,    0, 2157, 2159,    0, 2159,
        0,    0, 2159, 2164,    0, 2164,    0,    0, 2164, 2166,
        0, 2166,    0,    0, 2166, 2171,    0, 2171,    0,    0,
     2171, 2172, 2172,    0, 2172,    0,    0,    0,    0, 2172,
     2172, 2172, 2172, 2172, 2172, 2173,    0, 2173,    0,    0,
     2173, 2174,    0, 2174,    0,    0, 2174, 2175,    0, 2175,
        0,    0, 2175, 2177,    0, 2177,    0,    0, 2177, 2179,
        0, 2179,    0,    0, 2179, 2181,    0, 2181,    0,    0,
     2181, 2186,    0, 2186,    0,    0, 2186, 2187, 2187,    0,

     2187,    0,    0,    0,    0, 2187, 2187, 2187, 2187, 2187,
     2187, 2188,    0, 2188,    0,    0, 2188, 2190,    0,    0,
        0,    0, 2190,    0, 2190, 2190, 2190, 2190, 2194,    0,
     2194,    0,    0, 2194, 2195,    0, 2195,    0,    0, 2195,
     2197,    0, 2197,    0,    0, 2197, 2199,    0, 2199,    0,
        0, 2199, 2200,    0, 2200,    0,    0, 2200, 2202, 2202,
        0, 2202,    0,    0,    0,    0,    0,    0, 2202, 2202,
     2202, 2202, 2203,    0, 2203,    0,    0, 2203, 2204,    0,
     2204,    0,    0, 2204, 2205,    0, 2205,    0,    0, 2205,
     2207,    0, 2207,    0,    0, 2207, 2209, 2209,    0, 2209,

        0,    0,    0,    0, 2209, 2209, 2209, 2209, 2209, 2209,
     2210,    0, 2210,    0,    0, 2210, 2212,    0, 2212,    0,
        0, 2212, 2214,    0, 2214,    0,    0, 2214, 2216,    0,
     2216,    0,    0, 2216, 2218,    0, 2218,    0,    0, 2218,
     2219,    0, 2219,    0,    0, 2219, 2221, 2221,    0, 2221,
        0,    0,    0,    0, 2221, 2221, 2221, 2221, 2221, 2221,
     2223,    0,    0,    0,    0, 2223,    0, 2223, 2223, 2223,
     2223, 2224,    0, 2224,    0,    0, 2224, 2225,    0, 2225,
        0,    0, 2225, 2229,    0, 2229,    0,    0, 2229, 2231,
        0, 2231,    0,    0, 2231, 2233, 2233,    0, 2233,    0,

        0,    0,    0,    0,    0, 2233, 2233, 2233, 2233, 2234,
     2234,    0, 2234,    0,    0, 2234,    0, 2234,    0, 2234,
     2234, 2234, 2234, 2235,    0, 2235,    0,    0, 2235, 2237,
        0, 2237,    0,    0, 2237, 2239,    0, 2239,    0,    0,
     2239, 2241,    0, 2241,    0,    0, 2241, 2243, 2243,    0,
     2243,    0,    0,    0,    0, 2243, 2243, 2243, 2243, 2243,
     2243, 2244,    0, 2244,    0,    0, 2244, 2246,    0, 2246,
        0,    0, 2246, 2251,    0, 2251,    0,    0, 2251, 2253,
        0, 2253,    0,    0, 2253, 2255, 2255,    0, 2255,    0,
        0,    0,    0, 2255, 2255, 2255, 2255, 2255, 2255, 2256,

        0,    0,    0,    0, 2256,    0, 2256, 2256, 2256, 2256,
     2257,    0, 2257,    0,    0, 2257, 2259,    0, 2259,    0,
        0, 2259, 2261,    0, 2261,    0,    0, 2261, 2264, 2264,
        0, 2264,    0,    0, 2264,    0, 2264,    0, 2264, 2264,
     2264, 2264, 2265,    0, 2265,    0,    0, 2265, 2266,    0,
     2266,    0,    0, 2266, 2267,    0, 2267,    0,    0, 2267,
     2269,    0, 2269,    0,    0, 2269, 2271,    0, 2271,    0,
        0, 2271, 2273,    0, 2273,    0,    0, 2273, 2275, 2275,
        0, 2275,    0,    0,    0,    0, 2275, 2275, 2275, 2275,
     2275, 2275, 2279,    0, 2279,    0,    0, 2279, 2280,    0,

     2280,    0,    0, 2280, 2283, 2283,    0, 2283,    0, 2283,
     2283,    0, 2283, 2283, 2283, 2283, 2283, 2283, 2284,    0,
        0,    0,    0, 2284,    0, 2284, 2284, 2284, 2284, 2285,
        0, 2285,    0,    0, 2285, 2289,    0, 2289,    0,    0,
     2289, 2290,    0, 2290,    0,    0, 2290, 2291,    0, 2291,
        0,    0, 2291, 2293,    0, 2293,    0,    0, 2293, 2295,
        0, 2295,    0,    0, 2295, 2297,    0, 2297,    0,    0,
     2297, 2302, 2302,    0, 2302,    0,    0,    0,    0, 2302,
     2302, 2302, 2302, 2302, 2302, 2303,    0, 2303,    0,    0,
     2303, 2304,    0, 2304,    0,    0, 2304, 2307, 2307,    0,

     2307,    0,    0,    0,    0, 2307, 2307, 2307, 2307, 2307,
     2307, 2308, 2308, 2308, 2308, 2308, 2308, 2308, 2308, 2308,
     2308, 2308, 2308, 2308, 2308, 2308, 2309,    0,    0,    0,
        0, 2309,    0, 2309, 2309, 2309, 2309, 2311,    0, 2311,
        0,    0, 2311, 2313,    0, 2313,    0,    0, 2313, 2315,
        0, 2315,    0,    0, 2315, 2317,    0, 2317,    0,    0,
     2317, 2322,    0, 2322,    0,    0, 2322, 2323,    0, 2323,
        0,    0, 2323, 2325,    0, 2325,    0,    0, 2325, 2327,
     2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327,
     2327, 2327, 2327, 2327, 2328, 2328, 2328, 2328, 2328, 2328,

     2328, 2328, 2328, 2328, 2328, 2328, 2328, 2328, 2328, 2329,
        0, 2329,    0,    0, 2329, 2331,    0, 2331,    0,    0,
     2331, 2333,    0, 2333,    0,    0, 2333, 2335,    0, 2335,
        0,    0, 2335, 2337,    0, 2337,    0,    0, 2337, 2338,
        0, 2338,    0,    0, 2338, 2339,    0, 2339,    0,    0,
     2339, 2340,    0, 2340,    0,    0, 2340, 2341,    0, 2341,
        0,    0, 2341, 2342,    0, 2342,    0,    0, 2342, 2343,
        0,    0,    0,    0, 2343,    0, 2343, 2343, 2343, 2343,
     2344,    0, 2344,    0,    0, 2344, 2346,    0, 2346,    0,
        0, 2346, 2351,    0, 2351,    0,    0, 2351, 2353,    0,

     2353,    0,    0, 2353, 2355, 2355,    0, 2355,    0,    0,
        0,    0, 2355, 2355, 2355, 2355, 2355, 2355, 2357,    0,
     2357,    0,    0, 2357, 2358,    0, 2358,    0,    0, 2358,
     2359,    0, 2359,    0,    0, 2359, 2360, 2360, 2360, 2360,
     2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360,
     2360, 2361,    0, 2361,    0,    0, 2361, 2363,    0, 2363,
        0,    0, 2363, 2366,    0,    0,    0,    0, 2366,    0,
     2366, 2366, 2366, 2366, 2370,    0, 2370,    0,    0, 2370,
     2371,    0, 2371,    0,    0, 2371, 2374,    0, 2374,    0,
        0, 2374, 2375,    0, 2375,    0,    0, 2375, 2378,    0,

     2378,    0,    0, 2378, 2380,    0, 2380,    0,    0, 2380,
     2382,    0,    0,    0,    0, 2382,    0, 2382, 2382, 2382,
     2382, 2383,    0, 2383,    0,    0, 2383, 2384,    0, 2384,
        0,    0, 2384, 2385, 2385, 2385, 2385, 2385, 2385, 2385,
     2385, 2385, 2385, 2385, 2385, 2385, 2385, 2385, 2386,    0,
     2386,    0,    0, 2386, 2387,    0, 2387,    0,    0, 2387,
     2388,    0, 2388,    0,    0, 2388, 2389,    0, 2389,    0,
        0, 2389, 2390,    0, 2390,    0,    0, 2390, 2391,    0,
     2391,    0,    0, 2391, 2392, 2392, 2392, 2392, 2392, 2392,
     2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 2393,

        0, 2393,    0,    0, 2393, 2394,    0, 2394,    0,    0,
     2394, 2396, 2396, 2396, 2396, 2396, 2396, 2396, 2396, 2396,
     2396, 2396, 2396, 2396, 2396, 2396, 2397,    0, 2397,    0,
        0, 2397, 2398,    0, 2398,    0,    0, 2398, 2399,    0,
     2399,    0,    0, 2399, 2400,    0, 2400,    0,    0, 2400,
     2402, 2402, 2402, 2402, 2402, 2402, 2402, 2402, 2402, 2402,
     2402, 2402, 2402, 2402, 2402, 2403,    0, 2403,    0,    0,
     2403, 2404,    0, 2404,    0,    0, 2404, 2405,    0, 2405,
        0,    0, 2405, 2406,    0, 2406,    0,    0, 2406, 2407,
        0, 2407,    0,    0, 2407, 2408,    0, 2408,    0,    0,

     2408, 2409,    0, 2409,    0,    0, 2409, 2410,    0, 2410,
        0,    0, 2410, 2411,    0, 2411,    0,    0, 2411, 2412,
        0, 2412,    0,    0, 2412, 2413,    0, 2413,    0,    0,
     2413, 2414,    0, 2414,    0,    0, 2414, 2415,    0, 2415,
        0,    0, 2415, 2416,    0, 2416,    0,    0, 2416, 2417,
        0, 2417,    0,    0, 2417, 2418,    0, 2418,    0,    0,
     2418, 2419,    0, 2419,    0,    0, 2419, 2420,    0, 2420,
        0,    0, 2420, 2421,    0, 2421,    0,    0, 2421, 2422,
        0, 2422,    0,    0, 2422, 2423,    0, 2423,    0,    0,
     2423, 2426,    0, 2426,    0,    0, 2426, 2427,    0, 2427,

        0,    0, 2427, 2428,    0, 2428,    0,    0, 2428, 2429,
        0, 2429,    0,    0, 2429, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[248] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Fri Apr 18 15:23:40 2025
 * Update Count     : 884
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.hpp"                          // for DeclarationNode
#include "ExpressionNode.hpp"                           // for LabelNode
#include "InitializerNode.hpp"                          // for InitializerNode
#include "ParseNode.hpp"
#include "ParserTypes.hpp"                              // for Token
#include "StatementNode.hpp"                            // for CondCtrl, ForCtrl
#include "TypedefTable.hpp"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 3283 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// " stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}
				// C23 attributes, CPP also handles missing quote delimiter



#line 3300 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define QUOTE 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 187 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 3524 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1953 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8816 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 189 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 211 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 214 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 219 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }			// do nothing
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }					// reset column counter
	YY_BREAK
/* keywords */
case 9:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// gcc (ARM)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CORUN); }				// CFA
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COFOR); }				// CFA
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT16); }					// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32X); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64X); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128X); }					// GCC
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128); }					// GCC (ARM)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128); }					// GCC (ARM)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128); }					// GCC (ARM)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128); }					// GCC (ARM)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 111:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COUNTOF); }			// GCC
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 362 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 363 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 364 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 367 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 368 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 369 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 155:
YY_RULE_SETUP
#line 375 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* C23 attributes */
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	strtext = new string( &yytext[2], yyleng - 4 );		// remove delimiters "[[" and "]]"
	RETURN_STR(C23_ATTRIBUTE);
}
	YY_BREAK
/* numeric constants */
case 158:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 390 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 391 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 392 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value, CPP also handles missing quote delimiter */
case 166:
YY_RULE_SETUP
#line 398 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant, CPP also handles missing quote delimiter */
case 169:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 172:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 175:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATTR); }				// CFA, attribute shorthand
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 189:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 193:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 457 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 463 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 464 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 465 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 466 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 467 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 468 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 469 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 470 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 471 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 472 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 473 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 474 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 476 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 477 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpLt); }			// CFA
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 478 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpLe); }			// CFA
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 479 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpLe); }			// CFA
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 480 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownGt); }		// CFA
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 481 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownGe); }		// CFA
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 482 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeEq); }			// CFA
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 483 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeNe); }			// CFA
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 484 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 485 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownNe); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 240:
YY_RULE_SETUP
#line 488 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 489 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 490 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 491 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 496 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 245:
YY_RULE_SETUP
#line 523 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 246:
YY_RULE_SETUP
#line 535 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 537 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 4919 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1953 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1953 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1952);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 537 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

