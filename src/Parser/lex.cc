
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 244
#define YY_END_OF_BUFFER 245
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1948] =
    {   0,
        0,    0,    0,    0,  168,  168,  171,  171,  245,  243,
        7,    8,    7,  194,  170,  156,  200,  203,  167,  180,
      181,  197,  195,  184,  196,  187,  199,  160,  161,  185,
      186,  205,  207,  206,  208,  176,  156,  178,  198,  179,
      201,  156,  177,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  182,  204,  183,  202,    7,  243,    4,    4,  168,
      169,  175,  171,  172,    7,    7,  212,  237,  156,    0,
      225,  193,  217,  226,  223,  209,  220,  232,  210,  221,
      219,  235,    0,  164,    3,    0,  224,  163,  160,    0,

        0,    0,  160,  160,  160,  160,  160,  160,    0,    0,
      160,  160,  161,  161,  161,  161,  161,  161,  161,    0,
      161,  161,  191,  192,  190,  213,  215,  211,  216,  214,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  231,  188,  170,
      167,  156,    0,  222,    0,    0,  228,    0,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,    0,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,   49,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,   85,  156,  156,  156,  156,  156,  103,

      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  227,  218,  233,    7,    0,    0,    0,    2,    0,
        5,  168,    0,  174,  173,  173,    0,    0,    0,  171,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  234,  236,  189,
      164,  164,    0,  164,  164,  164,  164,    0,    6,  165,
      163,    0,  163,  163,  163,  163,  160,    0,    0,  159,
        0,    0,  165,    0,  160,  160,  160,  160,  160,  160,
      160,  160,    0,    0,    0,  160,  160,  160,  160,  160,

      160,  160,    0,  162,    0,    0,  161,  161,  161,  161,
      161,  161,  161,  161,    0,    0,    0,  161,  161,  161,
      161,  161,  161,  161,    0,  229,  230,    0,  241,  238,
        0,    0,    0,  240,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  157,    0,  156,   15,   16,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,   78,  156,  156,  156,  156,
       92,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  132,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,    0,    0,  173,    0,
        0,    0,    0,    0,  173,    0,    0,  242,    0,    0,
        0,    0,    0,    0,    0,  164,    0,  164,    0,    0,
        0,    0,    0,  164,  164,    0,  165,  165,    0,  165,
      165,  165,  165,  163,    0,  163,    0,    0,    0,    0,
        0,  163,  163,    0,  159,  159,  159,  159,  159,  159,

      159,    0,  159,  159,  165,  165,  165,  165,  165,  165,
        0,    0,    0,  160,  160,    0,    0,    0,    0,  160,
      160,    0,    0,  162,  162,  162,  162,  162,  162,  162,
      162,    0,  162,  162,    0,    0,    0,  161,  161,    0,
        0,    0,    0,  161,  161,  240,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  239,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  157,    0,    0,

        0,  156,   22,  156,  156,   28,  156,   31,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
       52,  156,   54,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,   84,  156,  156,   97,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  145,  156,  156,  156,  152,  156,  154,  156,
        0,    0,    0,    0,    0,    0,  173,    0,    0,    0,
        0,    0,  164,  164,    0,  164,  164,    0,    0,    0,
        0,  165,    0,  165,    0,    0,    0,    0,    0,  165,

      165,    0,  163,  163,    0,  163,  163,    0,    0,    0,
        0,  159,  159,  159,  159,  159,  159,  159,  159,    0,
        0,    0,  159,  159,  159,  159,  159,  159,  159,    0,
      165,    0,    0,    0,    0,  165,  165,    0,    0,    0,
        0,    0,    0,    0,  162,  162,  162,  162,  162,  162,
      162,  162,    0,    0,    0,  162,  162,    0,  166,    0,
      162,  162,  162,  162,  162,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  156,  156,   25,  156,  156,  156,

      156,  156,  156,  156,  156,  156,  156,  156,  156,   17,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,    0,    0,    0,
        0,    0,    0,  156,  156,   27,   29,  156,  156,   35,
       39,  156,  156,   34,  156,  156,  156,  156,   51,  156,
      156,  156,  156,  156,   61,   62,  156,  156,   81,  156,
      156,  156,  156,   99,  102,  104,  156,  156,  156,  156,
      156,  112,  156,  156,  156,  156,  156,  156,  156,  128,
      156,  131,  133,  156,  156,  156,  139,  156,  156,  156,
      156,  156,  156,  153,  156,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  164,    0,  164,  164,  165,
      165,    0,  165,  165,    0,    0,    0,    0,    0,  163,
        0,  163,  163,    0,    0,    0,  159,  159,    0,    0,
        0,    0,  159,  159,    0,  165,  165,    0,    0,    0,
        0,    0,  166,    0,    0,    0,    0,    0,  162,  162,
        0,  166,  166,  166,  166,  166,    0,    0,    0,  162,
      162,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  156,    0,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,   87,  156,  156,  156,  156,
      156,  156,  156,  156,  156,    0,    0,    0,    0,    0,
        0,    0,    0,  156,  156,  156,  156,   32,   33,  156,
      156,  156,  156,  156,   50,   53,  156,   57,  156,  156,
      156,  156,   79,  156,  156,   89,   93,  156,  156,  156,
      107,  156,  111,  113,  116,  118,  121,  156,  123,  124,
      156,  156,  156,  138,  135,  156,  156,  156,  149,  156,
      156,  155,    0,    1,    0,    0,  173,    0,    0,    0,
        0,  164,    0,  165,    0,  165,  165,  163,    0,    0,

      165,    0,  165,  165,  166,  166,    0,  166,    0,    0,
        0,    0,  166,  166,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
      156,   19,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,   18,  156,  156,  156,
      156,   40,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,    0,    0,    0,    0,    0,    0,
        0,    0,    9,   11,  156,  156,  156,  156,  117,   47,

       48,  156,  156,   60,  156,   64,   80,  156,   98,  105,
      156,  156,  156,  122,  156,  156,  130,  134,  156,  144,
      156,  150,  156,    0,    0,  165,  165,    0,    0,  166,
      166,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  158,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   10,   12,   36,
      156,  156,   67,   68,   70,   83,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,   88,   90,   94,  156,  156,  114,  125,
      136,  156,  156,    0,    0,    0,    0,    0,    0,    0,
      156,  156,   42,  156,  156,  156,   59,   66,  156,  106,
      108,  156,  156,  156,  141,  146,  156,    0,    0,    0,
        0,  166,    0,  166,  166,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  156,  156,  156,   72,   69,
       71,  156,  100,  156,  156,  156,  156,  156,  156,   13,

      156,  156,  156,   37,   41,  156,  156,   63,  156,  156,
       96,  156,  156,  156,  156,  156,    0,    0,    0,    0,
      156,  156,   43,   55,  156,   82,  156,  156,  156,  151,
        0,    0,    0,    0,  166,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  156,   44,   45,   73,   86,  156,  156,
      156,  156,   26,  156,  156,  156,  156,  156,  156,  156,
      156,   65,   91,   95,  109,  115,  137,  156,  147,    0,

        0,    0,   24,  156,  156,  156,  156,  156,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   46,  156,  156,  156,  156,  156,  156,   14,   20,
       23,  156,  156,   38,  156,  156,  140,  156,    0,    0,
        0,    0,   30,   58,  156,  156,  129,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  110,  148,    0,    0,    0,
      156,  127,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  156,  126,   74,   75,   76,
       77,   21,  156,  156,   56,    0,  120,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  119,  156,  156,
      156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  156,  156,  156,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  156,  142,  156,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
      143,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  101,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   56,   51,   57,   11,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,

       69,   70,   71,   72,   73,   11,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[94] =
    {   0,
        1,    2,    3,    2,    2,    2,    2,    1,    4,    1,
        5,    1,    1,    6,    7,    1,    1,    1,    8,    1,
        9,    1,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   11,    1,    1,    1,    1,    1,    1,   12,   12,
       12,   12,   12,   12,    5,    5,    5,    5,    5,   13,
        5,    5,    5,    5,    5,    5,    5,    5,    1,   14,
        8,    1,   15,    1,   12,   12,   12,   12,   12,   12,
        5,    5,    5,    5,    5,    5,    5,    5,   13,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    1

    } ;

static const flex_int16_t yy_base[2425] =
    {   0,
        0,   92, 6238, 6235,   92,   93,   94,   95, 6251, 8977,
      106, 8977,  112,   85, 8977, 6190,   65,   92, 8977, 8977,
     8977,   86,   91, 8977,   95,  112,  112,  168,  237, 6213,
     8977,  132, 6212,   89,  319,  110,  142, 6187,  122, 8977,
      123,  303, 6181,   86,  109,  164,  102,  126,  173,  150,
      162,  105,  175,  194,   90,  218,  247,  299,  216,  209,
      112, 8977,  214, 8977,  141,  363,  388, 8977, 6222,    0,
     8977,  418,    0, 8977,  380,  392, 8977,  498, 6182,  166,
     8977, 8977, 8977, 8977, 8977, 6204, 8977, 6204, 6201, 8977,
     8977, 6202, 6215,  567, 8977, 6232, 8977,  631,  411,  498,

      301,  434,  420,  491,  596,  489, 8977,  356,  209,  451,
      498,  641,    0,  496,  528,  660,  561, 8977,  673,  252,
      566,  700, 8977, 8977, 8977, 6199, 8977, 8977, 8977, 6197,
     6189,  172,  261, 6207,  303,  340,  387,  314,  337,  371,
      413, 6185,  434,  444, 6161, 6127,  445, 8977, 8977, 8977,
     8977,  521,  783, 8977, 6155, 6147, 8977, 6119,  228,  122,
      219,  320,  152,  332,  144,  416,  210,  328,  824, 6141,
      273,  119,  410,  370,  425,  440,  496,  487,  658,  489,
      430,   89,  539,  490,  564,  671,  526,  546,  524,  504,
      544,  471,  581, 6140,  608,  586,  589,  612,  559, 6139,

      617,  689,  625,  621,  672,  616,  663,  571,  633,  692,
      652,  528,  704,  701,  681,  703,  257,  706,  722,  698,
      717, 8977, 8977, 8977,  795,  801, 6192,  810, 8977,  893,
     8977,    0,  804, 8977, 8977,  847, 6131, 6130, 6129,    0,
     6139,  757,  779, 6150,  783,  826,  845,  784,  813,  817,
      820, 6120,  844,  848,  851, 6093, 6092, 8977, 8977, 8977,
      902,  893,  966,  974,  957,  696, 6091, 6150, 8977, 1025,
      910, 1089,  986, 1055,  723, 1085, 1058,  297, 1119, 1166,
      531, 1149, 1233, 1173,  738, 8977,  803, 1218,  814, 8977,
      883, 1259,  467, 6127, 6124,  962,  987,  866, 1137,  819,

      831, 1269,    0, 1324, 6129, 1297,  859, 8977,  918, 1354,
      892, 8977,  952, 1381,  886, 6123, 6120, 1084, 1162,  967,
     1393,  887,  972, 1400, 1453, 8977, 8977, 6109, 8977, 8977,
      944,  983, 6083, 6083,  973, 1515, 1455,  986, 1465, 1496,
     1502, 1537, 1544, 1603, 1609, 6079,    0, 6077,    0, 6040,
      750,  891,  896,  946,  963, 1002,  674,  637, 1015,  966,
     1029, 1003, 1005, 1148,  927, 1014,  755, 1062, 1110, 1091,
     1123, 1004, 1134, 1031, 1030, 6069, 1085,  888, 6067, 6066,
     1147, 1151, 1099, 1158, 1159, 1168, 1173, 1193, 1174, 1208,
     1194,  785, 1205, 1211,  699,  979, 1240,  876, 1234, 1269,

     1270, 1207, 1227, 1042, 1247, 1275, 1226, 1272, 1219, 1244,
     1309, 1286, 1258, 1316,  363, 1277, 1299, 1302, 1326, 1041,
     1121, 1255, 1321, 1346, 1335, 1328, 1354, 1356, 1365, 1368,
     1371, 6065, 1367, 1382, 1426, 1372, 1450, 1428, 1385, 1389,
     1425, 1429, 1436, 1388, 1392, 1414, 1524, 1521, 1601, 1619,
     6061,    0, 6060,    0, 6059,    0, 6083, 8977, 1458, 1500,
     6045, 6027,    0, 6026,    0, 8977, 1626, 1664, 1650, 1109,
     6057, 6054, 6057, 8977, 1528, 1673, 1728, 1592, 1792, 1693,
     1758, 1482, 6016, 8977, 1757, 1833, 1822, 1211, 6053, 6049,
     6052, 8977, 1542, 1842, 1897, 1548, 1839, 1906, 1506, 8977,

     1891, 6011, 1658, 1954, 2016, 1945, 1717, 1847, 1491, 6010,
     1465, 6047, 6037, 1490, 1504, 6032, 1507, 6036, 6032, 1513,
     1516, 1666, 1670, 2082, 1904, 1949, 2134, 1752, 2149, 1959,
     8977, 1174, 1944, 2161, 1548, 6033, 6030, 1582, 1630, 6025,
     1555, 6022, 6019, 1546, 1586, 5985, 1654, 5975, 5974, 2046,
     2067, 6004, 1693, 5972, 5970, 2190, 2196, 2235, 2255, 2267,
     2274, 2286, 5969,    0, 5959,    0, 8977, 1510, 1522, 1563,
     1541, 1527, 1661, 1700, 1611, 1705, 1601, 1735, 1647, 1839,
     1558, 1702, 1751, 1771, 1732, 1753, 1814, 1650, 1703, 1866,
     1658, 1707, 1764, 1340, 1830, 1816, 1832, 5961, 1845, 5957,

     5956, 1865, 5958, 1874, 1767, 5950, 1701, 5948, 1822, 1772,
     1850, 1888, 1902, 1818, 1896, 1936, 1898, 1777, 1925, 1934,
     5947, 1950, 5946, 1951, 1942, 1952, 1962, 1996, 1994, 2001,
     1999, 1997, 2002, 5944, 2005, 1395, 5941, 2021, 2008, 2032,
     2025, 1598, 2037, 2033, 2057, 2058, 2060, 2073, 2038, 2027,
     2074, 2075, 2086, 2105, 1826, 2108, 2123, 2144, 2151, 2128,
     2030, 2149, 5940, 2160, 2150, 2224, 5939, 2154, 5938, 2167,
     1915, 2296, 5932,    0, 5931,    0, 5927, 5924, 5923,    0,
     5922,    0, 2348, 5921, 5953, 2179, 2239, 2192, 5957, 5947,
     5950, 8977, 2331, 2412, 2476, 2206, 5947, 5936, 5931, 8977,

     2225, 2357, 2485, 5889, 5920, 2255, 2257, 2219, 5924, 5921,
     5924, 2198, 8977, 2252, 2374, 2230, 8977, 2245, 2442, 2272,
     5921, 5917, 2342, 2346, 2291, 2384, 2089, 2293, 2420, 2240,
     8977, 2280, 5918, 5914, 5916, 8977, 2321, 2514, 5908, 5907,
     2398, 2555, 2402, 2374, 2378, 8977, 2473, 2540, 2390, 8977,
     2392, 2567, 2338, 5909, 5906, 2521, 2543, 2583, 2629, 2605,
     2474, 2591, 2266, 2477, 2620, 5869, 5901, 5900, 5866, 5858,
     5857,    0, 5856,    0, 2679, 5854, 5853, 5852,    0, 5851,
        0, 2714, 2720, 2727, 2738, 2751, 2758, 2803, 2810, 2826,
     5848,    0, 5840,    0, 2155, 2223, 5842, 2256, 2273, 2334,

     2251, 2352, 2395, 2410, 2342, 2419, 2187, 2331, 2281, 2426,
     2409, 2349, 2413, 2475, 2470, 2462, 2458, 2491, 2486, 2345,
     2465, 2543, 2512, 2532, 2601, 2580, 2496, 5832, 5830, 5829,
        0, 5827,    0, 2609,  978, 5829, 2585, 2606, 2619, 5828,
     5820, 2527, 2608, 5819, 2587, 2630, 2636, 2629, 5818, 2634,
     2618, 2542, 2640, 2653, 5817, 2743, 2675, 2583, 5808, 2706,
     2678,  557, 2691, 5807, 5806, 5805, 2708, 2654, 2689, 2715,
     2716, 5793, 2718, 2602, 2507, 2736, 2722, 2676, 2721, 2732,
     2737, 5792, 5785, 2725, 2766, 2776, 5784, 2760, 2778, 2779,
     2731, 2762, 2784, 5783, 2765, 5839, 5776,    0, 5775,    0,

     5774,    0, 5773,    0, 2864, 2794, 5802, 5744, 5742, 2905,
     5758, 5790, 2798, 2809, 2681, 5794, 5790, 5781, 2874, 2833,
     5773, 5707, 5706, 2822, 5766, 5763, 2794, 2799, 5759, 2828,
     5763, 5760, 2803, 2865, 5755, 2867, 2868, 2830, 5759, 5754,
     5757, 2934, 2969, 3033, 5716, 2835, 5753, 5750, 2855, 2858,
     5744, 2978, 2870, 2998, 3024, 5703, 2837, 5740, 5737, 2871,
     2872, 5700,    0, 5699,    0, 5690,    0, 5681,    0, 2919,
     3074, 2893, 5680,    0, 5679,    0, 5677,    0, 5675,    0,
     3080, 3111, 3118, 3124, 3155, 3162, 3170, 3193, 3201,    0,
        0, 5677,    0, 2906, 2805, 2808, 2809, 2986, 2909, 2890,

     2886, 2849, 2921, 2891, 2912, 2958, 2954, 2923, 2961, 2963,
     2965, 2975, 2969, 2970, 3005, 2980, 3013, 2994, 3014, 3010,
     3036, 2973, 3041, 2539, 3049, 5673,    0, 5671,    0, 5668,
        0, 5667,    0, 3051, 3037, 3076, 3077, 5669, 5668, 3079,
     3035, 3078, 3087, 3082, 5667, 5663, 3081, 5662, 3128, 2096,
     3042, 1905, 5661, 3150, 3129, 5660, 5659, 3130, 3132, 3084,
     5658, 3085, 5656, 5646, 5644, 3040, 5643, 3038, 5641, 3119,
     3154, 3156, 3121, 5639, 5625, 3157, 3159, 3160, 5624, 3161,
     3158, 5623, 5679, 8977,    0,    0, 8977,    0,    0,    0,
        0, 5594, 3251, 3177, 5642, 5584, 5583, 5581, 5637, 5635,

     3181, 5634, 5576, 5575, 3292, 5591, 5623, 8977, 2882, 5627,
     5624, 5627, 8977, 3214, 3261, 5612, 5575,    0, 5573,    0,
     5572,    0, 5571,    0, 3291, 3323, 3383, 3174, 5571, 5568,
     5567, 5566,    0, 5565,    0, 5561,    0, 5560,    0, 3299,
     3342, 3389, 3408, 3420, 3426, 3470, 3486, 3492, 5557, 3187,
     3176, 5559, 3172, 3191, 3308, 3240,  429, 3189, 3192, 3202,
     3123, 3200, 3306, 3278, 3207, 3291, 5558, 3247, 3281, 3239,
     3294, 3248, 3297, 3346, 3298, 3311, 3343, 3337, 3344, 3339,
     3348, 3374, 3376, 3345, 5554,    0, 5552,    0, 5551,    0,
     5550,    0, 5550, 5548, 3378, 3338, 3379, 3377, 5547, 5546,

     5545, 3385, 3422, 5543, 3405, 5535, 5534, 3406, 5532, 5531,
     3296, 3359, 3390, 5529, 3381, 3397, 5528, 5527, 3402, 5526,
     3409, 5511, 3441, 5506, 5504, 5479, 5476, 3538, 5531, 3434,
     3436, 3479, 5535, 5532, 5533, 5492,    0, 5491,    0,    0,
        0,    0, 3600, 3551, 3448, 3582, 3588, 3620, 3630, 3694,
     3700, 3706, 5490, 5488, 8977, 5487,    0, 5484,    0, 5483,
        0, 5482,    0,    0,    0,    0, 3713, 3744, 3775, 3782,
     3788, 3819, 3825, 3856, 3867, 5481,    0, 5460, 5459, 5458,
     3487, 3455, 5457, 3452, 3457, 5456, 3445, 3459, 3460, 3462,
     3515, 2028, 3468, 3467, 3473, 3171, 3485, 3474, 3489, 3511,

     3469, 3552, 3512, 5445, 3518, 3519, 3536, 3481, 3537, 5437,
     3550, 3568, 3555, 5426,    0, 5425,    0,    0,    0,    0,
     3561, 3556, 5427, 3548, 3569, 3559, 5426, 5425, 3499, 5424,
     5422, 3584, 3578, 3581, 5420, 5414, 3589, 5410,    0, 5409,
        0, 3600, 5438, 5379, 5378,    0,    0,    0, 5398, 3887,
     3899, 5426, 3590, 5394, 5393, 3908, 3930, 3939, 3945, 3951,
     3989, 4020, 5390,    0, 5388,    0, 5387,    0, 5385,    0,
        0,    0,    0, 5384, 4032, 4038, 4051, 4071, 4082, 4113,
     4120, 4132, 4151, 5383,    0, 3593, 3626, 3623, 3595, 5378,
     5356, 3601, 5355, 3609, 3594, 3607, 3654, 3661, 3696, 3615,

     3669, 3663, 3664, 3668, 5347, 3675, 3628, 5346, 3670, 3674,
     5345, 3676, 3677, 3695, 3701, 3702,    0,    0,    0, 5341,
     3705, 3736, 5341, 5324, 2916, 5323, 3611, 3703, 3739, 5321,
     5310,    0, 5309,    0, 5283, 5306, 5305,    0, 4172, 5302,
     5301, 5299,    0, 5298,    0, 4191, 4197, 4211, 4231, 4242,
     4262, 4277, 4301, 4314, 5297,    0, 5296,    0, 5292,    0,
     5289,    0, 5285, 5260,    0, 4321, 4337, 4345, 4360, 4380,
     4411, 4419,    0, 3738, 5255, 5247, 5225, 5197, 3751, 3707,
     3632, 3776, 5182, 3777, 3778, 3740, 3748, 3750, 3756, 3780,
     3787, 5174, 5169, 5139, 3786, 5132, 5124, 3784, 3792, 5120,

     5100,    0, 5093, 3785, 3746, 3808, 3815, 3818,    0,    0,
     5083,    0, 5072,    0, 4397, 4428, 3840, 5071,    0, 5055,
        0, 5050,    0, 5047,    0, 4458, 4470, 4489, 4501, 4508,
     4539, 4548, 4560, 4572, 5032,    0, 5020,    0,    0,    0,
        0, 5019,    0, 4976,    0, 4579, 4591, 4610, 4650, 4631,
     4669, 4972, 3838, 3816, 3857, 3858, 3863, 3900, 4971, 3901,
     4968, 3869, 3905, 4963, 3906, 3912, 4953, 3913, 4930,    0,
     4927,    0, 4926, 4911, 3907, 3790, 4908, 4901,    0,    0,
     4681, 3919, 4900, 4893, 4890,    0, 4887,    0, 4883,    0,
     4879,    0, 4700, 4711, 4717, 4748, 4759, 4790, 4796, 4810,

     4827,    0,    0,    0, 4869, 4866,    0,    0, 4873, 4894,
     4912, 4933, 4103, 4955, 4973, 3919, 3822, 3918, 3921, 3924,
     3925, 3950, 3927, 3952, 3957, 4865, 4864, 4849,    0,    0,
     3946, 4851,    0, 4844, 4840, 4827,    0, 4823,    0, 4822,
        0, 4809,    0,    0,    0,    0, 4993, 5004, 5015, 5052,
     5083, 5095, 5101, 4833, 5118, 4799, 4794,    0,    0, 5162,
     4842, 5168, 5184, 4087, 5199, 3968, 4764, 4750, 4749, 4730,
     4716, 4688, 3848, 4006, 4680,    0, 4679, 4667,    0, 4649,
        0, 4646,    0, 4645,    0,    0,    0,    0, 4636, 5205,
     5211, 5242, 5248, 5285, 5294, 5307, 5325, 5331, 4635,    0,

     4627,    0, 5373, 4090, 4091, 5384, 5394, 4629, 3920, 3986,
     3823, 4618,    0, 4605,    0, 4604,    0, 4586,    0, 4561,
     4555, 4547, 5392, 5407, 5423, 5430, 5438, 5489, 5497, 4546,
     4543, 4528, 4159, 5506, 5556, 5521, 5529, 5549, 4525, 4510,
     4506, 3999, 3990, 3987, 4497,    0, 4485,    0,    0,    0,
        0, 4484,    0, 4465,    0, 5536, 5595, 5642, 5654, 5673,
     5685,    0, 5691, 5706, 5723, 4453, 4446, 4438, 5732, 5773,
     4419,    0, 4407,    0, 5831,    0, 3938, 4399, 4012,    0,
        0,    0, 4395, 4386,    0,    0, 5803, 5809, 5844, 5903,
     5766, 5880, 5921, 5933, 5942, 4383, 4379, 4378,    0, 6000,

        0, 4162, 5988, 4365,    0, 4364,    0, 6068,    0, 4031,
     4359, 4332, 4327, 4317, 4316, 5973, 5821, 6081, 6047, 4179,
     6098, 4182, 6136, 4312, 4309, 4305, 4296,    0,    0, 4293,
     4282, 4272, 4267, 4269, 4251, 4250, 4237, 4229, 6112, 4202,
     4217, 6166, 6188, 4226, 4213, 4207, 4178,    0, 4177, 4250,
     4168, 4161, 4158, 4147, 4251, 6174, 6267, 6182, 6201, 6332,
     4144, 4126, 4118,    0, 4109, 4252, 4103, 4097, 4086, 6224,
     6281, 6340, 4077, 4070, 4069, 6381, 6388, 4034, 4016, 3985,
     3968, 6446, 3967, 3955, 3939, 3919, 6433, 6475, 3875, 3859,
     3821, 3776, 6533,  181, 4329, 6520,  260,  298,  330,  624,

        0,    0,  746,  838,  899, 1206, 4351, 6562, 1248, 1298,
     1554, 1672,    0,    0, 1730, 1731, 1904, 1951, 2183, 2388,
     2428, 2537, 2578, 2644, 2645,    0, 2716, 6600, 2760, 2810,
        0, 2812, 4385, 2925, 3006, 3122, 3208, 3246, 3287, 3312,
     3318, 3546, 3616, 3676, 3680, 3750, 8977, 6670, 6685, 6700,
     6711, 6726, 6741, 6756, 6771, 6778, 6789, 6803, 6809, 6815,
     6826, 6832, 6838, 6844, 6859, 6865, 6871, 6886, 4050, 6893,
     6901, 6915, 6929, 6935, 4053, 6941, 4118, 6952, 6963, 6978,
     6993, 6999, 4131, 7005, 4134, 7011, 4149, 7017, 4157, 7023,
     4174, 7029, 7035, 7046, 7052, 7058, 7072, 7078, 7084, 7090,

     4196, 7096, 4215, 7107, 7118, 7124, 7130, 7145, 7151, 4218,
     7157, 4240, 7163, 7169, 4246, 7175, 4263, 7181, 7187, 7193,
     7199, 7205, 4275, 7211, 4278, 7225, 7231, 7237, 7243, 4283,
     7249, 4286, 7263, 7269, 4289, 7275, 4324, 7286, 7292, 7298,
     7304, 4345, 7310, 4361, 7325, 7331, 4366, 7337, 4381, 7343,
     4397, 7349, 4398, 7355, 7361, 4426, 7367, 4427, 7373, 4440,
     7379, 4443, 7393, 7407, 7413, 4444, 7419, 4456, 7425, 4457,
     7431, 4468, 7445, 4471, 4475, 7456, 4487, 7462, 4488, 7468,
     4507, 7474, 4510, 7480, 4513, 7495, 4514, 4519, 4522, 4525,
     4526, 4546, 7501, 4547, 7507, 4577, 7513, 4590, 7519, 4591,

     7533, 7547, 7553, 7559, 7565, 4595, 7571, 4609, 7577, 4615,
     7583, 4618, 7597, 7603, 7614, 7620, 4619, 7626, 4633, 7632,
     4634, 7638, 4638, 7644, 7650, 7656, 4648, 7662, 4649, 4654,
     4667, 4668, 7676, 7690, 7696, 7702, 7708, 4683, 7714, 4684,
     7720, 4715, 7726, 4716, 4721, 4724, 4725, 7740, 7746, 4734,
     7757, 7763, 4735, 7769, 4746, 4747, 4757, 4758, 7775, 4762,
     7781, 4763, 4769, 4772, 4775, 7787, 7801, 7807, 7813, 7819,
     4776, 7825, 4794, 7831, 4795, 7837, 4808, 4811, 4815, 4831,
     7843, 7857, 7863, 4842, 7874, 4843, 4848, 4851, 7880, 7886,
     4856, 7892, 4857, 7898, 7904, 4861, 7918, 7924, 7930, 7936,

     4871, 7942, 4872, 7956, 7962, 4879, 7968, 4894, 7974, 4898,
     7980, 4910, 7986, 7992, 4911, 8006, 4918, 8017, 8023, 8029,
     4931, 4935, 4939, 8035, 4957, 8041, 4972, 8055, 8069, 8075,
     4973, 8081, 4979, 8087, 4991, 8093, 4992, 8107, 8113, 5002,
     8119, 5014, 5017, 5025, 5028, 8125, 5032, 8131, 5033, 8145,
     8156, 8162, 5036, 8168, 5039, 8174, 5040, 5050, 8188, 8194,
     8200, 8206, 5051, 8212, 5055, 8218, 5056, 8224, 5060, 8238,
     5061, 5064, 5068, 8244, 8250, 5069, 5081, 8264, 8275, 8281,
     5082, 5099, 5104, 8287, 8293, 8299, 5107, 8305, 5116, 8311,
     5119, 8317, 5120, 5128, 5129, 5132, 8331, 8337, 8343, 5135,

     5139, 8357, 8372, 8383, 5142, 8389, 5146, 8395, 5147, 8401,
     5150, 8407, 5170, 5185, 5186, 5209, 8413, 8419, 5210, 8425,
     5214, 8440, 8455, 8461, 5215, 8467, 5220, 8473, 5223, 8479,
     5228, 8485, 8491, 8497, 8503, 8509, 8515, 8526, 8532, 5229,
     8538, 5246, 5250, 5251, 5254, 8544, 5257, 8550, 5260, 8564,
     5263, 8570, 8576, 8582, 8597, 8603, 5266, 8609, 5267, 5271,
     8620, 5272, 5283, 5293, 8626, 8632, 5294, 5306, 8638, 8644,
     5309, 5312, 8650, 5330, 8656, 5331, 8667, 8673, 8679, 8694,
     8700, 8706, 8712, 8718, 8724, 8730, 8745, 8751, 8757, 5334,
     8772, 8778, 8784, 8790, 8796, 5337, 8811, 8817, 8823, 8829,

     8835, 8841, 8847, 8853, 8859, 8865, 8871, 8877, 8883, 8889,
     8895, 8901, 8907, 8913, 8919, 8925, 8931, 8937, 5341, 5346,
     8943, 8949, 8955, 8961
    } ;

static const flex_int16_t yy_def[2425] =
    {   0,
     1947,    1, 1948, 1948, 1949, 1949, 1950, 1950, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1951, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1951, 1947, 1947, 1947,
     1947, 1951, 1947, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1947, 1947, 1947, 1947, 1947, 1952, 1947, 1947, 1953,
     1947, 1947, 1954, 1947, 1947, 1947, 1947, 1947, 1951, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1955, 1947, 1947,   28, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1956,   28,
     1947, 1947,   29, 1947, 1947, 1947, 1947, 1947, 1947,   29,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1957, 1947, 1947, 1947, 1947, 1947,
     1947, 1951, 1958, 1947, 1959, 1960, 1947, 1947, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1961,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,

     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1947, 1947, 1947, 1947, 1952, 1952, 1952, 1947, 1952,
     1947, 1953, 1947, 1947, 1947, 1947, 1962, 1963, 1964, 1965,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1966, 1967, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947,  261, 1968, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947,  110,  277, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1969, 1947, 1970, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1971, 1947, 1972, 1973, 1947, 1973, 1973,
     1973, 1973, 1973, 1973, 1973, 1974, 1975, 1976, 1977, 1947,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1979, 1947, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,

     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 1978, 1978, 1978, 1980, 1981, 1947, 1947,
     1982, 1983, 1984, 1985, 1986, 1987, 1947, 1947, 1947, 1947,
     1947, 1988, 1989, 1990, 1991, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947,  477, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947,  495, 1947, 1947, 1947, 1947, 1947, 1947, 1947,  505,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1992, 1993, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947,  524, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1994, 1947, 1995, 1996, 1947,
     1997, 1947, 1947, 1998, 1999, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 2000, 2001, 2002, 2003, 1947, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2005, 1947, 2006,

     2007, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2008, 1947, 2009, 2010, 2011, 2012, 2013, 2013, 2014, 2015,
     2016, 2017, 1947,  683, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947,  703, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     2018, 1947, 2018, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 2019, 1947, 1947, 2020, 2021,
     2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
     2032, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033,
     2034, 2035, 2036, 2037, 2038, 2038, 2038, 2038, 2038, 2038,

     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2039, 2040, 2041,
     2042, 2043, 2044, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2045, 2046, 2047, 2048, 2049,

     2050, 2051, 2052, 2053, 1947, 1947, 1947, 1947, 1947, 1947,
      910, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 2054, 1947, 1947, 1947, 1947, 1947,
     1947,  943, 1947, 1947, 1947,  952, 1947, 1947, 1947, 1947,
     1947, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
     2064, 1947, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
     2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2074,
     2075, 2076, 2077, 2076, 2076, 2076, 2076, 2076, 2076, 2076,

     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2078, 2079, 2080, 2081, 2082,
     2083, 2084, 2085, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076,
     2076, 2076, 2086, 1947, 2087, 2088, 1947, 2089, 2090, 2091,
     2092, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1105, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 2093, 2094, 2095, 2096,
     2097, 2098, 2099, 2100, 1947, 2101, 2102, 1947, 1947, 2103,
     2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113,
     2113, 2113, 2113, 2113, 2113, 2113, 2113, 2113, 2114, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2116, 2117, 2118, 2119, 2120, 2121,
     2122, 2123, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,

     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
     2115, 2115, 2115, 2124, 2125, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 2126, 2127, 2128, 2129, 2130,
     2131, 2132, 2133, 2134, 1947, 2134, 2134, 2134, 2134, 2134,
     2134, 2134, 2135, 2136, 1947, 2137, 2138, 2139, 2140, 2141,
     2142, 2143, 2144, 2145, 2146, 2147, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2149, 2150, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,

     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2159, 2160, 2161,
     2162, 1947, 1947, 1947, 1947, 2163, 2164, 2165, 2166, 1947,
     2167, 1947, 1947, 2168, 2169, 2167, 2167, 2167, 2167, 2167,
     2167, 2167, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177,
     2178, 2179, 2180, 2181, 2182, 2182, 2182, 2182, 2182, 2182,
     2182, 2182, 1947, 2183, 2184, 2185, 2185, 2185, 2185, 2185,
     2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185,

     2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185,
     2185, 2185, 2185, 2185, 2185, 2185, 2186, 2187, 2188, 2189,
     2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185,
     2190, 2191, 2192, 2193, 1947, 2194, 2195, 2196, 2197, 2198,
     2199, 2200, 2201, 2202, 2203, 2204, 2204, 2204, 2204, 2204,
     2204, 2204, 2204, 2204, 2205, 2206, 2207, 2208, 2209, 2210,
     2211, 2212, 2213, 2214, 2215, 2216, 2216, 2216, 2216, 2216,
     2216, 2216, 2217, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
     2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
     2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2219,

     2220, 2221, 2218, 2218, 2218, 2218, 2218, 2218, 2222, 2223,
     2224, 2225, 2226, 2227, 2228, 2229, 1947, 2230, 2231, 2232,
     2233, 2234, 2235, 2236, 2237, 2238, 2238, 2238, 2238, 2238,
     2238, 2238, 2238, 2238, 2239, 2240, 2241, 2242, 2243, 2244,
     2245, 2246, 2247, 2248, 2249, 2250, 2250, 2250, 2250, 2250,
     2250, 2251, 2251, 2251, 2251, 2251, 2251, 2251, 2251, 2251,
     2251, 2251, 2251, 2251, 2251, 2251, 2251, 2251, 2252, 2253,
     2254, 2255, 2251, 2251, 2251, 2251, 2251, 2256, 2257, 2258,
     2259, 1947, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267,
     2268, 2269, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270,

     2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2278,
     2278, 1947, 1947, 2278, 2278, 2279, 2279, 2279, 2279, 2279,
     2279, 2279, 2279, 2279, 2279, 2279, 2279, 2280, 2281, 2282,
     2279, 2279, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290,
     2291, 2292, 2293, 2294, 2295, 2296, 2297, 2297, 2297, 2297,
     2297, 2297, 2297, 2297, 2297, 2298, 2299, 2300, 2301, 1947,
     1947, 2302, 1947, 2303, 2302, 2304, 2304, 2304, 2304, 2304,
     2304, 2304, 2304, 2304, 2304, 2305, 2304, 2306, 2307, 2308,
     2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2297,
     2297, 2297, 2297, 2297, 2297, 2297, 2297, 1947, 2318, 2319,

     2320, 2321, 1947, 2322, 2323, 1947, 1947, 2304, 2304, 2304,
     2304, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332,
     2333, 2317, 2297, 2297, 2297, 2297, 2297, 2297, 2297, 2334,
     2318, 2320, 2322, 1947, 1947, 1947, 1947, 2323, 2335, 2336,
     2337, 2338, 2338, 2338, 2339, 2340, 2341, 2342, 2343, 2344,
     2345, 2346, 2347, 2348, 2349, 2350, 2350, 2350, 2350, 2350,
     2350, 2351, 1947, 1947, 2322, 2352, 2353, 2354, 2355, 2355,
     2356, 2357, 2358, 2359, 2355, 2360, 2361, 2361, 2361, 2362,
     2363, 2364, 2365, 2366, 2367, 2368, 2350, 2350, 2350, 1947,
     1947, 2350, 2350, 2322, 2322, 2369, 2352, 2370, 2371, 2322,

     2372, 2355, 2355, 2373, 2374, 2375, 2376, 2355, 1808, 2377,
     2377, 2378, 2379, 2365, 2366, 1947, 1947, 2350, 1947, 2380,
     2350, 2322, 2322, 2381, 2369, 2382, 2370, 1800, 1800, 2383,
     2373, 2384, 2375, 2377, 2385, 2378, 2386, 2379, 1947, 2387,
     2380, 1947, 1947, 2388, 2381, 2389, 2382, 2390, 2383, 2391,
     2384, 2392, 2385, 2386, 2387, 1947, 1947, 1947, 1947, 2380,
     2393, 2394, 2395, 2396, 2388, 2397, 2389, 2398, 2392, 1947,
     1947, 2387, 2399, 2400, 2401, 2380, 2380, 2402, 2393, 2403,
     2394, 2380, 2395, 2404, 2405, 2398, 2387, 2387, 2406, 2399,
     2407, 2400, 2387, 2401, 2380, 2380, 2408, 2402, 2409, 2403,

     1882, 1882, 2410, 2404, 2411, 2405, 2387, 2387, 2412, 2406,
     2413, 2407, 1893, 1893, 2414, 2408, 2415, 2409, 2416, 2410,
     2411, 2417, 2412, 2418, 2413, 2419, 2414, 1882, 2415, 2416,
     2420, 2417, 2387, 2418, 2421, 2422, 2423, 2421, 2424, 2422,
     2415, 2423, 2418, 2424, 2415, 2418,    0, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947
    } ;

static const flex_int16_t yy_nxt[9071] =
    {   0,
       10,   11,   12,   13,   13,   13,   11,   14,   15,   10,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   29,   29,   29,   29,   29,   29,
       29,   30,   31,   32,   33,   34,   35,   36,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   37,   16,   16,
       16,   16,   16,   16,   37,   16,   16,   16,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   16,   51,   16,   52,   53,   16,   54,   16,   16,
       55,   56,   57,   58,   59,   60,   16,   16,   61,   62,
       63,   64,   65,   66,   71,   71,   74,   74,   66,   81,

       82,   67,   74,   74,   83,   71,   71,   75,   86,   76,
       76,   76,   75,   75,   89,   76,   76,   76,   75,   77,
       85,   78,   78,  129,  130,   87,   84,   78,   95,   90,
       91,   78,   93,   96,   94,   94,   94,   94,   94,   94,
       94,   94,   94,  124,  148,   80,   97,  149,   80,   80,
      150,   72,   72,   72,   72,  151,  154,  157,  202,  158,
      171,   80,  172,  125,   80,  126,  127,  173,   80,  174,
      180,   80,  395,  175,  181,  224,  155,   78,   80,  182,
      221,   80,  196,   88,  183,   80,  379,   92,   98,  176,
       99,   99,   99,   99,   99,   99,   99,  100,  100,  353,

      184,   80,  185,   80,  152,  156,  328,  101,  329,   80,
      102,   80,  186,  103,  104,  105,  106,  107,  192,  358,
      256,   80,  108,   80,  109,  107,  356,  193,  177,  303,
      110,  194,   80,  101,   80,  178,  102,  187,  195,  111,
      104,  179,  112, 1947,  106,  188,  107,  189,  222,  257,
      190,  108,  197,   80,  109,  191,  107,   98,  198,  113,
      113,  113,  113,  113,  113,  113,  113,  113,   80,   80,
      199,  305, 1947,  218,  200,   80,  201,   80,   80,  102,
      219,  220,  114,  115,  116,  117,  118,   80,  215,  203,
      204,  119,  360,  216,  118,  328,  354,  329,  217,  120,

      205,  206,  351,  207,  223,  102,   80,  150,  121,  115,
      352,  122,  151,  117,  325,  118,   80, 1947,  208,  209,
      119,  441, 1916,  280,  280,  118,  131,  210,  213,  211,
      132,  133,   80,  134,  212,  135,  136,  328,  137,  329,
      138,  159,  160,  161,  162,  378,  163,  164,  328,  165,
      329,  166,  139,  140,  141,  167,  168,  330,   80,  494,
     1947,  152,   80,  281,  225,  169,   76,   76,   76,  225,
      331,  328,  226,  329,  328,  214,  329,  142,  143,   80,
      144,   75,  145,   76,   76,   76,   75,   80,  355,  228,
      229,   80, 1918,   75,  228,   76,   76,   76,   75,  361,

      357,  298,  286,  299,  300,  328,  330,  329,  146,  147,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  233,
      234,  328,   80,  329,  233,  640,  235,  301,  286,   80,
      302,  235,  300,  277,  277,  277,  277,  277,  277,  277,
      236,  236,  236,  236,  236,  236,  236,  328,  332,  329,
     1947,  282,  381,  282,  235, 1285,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  106,  285, 1947,  328,   80,
      329, 1947,  237,  278,  286,   80, 1947,  235,  328,  328,
      329,  329,  235,  235,   80,  380,  235,  235,   80,   80,
     1947,  516,  285,  359,  235,  296,  284, 1947,  235,   80,

      235,  238,  235,  286,  239,  241,  382, 1947,  383,  242,
      243,  394,  244,  306,  245,  246, 1947,  247,   98,  248,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  150,
       80,  249,  250,  251,  151,  285,  287, 1947,  288,  289,
      102,  117,  307,  286,  285,  290,   80,  408,   80,   80,
      308,  386,  286,  280,  280,   80,  252,  253,  393,  254,
      279,  285,  291,   80,  387,  292,  102,  289,  307,  106,
      285,  397,  286,  309,  290,  310,  311,  384,  385,  308,
       80,  286,  312,   80,  406,   80, 1057,   80,  255,  261,
      261,  261,  261,  261,  261,  261,  261,  261,   80,  313,

      402,  405,  314,   80,  311,   80,  434,  307,  262,  263,
      264,  312,  307,  265,  266,  308,   80,  266,   80,  293,
      308,  294,  403,   80,  295,  296,  396,  415,  398,  267,
       80,  407,  404,  307,  262,  263,  264,  117,  307,  265,
       80,  266,  285,  297,  308,   80,  266,  399,   80,  308,
      286,  429,  266,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  412,  409,  293,  413,  294,   80,  285,  295,
      296,   80,  271,  272,  273,   80,   80,  274,  275,  286,
       80,  275,  410,  315,   80,  316, 1947,  285,  317,  318,
      411,  423,   80,  276,  414,  286,   80,  427,  271,  272,

      273,  575,  422,  274,  416,  275,  307,  319,  430,  424,
      275,   80,  150,  285,  308,  297,  275,   80,  320,  308,
      321,  322,   80,  315,  286,  316,  388,  389,  317,  318,
       80,   80,  307,   80,  390,  428,  425,  400,  391,  433,
       80,  392,  466,  308,  323,  308,  307,  324,   80,  322,
      574,   80,  426,  401,  308,  417,  431,   80,   80,  418,
       80,  438,   80,   80,  619,   80,  435,  419,  466,  484,
      420,  421,  307,  436,  319,  439,   80,  440,  442,  432,
      445,   80,  437,  308,  336,  336,  336,  336,  336,  336,
      443,  457,  286,  458,  444,  484,  225,  446,   76,   76,

       76,  225,  228,  229,  226,  233,  234,  228, 1920,   80,
      233,  228,  229,  457,   80,  458,  228,  457,  457,  458,
      458,  286,  568,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  587,  338,  458,   80,  339,  459,  457,  289,  458,
      340,  457,  341,  458,  457,  460,  458,  290,  342,  343,
      457,  616,  458,  344,  458,  107,  345,  362,  290,  449,
      449,  449,  449,  449,  449,  449,  363,  107,  457,  457,
      458,  458,  457,   80,  458,  457,  290,  458,  364,  365,
      366,  107,  367,  368,  447,  229,  369,  290,  370,  447,

     1947,  448,  300,  107,  371,  372,  373,  374,  375,  450,
      540,  300,  107,  308,  318,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  118,  466,   80,  466,  290,  107,  466,
      466,  622,  308,  262,  263,  264,  312,   80,  265,  266,
       80,  484,  266,  484,  289,   80,  484,  484,  602,  118,
      466, 1921,  466,  311,  267,  466,  290,  466,  569,  262,
      263,  264,  312,  570,  265,  312,  266,  484,  328,  484,
      329,  266,  484,  467,  484,  467,   80,  266,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  470,  474,  471,

      475,  312,  472,  473,  474,   80,  312,  474,  285,  488,
      585,  489,  322,  118,  490,  491,  286,  328,  118,  329,
      466,  571,   80,  311,  474,   80,  475,  548,  469,  572,
      577,  474,  484,  285,  285,  312,  474,   80,   80,  118,
      554,  286,  474,  322,  118,  286,  466,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  549,  620,  484,  285,
      580,   80,   80,   80,   80, 1036,  478,  479,  480,  555,
      286,  481,  482,   80,   80,  482,  593,  579,   98,  573,
      277,  277,  277,  277,  277,  277,  277,  483,   80,   80,
       80,  586,  478,  479,  480,  576,  492,  481,  493,  482,

       80,   80,  492,  596,  482,  492,  485,  597,  485,  578,
      482,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      278,   80,  492,  645,  493,  628,  271,  272,  273,  492,
      307,  274,  275,  685,  492,  275,  588,  266,  308,  600,
      492,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       80,  487,  271,  272,  273,  591,  307,  274,   80,  275,
      517,  102,  518,  605,  275,  519,  520,  308,  601,   80,
      275,  283,  283,  283,  283,  283,  283,  283,  283,  283,
       80,  306,   80,  107,  521,  589,  590,  102,  495,  495,
      282,  592,  282,   80, 1947,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  646,  594,   80,   80,  307,  107,
       80,  496,  497,  498,  499,  500,  308,   80,   80,  604,
      501,  595,  581,  500,  603,  607,  606,   80,  502,  582,
      583,  584,   80,   80,  307,  705,  766,  503,  497,  275,
      504,  511,  499,  512,  500,  308,  513,  514,  608,  501,
      609,  611,   80,   80,  500,  505,  505,  505,  505,  505,
      505,  505,  505,  505,   80,  515,   80,   80, 1947,  617,
       80,  614,  290,  610,  506,  618,  507,  615,   80,  508,
      509,  626,  511,  509,  512,   80,   80,  513,  514,  612,
      613,  627,  517,   80,  518,  510,  634,  519,  520,   80,

      506,  290,  507,   80,  632,  508,   80,  509,  621,  623,
     1923,  629,  509,  290,   80,  107,  635,   80,  509,  100,
      100,  100,  100,  100,  100,  100,  100,  100,   80,   80,
      638,   80,  636,  515,   80,  647,   80,  624,  625,  630,
      633,  107,  290,  521,  523,   80,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  641,  637,  631,   80,  306,
     1947,   80,  524,  524,  524,  524,  524,  524,   80,  525,
      526,  527,  528,  529,  643,   80,  642,  535,  530,  536,
       80,  531,  537,  538,  639,   80,  532,   80,  524,  524,
      524,  524,  524,  524,   80,  533,  526,  648,  534,   80,

      528,  539,  529,  644,  535,   80,  536,  530,  312,  537,
      538,  651,  531,   80,  649,   80,  541,  650,  542,  862,
      824,  543,  544,  541,   80,  542,   80,   80,  543,  544,
       80,   80,  652,  654,  150,  312,  656,  312,  653,  118,
      545,   80,  655,  657,   80,  658,  118,   80,   80,  660,
      659,   80,  663,  664,   80,  539,  550,  550,  550,  550,
      550,  550,  668,  669,  312,  118,  550,  550,  550,  550,
      550,  550,  118,   80,  545,  113,  113,  113,  113,  113,
      113,  113,  113,  113,   80,   80,  552,   80,   80,  739,
      665,  670,  457,  514,  458,   80,  552,  550,  550,  550,

      550,  550,  550,  550,  550,  550,  550,  550,  550,   80,
      662,  666,  667,  556,  553,  325,  336,  336,  336,  336,
      336,  336,  661,  229,  553,  447,  229,  552,  692,  227,
      447,  740,  448,  552,  457,  520,  458,  731,  550,  550,
      550,  550,  550,  550,  290,  550,  550,  550,  550,  550,
      550,  688,  712,  689,  692,  553,  690,  691,  290,  107,
      713,  553,  107,  731,  557,  708,  558,  709,  552,   80,
      710,  711,  767,  290,  338,  552,  538,  339,  712,  768,
      795,   80,  340,  544,  341,  107,   80,  290,  107,  713,
      342,  343,  118,  499,  712,  344,  553,  796,  345,  799,

       80,  559,  713,  553,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550, 1925,   80,  118,  798,
      712,  560,   80,  235,  235,  235,  235,  235,  235,  235,
      809,  713,  118,  692,  552,  692,  312,  797,  692,  692,
      552,  449,  449,  449,  449,  449,  449,  449,  468,  468,
      468,  468,  468,  468,  468,  468,  468,   80,  118,  692,
       80,  692,  553,  672,  692,  312,  692,  467,  553,  467,
       80,  561,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  802,  867,  804,  312,  562,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  712,  262,   80,  264,  769,   80,
      265,  266,  713,  312,  266,  742,  696,   80,  697,  742,
       80,  698,  699,  821,  806,  800,  684,  817,  743,  499,
      712,  262,  744,  264, 1947,  476,  265,  770,  266,  692,
      732,  713,  733,  266,  742,  734,  735,  776,  742,  266,
      477,  477,  477,  477,  477,  477,  477,  477,  477,   80,
       80,   80,   80,  731,   80,  692,   80,  818,  801,  478,
      479,  480,  837,  803,  481,  482,  777,  810,  482,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  822,  731,
      483,   80, 1927, 1947,   80,  478,  479,  480,  745,  700,

      481,  701,  482,  805,  813,  700,  746,  482,  700,  693,
       80,  693,   80,  482,  694,  694,  694,  694,  694,  694,
      694,  694,  694,   80,  745,  700,   80,  701,  814,  815,
       80,   80,  700,  811,  823,  746,   80,  700,  839,  485,
      836,  485,  847,  700,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  812,  695,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  277,  277,  277,  277,  277,  277,
      277,  100,  100,   80,  271,   80,  273,   80,  807,  274,
      275,   80,  808,  275,  714,   80,  715,  716,  736,   80,
      737,   80,  826,  717,  736,  704,  816,  736,   80,  828,

      271,  843,  273,  838,  494,  274,  827,  275,  825,   80,
      718,  880,  275,  719,  736,  716,  737,  229,  275,  495,
      495,  736,  717,  896,   80,   80,  736, 1206,  829,  720,
      840,  721,  736,   80,  722,  723,  725,  713,  726,  727,
      819,  834,  496,  497,  498,  499,  500,   80,  820,  528,
      745,  501,  712,  724,  500,   80,  835,   80,  746,  502,
      713,   80,  728,  713,   80,  729, 1929,  727,  503,  497,
      841,  504,  844,  499,  842,  500,  745,  720,  712,  721,
      501,  846,  722,  723,   80,  500,  731,  746,  731,  713,
      745,  731,  731,   80,  747,   80,  748,  749,  746,  848,

      712,   80,  849,  750,  761,  746,  762,  763,  713,   80,
       80,   80,  731, 1947,  731,  528,  745,  731,  845,  731,
      751,   80,  852,  752,  850,  749,  712,  746,  724,  851,
      764,  746,  750,  765,  853,  763,  854,  713,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  550,  550,  550,
      550,  550,  550,   80, 1397,   80,   80,  506,   80,  507,
       80,   80,  508,  509,   80,  859,  509,   80,  550,  550,
      550,  550,  550,  550,  855,  857,  856,  552,  510,  858,
       80,  861,  860,  506,   80,  507,   80,   80,  508,   80,
      509,   80,   80,  866,  864,  509,   80,   80,  552,  875,

      888,  509,  523,  863,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  869,  865,  874,   80,   80,  868,   80,
      524,  524,  524,  524,  524,  524,  553,  525,  526,  527,
      528,  529,   80,   80,   80,  500,  530,  870,  871,  531,
      876,  873,  872,  877,  532,   80,  524,  524,  524,  524,
      524,  524,  878,  533,  526,   80,  534,  753,  528,  754,
      529,  500,  755,  756,   80,  530,  758,   80,  758,  879,
      531,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      745,  757,   80, 1204,  753,  881,  754,   80,  746,  755,
      756,  550,  550,  550,  550,  550,  550,  550,  550,  550,

      550,  550,  550,   80,  887,  882,  745,  745,   80,   80,
       80,  760,  883,   80,   80,  746,  907,  746,  884,   80,
      474,  552,  894,  885,  891,  466,   80,  552,  886,  895,
      912,  994,  889,  745,  482,  757,  550,  550,  550,  550,
      550,  550,  890,  921,  746, 1930,   80,  492,  915,  553,
      916,  466,  713,  917,  918,  553,  550,  550,  550,  550,
      550,  550,  495,  495, 1005,  266,  552,  782,  550,  550,
      550,  550,  550,  550,  783,  550,  550,  550,  550,  550,
      550,  713,   80,   80,  717,  466,  552,  550,  550,  550,
      550,  550,  550,  892,  553,  995,  929,  716,  552,  717,

      723,  484,  730,  484,  935,  552,  717,  893,  509,  784,
       80,  466,  531,  717,  553,   80,  716,  552,  235,  235,
      235,  235,  235,  235,  235,  266,  553,  484,  717,  484,
      996,  999,   80,  553,  786,  717,  727,  500,  531,  500,
       80,  275,  785,  275,  938,  553,  939,  787,  997,  940,
      941, 1007,  788,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  951,  500,  727,  500,  756,  789, 1018,  790,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  712,  262,
       80,  264,  712,   80,  265,  266,  713,  924,  266,  925,

      713,   80,  926,  927,   80, 1006, 1003,  930,   80,  931,
      684,   80,  932,  933,  712,  262,  998,  264,  712,  702,
      265,  928,  266,  742, 1000,  713, 1010,  266,  717,  713,
      500,  934,  746,  266,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  930,  750,  931,  750,  742,  932,  933,
     1947,  742,  742,  478,   80,  480,  500,  717,  481,  482,
      743,  746,  482,  749,  945,  924,  500,  925,   80,   80,
      926,  927,   80,  750,  911,  750,  742, 1001,   80,  478,
      742,  480, 1002, 1004,  481,   80,  482, 1011, 1008, 1009,
     1947,  482,  500,  693,  934,  693,  717,  482,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  928,   80,  749,  763,
      531,   80, 1015,  531,   80,  717,  271,  750,  273,   80,
     1014,  274,  275, 1019,   80,  275,  505,  505,  505,  505,
      505,  505,  505,  505,  505,   80,  531,  704,  763,  531,
       80, 1013,  271, 1012,  273,   80,  750,  274, 1017,  275,
     1025, 1016, 1183,  946,  275,  947,   80,  745,  948,  949,
      275,   80,  942, 1066,  942,  746,  738,  943,  943,  943,
      943,  943,  943,  943,  943,  943,   80,  950, 1021,  745,
      946,   80,  947,  745,  750,  948,  949,  746,   80, 1932,

     1022,   80,   80, 1040,  746,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  957,  745,  958,  944, 1048,  959,
      960,  750,  758,  750,  758, 1020,  746,  759,  759,  759,
      759,  759,  759,  759,  759,  759, 1037,  531,  961,   80,
     1947,  950,   80,  957,   80,  958,   80, 1054,  959,  960,
      750,  952,  952,  952,  952,  952,  952,  952,  952,  952,
       80,   80, 1024,  531, 1042,   80,  531,   80,   80, 1023,
      953, 1065,  954, 1034, 1038,  955,  953,   80,   80,  953,
      970,  970,  970,  970,  970,  970, 1035, 1039,   80,   80,
     1041,  956,  531,   80,  961,   80,  953, 1045,  954,   80,

     1047,  955, 1046,  953, 1043, 1095, 1934, 1947,  953,  700,
     1044, 1049,   80,   80,  953,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550, 1050,  550,  550,
      550,  550,  550,  550,   80,   80, 1060,   80,  972,  550,
      550,  550,  550,  550,  550,  552, 1056, 1069,   80, 1053,
       80,  552,  550,  550,  550,  550,  550,  550,  552,  550,
      550,  550,  550,  550,  550,   80, 1051,   80, 1058,  552,
     1055, 1061, 1052,  553,   80,   80, 1059,   80, 1947,  553,
       80,   80,  552, 1071,   80, 1064,  553, 1062, 1070,  552,
       80,   80, 1063, 1073,  981,   80,   80,  553, 1068, 1079,

      982,  983,   80,  984,  550,  550,  550,  550,  550,  550,
      553,  550,  550,  550,  550,  550,  550,  553, 1067,   80,
     1072,   80, 1947,  985,   80,   80,  986,  550,  550,  550,
      550,  550,  550, 1074,  552,   80, 1076,   80,   80, 1080,
      466,  552, 1077,   80,  692, 1075, 1099, 1082,  717,  500,
      927, 1078, 1100,  717, 1102,  692,  933,  552,  736, 1107,
     1081, 1116,  553,  949,   80,  960,  466,   80,   80,  553,
      692, 1152, 1947, 1154, 1947,  500, 1153,  717,  988,  484,
      266,  692,  717,  987,  482,  553,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  482,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  484, 1229,  989,   80,  750,
      953,  500,  750,  731,  731, 1161, 1108,  531,  531,  275,
      970,  970,  970,  970,  970,  970,  905,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  919,  500,  750,  731,
      731,  750, 1108,  531,  531,   80,  478, 1130,  480,   80,
       80,  481,  482,  509,  509,  482,  943,  943,  943,  943,
      943,  943,  943,  943,  943,   80, 1159,  911,   80, 1160,
     1150,   80,  478, 1163,  480,   80, 1131,  481,  972,  482,
       80, 1158,   80, 1151,  482, 1167, 1505, 1947, 1162, 1164,
      482, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

      952,  952,  952,  952,  952,  952,  952,  952,  952, 1155,
      953, 1156,  954,   80, 1157,  955,  953,   80, 1177,  953,
       80, 1109,   80, 1110,   80, 1169, 1111, 1112,   80,   80,
     1166, 1106,   80, 1168,   80, 1165,  953, 1181,  954,   80,
      956,  955, 1175,  953, 1108,   80, 1173, 1170,  953, 1171,
      942, 1172,  942,   80,  953,  943,  943,  943,  943,  943,
      943,  943,  943,  943,   80, 1113, 1205, 1114, 1938,   80,
     1108, 1113,   80,   80, 1113, 1125, 1125, 1125, 1125, 1125,
     1125,  550,  550,  550,  550,  550,  550, 1174, 1178, 1176,
     1179, 1113, 1127, 1114,   80,   80,   80,   80, 1113,   80,

       80,   80, 1213, 1113, 1180, 1214, 1194, 1198,   80, 1113,
       80,  552,  550,  550,  550,  550,  550,  550, 1182,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550, 1184, 1193, 1128, 1129,   80,   80,   80,   80,  553,
       80,   80,  552,   80,   80, 1196,   80, 1199, 1140,  552,
     1201, 1212, 1211, 1202, 1195,  552,  550,  550,  550,  550,
      550,  550, 1197,  550,  550,  550,  550,  550,  550, 1200,
      553,  550,  550,  550,  550,  550,  550,  553,   80, 1141,
       80, 1215,   80,  553, 1940, 1289,  552,   80,   80,   80,
     1218,   80, 1143,  552,  550,  550,  550,  550,  550,  550,

     1142,  552,  550,  550,  550,  550,  550,  550, 1203,   80,
     1209, 1208, 1210,   80,  553,   80,   80,   80,   80,   80,
       80,  553, 1216,  692,  552, 1219, 1207,  731, 1253,  553,
       80,   80,  552, 1220, 1221,   80, 1144, 1232, 1217, 1233,
     1223, 1222, 1234, 1235, 1145, 1279,   80, 1146,   80,  692,
       80,   80,  553,  731, 1401, 1286, 1287, 1254, 1280,   80,
      553,   80, 1290,  482, 1284, 1281,   80,  509, 1278, 1148,
     1942, 1294, 1147,  910,  910,  910,  910,  910,  910,  910,
      910,  910, 1288,  952,  952,  952,  952,  952,  952,  952,
      952,  952, 1125, 1125, 1125, 1125, 1125, 1125,   80,   80,

      550,  550,  550,  550,  550,  550,   80,   80, 1947, 1127,
     1300, 1298, 1296, 1093, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1115, 1125, 1125, 1125, 1125, 1125, 1125,
      552, 1291, 1282,  953, 1292,  954, 1283,   80,  955,  953,
       80, 1127,  953,  550,  550,  550,  550,  550,  550, 1944,
       80, 1129, 1293,   80, 1106,   80,   80,   80,  553,  953,
     1304,  954, 1299, 1297,  955,   80,  953,   80, 1295, 1302,
       80,  953, 1306,  552, 1947, 1303, 1330,  953, 1301, 1305,
     1945, 1267, 1128, 1129, 1243, 1243, 1243, 1243, 1243, 1243,
      550,  550,  550,  550,  550,  550,   80,   80,   80, 1307,

     1312,  553,   80,   80,   80,   80, 1309,   80, 1268,  550,
      550,  550,  550,  550,  550, 1310, 1308, 1313,   80, 1322,
      552,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,   80, 1328,   80,   80,   80,   80,  552,
       80, 1331, 1245, 1311,   80, 1246, 1321, 1323,  553,   80,
     1247,  552, 1248, 1324, 1332, 1333,   80,  552, 1249, 1250,
     1269,   80, 1325, 1251,   80,   80, 1252,  553,   80, 1335,
     1270,  550,  550,  550,  550,  550,  550, 1336, 1334,  553,
     1108,   80, 1108, 1329, 1389,  553, 1271,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550, 1326,

       80,  552, 1354, 1343,   80, 1327, 1108, 1113, 1108, 1272,
     1386,   80, 1387, 1337,   80, 1388,   80,  552,   80,   80,
      953,   80,  953,  552, 1394, 1392,   80,   80,   80,  553,
     1398, 1355,   80,   80, 1408, 1393, 1395, 1273, 1390, 1396,
       80, 1406, 1400, 1391,   80,  553,   80, 1412,   80, 1399,
     1403,  553, 1350, 1350, 1350, 1350, 1350, 1350,   80, 1275,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1274,
       80,   80, 1402, 1405,   80, 1404, 1407,   80,   80, 1426,
     1409, 1410, 1352, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350,   80,   80, 1415, 1411, 1413,

     1228, 1243, 1243, 1243, 1243, 1243, 1243,   80, 1947,   80,
     1353,   80, 1414, 1352,   80,   80, 1423, 1474,   80, 1352,
       80, 1350, 1350, 1350, 1350, 1350, 1350,   80,   80, 1416,
     1356, 1350, 1350, 1350, 1350, 1350, 1350,   80, 1421, 1422,
       80, 1353, 1425,   80, 1440, 1424, 1108, 1353,   80, 1476,
     1475, 1352,   80,   80,   80, 1428, 1357, 1492, 1555, 1245,
       80, 1352, 1246, 1430, 1429, 1427,   80, 1247,   80, 1248,
       80, 1480, 1108, 1441,   80, 1249, 1250, 1486, 1946, 1353,
     1251, 1477,   80, 1252, 1358,   80,  953,   80, 1478, 1353,
     1479,   80, 1506, 1481, 1359, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350,   80,  550,  550,  550,  550,  550,  550,
       80, 1484,   80,   80, 1485, 1352, 1489,   80,   80,   80,
     1490, 1352, 1493,   80,   80,   80,   80, 1352, 1947, 1496,
     1482, 1488, 1947, 1483,  552,  550,  550,  550,  550,  550,
      550, 1487, 1491, 1353,   80,   80, 1494, 1497, 1495, 1353,
       80,   80,   80, 1498,   80, 1353,   80, 1552, 1361, 1507,
     1499, 1360,  553, 1554, 1503,  552,  550,  550,  550,  550,
      550,  550, 1362,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,   80, 1375,   80,   80,   80,

     1556, 1557, 1559,  553, 1558,   80,  552,   80, 1376,   80,
       80, 1504, 1947,  552, 1508,   80, 1560, 1574, 1561,  552,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550, 1553, 1562,  553,   80,   80,   80, 1947,   80,
     1563,  553, 1564,   80,   80,   80,   80,  553, 1566,   80,
      552,   80, 1379, 1573, 1568, 1377,  552,  550,  550,  550,
      550,  550,  550, 1565, 1632, 1378, 1567,   80, 1383, 1383,
     1383, 1383, 1383, 1383,   80,   80, 1575,   80,  553, 1576,
     1617,   80,   80, 1912,  553, 1127, 1577,  552, 1350, 1350,
     1350, 1350, 1350, 1350, 1583, 1744, 1667,   80,  552, 1380,

     1350, 1350, 1350, 1350, 1350, 1350, 1616,   80, 1381, 1350,
     1350, 1350, 1350, 1350, 1350,  553,   80,   80, 1352, 1618,
     1619, 1947,   80, 1584, 1382, 1620,  553, 1129,   80, 1709,
     1352, 1350, 1350, 1350, 1350, 1350, 1350, 1910, 1623, 1352,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1353,   80,
       80, 1352, 1621, 1622,   80,   80,   80, 1353, 1625, 1624,
     1352,   80,   80, 1634, 1626, 1627, 1352,   80,   80,   80,
       80, 1947, 1352,   80,   80, 1446,   80, 1631, 1742, 1353,
     1350, 1350, 1350, 1350, 1350, 1350, 1673,   80, 1353, 1666,

     1668, 1906, 1635, 1669, 1353,   80, 1670, 1671, 1447,   80,
     1353,   80, 1672, 1448, 1674, 1810,   80, 1904, 1450, 1675,
     1352, 1350, 1350, 1350, 1350, 1350, 1350,   80, 1677, 1947,
     1947, 1451, 1449,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,   80,   80, 1900, 1353,   80,
     1708, 1352,  550,  550,  550,  550,  550,  550,   80,  522,
     1778,  522,  346,  552,  346,   80, 1743, 1452, 1779,  552,
     1710,   80,  550,  550,  550,  550,  550,  550, 1947, 1353,
     1711, 1777,  552,  550,  550,  550,  550,  550,  550, 1706,
       80,  553, 1734, 1706, 1811, 1706, 1898,  553, 1734, 1706,

     1834, 1453,  552, 1454, 1663, 1663, 1663, 1663, 1663, 1663,
      553, 1664, 1466,  552,  550,  550,  550,  550,  550,  550,
     1467,  550,  550,  550,  550,  550,  550,  348, 1468,  348,
      553, 1894, 1892,  550,  550,  550,  550,  550,  550, 1890,
      451,  553,  451,  453,  552,  453, 1707, 1469, 1947, 1735,
     1707,  552, 1383, 1383, 1383, 1383, 1383, 1383,  455, 1886,
      455, 1734, 1470,  552, 1706, 1947,  462, 1734,  462, 1127,
     1706, 1947,  553, 1515, 1515, 1515, 1515, 1515, 1515,  553,
     1883, 1842,  552,  464, 1734,  464, 1471, 1842, 1881, 1275,
     1734,  553, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1856,  563, 1879,  563, 1472, 1947,
     1856, 1129, 1350, 1350, 1350, 1350, 1350, 1350, 1735, 1842,
     1947, 1707, 1352, 1869,  565, 1842,  565,  673, 1352,  673,
     1947, 1517, 1350, 1350, 1350, 1350, 1350, 1350, 1843, 1947,
     1947, 1735, 1352, 1350, 1350, 1350, 1350, 1350, 1350,  675,
     1353,  675, 1706, 1856, 1734,  679, 1353,  679, 1706, 1856,
     1734, 1857, 1352, 1350, 1350, 1350, 1350, 1350, 1350, 1867,
     1353, 1526,  681, 1352,  681, 1947, 1843, 1527, 1350, 1350,
     1350, 1350, 1350, 1350,  771, 1528,  771,  773, 1865,  773,
     1353, 1947,  778, 1352,  778,  780, 1529,  780,  791, 1854,

      791, 1353, 1350, 1350, 1350, 1350, 1350, 1350, 1352, 1707,
     1857, 1735, 1947, 1853, 1530, 1350, 1350, 1350, 1350, 1350,
     1350, 1353,  550,  550,  550,  550,  550,  550,   80, 1947,
     1531, 1842, 1352,  793, 1851,  793, 1353, 1842,  550,  550,
      550,  550,  550,  550, 1947, 1352,  550,  550,  550,  550,
      550,  550,  552, 1856,  830, 1849,  830, 1532, 1947, 1856,
     1353,  550,  550,  550,  550,  550,  550, 1847,  552, 1533,
      832, 1947,  832, 1353, 1845,  897,  552,  897, 1947, 1947,
      553,  550,  550,  550,  550,  550,  550, 1856, 1843, 1838,
      899,  552,  899, 1856, 1836, 1534,  553, 1275, 1515, 1515,

     1515, 1515, 1515, 1515,  553, 1546,  901,  903,  901,  903,
     1857,  552,  550,  550,  550,  550,  550,  550,   80,  553,
      550,  550,  550,  550,  550,  550, 1833, 1831, 1547, 1125,
     1125, 1125, 1125, 1125, 1125,  962,  964,  962,  964,  553,
     1827, 1947,  552, 1548, 1857, 1825, 1127, 1549, 1815,  966,
      552,  966,  968,  973,  968,  973, 1517, 1814,   80, 1350,
     1350, 1350, 1350, 1350, 1350,  975,  977,  975,  977, 1807,
      553, 1350, 1350, 1350, 1350, 1350, 1350,  979,  553,  979,
     1149, 1805, 1149, 1550,  990, 1551,  990, 1582, 1129, 1352,
     1350, 1350, 1350, 1350, 1350, 1350,  992, 1026,  992, 1026,

     1801, 1352, 1350, 1350, 1350, 1350, 1350, 1350, 1799, 1350,
     1350, 1350, 1350, 1350, 1350, 1797, 1028, 1353, 1028, 1030,
     1352, 1030, 1032, 1224, 1032, 1224, 1593, 1786, 1085, 1353,
     1085, 1087, 1352, 1087, 1225, 1089, 1225, 1089, 1594, 1352,
     1350, 1350, 1350, 1350, 1350, 1350, 1785, 1782, 1353, 1350,
     1350, 1350, 1350, 1350, 1350,   79, 1117,   79, 1117, 1781,
     1353, 1350, 1350, 1350, 1350, 1350, 1350, 1353, 1776, 1596,
     1352, 1595, 1774, 1350, 1350, 1350, 1350, 1350, 1350, 1352,
      550,  550,  550,  550,  550,  550, 1119, 1772, 1119, 1597,
     1947, 1352,  550,  550,  550,  550,  550,  550, 1353, 1121,

     1123, 1121, 1123, 1352, 1132, 1947, 1132, 1353, 1762, 1947,
      552,  550,  550,  550,  550,  550,  550, 1755, 1134, 1353,
     1134, 1598,  552, 1753, 1136, 1599, 1136, 1138, 1185, 1138,
     1185, 1353,  550,  550,  550,  550,  550,  550,  553, 1600,
     1601,  552, 1187, 1189, 1187, 1189, 1609, 1191, 1751, 1191,
      553, 1612, 1612, 1612, 1612, 1612, 1612, 1236, 1238, 1236,
     1238, 1610,  552, 1349, 1613, 1349, 1750, 1748, 1127,  553,
      550,  550,  550,  550,  550,  550, 1240,  334, 1240,  334,
     1746,  552, 1125, 1125, 1125, 1125, 1125, 1125,   80, 1732,
      553, 1611, 1256, 1258, 1256, 1258, 1614, 1731, 1722, 1127,

      552, 1350, 1350, 1350, 1350, 1350, 1350, 1719, 1717,  553,
     1129, 1715, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1260, 1262, 1260, 1262,  553, 1713,
     1374, 1352, 1374, 1264,  337, 1264,  337, 1615,   80,   80,
     1582, 1129, 1352, 1276, 1314, 1276, 1314,   80, 1352, 1350,
     1350, 1350, 1350, 1350, 1350, 1316, 1420, 1316, 1420, 1353,
     1350, 1350, 1350, 1350, 1350, 1350, 1318,  376, 1318,  376,
     1353, 1338, 1340, 1338, 1340,   80, 1353, 1648, 1436, 1352,
     1436, 1346, 1647, 1346,  546, 1363,  546, 1363, 1649,   80,
     1352, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1365, 1367, 1365, 1367, 1353,   80,   80,
     1650, 1350, 1350, 1350, 1350, 1350, 1350, 1369, 1353, 1369,
     1463, 1352, 1463,   80, 1371, 1651, 1371, 1352, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
      551, 1352,  551, 1703, 1703, 1703, 1703, 1703, 1703, 1353,
     1704, 1384, 1500, 1384, 1500, 1353, 1702, 1417, 1352, 1417,
      598, 1700,  598, 1653, 1352, 1431, 1433, 1431, 1433, 1353,
     1437, 1688, 1437, 1652, 1660, 1660, 1660, 1660, 1660, 1660,
     1442, 1444, 1442, 1444, 1687, 1685, 1353, 1661, 1455, 1683,
     1455, 1127, 1353, 1654, 1655,  550,  550,  550,  550,  550,

      550, 1697, 1681, 1457,  552, 1457, 1679, 1459, 1947, 1459,
       80, 1676, 1947,  550,  550,  550,  550,  550,  550, 1461,
     1464, 1461, 1464,   80,   80,  552, 1947,  992, 1659,  992,
     1947, 1658,  553, 1129, 1612, 1612, 1612, 1612, 1612, 1612,
     1501, 1646, 1501,  552, 1087, 1645, 1087, 1613,   79, 1643,
       79, 1127, 1641,  553, 1947, 1639,  550,  550,  550,  550,
      550,  550, 1637, 1633,  552, 1275, 1511,   80, 1511, 1947,
       80,  553, 1947, 1947,  550,  550,  550,  550,  550,  550,
     1662, 1513, 1518, 1513, 1518,   80,  552, 1947, 1520, 1630,
     1520, 1947, 1629, 1129, 1350, 1350, 1350, 1350, 1350, 1350,

     1522, 1524, 1522, 1524,  552, 1350, 1350, 1350, 1350, 1350,
     1350, 1535,   80, 1535,  553, 1947, 1350, 1350, 1350, 1350,
     1350, 1350,   80, 1537, 1352, 1537, 1605,   80, 1605, 1665,
       80,   80,  553, 1947, 1539, 1352, 1539,  971, 1608,  971,
     1275, 1542, 1544, 1542, 1544, 1569, 1352, 1569, 1571, 1578,
     1571, 1578, 1353, 1350, 1350, 1350, 1350, 1350, 1350,  334,
     1585,  334, 1585, 1353, 1587, 1589, 1587, 1589, 1691, 1591,
     1656, 1591, 1656, 1602, 1353, 1602, 1690, 1126, 1606, 1126,
     1606, 1607, 1604, 1352, 1350, 1350, 1350, 1350, 1350, 1350,
      337, 1628,  337, 1628, 1603, 1692, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  376, 1592,
      376, 1353, 1590,  546, 1352,  546, 1636, 1588, 1636, 1698,
     1698, 1698, 1698, 1698, 1698, 1638, 1352, 1638, 1640, 1642,
     1640, 1642, 1352, 1586, 1580, 1693, 1127, 1689, 1644, 1689,
     1644, 1244, 1353, 1244, 1657, 1579, 1657, 1694,  551, 1352,
      551,  598,   80,  598, 1353, 1678, 1680, 1678, 1680, 1682,
     1353, 1682, 1572, 1660, 1660, 1660, 1660, 1660, 1660,  550,
      550,  550,  550,  550,  550, 1695, 1661, 1353, 1129, 1684,
     1127, 1684, 1570,   80, 1696, 1663, 1663, 1663, 1663, 1663,
     1663,   80, 1664,  552, 1720, 1686, 1720, 1686,   80,  552,

      550,  550,  550,  550,  550,  550, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1351, 1699,
     1351, 1699, 1129, 1701, 1712, 1701, 1712,  553,   80, 1714,
      552, 1714, 1716,   80, 1716, 1275, 1352, 1718, 1745, 1718,
     1745,   80, 1352, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1747,   80, 1747,  553, 1783,
     1749, 1783, 1749, 1516, 1353, 1516, 1752, 1275, 1752, 1754,
     1353, 1754, 1126, 1352, 1126, 1771, 1773, 1771, 1773, 1352,
     1775, 1812, 1775, 1812,   80, 1723, 1350, 1350, 1350, 1350,
     1350, 1350, 1780, 1724, 1780, 1350, 1350, 1350, 1350, 1350,

     1350, 1353, 1581, 1784, 1581, 1784,   80, 1353, 1350, 1350,
     1350, 1350, 1350, 1350,   80, 1244, 1352, 1244, 1798, 1725,
     1798, 1800, 1545, 1800, 1726, 1352, 1350, 1350, 1350, 1350,
     1350, 1350, 1698, 1698, 1698, 1698, 1698, 1698, 1352, 1804,
     1806, 1804, 1806, 1868, 1353, 1868, 1884, 1543, 1884, 1127,
     1935, 1541, 1935, 1353, 1540, 1936, 1352, 1936, 1538, 1536,
     1525, 1523, 1352, 1521, 1519, 1727, 1353, 1514, 1512, 1113,
     1655, 1510, 1509, 1728, 1703, 1703, 1703, 1703, 1703, 1703,
       80, 1704,   80,   80, 1353, 1736, 1736, 1736, 1736, 1736,
     1736, 1129, 1664, 1350, 1350, 1350, 1350, 1350, 1350, 1737,

       80, 1729, 1705, 1502,   80,   80,   80, 1705, 1350, 1350,
     1350, 1350, 1350, 1350,   80,   80, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1352, 1350, 1350, 1350, 1350, 1350, 1350,
     1705, 1350, 1350, 1350, 1350, 1350, 1350,   80, 1352, 1350,
     1350, 1350, 1350, 1350, 1350, 1473, 1465, 1462, 1739, 1460,
     1458, 1353, 1456, 1705, 1352, 1445, 1443, 1439, 1705, 1705,
     1438, 1352, 1705, 1705, 1113, 1113, 1353, 1435, 1655, 1352,
     1705, 1434, 1432,   80, 1705, 1756, 1705, 1740, 1705,   80,
     1741,   80, 1353,   80,   80,   80,   80, 1419, 1418, 1353,
     1350, 1350, 1350, 1350, 1350, 1350,   80, 1353, 1350, 1350,

     1350, 1350, 1350, 1350,   80, 1759, 1757, 1763, 1763, 1763,
     1763, 1763, 1763, 1758, 1704,   80,   80,   80,   80,   80,
     1352, 1764, 1736, 1736, 1736, 1736, 1736, 1736, 1352, 1664,
     1125, 1125, 1125, 1125, 1125, 1125, 1737, 1350, 1350, 1350,
     1350, 1350, 1350, 1385, 1373, 1372, 1370, 1127, 1353, 1368,
     1366, 1706, 1364, 1348, 1347, 1113, 1353, 1706, 1345, 1344,
     1342, 1760,  736, 1761, 1733,  700, 1341, 1352, 1339, 1733,
       80, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1765, 1765,
     1765, 1765, 1765, 1765, 1765,   80,   80,   80,   80, 1129,
       80,   80, 1733,   80,   80, 1353, 1350, 1350, 1350, 1350,

     1350, 1350,   80, 1787,   80,   80,   80,   80, 1707,   80,
     1766, 1770, 1320, 1319, 1317, 1733, 1315,   80,   80, 1277,
     1733, 1733, 1266, 1265, 1733, 1733, 1352, 1263, 1261, 1259,
     1257, 1255, 1733, 1242, 1241, 1239, 1733, 1237, 1733, 1767,
     1733,  960, 1768, 1350, 1350, 1350, 1350, 1350, 1350,  953,
     1231, 1230,  949, 1228, 1353, 1790, 1790, 1790, 1790, 1790,
     1790,  736,  736, 1227,  933, 1788,  927,  492, 1791,  700,
      700, 1226, 1127, 1352, 1350, 1350, 1350, 1350, 1350, 1350,
      474, 1084,   80,   80,   80, 1352, 1350, 1350, 1350, 1350,
     1350, 1350, 1763, 1763, 1763, 1763, 1763, 1763,   80, 1704,

       80, 1353,   80,   80, 1352,   80, 1764, 1125, 1125, 1125,
     1125, 1125, 1125, 1353, 1129,   80, 1352,   80,   80,   80,
       80,   80,   80, 1789, 1127, 1734,   80,   80,   80, 1192,
     1190, 1734, 1353, 1188, 1706, 1186,   80, 1139, 1792, 1137,
     1706, 1135, 1133, 1124, 1353, 1794, 1794, 1794, 1794, 1794,
     1794, 1794, 1122, 1793, 1802, 1802, 1802, 1802, 1802, 1802,
     1802, 1120, 1118,  960,  960, 1115, 1129, 1819, 1819, 1819,
     1819, 1819, 1819,  756, 1820, 1706,  949,  949,  945,  736,
     1104, 1706, 1735, 1103, 1101, 1795,  933,  933,  723,  927,
      927, 1707,  492,  492, 1803, 1769, 1769, 1769, 1769, 1769,

     1769, 1769, 1098,  700, 1816, 1816, 1816, 1816, 1816, 1816,
     1350, 1350, 1350, 1350, 1350, 1350, 1097, 1817, 1096, 1094,
     1093, 1127, 1839, 1839, 1839, 1839, 1839, 1839,  474, 1840,
      474, 1092, 1707, 1706, 1352, 1091, 1090, 1088, 1086, 1706,
     1352, 1084,   80,   80,   80, 1350, 1350, 1350, 1350, 1350,
     1350,   80,   80, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
     1808, 1808, 1353, 1129,   80,   80,   80,   80, 1353, 1808,
     1808, 1808, 1808, 1808, 1808, 1352,   80,   80,   80,   80,
     1655, 1350, 1350, 1350, 1350, 1350, 1350,   80,   80, 1033,
     1707, 1031, 1029, 1809, 1027, 1808, 1808, 1808, 1808, 1808,

     1808,   80,  993, 1353, 1790, 1790, 1790, 1790, 1790, 1790,
      991, 1352, 1818,  980,  978,  976,  974, 1791,  969,  967,
      965, 1127, 1350, 1350, 1350, 1350, 1350, 1350,  963,  544,
      538,  766,  756,  756, 1352, 1734,  520,  514,  509, 1353,
      937, 1734,  936,  723, 1734,  723,  492,  923,  922,  920,
     1734,  919, 1352,  482, 1821, 1822, 1822, 1822, 1822, 1822,
     1822, 1822,  914, 1129, 1794, 1794, 1794, 1794, 1794, 1794,
     1794,  913,  474,  909, 1816, 1816, 1816, 1816, 1816, 1816,
     1353,  908,  906,  905,  904,  902,  678, 1817, 1655,  678,
     1706, 1127, 1735,  900,  898, 1823, 1706,   80,   80,   80,

       80, 1735, 1734,   80, 1352,   80,   80,   80, 1734,   80,
     1802, 1802, 1802, 1802, 1802, 1802, 1802,   80,  833,  831,
      599,  794, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828,
     1828,  792,  781, 1129,  779,  775,  774,  772, 1828, 1828,
     1828, 1828, 1828, 1828,  547,  544,  544, 1707, 1819, 1819,
     1819, 1819, 1819, 1819,  318, 1820,  538,  538,  520, 1735,
      520,  296, 1829,  514, 1828, 1828, 1828, 1828, 1828, 1828,
     1706,  514,  738,  730,  275,  707, 1706,  706,  702,  266,
      687,  686, 1350, 1350, 1350, 1350, 1350, 1350,  682,  680,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1350,

     1350, 1350, 1350, 1350, 1350,  458, 1808, 1808, 1808, 1808,
     1808, 1808, 1352, 1839, 1839, 1839, 1839, 1839, 1839,  458,
     1840,  678,  676,  674,   80,   80,   80, 1707,  599, 1352,
     1809,  567, 1808, 1808, 1808, 1808, 1808, 1808, 1734,  566,
     1353,  564,  547,  330, 1734,  329,  318,  318, 1655,  303,
      296,  296,  269,  476,  465,  463,  461, 1353, 1822, 1822,
     1822, 1822, 1822, 1822, 1822,  458, 1655, 1858, 1858, 1858,
     1858, 1858, 1858,  457, 1820, 1870, 1870, 1870, 1870, 1870,
     1870, 1859, 1840, 1858, 1858, 1858, 1858, 1858, 1858, 1871,
     1820,  456,  454,  452,  229, 1735, 1841, 1859,   80,   80,

      377, 1841, 1125, 1125, 1125, 1125, 1125, 1125,  350,  349,
     1860, 1860, 1860, 1860, 1860, 1860, 1860,  347,  330, 1127,
      335,  333,  330,  328, 1841, 1870, 1870, 1870, 1870, 1870,
     1870,  327, 1840,  326,  269,  260,  259,   78,  258, 1871,
       78,   80, 1861,  231,  170,  153,  128, 1841,  123,   80,
     1947,   69, 1841, 1841,   69, 1947, 1841, 1841, 1947, 1947,
     1947, 1129, 1947, 1947, 1841, 1947, 1947, 1947, 1841, 1947,
     1841, 1862, 1841, 1947, 1863, 1855, 1947, 1947, 1947, 1947,
     1855, 1947, 1125, 1125, 1125, 1125, 1125, 1125, 1947, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1947, 1947, 1947, 1127,

     1947, 1947, 1947, 1855, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1873, 1947, 1947, 1947, 1947, 1855, 1947, 1947, 1947,
     1947, 1855, 1855, 1947, 1842, 1855, 1855, 1947, 1947, 1947,
     1842, 1129, 1856, 1855, 1947, 1947, 1947, 1855, 1856, 1855,
     1874, 1855, 1947, 1875, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1947, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1842, 1947, 1947, 1947, 1947, 1947, 1842,
     1842, 1843, 1947, 1947, 1877, 1947, 1842, 1947, 1947, 1857,

     1947, 1947, 1888, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1856, 1947, 1947, 1947, 1947,
     1843, 1856, 1947, 1896, 1947, 1947, 1947, 1843, 1842, 1947,
     1947, 1947, 1947, 1947, 1842, 1907, 1907, 1907, 1907, 1907,
     1907, 1907, 1947, 1947, 1947, 1947, 1947, 1947, 1901, 1901,
     1901, 1901, 1901, 1901, 1901, 1901, 1901, 1856, 1947, 1947,
     1947, 1947, 1947, 1856, 1901, 1901, 1901, 1901, 1901, 1901,
     1947, 1947, 1857, 1947, 1947, 1908, 1947, 1887, 1887, 1887,

     1887, 1887, 1887, 1887, 1947, 1843, 1947, 1947, 1902, 1947,
     1901, 1901, 1901, 1901, 1901, 1901, 1947, 1947, 1947, 1947,
     1947, 1947, 1842, 1947, 1947, 1947, 1947, 1947, 1842, 1947,
     1947, 1947, 1947, 1947, 1857, 1856, 1947, 1947, 1947, 1947,
     1947, 1856, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1947,
     1947, 1947, 1947, 1947, 1947, 1913, 1913, 1913, 1913, 1913,
     1913, 1913, 1913, 1913, 1856, 1947, 1947, 1947, 1947, 1947,
     1856, 1913, 1913, 1913, 1913, 1913, 1913, 1947, 1947, 1843,
     1947, 1947, 1947, 1947, 1907, 1907, 1907, 1907, 1907, 1907,
     1907, 1947, 1857, 1947, 1947, 1914, 1947, 1913, 1913, 1913,

     1913, 1913, 1913, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1857, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841,
     1841, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1841, 1841,
     1841, 1841, 1841, 1841, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1841, 1947, 1841, 1841, 1841, 1841, 1841, 1841,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   79, 1947, 1947, 1947, 1947,
       79, 1947,   79,   79,   79,   79,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  232,  232, 1947,  232,  232, 1947,  232,  232,  232,
      232,  232,  232,  232, 1947,  232,  240,  240, 1947, 1947,
      240,  240,  240,  240,  240,  240,  240,  240,  240, 1947,
      240,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  304,  304, 1947,  304,
     1947, 1947,  304,  334, 1947, 1947, 1947, 1947, 1947, 1947,

      334,  334,  334,  334,  337,  337, 1947,  337, 1947, 1947,
     1947, 1947, 1947, 1947,  337,  337,  337,  337,  346, 1947,
      346, 1947, 1947,  346,  348, 1947,  348, 1947, 1947,  348,
      376, 1947, 1947, 1947, 1947, 1947, 1947,  376,  376,  376,
      376,  451, 1947,  451, 1947, 1947,  451,  453, 1947,  453,
     1947, 1947,  453,  455, 1947,  455, 1947, 1947,  455,  240,
      240, 1947, 1947,  240,  240,  240,  240,  240,  240,  240,
      240,  240, 1947,  240,  462, 1947,  462, 1947, 1947,  462,
      464, 1947,  464, 1947, 1947,  464,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  304,  304, 1947,  304,  546, 1947, 1947, 1947, 1947,
      546, 1947,  546,  546,  546,  546,  337,  337, 1947,  337,
     1947, 1947, 1947, 1947, 1947, 1947,  337,  337,  337,  337,
      551,  551, 1947,  551, 1947, 1947, 1947, 1947,  551,  551,
      551,  551,  551,  551,  563, 1947,  563, 1947, 1947,  563,
      565, 1947,  565, 1947, 1947,  565,   79, 1947, 1947, 1947,
     1947,   79, 1947,   79,   79,   79,   79,  598, 1947, 1947,
     1947, 1947,  598, 1947,  598,  598,  598,  598,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  671,  671,  671,  671,  671,  671,  671,

      671,  671,  671,  671,  671,  671,  671,  671,  673, 1947,
      673, 1947, 1947,  673,  675, 1947,  675, 1947, 1947,  675,
      677, 1947,  677, 1947, 1947,  677,  679, 1947,  679, 1947,
     1947,  679,  681, 1947,  681, 1947, 1947,  681,  741, 1947,
      741,  741, 1947,  741,  522, 1947,  522,  522, 1947,  522,
      546, 1947, 1947, 1947, 1947,  546, 1947,  546,  546,  546,
      546,  771, 1947,  771, 1947, 1947,  771,  773, 1947,  773,
     1947, 1947,  773,  551,  551, 1947,  551, 1947, 1947, 1947,
     1947,  551,  551,  551,  551,  551,  551,  778, 1947,  778,
     1947, 1947,  778,  780, 1947,  780, 1947, 1947,  780,  791,

     1947,  791, 1947, 1947,  791,  793, 1947,  793, 1947, 1947,
      793,   79, 1947, 1947, 1947, 1947,   79, 1947,   79,   79,
       79,   79,  598, 1947, 1947, 1947, 1947,  598, 1947,  598,
      598,  598,  598,  830, 1947,  830, 1947, 1947,  830,  832,
     1947,  832, 1947, 1947,  832,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      897, 1947,  897, 1947, 1947,  897,  899, 1947,  899, 1947,
     1947,  899,  677, 1947,  677, 1947, 1947,  677,  901, 1947,
      901, 1947, 1947,  901,  903, 1947,  903, 1947, 1947,  903,
      741, 1947,  741,  741, 1947,  741,  524, 1947,  524, 1947,

     1947,  524,  962, 1947,  962, 1947, 1947,  962,  964, 1947,
      964, 1947, 1947,  964,  966, 1947,  966, 1947, 1947,  966,
      968, 1947,  968, 1947, 1947,  968,  971,  971, 1947,  971,
     1947, 1947, 1947, 1947, 1947, 1947,  971,  971,  971,  971,
      973, 1947,  973, 1947, 1947,  973,  975, 1947,  975, 1947,
     1947,  975,  977, 1947,  977, 1947, 1947,  977,  979, 1947,
      979, 1947, 1947,  979,  551,  551, 1947,  551, 1947, 1947,
     1947, 1947,  551,  551,  551,  551,  551,  551,  990, 1947,
      990, 1947, 1947,  990,  992, 1947,  992, 1947, 1947,  992,
       79, 1947, 1947, 1947, 1947,   79, 1947,   79,   79,   79,

       79, 1026, 1947, 1026, 1947, 1947, 1026, 1028, 1947, 1028,
     1947, 1947, 1028, 1030, 1947, 1030, 1947, 1947, 1030, 1032,
     1947, 1032, 1947, 1947, 1032, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1085, 1947, 1085, 1947, 1947, 1085, 1087, 1947, 1087, 1947,
     1947, 1087, 1089, 1947, 1089, 1947, 1947, 1089,   79, 1947,
       79, 1947, 1947,   79,  741, 1947,  741, 1947, 1947,  741,
     1117, 1947, 1117, 1947, 1947, 1117, 1119, 1947, 1119, 1947,
     1947, 1119, 1121, 1947, 1121, 1947, 1947, 1121, 1123, 1947,
     1123, 1947, 1947, 1123,  971,  971, 1947,  971, 1947, 1947,

     1947, 1947, 1947, 1947,  971,  971,  971,  971, 1126, 1126,
     1947, 1126, 1947, 1947, 1126, 1947, 1126, 1947, 1126, 1126,
     1126, 1126, 1132, 1947, 1132, 1947, 1947, 1132, 1134, 1947,
     1134, 1947, 1947, 1134, 1136, 1947, 1136, 1947, 1947, 1136,
     1138, 1947, 1138, 1947, 1947, 1138,  551,  551, 1947,  551,
     1947, 1947, 1947, 1947,  551,  551,  551,  551,  551,  551,
       79, 1947, 1947, 1947, 1947,   79, 1947,   79,   79,   79,
       79, 1185, 1947, 1185, 1947, 1947, 1185, 1187, 1947, 1187,
     1947, 1947, 1187, 1189, 1947, 1189, 1947, 1947, 1189, 1191,
     1947, 1191, 1947, 1947, 1191, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1236, 1947, 1236, 1947, 1947, 1236, 1238, 1947, 1238, 1947,
     1947, 1238, 1240, 1947, 1240, 1947, 1947, 1240,  334, 1947,
      334, 1947, 1947,  334, 1126, 1126, 1947, 1126, 1947, 1947,
     1126, 1947, 1126, 1947, 1126, 1126, 1126, 1126, 1244, 1244,
     1947, 1244, 1947, 1947, 1947, 1947, 1947, 1947, 1244, 1244,
     1244, 1244, 1256, 1947, 1256, 1947, 1947, 1256, 1258, 1947,
     1258, 1947, 1947, 1258, 1260, 1947, 1260, 1947, 1947, 1260,
     1262, 1947, 1262, 1947, 1947, 1262, 1264, 1947, 1264, 1947,
     1947, 1264,  337, 1947,  337, 1947, 1947,  337,  551,  551,

     1947,  551, 1947, 1947, 1947, 1947,  551,  551,  551,  551,
      551,  551, 1276, 1947, 1276, 1947, 1947, 1276,   79, 1947,
     1947, 1947, 1947,   79, 1947,   79,   79,   79,   79, 1314,
     1947, 1314, 1947, 1947, 1314, 1316, 1947, 1316, 1947, 1947,
     1316, 1318, 1947, 1318, 1947, 1947, 1318,  376, 1947,  376,
     1947, 1947,  376, 1338, 1947, 1338, 1947, 1947, 1338, 1340,
     1947, 1340, 1947, 1947, 1340, 1346, 1947, 1346, 1947, 1947,
     1346,  546, 1947,  546, 1947, 1947,  546, 1244, 1244, 1947,
     1244, 1947, 1947, 1947, 1947, 1947, 1947, 1244, 1244, 1244,
     1244, 1351, 1351, 1947, 1351, 1947, 1947, 1947, 1947, 1351,

     1351, 1351, 1351, 1351, 1351, 1363, 1947, 1363, 1947, 1947,
     1363, 1365, 1947, 1365, 1947, 1947, 1365, 1367, 1947, 1367,
     1947, 1947, 1367, 1369, 1947, 1369, 1947, 1947, 1369, 1371,
     1947, 1371, 1947, 1947, 1371,  551, 1947,  551, 1947, 1947,
      551,  551,  551, 1947,  551, 1947, 1947, 1947, 1947,  551,
      551,  551,  551,  551,  551, 1384, 1947, 1384, 1947, 1947,
     1384,   79, 1947, 1947, 1947, 1947,   79, 1947,   79,   79,
       79,   79, 1417, 1947, 1417, 1947, 1947, 1417,  598, 1947,
      598, 1947, 1947,  598, 1431, 1947, 1431, 1947, 1947, 1431,
     1433, 1947, 1433, 1947, 1947, 1433, 1437, 1947, 1437, 1947,

     1947, 1437, 1351, 1351, 1947, 1351, 1947, 1947, 1947, 1947,
     1351, 1351, 1351, 1351, 1351, 1351, 1442, 1947, 1442, 1947,
     1947, 1442, 1444, 1947, 1444, 1947, 1947, 1444, 1455, 1947,
     1455, 1947, 1947, 1455, 1457, 1947, 1457, 1947, 1947, 1457,
     1459, 1947, 1459, 1947, 1947, 1459, 1461, 1947, 1461, 1947,
     1947, 1461, 1464, 1947, 1464, 1947, 1947, 1464,  551,  551,
     1947,  551, 1947, 1947, 1947, 1947,  551,  551,  551,  551,
      551,  551,  992, 1947,  992, 1947, 1947,  992,   79, 1947,
     1947, 1947, 1947,   79, 1947,   79,   79,   79,   79, 1501,
     1947, 1501, 1947, 1947, 1501, 1087, 1947, 1087, 1947, 1947,

     1087,   79, 1947,   79, 1947, 1947,   79, 1511, 1947, 1511,
     1947, 1947, 1511, 1513, 1947, 1513, 1947, 1947, 1513, 1516,
     1516, 1947, 1516, 1947, 1947, 1947, 1947, 1947, 1947, 1516,
     1516, 1516, 1516, 1518, 1947, 1518, 1947, 1947, 1518, 1520,
     1947, 1520, 1947, 1947, 1520, 1522, 1947, 1522, 1947, 1947,
     1522, 1524, 1947, 1524, 1947, 1947, 1524, 1351, 1351, 1947,
     1351, 1947, 1947, 1947, 1947, 1351, 1351, 1351, 1351, 1351,
     1351, 1535, 1947, 1535, 1947, 1947, 1535, 1537, 1947, 1537,
     1947, 1947, 1537, 1539, 1947, 1539, 1947, 1947, 1539,  971,
     1947,  971, 1947, 1947,  971, 1542, 1947, 1542, 1947, 1947,

     1542, 1544, 1947, 1544, 1947, 1947, 1544,  551,  551, 1947,
      551, 1947, 1947, 1947, 1947,  551,  551,  551,  551,  551,
      551,   79, 1947, 1947, 1947, 1947,   79, 1947,   79,   79,
       79,   79, 1569, 1947, 1569, 1947, 1947, 1569, 1571, 1947,
     1571, 1947, 1947, 1571, 1578, 1947, 1578, 1947, 1947, 1578,
      334, 1947,  334, 1947, 1947,  334, 1516, 1516, 1947, 1516,
     1947, 1947, 1947, 1947, 1947, 1947, 1516, 1516, 1516, 1516,
     1581, 1581, 1947, 1581, 1947, 1947, 1581, 1947, 1581, 1947,
     1581, 1581, 1581, 1581, 1585, 1947, 1585, 1947, 1947, 1585,
     1587, 1947, 1587, 1947, 1947, 1587, 1589, 1947, 1589, 1947,

     1947, 1589, 1591, 1947, 1591, 1947, 1947, 1591, 1351, 1351,
     1947, 1351, 1947, 1947, 1947, 1947, 1351, 1351, 1351, 1351,
     1351, 1351, 1602, 1947, 1602, 1947, 1947, 1602, 1126, 1947,
     1126, 1947, 1947, 1126, 1606, 1947, 1606, 1947, 1947, 1606,
      337, 1947,  337, 1947, 1947,  337,  551,  551, 1947,  551,
     1947, 1947, 1947, 1947,  551,  551,  551,  551,  551,  551,
       79, 1947, 1947, 1947, 1947,   79, 1947,   79,   79,   79,
       79, 1628, 1947, 1628, 1947, 1947, 1628,  376, 1947,  376,
     1947, 1947,  376,  546, 1947,  546, 1947, 1947,  546, 1581,
     1581, 1947, 1581, 1947, 1947, 1581, 1947, 1581, 1947, 1581,

     1581, 1581, 1581, 1636, 1947, 1636, 1947, 1947, 1636, 1638,
     1947, 1638, 1947, 1947, 1638, 1640, 1947, 1640, 1947, 1947,
     1640, 1642, 1947, 1642, 1947, 1947, 1642, 1644, 1947, 1644,
     1947, 1947, 1644, 1244, 1947, 1244, 1947, 1947, 1244, 1351,
     1351, 1947, 1351, 1947, 1947, 1947, 1947, 1351, 1351, 1351,
     1351, 1351, 1351, 1657, 1947, 1657, 1947, 1947, 1657,  551,
     1947,  551, 1947, 1947,  551,  551,  551, 1947,  551, 1947,
      551,  551, 1947,  551,  551,  551,  551,  551,  551,   79,
     1947, 1947, 1947, 1947,   79, 1947,   79,   79,   79,   79,
      598, 1947,  598, 1947, 1947,  598, 1678, 1947, 1678, 1947,

     1947, 1678, 1680, 1947, 1680, 1947, 1947, 1680, 1682, 1947,
     1682, 1947, 1947, 1682, 1684, 1947, 1684, 1947, 1947, 1684,
     1686, 1947, 1686, 1947, 1947, 1686, 1351, 1947, 1351, 1947,
     1947, 1351, 1351, 1351, 1947, 1351, 1947, 1947, 1947, 1947,
     1351, 1351, 1351, 1351, 1351, 1351, 1699, 1947, 1699, 1947,
     1947, 1699, 1701, 1947, 1701, 1947, 1947, 1701,  551,  551,
     1947,  551, 1947, 1947, 1947, 1947,  551,  551,  551,  551,
      551,  551, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1705,   79, 1947, 1947,
     1947, 1947,   79, 1947,   79,   79,   79,   79, 1712, 1947,

     1712, 1947, 1947, 1712, 1714, 1947, 1714, 1947, 1947, 1714,
     1716, 1947, 1716, 1947, 1947, 1716, 1718, 1947, 1718, 1947,
     1947, 1718, 1721, 1947, 1721, 1947, 1947, 1721, 1730, 1947,
     1730, 1947, 1947, 1730,  971, 1947,  971, 1947, 1947,  971,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1745, 1947, 1745, 1947, 1947, 1745, 1747, 1947, 1747, 1947,
     1947, 1747, 1749, 1947, 1749, 1947, 1947, 1749, 1516, 1947,
     1516, 1947, 1947, 1516, 1752, 1947, 1752, 1947, 1947, 1752,

     1754, 1947, 1754, 1947, 1947, 1754, 1126, 1947, 1126, 1947,
     1947, 1126, 1771, 1947, 1771, 1947, 1947, 1771, 1773, 1947,
     1773, 1947, 1947, 1773, 1775, 1947, 1775, 1947, 1947, 1775,
       79, 1947, 1947, 1947, 1947,   79, 1947,   79,   79,   79,
       79, 1780, 1947, 1780, 1947, 1947, 1780, 1581, 1947, 1581,
     1947, 1947, 1581, 1784, 1947, 1784, 1947, 1947, 1784, 1244,
     1947, 1244, 1947, 1947, 1244, 1351, 1351, 1947, 1351, 1947,
     1947, 1947, 1947, 1351, 1351, 1351, 1351, 1351, 1351, 1796,
     1947, 1796, 1947, 1947, 1796, 1798, 1947, 1798, 1947, 1947,
     1798, 1800, 1947, 1800, 1947, 1947, 1800, 1705, 1705, 1705,

     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1804, 1947, 1804, 1947, 1947, 1804, 1806, 1947,
     1806, 1947, 1947, 1806,   79, 1947, 1947, 1947, 1947,   79,
     1947,   79,   79,   79,   79, 1813, 1947, 1813, 1947, 1947,
     1813, 1351, 1947, 1351, 1947, 1947, 1351, 1824, 1947, 1824,
     1947, 1947, 1824, 1826, 1947, 1826, 1947, 1947, 1826, 1830,
     1947, 1830, 1947, 1947, 1830, 1832, 1947, 1832, 1947, 1947,
     1832,   79, 1947, 1947, 1947, 1947,   79, 1947,   79,   79,
       79,   79, 1835, 1947, 1835, 1947, 1947, 1835, 1837, 1947,
     1837, 1947, 1947, 1837, 1841, 1841, 1841, 1841, 1841, 1841,

     1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1844,
     1947, 1844, 1947, 1947, 1844, 1846, 1947, 1846, 1947, 1947,
     1846, 1848, 1947, 1848, 1947, 1947, 1848, 1850, 1947, 1850,
     1947, 1947, 1850, 1852, 1947, 1852, 1947, 1947, 1852, 1516,
     1947, 1516, 1947, 1947, 1516, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855,
     1864, 1947, 1864, 1947, 1947, 1864, 1866, 1947, 1866, 1947,
     1947, 1866, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1581, 1947, 1581,
     1947, 1947, 1581, 1878, 1947, 1878, 1947, 1947, 1878, 1880,

     1947, 1880, 1947, 1947, 1880, 1882, 1947, 1882, 1947, 1947,
     1882, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1885, 1947, 1885, 1947,
     1947, 1885, 1889, 1947, 1889, 1947, 1947, 1889, 1891, 1947,
     1891, 1947, 1947, 1891, 1893, 1947, 1893, 1947, 1947, 1893,
     1897, 1947, 1897, 1947, 1947, 1897, 1899, 1947, 1899, 1947,
     1947, 1899, 1903, 1947, 1903, 1947, 1947, 1903, 1905, 1947,
     1905, 1947, 1947, 1905, 1909, 1947, 1909, 1947, 1947, 1909,
     1911, 1947, 1911, 1947, 1947, 1911, 1915, 1947, 1915, 1947,
     1947, 1915, 1917, 1947, 1917, 1947, 1947, 1917, 1919, 1947,

     1919, 1947, 1947, 1919, 1850, 1947, 1850, 1947, 1947, 1850,
     1922, 1947, 1922, 1947, 1947, 1922, 1924, 1947, 1924, 1947,
     1947, 1924, 1926, 1947, 1926, 1947, 1947, 1926, 1928, 1947,
     1928, 1947, 1947, 1928, 1866, 1947, 1866, 1947, 1947, 1866,
     1931, 1947, 1931, 1947, 1947, 1931, 1933, 1947, 1933, 1947,
     1947, 1933, 1937, 1947, 1937, 1947, 1947, 1937, 1939, 1947,
     1939, 1947, 1947, 1939, 1941, 1947, 1941, 1947, 1947, 1941,
     1943, 1947, 1943, 1947, 1947, 1943,    9, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947
    } ;

static const flex_int16_t yy_chk[9071] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    5,    6,    7,    8,    2,   17,

       17,    2,    7,    8,   18,    5,    6,   11,   23,   11,
       11,   11,   11,   13,   25,   13,   13,   13,   13,   14,
       22,   14,   22,   34,   34,   23,   18,   23,   27,   25,
       25,   25,   26,   27,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   32,   36,   44,   27,   36,  182,   55,
       37,    5,    6,    7,    8,   37,   39,   41,   55,   41,
       44,   47,   44,   32,   52,   32,   32,   44,   45,   44,
       47,   61,  182,   45,   47,   65,   39,   65,  172,   47,
       61,  160,   52,   23,   47,   48,  172,   25,   28,   45,
       28,   28,   28,   28,   28,   28,   28,   28,   28,  160,

       48,   37,   48,  165,   37,   39,  132,   28,  132,   50,
       28,  163,   48,   28,   28,   28,   28,   28,   50,  165,
       80,   51,   28,   46,   28,   28,  163,   50,   46,  109,
       28,   51,   49,   28,   53,   46,   28,   49,   51,   28,
       28,   46,   28, 1894,   28,   49,   28,   49,   63,   80,
       49,   28,   53,   54,   28,   49,   28,   29,   53,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   60,  167,
       54,  109,  120,   60,   54,   59,   54,   56,  161,   29,
       60,   60,   29,   29,   29,   29,   29,  159,   59,   56,
       56,   29,  167,   59,   29,  133,  161,  133,   59,   29,

       56,   56,  159,   56,   63,   29,   57,   58,   29,   29,
      159,   29,   58,   29,  120,   29,  217,  278,   57,   57,
       29,  217, 1897,  101,  101,   29,   35,   57,   58,   57,
       35,   35,  171,   35,   57,   35,   35,  135,   35,  135,
       35,   42,   42,   42,   42,  171,   42,   42,  138,   42,
      138,   42,   35,   35,   35,   42,   42,  136,   58,  278,
     1898,   58,   42,  101,   66,   42,   66,   66,   66,   66,
      139,  139,   66,  139,  136,   58,  136,   35,   35,  162,
       35,   75,   35,   75,   75,   75,   75,  168,  162,   67,
       67,  164, 1899,   76,   67,   76,   76,   76,   76,  168,

      164,  108,  108,  108,  108,  140,  137,  140,   35,   35,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   72,
       72,  137,  415,  137,   72,  415,   72,  108,  108,  174,
      108,   72,  108,   99,   99,   99,   99,   99,   99,   99,
       72,   72,   72,   72,   72,   72,   72,  141,  141,  141,
       99,  102,  174,  102,   72, 1157,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  103,  103,   99,  143,  173,
      143,  110,   72,   99,  103,  166,   99,   72,  144,  147,
      144,  147,   72,   72,  175,  173,   72,   72, 1157,  181,
      110,  293,  103,  166,   72,  293,  102,   99,   72,  176,

       72,   72,   72,  103,   72,   78,  175,  110,  176,   78,
       78,  181,   78,  110,   78,   78,  110,   78,  100,   78,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  152,
      192,   78,   78,   78,  152,  106,  104,  110,  104,  104,
      100,  114,  114,  106,  111,  104,  178,  192,  180,  184,
      114,  178,  111,  281,  281,  177,   78,   78,  180,   78,
      100,  106,  104,  190,  178,  104,  100,  104,  114,  111,
      111,  184,  106,  115,  104,  115,  115,  177,  177,  114,
      152,  111,  115,  189,  190,  187,  862,  212,   78,   94,
       94,   94,   94,   94,   94,   94,   94,   94,  183,  115,

      187,  189,  115,  191,  115,  188,  212,  117,   94,   94,
       94,  115,  121,   94,   94,  117,  862,   94,  199,  105,
      121,  105,  188,  185,  105,  105,  183,  199,  185,   94,
      208,  191,  188,  117,   94,   94,   94,  121,  121,   94,
      193,   94,  105,  105,  117,  196,   94,  185,  197,  121,
      105,  208,   94,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  196,  193,  112,  197,  112,  195,  105,  112,
      112,  198,   98,   98,   98,  206,  201,   98,   98,  105,
      204,   98,  195,  116,  203,  116, 1900,  112,  116,  116,
      195,  204,  209,   98,  198,  112,  358,  206,   98,   98,

       98,  358,  203,   98,  201,   98,  116,  116,  209,  204,
       98,  211,  213,  112,  116,  112,   98,  179,  119,  119,
      119,  119,  207,  122,  112,  122,  179,  179,  122,  122,
      186,  205,  116,  357,  179,  207,  205,  186,  179,  211,
      215,  179,  266,  116,  119,  119,  122,  119,  202,  119,
      357,  210,  205,  186,  122,  202,  210,  220,  395,  202,
      214,  215,  216,  213,  395,  218,  213,  202,  266,  275,
      202,  202,  122,  214,  122,  216,  221,  216,  218,  210,
      220,  219,  214,  122,  153,  153,  153,  153,  153,  153,
      219,  242,  285,  242,  219,  275,  225,  221,  225,  225,

      225,  225,  226,  226,  225,  233,  233,  226, 1903,  351,
      233,  228,  228,  243,  367,  243,  228,  245,  248,  245,
      248,  285,  351,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  367,  153,  246,  392,  153,  249,  249,  287,  249,
      153,  250,  153,  250,  251,  251,  251,  287,  153,  153,
      246,  392,  246,  153,  247,  300,  153,  169,  289,  236,
      236,  236,  236,  236,  236,  236,  169,  301,  253,  247,
      253,  247,  254,  169,  254,  255,  287,  255,  169,  169,
      169,  300,  169,  169,  230,  230,  169,  289,  169,  230,

     1904,  230,  301,  301,  169,  169,  169,  169,  169,  236,
      315,  298,  298,  307,  315,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  322,  262,  398,  262,  291,  298,  262,
      262,  398,  307,  261,  261,  261,  311,  378,  261,  261,
      352,  271,  261,  271,  291,  353,  271,  271,  378,  322,
      262, 1905,  262,  309,  261,  262,  291,  262,  352,  261,
      261,  261,  309,  353,  261,  311,  261,  271,  331,  271,
      331,  261,  271,  263,  271,  263,  365,  261,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  264,  265,  264,

      265,  309,  264,  264,  265,  354,  313,  265,  296,  273,
      365,  273,  320,  320,  273,  273,  296,  332,  323,  332,
      264,  354,  355,  313,  265,  360,  265,  335,  263,  355,
      360,  265,  273,  297,  296,  313,  265,  835,  396,  320,
      338,  297,  265,  323,  323,  296,  264,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  335,  396,  273,  297,
      363,  356,  362,  372,  363,  835,  270,  270,  270,  338,
      297,  270,  270,  366,  359,  270,  372,  362,  277,  356,
      277,  277,  277,  277,  277,  277,  277,  270,  361,  375,
      374,  366,  270,  270,  270,  359,  274,  270,  274,  270,

      420,  404,  274,  374,  270,  274,  272,  375,  272,  361,
      270,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      277,  368,  274,  420,  274,  404,  276,  276,  276,  274,
      318,  276,  276,  470,  274,  276,  368,  470,  318,  377,
      274,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      370,  272,  276,  276,  276,  370,  318,  276,  383,  276,
      299,  279,  299,  383,  276,  299,  299,  318,  377,  369,
      276,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      421,  279,  371,  299,  299,  369,  369,  279,  280,  280,
      284,  371,  284,  373,  532,  284,  284,  284,  284,  284,

      284,  284,  284,  284,  421,  373,  381,  364,  319,  299,
      382,  280,  280,  280,  280,  280,  319,  384,  385,  382,
      280,  373,  364,  280,  381,  385,  384,  386,  280,  364,
      364,  364,  387,  389,  319,  488,  532,  280,  280,  488,
      280,  288,  280,  288,  280,  319,  288,  288,  386,  280,
      387,  389,  388,  391,  280,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  393,  288,  402,  390, 1906,  393,
      394,  391,  288,  388,  283,  394,  283,  391,  409,  283,
      283,  402,  292,  283,  292,  407,  403,  292,  292,  390,
      390,  403,  302,  399,  302,  283,  409,  302,  302,  397,

      283,  288,  283,  410,  407,  283,  405,  283,  397,  399,
     1909,  405,  283,  292,  422,  302,  410,  413,  283,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  400,  401,
      413,  408,  411,  292,  406,  422,  416,  400,  401,  406,
      408,  302,  292,  302,  304,  412,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  416,  412,  406,  417,  306,
     1910,  418,  304,  304,  304,  304,  304,  304,  411,  304,
      304,  304,  304,  304,  418,  414,  417,  310,  304,  310,
      423,  304,  310,  310,  414,  419,  304,  426,  304,  304,
      304,  304,  304,  304,  425,  304,  304,  423,  304,  594,

      304,  310,  304,  419,  314,  424,  314,  304,  310,  314,
      314,  426,  304,  427,  424,  428,  321,  425,  321,  636,
      594,  321,  321,  324,  429,  324,  433,  430,  324,  324,
      431,  436,  427,  429,  435,  314,  430,  310,  428,  321,
      321,  434,  429,  431,  439,  433,  324,  444,  440,  436,
      434,  445,  439,  440,  636,  314,  337,  337,  337,  337,
      337,  337,  444,  445,  314,  321,  339,  339,  339,  339,
      339,  339,  324,  446,  324,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  441,  435,  337,  438,  442,  511,
      441,  446,  459,  511,  459,  443,  339,  340,  340,  340,

      340,  340,  340,  341,  341,  341,  341,  341,  341,  437,
      438,  442,  443,  339,  337,  325,  336,  336,  336,  336,
      336,  336,  437,  448,  339,  447,  447,  340,  482,  448,
      447,  517,  447,  341,  460,  517,  460,  509,  342,  342,
      342,  342,  342,  342,  514,  343,  343,  343,  343,  343,
      343,  475,  499,  475,  482,  340,  475,  475,  515,  520,
      499,  341,  521,  509,  340,  493,  341,  493,  342,  568,
      493,  493,  535,  514,  336,  343,  535,  336,  499,  541,
      568,  569,  336,  541,  336,  520,  572,  515,  521,  499,
      336,  336,  544,  496,  496,  336,  342,  569,  336,  572,

      571,  342,  496,  343,  344,  344,  344,  344,  344,  344,
      345,  345,  345,  345,  345,  345, 1911,  581,  544,  571,
      496,  343,  570,  449,  449,  449,  449,  449,  449,  449,
      581,  496,  545,  478,  344,  478,  538,  570,  478,  478,
      345,  450,  450,  450,  450,  450,  450,  450,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  642,  545,  478,
      577,  478,  344,  449,  478,  538,  478,  469,  345,  469,
      575,  344,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  575,  642,  577,  539,  345,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  503,  468,  579,  468,  547,  588,
      468,  468,  503,  539,  468,  522,  480,  591,  480,  523,
      573,  480,  480,  591,  579,  573,  468,  588,  522,  503,
      503,  468,  523,  468, 1912,  476,  468,  547,  468,  480,
      507,  503,  507,  468,  522,  507,  507,  553,  523,  468,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  574,
      607,  582,  589,  507,  576,  480,  592,  589,  574,  477,
      477,  477,  607,  576,  477,  477,  553,  582,  477,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  592,  507,
      477,  585, 1915, 1916,  578,  477,  477,  477,  528,  481,

      477,  481,  477,  578,  585,  481,  528,  477,  481,  479,
      583,  479,  586,  477,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  593,  528,  481,  605,  481,  586,  586,
      584,  610,  481,  583,  593,  528,  618,  481,  610,  487,
      605,  487,  618,  481,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  584,  479,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  587,  486,  596,  486,  614,  580,  486,
      486,  609,  580,  486,  497,  655,  497,  497,  508,  595,
      508,  597,  596,  497,  508,  486,  587,  508,  580,  599,

      486,  614,  486,  609,  494,  486,  597,  486,  595,  611,
      497,  655,  486,  497,  508,  497,  508,  671,  486,  495,
      495,  508,  497,  671,  602,  590,  508, 1052,  599,  498,
      611,  498,  508,  604,  498,  498,  501,  501,  501,  501,
      590,  602,  495,  495,  495,  495,  495,  612,  590,  525,
      525,  495,  498,  498,  495,  615,  604,  617,  525,  495,
      498,  613,  501,  501, 1052,  501, 1917,  501,  495,  495,
      612,  495,  615,  495,  613,  495,  525,  504,  498,  504,
      495,  617,  504,  504,  619,  495,  506,  525,  506,  498,
      533,  506,  506,  620,  526,  616,  526,  526,  533,  619,

      504,  625,  620,  526,  530,  530,  530,  530,  504,  622,
      624,  626,  506, 1918,  506,  533,  533,  506,  616,  506,
      526,  627,  625,  526,  622,  526,  504,  533,  504,  624,
      530,  530,  526,  530,  626,  530,  627,  504,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  550,  550,  550,
      550,  550,  550,  629, 1292,  628,  632,  505,  631,  505,
      630,  633,  505,  505,  635,  632,  505,  639,  551,  551,
      551,  551,  551,  551,  628,  630,  629,  550,  505,  631,
      638,  635,  633,  505,  641,  505,  650, 1292,  505,  661,
      505,  640,  644,  641,  639,  505,  643,  649,  551,  650,

      661,  505,  524,  638,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  644,  640,  649,  645,  646,  643,  647,
      524,  524,  524,  524,  524,  524,  551,  524,  524,  524,
      524,  524,  648,  651,  652,  727,  524,  645,  646,  524,
      651,  648,  647,  652,  524,  653,  524,  524,  524,  524,
      524,  524,  653,  524,  524, 1050,  524,  527,  524,  527,
      524,  727,  527,  527,  654,  524,  529,  656,  529,  654,
      524,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      527,  527,  657, 1050,  534,  656,  534,  660,  527,  534,
      534,  556,  556,  556,  556,  556,  556,  557,  557,  557,

      557,  557,  557,  658,  660,  657,  527,  534,  662,  665,
      659,  529,  658,  668,  795,  534,  688,  527,  659,  664,
      688,  556,  668,  659,  665,  686,  670,  557,  659,  670,
      696,  795,  662,  534,  696,  534,  558,  558,  558,  558,
      558,  558,  664,  708,  534, 1919,  807,  708,  701,  556,
      701,  686,  712,  701,  701,  557,  559,  559,  559,  559,
      559,  559,  730,  730,  807,  686,  558,  556,  560,  560,
      560,  560,  560,  560,  557,  561,  561,  561,  561,  561,
      561,  712,  796,  666,  716,  687,  559,  562,  562,  562,
      562,  562,  562,  666,  558,  796,  720,  714,  560,  718,

      720,  706,  730,  707,  732,  561,  714,  666,  732,  558,
      801,  687,  763,  716,  559,  798,  718,  562,  672,  672,
      672,  672,  672,  672,  672,  687,  560,  706,  718,  707,
      798,  801,  799,  561,  560,  714,  725,  725,  763,  728,
      809,  706,  559,  707,  737,  562,  737,  560,  799,  737,
      737,  809,  561,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  753,  725,  728,  728,  753,  562,  820,  562,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  723,  683,
      808,  683,  724,  800,  683,  683,  723,  715,  683,  715,

      724,  805,  715,  715,  820,  808,  805,  726,  812,  726,
      683,  802,  726,  726,  723,  683,  800,  683,  724,  702,
      683,  715,  683,  744,  802,  723,  812,  683,  715,  724,
      726,  726,  745,  683,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  729,  749,  729,  751,  741,  729,  729,
     1920,  743,  744,  694,  803,  694,  726,  715,  694,  694,
      741,  745,  694,  751,  743,  719,  729,  719,  811,  804,
      719,  719,  813,  749,  694,  751,  741,  803,  806,  694,
      743,  694,  804,  806,  694,  810,  694,  813,  810,  811,
     1921,  694,  729,  695,  729,  695,  719,  694,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  719,  817,  747,  761,
      761,  816,  817,  764,  821,  719,  703,  747,  703,  815,
      816,  703,  703,  821,  814,  703,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  819,  761,  703,  764,  764,
      818,  815,  703,  814,  703,  827,  747,  703,  819,  703,
      827,  818, 1024,  748,  703,  748,  875,  756,  748,  748,
      703,  823,  742,  875,  742,  756,  738,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  842,  748,  823,  757,
      752,  824,  752,  756,  748,  752,  752,  757, 1024, 1922,

      824,  852,  822,  842,  756,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  762,  757,  762,  742,  852,  762,
      762,  752,  760,  748,  760,  822,  757,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  837,  762,  762,  826,
     1923,  752,  858,  765,  837,  765,  845,  858,  765,  765,
      752,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      825,  874,  826,  762,  845,  838,  765,  843,  834,  825,
      759,  874,  759,  834,  838,  759,  759,  851,  839,  759,
      775,  775,  775,  775,  775,  775,  834,  839,  848,  846,
      843,  759,  765,  850,  765,  847,  759,  848,  759,  853,

      851,  759,  850,  759,  846,  915, 1924, 1925,  759,  915,
      847,  853,  854,  868,  759,  782,  782,  782,  782,  782,
      782,  783,  783,  783,  783,  783,  783,  854,  784,  784,
      784,  784,  784,  784,  857,  878,  868,  861,  775,  785,
      785,  785,  785,  785,  785,  782,  861,  878,  869,  857,
      863,  783,  786,  786,  786,  786,  786,  786,  784,  787,
      787,  787,  787,  787,  787,  860,  856,  867,  863,  785,
      860,  869,  856,  782,  870,  871,  867,  873, 1927,  783,
      879,  877,  786,  880,  884,  873,  784,  870,  879,  787,
      891,  880,  871,  884,  782,  876,  881,  785,  877,  891,

      783,  784,  856,  785,  788,  788,  788,  788,  788,  788,
      786,  789,  789,  789,  789,  789,  789,  787,  876,  888,
      881,  892, 1929,  786,  895,  885,  787,  790,  790,  790,
      790,  790,  790,  885,  788,  886,  888,  889,  890,  892,
      906,  789,  889,  893,  913,  886,  924,  895,  927,  933,
      924,  890,  930,  928,  938,  914,  930,  790,  938,  946,
      893,  957,  788,  946,  995,  957,  906,  996,  997,  789,
      913,  995, 1930,  997, 1932,  933,  996,  927,  789,  920,
      906,  914,  928,  788,  913,  790,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  914,  919,  919,  919,  919,

      919,  919,  919,  919,  919,  920, 1109,  790, 1002,  949,
     1109,  934,  950,  936,  937, 1002,  953,  960,  961,  920,
      970,  970,  970,  970,  970,  970,  905,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  919,  934,  949,  936,
      937,  950,  953,  960,  961, 1001,  910,  972,  910, 1000,
     1004,  910,  910,  936,  937,  910,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  994, 1000,  910,  999, 1001,
      994, 1005,  910, 1004,  910, 1425,  972,  910,  970,  910,
     1003,  999, 1008,  994,  910, 1008, 1425, 1934, 1003, 1005,
      910,  943,  943,  943,  943,  943,  943,  943,  943,  943,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  998,
      943,  998,  943, 1007,  998,  943,  943, 1006, 1018,  943,
     1009,  954, 1010,  954, 1011, 1010,  954,  954, 1013, 1014,
     1007,  943, 1022, 1009, 1012, 1006,  943, 1022,  943, 1016,
      952,  943, 1016,  943,  954,  998, 1014, 1011,  943, 1012,
      944, 1013,  944, 1018,  943,  944,  944,  944,  944,  944,
      944,  944,  944,  944, 1015,  955, 1051,  955, 1935, 1020,
      954,  955, 1017, 1019,  955,  971,  971,  971,  971,  971,
      971,  981,  981,  981,  981,  981,  981, 1015, 1019, 1017,
     1020,  955,  971,  955, 1041, 1021, 1035, 1068,  955, 1066,

     1023, 1051, 1066,  955, 1021, 1068, 1035, 1041, 1025,  955,
     1034,  981,  982,  982,  982,  982,  982,  982, 1023,  983,
      983,  983,  983,  983,  983,  984,  984,  984,  984,  984,
      984, 1025, 1034,  971,  971, 1036, 1037, 1042, 1040,  981,
     1047, 1044,  982, 1060, 1062, 1037, 1043, 1042,  981,  983,
     1044, 1062, 1060, 1047, 1036,  984,  985,  985,  985,  985,
      985,  985, 1040,  986,  986,  986,  986,  986,  986, 1043,
      982,  987,  987,  987,  987,  987,  987,  983, 1070,  982,
     1073, 1070, 1161,  984, 1936, 1161,  985, 1049, 1055, 1058,
     1073, 1059,  984,  986,  988,  988,  988,  988,  988,  988,

      983,  987,  989,  989,  989,  989,  989,  989, 1049, 1054,
     1058, 1055, 1059, 1071,  985, 1072, 1076, 1081, 1077, 1078,
     1080,  986, 1071, 1094,  988, 1076, 1054, 1101, 1128,  987,
     1296, 1153,  989, 1077, 1078, 1151,  985, 1114, 1072, 1114,
     1081, 1080, 1114, 1114,  986, 1151, 1150,  987, 1158, 1094,
     1154, 1159,  988, 1101, 1296, 1158, 1159, 1128, 1153, 1162,
      989, 1160, 1162, 1094, 1156, 1154, 1165, 1101, 1150,  989,
     1937, 1165,  988, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1160, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1125, 1125, 1125, 1125, 1125, 1125, 1170, 1156,

     1140, 1140, 1140, 1140, 1140, 1140, 1168, 1172, 1938, 1125,
     1172, 1170, 1168, 1093, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1115, 1126, 1126, 1126, 1126, 1126, 1126,
     1140, 1163, 1155, 1105, 1163, 1105, 1155, 1164, 1105, 1105,
     1169, 1126, 1105, 1141, 1141, 1141, 1141, 1141, 1141, 1939,
     1166, 1125, 1164, 1171, 1105, 1211, 1173, 1175, 1140, 1105,
     1175, 1105, 1171, 1169, 1105, 1163, 1105, 1155, 1166, 1174,
     1176, 1105, 1177, 1141, 1940, 1174, 1211, 1105, 1173, 1176,
     1941, 1140, 1126, 1126, 1127, 1127, 1127, 1127, 1127, 1127,
     1142, 1142, 1142, 1142, 1142, 1142, 1178, 1196, 1180, 1178,

     1183, 1141, 1177, 1179, 1184, 1174, 1180, 1181, 1141, 1143,
     1143, 1143, 1143, 1143, 1143, 1181, 1179, 1184, 1212, 1196,
     1142, 1144, 1144, 1144, 1144, 1144, 1144, 1145, 1145, 1145,
     1145, 1145, 1145, 1182, 1205, 1183, 1198, 1195, 1197, 1143,
     1215, 1212, 1127, 1182, 1202, 1127, 1195, 1197, 1142, 1213,
     1127, 1144, 1127, 1198, 1213, 1215, 1216, 1145, 1127, 1127,
     1142, 1219, 1202, 1127, 1205, 1208, 1127, 1143, 1221, 1219,
     1143, 1146, 1146, 1146, 1146, 1146, 1146, 1221, 1216, 1144,
     1230, 1203, 1231, 1208, 1282, 1145, 1144, 1147, 1147, 1147,
     1147, 1147, 1147, 1148, 1148, 1148, 1148, 1148, 1148, 1203,

     1223, 1146, 1245, 1232, 1287, 1203, 1230, 1232, 1231, 1145,
     1281, 1284, 1281, 1223, 1282, 1281, 1285, 1147, 1288, 1289,
     1230, 1290, 1231, 1148, 1289, 1287, 1294, 1293, 1301, 1146,
     1293, 1245, 1295, 1298, 1303, 1288, 1290, 1146, 1284, 1291,
     1308, 1301, 1295, 1285, 1297, 1147, 1281, 1308, 1299, 1294,
     1298, 1148, 1244, 1244, 1244, 1244, 1244, 1244, 1329, 1148,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1147,
     1300, 1303, 1297, 1300, 1291, 1299, 1302, 1305, 1306, 1329,
     1305, 1306, 1244, 1246, 1246, 1246, 1246, 1246, 1246, 1247,
     1247, 1247, 1247, 1247, 1247, 1307, 1309, 1312, 1307, 1309,

     1228, 1243, 1243, 1243, 1243, 1243, 1243, 1324, 1942, 1311,
     1244, 1302, 1311, 1246, 1313, 1322, 1324, 1386, 1326, 1247,
     1321, 1248, 1248, 1248, 1248, 1248, 1248, 1312, 1325, 1313,
     1246, 1249, 1249, 1249, 1249, 1249, 1249, 1333, 1321, 1322,
     1334, 1246, 1326, 1332, 1353, 1325, 1342, 1247, 1337, 1388,
     1387, 1248, 1386, 1395, 1389, 1333, 1247, 1407, 1481, 1243,
     1392, 1249, 1243, 1337, 1334, 1332, 1396, 1243, 1394, 1243,
     1427, 1395, 1342, 1353, 1400, 1243, 1243, 1400, 1943, 1248,
     1243, 1389, 1388, 1243, 1248, 1387, 1342, 1407, 1392, 1249,
     1394, 1481, 1427, 1396, 1249, 1250, 1250, 1250, 1250, 1250,

     1250, 1251, 1251, 1251, 1251, 1251, 1251, 1252, 1252, 1252,
     1252, 1252, 1252, 1397, 1267, 1267, 1267, 1267, 1267, 1267,
     1398, 1399, 1402, 1403, 1399, 1250, 1403, 1404, 1401, 1409,
     1404, 1251, 1409, 1410, 1406, 1412, 1413, 1252, 1944, 1413,
     1397, 1402, 1945, 1398, 1267, 1268, 1268, 1268, 1268, 1268,
     1268, 1401, 1406, 1250, 1414, 1399, 1410, 1414, 1412, 1251,
     1415, 1416, 1428, 1415, 1421, 1252, 1480, 1474, 1251, 1428,
     1416, 1250, 1267, 1480, 1421, 1268, 1269, 1269, 1269, 1269,
     1269, 1269, 1252, 1270, 1270, 1270, 1270, 1270, 1270, 1271,
     1271, 1271, 1271, 1271, 1271, 1422, 1267, 1474, 1429, 1486,

     1482, 1484, 1486, 1268, 1485, 1505, 1269, 1487, 1268, 1488,
     1479, 1422, 1946, 1270, 1429, 1489, 1487, 1505, 1488, 1271,
     1272, 1272, 1272, 1272, 1272, 1272, 1273, 1273, 1273, 1273,
     1273, 1273, 1479, 1489, 1269, 1482, 1484, 1485, 1892, 1490,
     1489, 1270, 1490, 1498, 1504, 1495, 1491, 1271, 1495, 1576,
     1272, 1499, 1271, 1504, 1499, 1269, 1273, 1274, 1274, 1274,
     1274, 1274, 1274, 1491, 1576, 1270, 1498, 1506, 1275, 1275,
     1275, 1275, 1275, 1275, 1507, 1554, 1506, 1508, 1272, 1507,
     1554, 1617, 1711, 1891, 1273, 1275, 1508, 1274, 1350, 1350,
     1350, 1350, 1350, 1350, 1517, 1711, 1617, 1553, 1275, 1272,

     1351, 1351, 1351, 1351, 1351, 1351, 1553, 1673, 1273, 1356,
     1356, 1356, 1356, 1356, 1356, 1274, 1555, 1556, 1350, 1555,
     1556, 1890, 1557, 1517, 1274, 1557, 1275, 1275, 1562, 1673,
     1351, 1357, 1357, 1357, 1357, 1357, 1357, 1889, 1562, 1356,
     1358, 1358, 1358, 1358, 1358, 1358, 1359, 1359, 1359, 1359,
     1359, 1359, 1360, 1360, 1360, 1360, 1360, 1360, 1351, 1558,
     1560, 1357, 1558, 1560, 1563, 1565, 1575, 1356, 1565, 1563,
     1358, 1566, 1568, 1582, 1566, 1568, 1359, 1618, 1616, 1709,
     1619, 1886, 1360, 1620, 1621, 1356, 1623, 1575, 1709, 1357,
     1361, 1361, 1361, 1361, 1361, 1361, 1623, 1777, 1358, 1616,

     1618, 1885, 1582, 1619, 1359, 1631, 1620, 1621, 1357, 1622,
     1360, 1624, 1622, 1358, 1624, 1777, 1625, 1884, 1360, 1625,
     1361, 1362, 1362, 1362, 1362, 1362, 1362, 1666, 1631, 1883,
     1881, 1360, 1359, 1375, 1375, 1375, 1375, 1375, 1375, 1376,
     1376, 1376, 1376, 1376, 1376, 1710, 1744, 1880, 1361, 1743,
     1666, 1362, 1377, 1377, 1377, 1377, 1377, 1377, 1742, 1969,
     1743, 1969, 1975, 1375, 1975, 1674, 1710, 1361, 1744, 1376,
     1674, 1779, 1378, 1378, 1378, 1378, 1378, 1378, 1879, 1362,
     1674, 1742, 1377, 1379, 1379, 1379, 1379, 1379, 1379, 1664,
     1810, 1375, 1704, 1705, 1779, 1664, 1878, 1376, 1704, 1705,

     1810, 1362, 1378, 1362, 1613, 1613, 1613, 1613, 1613, 1613,
     1377, 1613, 1375, 1379, 1380, 1380, 1380, 1380, 1380, 1380,
     1376, 1381, 1381, 1381, 1381, 1381, 1381, 1977, 1377, 1977,
     1378, 1875, 1874, 1382, 1382, 1382, 1382, 1382, 1382, 1873,
     1983, 1379, 1983, 1985, 1380, 1985, 1664, 1378, 1869, 1704,
     1705, 1381, 1383, 1383, 1383, 1383, 1383, 1383, 1987, 1868,
     1987, 1733, 1379, 1382, 1802, 1867, 1989, 1733, 1989, 1383,
     1802, 1865, 1380, 1439, 1439, 1439, 1439, 1439, 1439, 1381,
     1863, 1820, 1383, 1991, 1822, 1991, 1381, 1820, 1862, 1380,
     1822, 1382, 1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447,

     1447, 1447, 1447, 1447, 1840, 2001, 1861, 2001, 1382, 1854,
     1840, 1383, 1448, 1448, 1448, 1448, 1448, 1448, 1733, 1841,
     1853, 1802, 1446, 1852, 2003, 1841, 2003, 2010, 1447, 2010,
     1851, 1439, 1449, 1449, 1449, 1449, 1449, 1449, 1820, 1849,
     1847, 1822, 1448, 1450, 1450, 1450, 1450, 1450, 1450, 2012,
     1446, 2012, 1850, 1855, 1866, 2015, 1447, 2015, 1850, 1855,
     1866, 1840, 1449, 1451, 1451, 1451, 1451, 1451, 1451, 1846,
     1448, 1446, 2017, 1450, 2017, 1845, 1841, 1447, 1452, 1452,
     1452, 1452, 1452, 1452, 2023, 1448, 2023, 2025, 1844, 2025,
     1449, 1838, 2030, 1451, 2030, 2032, 1449, 2032, 2035, 1837,

     2035, 1450, 1453, 1453, 1453, 1453, 1453, 1453, 1452, 1850,
     1855, 1866, 1836, 1835, 1450, 1454, 1454, 1454, 1454, 1454,
     1454, 1451, 1466, 1466, 1466, 1466, 1466, 1466, 1834, 1833,
     1451, 1895, 1453, 2037, 1832, 2037, 1452, 1895, 1467, 1467,
     1467, 1467, 1467, 1467, 1831, 1454, 1468, 1468, 1468, 1468,
     1468, 1468, 1466, 1907, 2042, 1830, 2042, 1452, 1827, 1907,
     1453, 1469, 1469, 1469, 1469, 1469, 1469, 1826, 1467, 1453,
     2044, 1825, 2044, 1454, 1824, 2047, 1468, 2047, 1815, 1814,
     1466, 1470, 1470, 1470, 1470, 1470, 1470, 1933, 1895, 1813,
     2049, 1469, 2049, 1933, 1812, 1454, 1467, 1466, 1515, 1515,

     1515, 1515, 1515, 1515, 1468, 1467, 2051, 2053, 2051, 2053,
     1907, 1470, 1471, 1471, 1471, 1471, 1471, 1471, 1811, 1469,
     1472, 1472, 1472, 1472, 1472, 1472, 1806, 1804, 1468, 1516,
     1516, 1516, 1516, 1516, 1516, 2056, 2058, 2056, 2058, 1470,
     1798, 1797, 1471, 1469, 1933, 1796, 1516, 1470, 1784, 2060,
     1472, 2060, 2062, 2066, 2062, 2066, 1515, 1783, 1778, 1526,
     1526, 1526, 1526, 1526, 1526, 2068, 2070, 2068, 2070, 1773,
     1471, 1527, 1527, 1527, 1527, 1527, 1527, 2072, 1472, 2072,
     2074, 1771, 2074, 1471, 2075, 1472, 2075, 1516, 1516, 1526,
     1528, 1528, 1528, 1528, 1528, 1528, 2077, 2079, 2077, 2079,

     1768, 1527, 1529, 1529, 1529, 1529, 1529, 1529, 1767, 1530,
     1530, 1530, 1530, 1530, 1530, 1766, 2081, 1526, 2081, 2083,
     1528, 2083, 2085, 2087, 2085, 2087, 1526, 1754, 2088, 1527,
     2088, 2089, 1529, 2089, 2090, 2091, 2090, 2091, 1527, 1530,
     1531, 1531, 1531, 1531, 1531, 1531, 1752, 1747, 1528, 1532,
     1532, 1532, 1532, 1532, 1532, 2092, 2094, 2092, 2094, 1745,
     1529, 1533, 1533, 1533, 1533, 1533, 1533, 1530, 1741, 1529,
     1531, 1528, 1740, 1534, 1534, 1534, 1534, 1534, 1534, 1532,
     1546, 1546, 1546, 1546, 1546, 1546, 2096, 1739, 2096, 1530,
     1732, 1533, 1547, 1547, 1547, 1547, 1547, 1547, 1531, 2098,

     2100, 2098, 2100, 1534, 2106, 1731, 2106, 1532, 1730, 1722,
     1546, 1548, 1548, 1548, 1548, 1548, 1548, 1721, 2108, 1533,
     2108, 1531, 1547, 1720, 2110, 1532, 2110, 2112, 2117, 2112,
     2117, 1534, 1550, 1550, 1550, 1550, 1550, 1550, 1546, 1533,
     1534, 1548, 2119, 2121, 2119, 2121, 1546, 2123, 1718, 2123,
     1547, 1549, 1549, 1549, 1549, 1549, 1549, 2127, 2129, 2127,
     2129, 1547, 1550, 2130, 1549, 2130, 1716, 1714, 1549, 1548,
     1551, 1551, 1551, 1551, 1551, 1551, 2131, 2132, 2131, 2132,
     1712, 1549, 1581, 1581, 1581, 1581, 1581, 1581, 1708, 1701,
     1550, 1548, 2138, 2140, 2138, 2140, 1550, 1699, 1689, 1581,

     1551, 1593, 1593, 1593, 1593, 1593, 1593, 1684, 1682, 1549,
     1549, 1680, 1594, 1594, 1594, 1594, 1594, 1594, 1595, 1595,
     1595, 1595, 1595, 1595, 2142, 2144, 2142, 2144, 1551, 1678,
     2145, 1593, 2145, 2146, 2147, 2146, 2147, 1551, 1677, 1675,
     1581, 1581, 1594, 2150, 2153, 2150, 2153, 1672, 1595, 1596,
     1596, 1596, 1596, 1596, 1596, 2155, 2156, 2155, 2156, 1593,
     1597, 1597, 1597, 1597, 1597, 1597, 2157, 2158, 2157, 2158,
     1594, 2160, 2162, 2160, 2162, 1671, 1595, 1594, 2163, 1596,
     2163, 2164, 1593, 2164, 2165, 2171, 2165, 2171, 1595, 1670,
     1597, 1598, 1598, 1598, 1598, 1598, 1598, 1599, 1599, 1599,

     1599, 1599, 1599, 2173, 2175, 2173, 2175, 1596, 1669, 1668,
     1596, 1600, 1600, 1600, 1600, 1600, 1600, 2177, 1597, 2177,
     2178, 1598, 2178, 1667, 2179, 1597, 2179, 1599, 1601, 1601,
     1601, 1601, 1601, 1601, 1654, 1654, 1654, 1654, 1654, 1654,
     2180, 1600, 2180, 1661, 1661, 1661, 1661, 1661, 1661, 1598,
     1661, 2184, 2186, 2184, 2186, 1599, 1657, 2187, 1601, 2187,
     2188, 1656, 2188, 1599, 1654, 2191, 2193, 2191, 2193, 1600,
     2196, 1642, 2196, 1598, 1609, 1609, 1609, 1609, 1609, 1609,
     2201, 2203, 2201, 2203, 1640, 1638, 1601, 1609, 2206, 1636,
     2206, 1609, 1654, 1600, 1601, 1610, 1610, 1610, 1610, 1610,

     1610, 1654, 1635, 2208, 1609, 2208, 1634, 2210, 1610, 2210,
     1632, 1628, 1610, 1611, 1611, 1611, 1611, 1611, 1611, 2212,
     2215, 2212, 2215, 1627, 1626, 1610, 1611, 2217, 1606, 2217,
     1611, 1605, 1609, 1609, 1612, 1612, 1612, 1612, 1612, 1612,
     2221, 1591, 2221, 1611, 2222, 1589, 2222, 1612, 2223, 1587,
     2223, 1612, 1585, 1610, 1610, 1584, 1614, 1614, 1614, 1614,
     1614, 1614, 1583, 1578, 1612, 1610, 2225, 1577, 2225, 1614,
     1574, 1611, 1611, 1614, 1615, 1615, 1615, 1615, 1615, 1615,
     1611, 2227, 2231, 2227, 2231, 1573, 1614, 1615, 2233, 1571,
     2233, 1615, 1569, 1612, 1647, 1647, 1647, 1647, 1647, 1647,

     2235, 2237, 2235, 2237, 1615, 1648, 1648, 1648, 1648, 1648,
     1648, 2240, 1567, 2240, 1614, 1614, 1649, 1649, 1649, 1649,
     1649, 1649, 1564, 2242, 1647, 2242, 2243, 1561, 2243, 1614,
     1559, 1552, 1615, 1615, 2244, 1648, 2244, 2245, 1544, 2245,
     1615, 2247, 2249, 2247, 2249, 2253, 1649, 2253, 2255, 2257,
     2255, 2257, 1647, 1650, 1650, 1650, 1650, 1650, 1650, 2258,
     2263, 2258, 2263, 1648, 2265, 2267, 2265, 2267, 1648, 2269,
     2271, 2269, 2271, 2272, 1649, 2272, 1647, 2273, 2276, 2273,
     2276, 1542, 1537, 1650, 1651, 1651, 1651, 1651, 1651, 1651,
     2277, 2281, 2277, 2281, 1535, 1649, 1652, 1652, 1652, 1652,

     1652, 1652, 1653, 1653, 1653, 1653, 1653, 1653, 2282, 1524,
     2282, 1650, 1522, 2283, 1651, 2283, 2287, 1520, 2287, 1655,
     1655, 1655, 1655, 1655, 1655, 2289, 1652, 2289, 2291, 2293,
     2291, 2293, 1653, 1518, 1513, 1650, 1655, 2294, 2295, 2294,
     2295, 2296, 1651, 2296, 2300, 1511, 2300, 1651, 2301, 1655,
     2301, 2305, 1503, 2305, 1652, 2307, 2309, 2307, 2309, 2311,
     1653, 2311, 1501, 1660, 1660, 1660, 1660, 1660, 1660, 1662,
     1662, 1662, 1662, 1662, 1662, 1652, 1660, 1655, 1655, 2313,
     1660, 2313, 1500, 1497, 1653, 1663, 1663, 1663, 1663, 1663,
     1663, 1496, 1663, 1660, 2314, 2315, 2314, 2315, 1494, 1662,

     1665, 1665, 1665, 1665, 1665, 1665, 1690, 1690, 1690, 1690,
     1690, 1690, 1691, 1691, 1691, 1691, 1691, 1691, 2316, 2319,
     2316, 2319, 1660, 2321, 2325, 2321, 2325, 1662, 1493, 2327,
     1665, 2327, 2329, 1492, 2329, 1662, 1690, 2331, 2340, 2331,
     2340, 1483, 1691, 1692, 1692, 1692, 1692, 1692, 1692, 1693,
     1693, 1693, 1693, 1693, 1693, 2342, 1478, 2342, 1665, 2343,
     2344, 2343, 2344, 2345, 1690, 2345, 2347, 1665, 2347, 2349,
     1691, 2349, 2351, 1692, 2351, 2357, 2359, 2357, 2359, 1693,
     2360, 2362, 2360, 2362, 1477, 1690, 1694, 1694, 1694, 1694,
     1694, 1694, 2363, 1691, 2363, 1695, 1695, 1695, 1695, 1695,

     1695, 1692, 2364, 2367, 2364, 2367, 1476, 1693, 1696, 1696,
     1696, 1696, 1696, 1696, 1475, 2368, 1694, 2368, 2371, 1692,
     2371, 2372, 1464, 2372, 1693, 1695, 1697, 1697, 1697, 1697,
     1697, 1697, 1698, 1698, 1698, 1698, 1698, 1698, 1696, 2374,
     2376, 2374, 2376, 2390, 1694, 2390, 2396, 1463, 2396, 1698,
     2419, 1461, 2419, 1695, 1459, 2420, 1697, 2420, 1457, 1455,
     1444, 1442, 1698, 1441, 1440, 1694, 1696, 1437, 1436, 1435,
     1695, 1433, 1431, 1696, 1703, 1703, 1703, 1703, 1703, 1703,
     1430, 1703, 1426, 1424, 1697, 1706, 1706, 1706, 1706, 1706,
     1706, 1698, 1706, 1723, 1723, 1723, 1723, 1723, 1723, 1706,

     1423, 1697, 1707, 1420, 1411, 1408, 1405, 1707, 1724, 1724,
     1724, 1724, 1724, 1724, 1393, 1391, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1723, 1725, 1725, 1725, 1725, 1725, 1725,
     1707, 1726, 1726, 1726, 1726, 1726, 1726, 1390, 1724, 1727,
     1727, 1727, 1727, 1727, 1727, 1384, 1374, 1369, 1707, 1367,
     1365, 1723, 1363, 1707, 1725, 1355, 1354, 1352, 1707, 1707,
     1349, 1726, 1707, 1707, 1345, 1344, 1724, 1343, 1723, 1727,
     1707, 1340, 1338, 1336, 1707, 1724, 1707, 1707, 1707, 1335,
     1707, 1331, 1725, 1330, 1328, 1327, 1323, 1316, 1314, 1726,
     1728, 1728, 1728, 1728, 1728, 1728, 1310, 1727, 1729, 1729,

     1729, 1729, 1729, 1729, 1304, 1727, 1725, 1734, 1734, 1734,
     1734, 1734, 1734, 1726, 1734, 1286, 1283, 1280, 1279, 1278,
     1728, 1734, 1736, 1736, 1736, 1736, 1736, 1736, 1729, 1736,
     1737, 1737, 1737, 1737, 1737, 1737, 1736, 1756, 1756, 1756,
     1756, 1756, 1756, 1276, 1262, 1260, 1258, 1737, 1728, 1256,
     1254, 1738, 1253, 1238, 1236, 1235, 1729, 1738, 1234, 1233,
     1229, 1728, 1227, 1729, 1735, 1226, 1225, 1756, 1224, 1735,
     1222, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1220, 1218, 1217, 1214, 1737,
     1210, 1209, 1735, 1207, 1206, 1756, 1757, 1757, 1757, 1757,

     1757, 1757, 1204, 1756, 1201, 1200, 1199, 1194, 1738, 1193,
     1735, 1738, 1191, 1189, 1187, 1735, 1185, 1167, 1152, 1149,
     1735, 1735, 1138, 1136, 1735, 1735, 1757, 1134, 1132, 1131,
     1130, 1129, 1735, 1123, 1121, 1119, 1735, 1117, 1735, 1735,
     1735, 1116, 1735, 1758, 1758, 1758, 1758, 1758, 1758, 1112,
     1111, 1110, 1107, 1106, 1757, 1759, 1759, 1759, 1759, 1759,
     1759, 1104, 1103, 1102, 1100, 1757, 1099, 1098, 1759, 1097,
     1096, 1095, 1759, 1758, 1760, 1760, 1760, 1760, 1760, 1760,
     1092, 1083, 1082, 1079, 1075, 1759, 1761, 1761, 1761, 1761,
     1761, 1761, 1763, 1763, 1763, 1763, 1763, 1763, 1074, 1763,

     1069, 1758, 1067, 1065, 1760, 1064, 1763, 1764, 1764, 1764,
     1764, 1764, 1764, 1759, 1759, 1063, 1761, 1061, 1057, 1056,
     1053, 1048, 1046, 1758, 1764, 1765, 1045, 1039, 1038, 1032,
     1030, 1765, 1760, 1028, 1769, 1026,  992,  979, 1760,  977,
     1769,  975,  973,  968, 1761, 1765, 1765, 1765, 1765, 1765,
     1765, 1765,  966, 1761, 1769, 1769, 1769, 1769, 1769, 1769,
     1769,  964,  962,  959,  958,  956, 1764, 1791, 1791, 1791,
     1791, 1791, 1791,  951, 1791, 1770,  948,  947,  945,  941,
      940, 1770, 1765,  939,  935, 1765,  932,  931,  929,  926,
      925, 1769,  923,  922, 1769, 1770, 1770, 1770, 1770, 1770,

     1770, 1770,  921,  918, 1787, 1787, 1787, 1787, 1787, 1787,
     1788, 1788, 1788, 1788, 1788, 1788,  917, 1787,  916,  912,
      911, 1787, 1817, 1817, 1817, 1817, 1817, 1817,  909, 1817,
      908,  907, 1770, 1775, 1787,  903,  901,  899,  897, 1775,
     1788,  896,  894,  887,  883, 1789, 1789, 1789, 1789, 1789,
     1789,  882,  872, 1775, 1775, 1775, 1775, 1775, 1775, 1775,
     1775, 1775, 1787, 1787,  866,  865,  864,  859, 1788, 1775,
     1775, 1775, 1775, 1775, 1775, 1789,  855,  849,  844,  841,
     1788, 1792, 1792, 1792, 1792, 1792, 1792,  840,  836,  832,
     1775,  830,  829, 1775,  828, 1775, 1775, 1775, 1775, 1775,

     1775,  797,  793, 1789, 1790, 1790, 1790, 1790, 1790, 1790,
      791, 1792, 1789,  780,  778,  777,  776, 1790,  773,  771,
      770, 1790, 1793, 1793, 1793, 1793, 1793, 1793,  769,  768,
      767,  766,  755,  754, 1790, 1794,  740,  739,  735, 1792,
      734, 1794,  733,  722, 1795,  721,  711,  710,  709,  705,
     1795,  704, 1793,  699, 1792, 1794, 1794, 1794, 1794, 1794,
     1794, 1794,  698, 1790, 1795, 1795, 1795, 1795, 1795, 1795,
     1795,  697,  691,  690, 1816, 1816, 1816, 1816, 1816, 1816,
     1793,  689,  685,  684,  681,  679,  678, 1816, 1793,  677,
     1803, 1816, 1794,  675,  673, 1794, 1803,  669,  667,  663,

      637, 1795, 1800,  634, 1816,  623,  621,  608, 1800,  606,
     1803, 1803, 1803, 1803, 1803, 1803, 1803,  603,  601,  600,
      598,  565, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800,
     1800,  563,  555, 1816,  554,  552,  549,  548, 1800, 1800,
     1800, 1800, 1800, 1800,  546,  543,  542, 1803, 1819, 1819,
     1819, 1819, 1819, 1819,  540, 1819,  537,  536,  519, 1800,
      518,  516, 1800,  513, 1800, 1800, 1800, 1800, 1800, 1800,
     1808,  512,  510,  502,  491,  490, 1808,  489,  483,  473,
      472,  471, 1818, 1818, 1818, 1818, 1818, 1818,  464,  462,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1821,

     1821, 1821, 1821, 1821, 1821,  461, 1808, 1808, 1808, 1808,
     1808, 1808, 1818, 1839, 1839, 1839, 1839, 1839, 1839,  457,
     1839,  455,  453,  451,  432,  380,  379, 1808,  376, 1821,
     1808,  350, 1808, 1808, 1808, 1808, 1808, 1808, 1823,  348,
     1818,  346,  334,  333, 1823,  328,  317,  316, 1818,  305,
      295,  294,  268,  267,  257,  256,  252, 1821, 1823, 1823,
     1823, 1823, 1823, 1823, 1823,  244, 1821, 1842, 1842, 1842,
     1842, 1842, 1842,  241, 1842, 1856, 1856, 1856, 1856, 1856,
     1856, 1842, 1856, 1858, 1858, 1858, 1858, 1858, 1858, 1856,
     1858,  239,  238,  237,  227, 1823, 1843, 1858,  200,  194,

      170, 1843, 1859, 1859, 1859, 1859, 1859, 1859,  158,  156,
     1843, 1843, 1843, 1843, 1843, 1843, 1843,  155,  146, 1859,
      145,  142,  134,  131, 1843, 1870, 1870, 1870, 1870, 1870,
     1870,  130, 1870,  126,   96,   93,   92,   89,   88, 1870,
       86,   79, 1843,   69,   43,   38,   33, 1843,   30,   16,
        9,    4, 1843, 1843,    3,    0, 1843, 1843,    0,    0,
        0, 1859,    0,    0, 1843,    0,    0,    0, 1843,    0,
     1843, 1843, 1843,    0, 1843, 1857,    0,    0,    0,    0,
     1857,    0, 1871, 1871, 1871, 1871, 1871, 1871,    0, 1857,
     1857, 1857, 1857, 1857, 1857, 1857,    0,    0,    0, 1871,

        0,    0,    0, 1857,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1857,    0,    0,    0,    0, 1857,    0,    0,    0,
        0, 1857, 1857,    0, 1860, 1857, 1857,    0,    0,    0,
     1860, 1871, 1872, 1857,    0,    0,    0, 1857, 1872, 1857,
     1857, 1857,    0, 1857, 1860, 1860, 1860, 1860, 1860, 1860,
     1860,    0, 1872, 1872, 1872, 1872, 1872, 1872, 1872,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1876,    0,    0,    0,    0,    0, 1876,
     1877, 1860,    0,    0, 1860,    0, 1877,    0,    0, 1872,

        0,    0, 1872, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1877, 1877, 1877, 1877, 1877, 1877, 1877,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1887,    0,    0,    0,    0,
     1876, 1887,    0, 1876,    0,    0,    0, 1877, 1882,    0,
        0,    0,    0,    0, 1882, 1887, 1887, 1887, 1887, 1887,
     1887, 1887,    0,    0,    0,    0,    0,    0, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1888,    0,    0,
        0,    0,    0, 1888, 1882, 1882, 1882, 1882, 1882, 1882,
        0,    0, 1887,    0,    0, 1887,    0, 1888, 1888, 1888,

     1888, 1888, 1888, 1888,    0, 1882,    0,    0, 1882,    0,
     1882, 1882, 1882, 1882, 1882, 1882,    0,    0,    0,    0,
        0,    0, 1896,    0,    0,    0,    0,    0, 1896,    0,
        0,    0,    0,    0, 1888, 1893,    0,    0,    0,    0,
        0, 1893, 1896, 1896, 1896, 1896, 1896, 1896, 1896,    0,
        0,    0,    0,    0,    0, 1893, 1893, 1893, 1893, 1893,
     1893, 1893, 1893, 1893, 1908,    0,    0,    0,    0,    0,
     1908, 1893, 1893, 1893, 1893, 1893, 1893,    0,    0, 1896,
        0,    0,    0,    0, 1908, 1908, 1908, 1908, 1908, 1908,
     1908,    0, 1893,    0,    0, 1893,    0, 1893, 1893, 1893,

     1893, 1893, 1893,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1908, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928,    0,    0,    0,    0,    0,    0,    0, 1928, 1928,
     1928, 1928, 1928, 1928,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1928,    0, 1928, 1928, 1928, 1928, 1928, 1928,
     1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948,
     1948, 1948, 1948, 1948, 1948, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1951,    0,    0,    0,    0,
     1951,    0, 1951, 1951, 1951, 1951, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1953, 1953,    0, 1953, 1953,    0, 1953, 1953, 1953,
     1953, 1953, 1953, 1953,    0, 1953, 1954, 1954,    0,    0,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,    0,
     1954, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1956, 1956,    0, 1956,
        0,    0, 1956, 1957,    0,    0,    0,    0,    0,    0,

     1957, 1957, 1957, 1957, 1958, 1958,    0, 1958,    0,    0,
        0,    0,    0,    0, 1958, 1958, 1958, 1958, 1959,    0,
     1959,    0,    0, 1959, 1960,    0, 1960,    0,    0, 1960,
     1961,    0,    0,    0,    0,    0,    0, 1961, 1961, 1961,
     1961, 1962,    0, 1962,    0,    0, 1962, 1963,    0, 1963,
        0,    0, 1963, 1964,    0, 1964,    0,    0, 1964, 1965,
     1965,    0,    0, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965,    0, 1965, 1966,    0, 1966,    0,    0, 1966,
     1967,    0, 1967,    0,    0, 1967, 1968, 1968, 1968, 1968,
     1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968,

     1968, 1970, 1970,    0, 1970, 1971,    0,    0,    0,    0,
     1971,    0, 1971, 1971, 1971, 1971, 1972, 1972,    0, 1972,
        0,    0,    0,    0,    0,    0, 1972, 1972, 1972, 1972,
     1973, 1973,    0, 1973,    0,    0,    0,    0, 1973, 1973,
     1973, 1973, 1973, 1973, 1974,    0, 1974,    0,    0, 1974,
     1976,    0, 1976,    0,    0, 1976, 1978,    0,    0,    0,
        0, 1978,    0, 1978, 1978, 1978, 1978, 1979,    0,    0,
        0,    0, 1979,    0, 1979, 1979, 1979, 1979, 1980, 1980,
     1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980,
     1980, 1980, 1980, 1981, 1981, 1981, 1981, 1981, 1981, 1981,

     1981, 1981, 1981, 1981, 1981, 1981, 1981, 1981, 1982,    0,
     1982,    0,    0, 1982, 1984,    0, 1984,    0,    0, 1984,
     1986,    0, 1986,    0,    0, 1986, 1988,    0, 1988,    0,
        0, 1988, 1990,    0, 1990,    0,    0, 1990, 1992,    0,
     1992, 1992,    0, 1992, 1993,    0, 1993, 1993,    0, 1993,
     1994,    0,    0,    0,    0, 1994,    0, 1994, 1994, 1994,
     1994, 1995,    0, 1995,    0,    0, 1995, 1996,    0, 1996,
        0,    0, 1996, 1997, 1997,    0, 1997,    0,    0,    0,
        0, 1997, 1997, 1997, 1997, 1997, 1997, 1998,    0, 1998,
        0,    0, 1998, 1999,    0, 1999,    0,    0, 1999, 2000,

        0, 2000,    0,    0, 2000, 2002,    0, 2002,    0,    0,
     2002, 2004,    0,    0,    0,    0, 2004,    0, 2004, 2004,
     2004, 2004, 2005,    0,    0,    0,    0, 2005,    0, 2005,
     2005, 2005, 2005, 2006,    0, 2006,    0,    0, 2006, 2007,
        0, 2007,    0,    0, 2007, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2009,    0, 2009,    0,    0, 2009, 2011,    0, 2011,    0,
        0, 2011, 2013,    0, 2013,    0,    0, 2013, 2014,    0,
     2014,    0,    0, 2014, 2016,    0, 2016,    0,    0, 2016,
     2018,    0, 2018, 2018,    0, 2018, 2019,    0, 2019,    0,

        0, 2019, 2020,    0, 2020,    0,    0, 2020, 2021,    0,
     2021,    0,    0, 2021, 2022,    0, 2022,    0,    0, 2022,
     2024,    0, 2024,    0,    0, 2024, 2026, 2026,    0, 2026,
        0,    0,    0,    0,    0,    0, 2026, 2026, 2026, 2026,
     2027,    0, 2027,    0,    0, 2027, 2028,    0, 2028,    0,
        0, 2028, 2029,    0, 2029,    0,    0, 2029, 2031,    0,
     2031,    0,    0, 2031, 2033, 2033,    0, 2033,    0,    0,
        0,    0, 2033, 2033, 2033, 2033, 2033, 2033, 2034,    0,
     2034,    0,    0, 2034, 2036,    0, 2036,    0,    0, 2036,
     2038,    0,    0,    0,    0, 2038,    0, 2038, 2038, 2038,

     2038, 2039,    0, 2039,    0,    0, 2039, 2040,    0, 2040,
        0,    0, 2040, 2041,    0, 2041,    0,    0, 2041, 2043,
        0, 2043,    0,    0, 2043, 2045, 2045, 2045, 2045, 2045,
     2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045,
     2046,    0, 2046,    0,    0, 2046, 2048,    0, 2048,    0,
        0, 2048, 2050,    0, 2050,    0,    0, 2050, 2052,    0,
     2052,    0,    0, 2052, 2054,    0, 2054,    0,    0, 2054,
     2055,    0, 2055,    0,    0, 2055, 2057,    0, 2057,    0,
        0, 2057, 2059,    0, 2059,    0,    0, 2059, 2061,    0,
     2061,    0,    0, 2061, 2063, 2063,    0, 2063,    0,    0,

        0,    0,    0,    0, 2063, 2063, 2063, 2063, 2064, 2064,
        0, 2064,    0,    0, 2064,    0, 2064,    0, 2064, 2064,
     2064, 2064, 2065,    0, 2065,    0,    0, 2065, 2067,    0,
     2067,    0,    0, 2067, 2069,    0, 2069,    0,    0, 2069,
     2071,    0, 2071,    0,    0, 2071, 2073, 2073,    0, 2073,
        0,    0,    0,    0, 2073, 2073, 2073, 2073, 2073, 2073,
     2076,    0,    0,    0,    0, 2076,    0, 2076, 2076, 2076,
     2076, 2078,    0, 2078,    0,    0, 2078, 2080,    0, 2080,
        0,    0, 2080, 2082,    0, 2082,    0,    0, 2082, 2084,
        0, 2084,    0,    0, 2084, 2086, 2086, 2086, 2086, 2086,

     2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086,
     2093,    0, 2093,    0,    0, 2093, 2095,    0, 2095,    0,
        0, 2095, 2097,    0, 2097,    0,    0, 2097, 2099,    0,
     2099,    0,    0, 2099, 2101, 2101,    0, 2101,    0,    0,
     2101,    0, 2101,    0, 2101, 2101, 2101, 2101, 2102, 2102,
        0, 2102,    0,    0,    0,    0,    0,    0, 2102, 2102,
     2102, 2102, 2103,    0, 2103,    0,    0, 2103, 2104,    0,
     2104,    0,    0, 2104, 2105,    0, 2105,    0,    0, 2105,
     2107,    0, 2107,    0,    0, 2107, 2109,    0, 2109,    0,
        0, 2109, 2111,    0, 2111,    0,    0, 2111, 2113, 2113,

        0, 2113,    0,    0,    0,    0, 2113, 2113, 2113, 2113,
     2113, 2113, 2114,    0, 2114,    0,    0, 2114, 2115,    0,
        0,    0,    0, 2115,    0, 2115, 2115, 2115, 2115, 2116,
        0, 2116,    0,    0, 2116, 2118,    0, 2118,    0,    0,
     2118, 2120,    0, 2120,    0,    0, 2120, 2122,    0, 2122,
        0,    0, 2122, 2124,    0, 2124,    0,    0, 2124, 2125,
        0, 2125,    0,    0, 2125, 2126,    0, 2126,    0,    0,
     2126, 2128,    0, 2128,    0,    0, 2128, 2133, 2133,    0,
     2133,    0,    0,    0,    0,    0,    0, 2133, 2133, 2133,
     2133, 2134, 2134,    0, 2134,    0,    0,    0,    0, 2134,

     2134, 2134, 2134, 2134, 2134, 2135,    0, 2135,    0,    0,
     2135, 2136,    0, 2136,    0,    0, 2136, 2137,    0, 2137,
        0,    0, 2137, 2139,    0, 2139,    0,    0, 2139, 2141,
        0, 2141,    0,    0, 2141, 2143,    0, 2143,    0,    0,
     2143, 2148, 2148,    0, 2148,    0,    0,    0,    0, 2148,
     2148, 2148, 2148, 2148, 2148, 2149,    0, 2149,    0,    0,
     2149, 2151,    0,    0,    0,    0, 2151,    0, 2151, 2151,
     2151, 2151, 2152,    0, 2152,    0,    0, 2152, 2154,    0,
     2154,    0,    0, 2154, 2159,    0, 2159,    0,    0, 2159,
     2161,    0, 2161,    0,    0, 2161, 2166,    0, 2166,    0,

        0, 2166, 2167, 2167,    0, 2167,    0,    0,    0,    0,
     2167, 2167, 2167, 2167, 2167, 2167, 2168,    0, 2168,    0,
        0, 2168, 2169,    0, 2169,    0,    0, 2169, 2170,    0,
     2170,    0,    0, 2170, 2172,    0, 2172,    0,    0, 2172,
     2174,    0, 2174,    0,    0, 2174, 2176,    0, 2176,    0,
        0, 2176, 2181,    0, 2181,    0,    0, 2181, 2182, 2182,
        0, 2182,    0,    0,    0,    0, 2182, 2182, 2182, 2182,
     2182, 2182, 2183,    0, 2183,    0,    0, 2183, 2185,    0,
        0,    0,    0, 2185,    0, 2185, 2185, 2185, 2185, 2189,
        0, 2189,    0,    0, 2189, 2190,    0, 2190,    0,    0,

     2190, 2192,    0, 2192,    0,    0, 2192, 2194,    0, 2194,
        0,    0, 2194, 2195,    0, 2195,    0,    0, 2195, 2197,
     2197,    0, 2197,    0,    0,    0,    0,    0,    0, 2197,
     2197, 2197, 2197, 2198,    0, 2198,    0,    0, 2198, 2199,
        0, 2199,    0,    0, 2199, 2200,    0, 2200,    0,    0,
     2200, 2202,    0, 2202,    0,    0, 2202, 2204, 2204,    0,
     2204,    0,    0,    0,    0, 2204, 2204, 2204, 2204, 2204,
     2204, 2205,    0, 2205,    0,    0, 2205, 2207,    0, 2207,
        0,    0, 2207, 2209,    0, 2209,    0,    0, 2209, 2211,
        0, 2211,    0,    0, 2211, 2213,    0, 2213,    0,    0,

     2213, 2214,    0, 2214,    0,    0, 2214, 2216, 2216,    0,
     2216,    0,    0,    0,    0, 2216, 2216, 2216, 2216, 2216,
     2216, 2218,    0,    0,    0,    0, 2218,    0, 2218, 2218,
     2218, 2218, 2219,    0, 2219,    0,    0, 2219, 2220,    0,
     2220,    0,    0, 2220, 2224,    0, 2224,    0,    0, 2224,
     2226,    0, 2226,    0,    0, 2226, 2228, 2228,    0, 2228,
        0,    0,    0,    0,    0,    0, 2228, 2228, 2228, 2228,
     2229, 2229,    0, 2229,    0,    0, 2229,    0, 2229,    0,
     2229, 2229, 2229, 2229, 2230,    0, 2230,    0,    0, 2230,
     2232,    0, 2232,    0,    0, 2232, 2234,    0, 2234,    0,

        0, 2234, 2236,    0, 2236,    0,    0, 2236, 2238, 2238,
        0, 2238,    0,    0,    0,    0, 2238, 2238, 2238, 2238,
     2238, 2238, 2239,    0, 2239,    0,    0, 2239, 2241,    0,
     2241,    0,    0, 2241, 2246,    0, 2246,    0,    0, 2246,
     2248,    0, 2248,    0,    0, 2248, 2250, 2250,    0, 2250,
        0,    0,    0,    0, 2250, 2250, 2250, 2250, 2250, 2250,
     2251,    0,    0,    0,    0, 2251,    0, 2251, 2251, 2251,
     2251, 2252,    0, 2252,    0,    0, 2252, 2254,    0, 2254,
        0,    0, 2254, 2256,    0, 2256,    0,    0, 2256, 2259,
     2259,    0, 2259,    0,    0, 2259,    0, 2259,    0, 2259,

     2259, 2259, 2259, 2260,    0, 2260,    0,    0, 2260, 2261,
        0, 2261,    0,    0, 2261, 2262,    0, 2262,    0,    0,
     2262, 2264,    0, 2264,    0,    0, 2264, 2266,    0, 2266,
        0,    0, 2266, 2268,    0, 2268,    0,    0, 2268, 2270,
     2270,    0, 2270,    0,    0,    0,    0, 2270, 2270, 2270,
     2270, 2270, 2270, 2274,    0, 2274,    0,    0, 2274, 2275,
        0, 2275,    0,    0, 2275, 2278, 2278,    0, 2278,    0,
     2278, 2278,    0, 2278, 2278, 2278, 2278, 2278, 2278, 2279,
        0,    0,    0,    0, 2279,    0, 2279, 2279, 2279, 2279,
     2280,    0, 2280,    0,    0, 2280, 2284,    0, 2284,    0,

        0, 2284, 2285,    0, 2285,    0,    0, 2285, 2286,    0,
     2286,    0,    0, 2286, 2288,    0, 2288,    0,    0, 2288,
     2290,    0, 2290,    0,    0, 2290, 2292,    0, 2292,    0,
        0, 2292, 2297, 2297,    0, 2297,    0,    0,    0,    0,
     2297, 2297, 2297, 2297, 2297, 2297, 2298,    0, 2298,    0,
        0, 2298, 2299,    0, 2299,    0,    0, 2299, 2302, 2302,
        0, 2302,    0,    0,    0,    0, 2302, 2302, 2302, 2302,
     2302, 2302, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303,
     2303, 2303, 2303, 2303, 2303, 2303, 2303, 2304,    0,    0,
        0,    0, 2304,    0, 2304, 2304, 2304, 2304, 2306,    0,

     2306,    0,    0, 2306, 2308,    0, 2308,    0,    0, 2308,
     2310,    0, 2310,    0,    0, 2310, 2312,    0, 2312,    0,
        0, 2312, 2317,    0, 2317,    0,    0, 2317, 2318,    0,
     2318,    0,    0, 2318, 2320,    0, 2320,    0,    0, 2320,
     2322, 2322, 2322, 2322, 2322, 2322, 2322, 2322, 2322, 2322,
     2322, 2322, 2322, 2322, 2322, 2323, 2323, 2323, 2323, 2323,
     2323, 2323, 2323, 2323, 2323, 2323, 2323, 2323, 2323, 2323,
     2324,    0, 2324,    0,    0, 2324, 2326,    0, 2326,    0,
        0, 2326, 2328,    0, 2328,    0,    0, 2328, 2330,    0,
     2330,    0,    0, 2330, 2332,    0, 2332,    0,    0, 2332,

     2333,    0, 2333,    0,    0, 2333, 2334,    0, 2334,    0,
        0, 2334, 2335,    0, 2335,    0,    0, 2335, 2336,    0,
     2336,    0,    0, 2336, 2337,    0, 2337,    0,    0, 2337,
     2338,    0,    0,    0,    0, 2338,    0, 2338, 2338, 2338,
     2338, 2339,    0, 2339,    0,    0, 2339, 2341,    0, 2341,
        0,    0, 2341, 2346,    0, 2346,    0,    0, 2346, 2348,
        0, 2348,    0,    0, 2348, 2350, 2350,    0, 2350,    0,
        0,    0,    0, 2350, 2350, 2350, 2350, 2350, 2350, 2352,
        0, 2352,    0,    0, 2352, 2353,    0, 2353,    0,    0,
     2353, 2354,    0, 2354,    0,    0, 2354, 2355, 2355, 2355,

     2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2355, 2355, 2356,    0, 2356,    0,    0, 2356, 2358,    0,
     2358,    0,    0, 2358, 2361,    0,    0,    0,    0, 2361,
        0, 2361, 2361, 2361, 2361, 2365,    0, 2365,    0,    0,
     2365, 2366,    0, 2366,    0,    0, 2366, 2369,    0, 2369,
        0,    0, 2369, 2370,    0, 2370,    0,    0, 2370, 2373,
        0, 2373,    0,    0, 2373, 2375,    0, 2375,    0,    0,
     2375, 2377,    0,    0,    0,    0, 2377,    0, 2377, 2377,
     2377, 2377, 2378,    0, 2378,    0,    0, 2378, 2379,    0,
     2379,    0,    0, 2379, 2380, 2380, 2380, 2380, 2380, 2380,

     2380, 2380, 2380, 2380, 2380, 2380, 2380, 2380, 2380, 2381,
        0, 2381,    0,    0, 2381, 2382,    0, 2382,    0,    0,
     2382, 2383,    0, 2383,    0,    0, 2383, 2384,    0, 2384,
        0,    0, 2384, 2385,    0, 2385,    0,    0, 2385, 2386,
        0, 2386,    0,    0, 2386, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2388,    0, 2388,    0,    0, 2388, 2389,    0, 2389,    0,
        0, 2389, 2391, 2391, 2391, 2391, 2391, 2391, 2391, 2391,
     2391, 2391, 2391, 2391, 2391, 2391, 2391, 2392,    0, 2392,
        0,    0, 2392, 2393,    0, 2393,    0,    0, 2393, 2394,

        0, 2394,    0,    0, 2394, 2395,    0, 2395,    0,    0,
     2395, 2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397,
     2397, 2397, 2397, 2397, 2397, 2397, 2398,    0, 2398,    0,
        0, 2398, 2399,    0, 2399,    0,    0, 2399, 2400,    0,
     2400,    0,    0, 2400, 2401,    0, 2401,    0,    0, 2401,
     2402,    0, 2402,    0,    0, 2402, 2403,    0, 2403,    0,
        0, 2403, 2404,    0, 2404,    0,    0, 2404, 2405,    0,
     2405,    0,    0, 2405, 2406,    0, 2406,    0,    0, 2406,
     2407,    0, 2407,    0,    0, 2407, 2408,    0, 2408,    0,
        0, 2408, 2409,    0, 2409,    0,    0, 2409, 2410,    0,

     2410,    0,    0, 2410, 2411,    0, 2411,    0,    0, 2411,
     2412,    0, 2412,    0,    0, 2412, 2413,    0, 2413,    0,
        0, 2413, 2414,    0, 2414,    0,    0, 2414, 2415,    0,
     2415,    0,    0, 2415, 2416,    0, 2416,    0,    0, 2416,
     2417,    0, 2417,    0,    0, 2417, 2418,    0, 2418,    0,
        0, 2418, 2421,    0, 2421,    0,    0, 2421, 2422,    0,
     2422,    0,    0, 2422, 2423,    0, 2423,    0,    0, 2423,
     2424,    0, 2424,    0,    0, 2424, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,

     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[245] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Sun Oct 13 16:49:47 2024
 * Update Count     : 876
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.hpp"                          // for DeclarationNode
#include "ExpressionNode.hpp"                           // for LabelNode
#include "InitializerNode.hpp"                          // for InitializerNode
#include "ParseNode.hpp"
#include "ParserTypes.hpp"                              // for Token
#include "StatementNode.hpp"                            // for CondCtrl, ForCtrl
#include "TypedefTable.hpp"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 3316 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// " stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}
				// C23 attributes, CPP also handles missing quote delimiter



#line 3333 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define QUOTE 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 187 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 3557 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1948 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8977 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 189 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 211 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 214 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 219 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }			// do nothing
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }					// reset column counter
	YY_BREAK
/* keywords */
case 9:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SVBOOL); }				// gcc (ARM)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CORUN); }				// CFA
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COFOR); }				// CFA
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT16); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32X); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64X); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128); }					// GCC
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128X); }					// GCC
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32X4); }					// GCC (ARM)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64X2); }					// GCC (ARM)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(SVFLOAT32); }					// GCC (ARM)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(SVFLOAT64); }					// GCC (ARM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 112:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COUNTOF); }			// GCC
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 362 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 363 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 364 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 367 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 368 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 369 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 373 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 156:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* C23 attributes */
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	strtext = new string( &yytext[2], yyleng - 4 );		// remove delimiters "[[" and "]]"
	RETURN_STR(C23_ATTRIBUTE);
}
	YY_BREAK
/* numeric constants */
case 159:
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 390 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 391 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 392 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 396 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value, CPP also handles missing quote delimiter */
case 167:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant, CPP also handles missing quote delimiter */
case 170:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 173:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 413 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 176:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATTR); }				// CFA, attribute shorthand
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 190:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 194:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 452 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 457 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 463 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 464 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 465 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 466 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 467 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 468 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 469 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 470 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 471 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 472 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 473 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 474 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 475 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 477 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 478 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUp); }			// CFA
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 479 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 480 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 481 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 482 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 237:
YY_RULE_SETUP
#line 485 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 486 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 487 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 488 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 493 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 242:
YY_RULE_SETUP
#line 520 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 243:
YY_RULE_SETUP
#line 532 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 534 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 4937 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1948 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1948 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1947);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 534 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

