
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 237
#define YY_END_OF_BUFFER 238
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1368] =
    {   0,
        0,    0,    0,    0,    0,    0,  163,  163,  166,  166,
      238,  236,    7,    9,    8,  189,  165,  152,  195,  198,
      162,  175,  176,  192,  190,  179,  191,  182,  194,  155,
      156,  180,  181,  200,  202,  201,  203,  171,  152,  173,
      193,  174,  196,  152,  172,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  177,  199,  178,  197,    7,  236,    4,
        4,  237,  163,  164,  170,  166,  167,    7,    9,    0,
        8,  207,  230,  152,    0,  220,  188,  212,  221,  218,
      204,  215,  205,  216,  214,  228,    0,  159,    3,    0,

      219,  158,  155,    0,    0,    0,  155,  155,  155,  155,
      155,  155,    0,    0,  155,  155,  156,  156,  156,  156,
      156,  156,  156,    0,  156,  156,  186,  187,  185,  208,
      210,  206,  211,  209,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  226,  183,  165,  162,  152,  217,    0,    0,  223,
        0,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,    0,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,   49,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,   81,  152,  152,  152,

      152,  152,   99,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  222,  213,  227,    7,    0,    0,
        0,    2,    0,    5,  163,    0,  169,  168,  168,    0,
        0,    0,  166,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      229,  184,  159,  159,    0,  159,  159,  159,  159,    0,
        6,  160,  158,    0,  158,  158,  158,  158,  155,    0,
        0,  154,    0,    0,  160,    0,  155,  155,  155,  155,
      155,  155,  155,  155,    0,    0,    0,  155,  155,  155,

      155,  155,  155,  155,    0,  157,    0,    0,  156,  156,
      156,  156,  156,  156,  156,  156,    0,    0,    0,  156,
      156,  156,  156,  156,  156,  156,    0,  224,  225,    0,
      234,  231,    0,    0,    0,  233,    0,    0,    0,    0,
        0,    0,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  153,    0,  152,   16,   17,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,   74,  152,  152,  152,  152,

       88,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  128,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,    0,    0,  168,    0,
        0,    0,    0,    0,  168,    0,    0,  235,    0,    0,
        0,    0,    0,    0,    0,  159,    0,  159,    0,    0,
        0,    0,    0,  159,  159,    0,  160,  160,    0,  160,
      160,  160,  160,  158,    0,  158,    0,    0,    0,    0,
        0,  158,  158,    0,  154,  154,  154,  154,  154,  154,
      154,    0,  154,  154,  160,  160,  160,  160,  160,  160,

        0,    0,    0,  155,  155,    0,    0,    0,    0,  155,
      155,    0,    0,  157,  157,  157,  157,  157,  157,  157,
      157,    0,  157,  157,    0,    0,    0,  156,  156,    0,
        0,    0,    0,  156,  156,  233,    0,    0,    0,    0,
        0,    0,    0,  232,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  153,    0,    0,    0,  152,   23,  152,  152,
       28,  152,   31,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,   52,  152,   54,  152,  152,

      152,  152,  152,  152,  152,  152,  152,  152,   80,  152,
      152,   93,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  141,  152,  152,
      152,  148,  152,  150,  152,    0,    0,    0,    0,    0,
        0,  168,    0,    0,    0,    0,    0,  159,  159,    0,
      159,  159,    0,    0,    0,    0,  160,    0,  160,    0,
        0,    0,    0,    0,  160,  160,    0,  158,  158,    0,
      158,  158,    0,    0,    0,    0,  154,  154,  154,  154,
      154,  154,  154,  154,    0,    0,    0,  154,  154,  154,

      154,  154,  154,  154,    0,  160,    0,    0,    0,    0,
      160,  160,    0,    0,    0,    0,    0,    0,    0,  157,
      157,  157,  157,  157,  157,  157,  157,    0,    0,    0,
      157,  157,    0,  161,    0,  157,  157,  157,  157,  157,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  152,  152,   26,  152,  152,  152,  152,
      152,  152,  152,  152,  152,   18,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,    0,    0,    0,    0,    0,    0,  152,
      152,   27,   29,  152,  152,   35,   39,  152,  152,   34,

      152,  152,  152,  152,   51,  152,  152,  152,  152,  152,
       61,   62,  152,  152,   77,  152,  152,  152,  152,   95,
       98,  100,  152,  152,  152,  152,  152,  108,  152,  152,
      152,  152,  152,  152,  152,  124,  152,  127,  129,  152,
      152,  152,  135,  152,  152,  152,  152,  152,  152,  149,
      152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  159,    0,  159,  159,  160,  160,    0,  160,  160,
        0,    0,    0,    0,    0,  158,    0,  158,  158,    0,
        0,    0,  154,  154,    0,    0,    0,    0,  154,  154,
        0,  160,  160,    0,    0,    0,    0,    0,  161,    0,

        0,    0,    0,    0,  157,  157,    0,  161,  161,  161,
      161,  161,    0,    0,    0,  157,  157,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  152,    0,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,   83,  152,
      152,  152,  152,  152,  152,  152,  152,  152,    0,    0,
        0,    0,    0,    0,    0,    0,  152,  152,  152,  152,
       32,   33,  152,  152,  152,  152,  152,   50,   53,  152,
       57,  152,  152,  152,  152,   75,  152,  152,   85,   89,
      152,  152,  152,  103,  152,  107,  109,  112,  114,  117,

      152,  119,  120,  152,  152,  152,  134,  131,  152,  152,
      152,  145,  152,  152,  151,    0,    1,    0,    0,  168,
        0,    0,    0,    0,  159,    0,  160,    0,  160,  160,
      158,    0,    0,  160,    0,  160,  160,  161,  161,    0,
      161,    0,    0,    0,    0,  161,  161,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  152,  152,
       20,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,   19,  152,  152,  152,  152,   40,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
        0,    0,    0,    0,    0,    0,    0,    0,   10,   12,

      152,  152,  152,  152,  113,   47,   48,  152,  152,   60,
      152,   64,   76,  152,   94,  101,  152,  152,  152,  118,
      152,  152,  126,  130,  152,  140,  152,  146,  152,    0,
        0,  160,  160,    0,    0,  161,  161,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       11,   13,   36,  152,  152,   67,   68,   70,   79,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,   84,   86,   90,  152,  152,  110,  121,  132,
      152,  152,    0,    0,    0,    0,    0,    0,    0,  152,
      152,   42,  152,  152,  152,   59,   66,  152,  102,  104,

      152,  152,  152,  137,  142,  152,    0,    0,    0,    0,
      161,    0,  161,  161,    0,    0,    0,    0,    0,    0,
      152,  152,  152,   72,   69,   71,  152,   96,  152,  152,
       14,  152,  152,  152,   37,   41,  152,  152,   63,  152,
      152,   92,  152,  152,  152,  152,  152,    0,    0,    0,
        0,  152,  152,   43,   55,  152,   78,  152,  152,  152,
      147,    0,    0,    0,    0,  161,    0,    0,    0,    0,
      152,   44,   45,   73,   82,  152,  152,  152,  152,  152,
      152,  152,  152,   65,   87,   91,  105,  111,  133,  152,
      143,    0,    0,    0,   25,  152,  152,  152,  152,  152,

        0,    0,    0,    0,    0,    0,   46,  152,  152,   15,
       21,   24,  152,  152,   38,  152,  152,  136,  152,    0,
        0,    0,    0,   30,   58,  152,  152,  125,    0,    0,
        0,  152,  152,  152,  152,  152,  152,  106,  144,    0,
        0,    0,  152,  123,    0,  152,  122,   22,  152,  152,
       56,    0,  116,  115,  152,  152,  152,  152,  152,  152,
      152,  138,  152,  152,  139,   97,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   11,   51,   56,   11,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   11,   73,   74,   75,   76,
       77,   78,   51,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[92] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    4,    4,    4,    4,    4,    9,
        4,    4,    4,    4,    4,    4,    4,    1,   10,    1,
        1,   11,    1,    8,    8,    8,    8,    8,    8,    4,
        4,    4,    4,    4,    4,    4,    4,    9,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1

    } ;

static const flex_int16_t yy_base[1532] =
    {   0,
        0,   90, 4119, 4118,    0,    0,   90,   91,   92,   93,
     4134, 4137,  104, 4137,  110,   83, 4137, 4074,   63,   90,
     4137, 4137, 4137,   84,  104, 4137,  107,  105,  123,  178,
      245, 4096, 4137,  125, 4096,   88,  325,  118,  152, 4137,
      112, 4137,  111,  129, 4067,  105,  113,  180,  164,  179,
      237,  116,  121,  136,  160,  141,   95,  282,  218,  253,
      267,  298,  219, 4137,  127, 4137,  175,  369,  375, 4137,
     4107, 4137,    0, 4137,  413,    0, 4137,  387, 4137,  405,
      426, 4137,  491, 4069,   83, 4137, 4137, 4137, 4137, 4137,
     4090, 4137, 4089, 4137, 4137, 4090, 4103,  558, 4137, 4120,

     4137,  620,  435,  508,  224,  535,  371,  624,  611,  397,
     4137,  469,  134,  445,  402,  549,    0,  552,  653,  683,
      556, 4137,  668,  168,  614,  696, 4137, 4137, 4137, 4087,
     4137, 4137, 4137, 4086, 4085,  194,  224, 4103,  244,  285,
      314,  245,  271,  293,  360, 4081,  315,  321, 4058, 4026,
      330, 4137, 4137, 4137, 4137,  322, 4137, 4053, 4052, 4137,
     4025,  406,  411,  446,  287,  251,  366,  360,  465,  364,
      309,  707, 4053,  226,  387,  392,  412,  396,  388,  487,
      513,  677,  443,  489,  462,  362,  512,  551,  594,  534,
      580,  497,  535,  532,  536,  593, 4052,  660,  560,  621,

      595,  460, 4051,  598,  725,  644,  690,  669,  631,  557,
      673,  688,  710,  619,  632,  745,  678,  703,  726,  558,
      708,  740,  596,  734, 4137, 4137, 4137,  812,  818, 4106,
      827, 4137,  857, 4137,    0,  821, 4137, 4137,  844, 4046,
     4045, 4044,    0, 4070,  350,  757, 4088,  774,  856,  841,
      796,  801,  802,  859, 4066,  828,  840,  855, 4040, 4039,
     4137, 4137,  884,  875,  946,  873,  936,  475, 4038, 4096,
     4137,  998,  944, 1060,  910, 1050,  754, 1061,  972,  702,
     1113, 1159,  877, 1027, 1224, 1134,  728, 4137,  843, 1045,
      861, 4137,  866, 1143,  461, 4073, 4070,  883,  907,  913,

     1164,  755,  943, 1150,    0, 1288, 4075, 1233,  912, 4137,
     1013, 1296,  949, 4137,  962, 1339,  732, 4070, 4067, 1131,
     1218,  960, 1350,  832,  965, 1357, 1409, 4137, 4137, 4056,
     4137, 4137,  926,  946, 4032, 4032,  980, 4028,    0, 4027,
        0, 3998,  846,  971,  984,  988,  943, 1020,  865, 1017,
      960, 1043, 1037, 1223, 1064, 1054,  199, 1040, 1073, 1047,
     1005, 1094, 1118, 1096, 1125, 4028, 1065,  265, 4027, 4026,
     1133, 1128, 1051, 1132, 1059, 1091, 1142, 1092, 1161, 1159,
     1210,  874, 1062, 1164, 1167, 1156, 1208, 1215, 1168, 1211,
     1226, 1170, 1219, 1225, 1242, 1308, 1243, 1265, 1222, 1251,

      773, 1218, 1289, 1281,  495, 1280, 1314, 1312, 1318,  781,
     1323, 1329, 1326, 1331, 1333, 1334, 1337, 1342, 1341, 1344,
     1347, 4025, 1348, 1352, 1186, 1351, 1358, 1365, 1382, 1282,
     1383, 1366, 1368, 1384, 1386, 1391, 1452, 1453, 1449, 1456,
     4021,    0, 4020,    0, 4019,    0, 4043, 4137, 1416, 1428,
     4019, 4016,    0, 4015,    0, 4137, 1463, 1489, 1477, 1435,
     4051, 4048, 4051, 4137, 1497, 1518, 1558, 1523, 1620, 1584,
     1610, 1452, 4011, 4137, 1639, 1672, 1734, 1441, 4047, 4044,
     4047, 4137, 1548, 1662, 1743, 1552, 1725, 1755, 1521, 4137,
     1659, 4007, 1557, 1794, 1854, 1703, 1782, 1791, 1462, 4006,

     1500, 4042, 4039, 1414, 1473, 4035, 1510, 4039, 4036, 1485,
     1503, 1460, 1659, 1918, 1671, 1815, 1969, 1785, 1983, 1846,
     4137, 1532, 1853, 1997, 1535, 4037, 4034, 1497, 1514, 4030,
     1537, 4034, 4031, 1544, 1564, 3998, 1578, 3994, 3993, 3992,
        0, 3991,    0, 4137, 1613, 1560, 1393, 1559, 1653, 1283,
     1612, 1645, 1654, 1594, 1668, 1670, 1582, 1600, 1651, 1696,
     1719, 1723, 1596, 1495, 1757, 1556, 1669, 1717, 1767, 1710,
     1769, 1777, 3993, 1656, 3989, 3988, 1793, 3990, 1763, 1126,
     3989, 1738, 3988, 1754, 1784, 1794, 1828, 1800, 1789, 1831,
     1829, 1845, 1558, 1788, 1844, 3987, 1840, 3986, 1796, 1852,

     1856, 1860, 1854, 1870, 1881, 1871, 1895, 1874, 3985, 1893,
     1911, 3984, 1897, 1912, 1956, 1913, 1945, 1959, 1943, 1961,
     1970, 1966, 1920, 1971, 1960, 1972, 1974, 1977, 1991, 1975,
     1976, 1987, 1995, 1998, 1915, 1997, 1999, 3983, 2001, 2002,
     2003, 3982, 2005, 3981, 1724, 2071, 2063, 3977,    0, 3976,
        0, 3975, 3974, 3973,    0, 3972,    0, 2070, 3971, 4002,
     2030, 2031, 1649, 4006, 4003, 4006, 4137, 2099, 2132, 2194,
     2079, 4003, 4000, 4003, 4137, 2081, 2122, 2203, 3963, 3994,
     2093, 2096, 2084, 3998, 3995, 3998, 2051, 4137, 2118, 2211,
     2111, 4137, 2114, 2181, 2106, 3995, 3992, 2120, 2197, 2125,

     2238, 2123, 2202, 2252, 2233, 4137, 2109, 3993, 3990, 3993,
     4137, 2268, 2277, 3985, 3984, 2234, 2291, 2263, 2137, 2127,
     4137, 2131, 2303, 2198, 4137, 2273, 2316, 2213, 3988, 3985,
     2288, 2301, 2338, 2376, 2438, 2303, 2362, 2199, 2305, 2402,
     3949, 3980, 3979, 3946, 3945, 3944,    0, 3943,    0, 3942,
        0, 3941,    0, 2007, 2131, 3943, 2184, 2061, 2060, 2129,
     2189, 2278, 2264, 2224, 2319, 2272, 2295, 2320, 2298, 2334,
     2180, 2130, 2323, 2325, 2322, 2356, 2279, 2349, 2337, 2357,
     2374, 2355, 2358, 3939, 3938, 3937,    0, 3936,    0, 2376,
     2360, 3937, 2385, 2411, 2412, 3936, 3932, 2396, 2370, 3931,

     2362, 2414, 2416, 2418, 3927, 2419, 2400, 2423, 2424, 2426,
     3926, 2467, 2430, 2388, 3922, 2434, 2433,  156, 2425, 3921,
     3917, 3916, 2435, 2437, 2446, 2382, 2447, 3912, 1681, 2448,
     2449, 2450, 2452, 2451, 2453, 2462, 2454, 3911, 3907, 2457,
     2465, 2460, 3906, 2471, 2474, 2476, 2475, 2478, 2480, 3902,
     2481, 3957, 3894,    0, 3893,    0, 3889,    0, 3888,    0,
     2540, 2502, 3916, 3860, 3854, 2580, 3876, 3904, 2503, 2504,
     2516, 3908, 3898, 3901, 2554, 2514, 3890, 3834, 3828, 2517,
     3887, 3881, 2518, 2535, 3877, 2528, 3878, 3875, 2525, 2546,
     3866, 2547, 2548, 2529, 3870, 3864, 3867, 2632, 2642, 2704,

     3824, 2567, 3860, 3854, 2543, 2557, 3850, 2651, 2554, 2668,
     2694, 3812, 2605, 3848, 3840, 2566, 2568, 3804,    0, 3798,
        0, 3797,    0, 3791,    0,    0,    0, 3793,    0, 2624,
     2493, 2555, 2577, 2694, 2576, 2570, 2562, 2584, 2578, 2626,
     2637, 2628, 2644, 2636, 2651, 2660, 2632, 2662, 2685, 2678,
     2680, 2690, 2687, 2689, 2648, 2692, 2726, 2693, 3786,    0,
     3785,    0, 3779,    0, 3778,    0, 2696, 2701, 2697, 2699,
     3775, 3774, 2700, 2712, 2703, 2706, 2718, 3768, 3767, 2720,
     3761, 2714, 2721, 2756, 2760, 3760, 2729, 2730, 3731, 3730,
     2731, 2735, 2732, 3724, 2736, 3723, 3717, 3716, 2737, 3710,

     2739, 3709, 2742, 2744, 2749, 2754, 3699, 3698, 2750, 2757,
     2758, 3689, 2761, 2762, 3688, 3738, 4137,    0,    0, 4137,
        0,    0,    0,    0, 3655, 2821, 2750, 3704, 3648, 3642,
     3641, 3692, 3691, 2781, 3685, 3629, 3623, 2861, 3645, 3671,
     4137, 2800, 3675, 3667, 3670, 4137, 2812, 2831, 3646, 3613,
        0, 3607,    0, 3606,    0, 3602,    0, 3601, 2814, 2765,
     3600, 2778, 2805, 2840, 2808, 1471, 2809, 2812, 2818, 2819,
     2836, 2823, 3599, 2815, 2837, 2767, 2842, 2845, 2847, 2887,
     2854, 2856, 2872, 2860, 2862, 2870, 2873, 2867, 2889, 2866,
     3588,    0, 3587,    0, 3582,    0, 3581,    0, 3578, 3577,

     2882, 2880, 2883, 2885, 3571, 3570, 3564, 2888, 2890, 3563,
     2922, 3559, 3558, 2894, 3554, 3553, 2884, 2895, 2898, 3549,
     2896, 2897, 3548, 3544, 2899, 3537, 2900, 3536, 2910, 3527,
     3526, 3499, 3498, 2960, 3547, 2926, 2927, 2950, 3551, 3543,
     3546, 3492, 3491, 3487, 3486,    0, 3478, 3477, 3470, 3469,
     3467, 3466, 3460, 2968, 2934, 3459, 2919, 2921, 3455, 2936,
     2937, 2941, 2942, 2948, 2943, 2944, 2950, 2949, 2959, 2951,
     2989, 2996, 3454, 2969, 2970, 2974, 2976, 2978, 3450, 2979,
     2990, 2965, 3446, 3438, 3437, 3434,    0, 3429, 3422, 2984,
     2985, 3424, 2986, 2987, 2988, 3418, 3417, 2992, 3411, 3410,

     2993, 2991, 2994, 3404, 3403, 2998, 3394, 3393, 3363, 3362,
     3009, 3387, 3331, 3326,    0,    0, 3348, 3342, 3341, 3333,
     3033, 3034, 3037, 3001, 3335, 3316, 3003, 3315, 3007, 3006,
     3015, 3010, 3019, 3020, 3026, 3311, 3021, 3045, 3310, 3040,
     3025, 3306, 3031, 3041, 3046, 3048, 3050,    0, 3302, 3298,
     3297, 3042, 2485, 3296, 3295, 3054, 3288, 3036, 3055, 3056,
     3287, 3283, 3280, 3279, 3275, 3251, 3267, 3266, 3265, 3262,
     3087, 3264, 3248, 3241, 3240, 3060, 3061, 3063, 3064, 3067,
     3070, 3071, 3069, 3237, 3232, 3229, 3075, 3211, 3210, 3077,
     3079, 3160, 3159, 3158, 3160, 3080, 3083, 3084, 3085, 3091,

     3153, 3152, 3145, 3144, 3142, 2858, 2813, 3092, 3097, 2811,
     3103, 2768, 3098, 3104, 2594, 3107, 3111, 2592, 3112, 2529,
     2395, 2349, 2268, 2232, 2231, 3096, 3105, 2230, 2129, 2022,
     1915, 3113, 3117, 3118, 3119, 3122, 3123, 1917, 1847, 1794,
     1614, 1560, 3124, 1230, 1180, 3127, 1018,  979, 3130, 3135,
      870,  656,  622,  554, 3128, 3134, 3131, 3136, 3141, 3138,
     3139,  455, 3142, 3143,  424,  365, 4137, 3223, 3234, 3245,
     3256, 3264, 3275, 3286, 3297, 3308, 3314, 3322, 3327, 3332,
     3340, 3345, 3350, 3355, 3360, 3365, 3376, 3381, 3384, 3389,
     3394, 3399, 3401, 3406, 3411, 3419, 3430, 3441, 3446, 3451,

     3453, 3458, 3460, 3465, 3467, 3472, 3474, 3479, 3481, 3486,
     3494, 3499, 3504, 3509, 3514, 3516, 3521, 3526, 3534, 3539,
     3544, 3555, 3560, 3565, 3567, 3572, 3574, 3579, 3584, 3586,
     3591, 3593, 3598, 3603, 3608, 3613, 3618, 3620, 3625, 3627,
     3632, 3634, 3639, 3644, 3649, 3654, 3659, 3664, 3666, 3671,
     3679, 3684, 3689, 3691, 3696, 3698, 3703, 3705, 3710, 3712,
     3717, 3722, 3724, 3729, 3731, 3736, 3738, 3743, 3745, 3747,
     3752, 3757, 3759, 3764, 3766, 3771, 3773, 3778, 3780, 3785,
     3793, 3798, 3800, 3802, 3804, 3806, 3808, 3810, 3815, 3817,
     3822, 3824, 3829, 3831, 3836, 3838, 3843, 3848, 3850, 3855,

     3857, 3862, 3864, 3869, 3871, 3876, 3881, 3886, 3891, 3893,
     3898, 3903, 3908, 3910, 3915, 3920, 3922, 3924, 3929, 3934,
     3936, 3941, 3946, 3951, 3956, 3961, 3966, 3971, 3976, 3981,
     3986
    } ;

static const flex_int16_t yy_def[1532] =
    {   0,
     1367,    1, 1368, 1368, 1369, 1369, 1370, 1370, 1371, 1371,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1372, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1372, 1367,
     1367, 1367, 1367, 1372, 1367, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1367, 1367, 1367, 1367, 1367, 1373, 1367,
     1367, 1367, 1374, 1367, 1367, 1375, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1372, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1376,

     1367, 1367,   30, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1377,   30, 1367, 1367,   31, 1367, 1367, 1367,
     1367, 1367, 1367,   31, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1378, 1367,
     1367, 1367, 1367, 1367, 1367, 1372, 1367, 1379, 1380, 1367,
     1367, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1381, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1367, 1367, 1367, 1367, 1373, 1373,
     1373, 1367, 1373, 1367, 1374, 1367, 1367, 1367, 1367, 1382,
     1383, 1384, 1375, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1385, 1386,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,  263, 1387,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,  114,  279,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1388, 1367, 1389, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1390, 1367, 1391, 1392, 1393,
     1394, 1367, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1396, 1367, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1397, 1398, 1367, 1367,
     1399, 1400, 1401, 1402, 1403, 1404, 1367, 1367, 1367, 1367,
     1367, 1405, 1406, 1407, 1408, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367,  467, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367,  485, 1367, 1367, 1367, 1367, 1367, 1367, 1367,  495,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1409, 1410, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367,  514, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1411, 1367, 1412, 1413, 1414,
     1415, 1416, 1417, 1367, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1419, 1367, 1420, 1421, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1422, 1367, 1423, 1424, 1425,
     1426, 1427, 1427, 1428, 1429, 1430, 1431, 1367,  658, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,  678, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1432, 1367, 1432, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1433, 1367, 1367, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
     1441, 1442, 1443, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,

     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
     1367, 1367, 1367, 1367, 1367, 1367,  866, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1460, 1367, 1367, 1367, 1367, 1367, 1367,  899, 1367, 1367,
     1367,  908, 1367, 1367, 1367, 1367, 1367, 1461, 1462, 1463,
     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1473, 1474,
     1475, 1476, 1477, 1478, 1479, 1480, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,

     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1481, 1367, 1482, 1483, 1367,
     1484, 1485, 1486, 1487, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1038, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1488,
     1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1471, 1471,

     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1505,
     1506, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1507, 1488, 1508, 1490, 1509, 1492, 1494, 1510, 1496,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1511, 1497, 1512, 1499, 1513, 1501, 1503, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,

     1471, 1471, 1471, 1471, 1471, 1471, 1514, 1505, 1515, 1506,
     1367, 1367, 1367, 1367, 1516, 1517, 1508, 1518, 1519, 1510,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1520, 1511, 1512,
     1521, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1522, 1514, 1523, 1515, 1367, 1524, 1525, 1518, 1519,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1526, 1527, 1521, 1471, 1471, 1471, 1471, 1471, 1471,

     1522, 1523, 1528, 1524, 1529, 1525, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1530,
     1526, 1531, 1527, 1471, 1471, 1471, 1471, 1471, 1508, 1528,
     1529, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1512,
     1530, 1531, 1471, 1471, 1508, 1471, 1471, 1471, 1471, 1471,
     1471, 1512, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471,    0, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367
    } ;

static const flex_int16_t yy_nxt[4229] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   31,   31,   31,   31,   31,
       31,   32,   33,   34,   35,   36,   37,   38,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   39,   18,   18,
       18,   18,   18,   18,   39,   18,   18,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       18,   53,   18,   54,   55,   18,   56,   18,   57,   58,
       59,   60,   61,   62,   18,   18,   63,   64,   65,   66,
       67,   68,   74,   74,   77,   77,   68,   86,   87,   69,

       77,   77,   88,   74,   74,   78,   79,   80,   80,   80,
       78,   80,   79,   81,   81,   81,   80,   82,   90,   83,
       83,   91,  133,  134,   89,   97,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  128,  259,   92,   99,
       83,   94,   95,   83,  100,  160,  157,  161,   75,   75,
       75,   75,  152,   85,  305,  153,  129,  101,  130,  131,
      154,  225,  205,   85,  260,  155,  158,  162,  163,  164,
      165,   85,  166,  167,   85,  168,  178,  169,  174,   85,
      175,  170,  171,  195,  176,  990,  177,   85, 1367,  197,
      172,  179,  196,  159,   85,  307,  198,   96,  102,   85,

      103,  103,  103,  103,  103,  103,  103,  104,  104,  227,
       85,   83,  199,  156,   85,  226,  202,  105,   85,  203,
      106,  204,   85,  107,  108,  109,  110,  111,  330,  327,
      331,  183,  112,  113,  111,  184,  200,   85,   85,  114,
      185,  201,  105,  180,  186,  106,  282,  282,  115,  108,
      181,  116,  187,  110,  188,  111,  182,   85,  330,  112,
      331,  154,  113,  189,  111,  102,  155,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   85,   85,  330,  330,
      331,  331,  216,  562,   85,  283,  224,  106,  211,  212,
      118,  119,  120,  121,  122,   85,  213,  368,  214,  123,

      190,  122,  332,  215,  333,  330,  124,  331,  191,   85,
      192,   85,  106,  193,  156,  125,  119,  194,  126,  330,
      121,  331,  122,   85,  348,   85,  123,  330,  217,  331,
      154,  122,  135,  332,  577,  155,  136,  137,  218,  138,
       85,  139,  140,  219,  141,   85,  142,  220,  330,  330,
      331,  331,  206,  207,  347,  330,   85,  331,  143,  144,
      145,  221,  208,  209,  330,  210,  331,   85,  222,  223,
      228,   79,   80,   80,   80,  228,  231,  232,  229,  353,
       85,  231,  146,  147,  447,  148,  448,  149,   78,   79,
       80,   80,   80,   78,  330,  334,  331,  233,  233,  233,

      233,  233,  233,  233,  233,  233,   80,   79,   80,   80,
       80,   80,  150,  151,  236,  237,  110,  287,   85,  236,
       85,  238,   85,   85,   85,  288,  238,   80,   79,   81,
       81,   81,   80,  349,  350,  239,  239,  239,  239,  239,
      239,  239,  287,  287,  352,   85,   85,  386,  287,  238,
       85,  288,  288,  369,   85,  373,  288,  279,  279,  279,
      279,  279,  279,  279,   85, 1367,  370,  240,  287,   85,
       85,  238,  110,  287, 1367,  372,  238,  238,  288,  343,
      238,  238,   85,  288, 1367,  506,  344,  345,  238,  298,
     1367,  238,  371,  238,  241,  238,  280,  242,  244, 1367,

     1367,   85,  245,  246,   85,  247,  308,  248,  249, 1367,
      250,  383,  251,   85,  300,  288,  301,  302,   85, 1367,
       85,  456,  346,   85,  252,  253,  254,  405,  102, 1367,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  303,
      288,  351,  304,  385,  302,   85,  456,   85,  255,  256,
      106,  257,  284,   85,  284,   85,  615,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  374,  375,  384,  281,
       85,   85,  295,  395,  296,  106,  376,  297,  298,  258,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  377,
       85,  387,   85,   85,   85,  287,  286,  121,  309,  264,

      265,  266,  309,  288,  267,  268,  310,  392,  268,   85,
      310,  398,   85,  396,  388,   85,   85,  397,   85,  269,
      287,  431,  299,  309,  264,  265,  266,  309,  418,  267,
      288,  268,  389,  310,  295,  402,  296,  310,   85,  297,
      298,  268,  272,  272,  272,  272,  272,  272,  272,  272,
      272,   85,   85,   85,   85,  393,   85,  287,  299,  390,
      309,  273,  274,  275,  394,  288,  276,  277,  310,  289,
      277,  290,  291,  399,  391,  404,  435,   85,  292,   85,
       85,  278,  287,  406,  121,  309,  273,  274,  275,   85,
       85,  276,  288,  277,  293,  310,  403,  294,  311,  291,

      312,  313,   85,  277,  423,  292,  317,  314,  318,  424,
      417,  319,  320,  322,  310,  323,  324, 1367,   85,  317,
      412,  318, 1367,  315,  319,  320,  316,   85,  313,  309,
      321,   85,  415,  400,  314,   85,   85,  310,  325,  310,
      401,  326,  309,  324,  378,  379,   85,  416,   85,  426,
      310,  419,  380,  154,  309,  381,  530,  427,  382,  413,
      320,   85,  420,  484,  310,   85,   85,  309,   85,  321,
      354,  355,  356,  421,  357,  358,  414,  310,  359,  432,
      360,  428,  288,   85,   85,  361,  362,  363,  364,  365,
      407,  447,   85,  448,  408,  422,  611,  429,   85,  430,

      474,  111,  409,   85,  410,  411,  425,  433,  447,  288,
      448,  434,  436,  228,   79,   80,   80,   80,  228,  231,
      232,  229,  236,  237,  231,  474,  111,  236,  231,  232,
      447,   85,  448,  231,  449,  447,  447,  448,  448,   85,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  437,  232,
      448,  620,  447,  437,  448,  438,  439,  439,  439,  439,
      439,  439,  439,  448,  447,  447,  448,  448,  122,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  291,  447,
      447,  448,  448,  447,  450,  448,  460,  292,  461,  282,

      282,  462,  463,  122,   85,  440,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  292,  456,  545,  456,  456,
      292,  456,  456,   85,  292,  264,  265,  266,   85,  287,
      267,  268,   85,  478,  268,  479,  291,  288,  480,  481,
      551,  456,  292,  456,  456,  269,  456,  292,  456,  591,
      264,  265,  266,  287,  287,  267,  474,  268,  302,  111,
      330,  288,  331,  457,  288,  457,  310,  268,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  464,  287,  465,
      330,  474,  331,  464,  111,  474,  464,  474,  288,  111,
      474,  474,  102,  310,  279,  279,  279,  279,  279,  279,

      279,   85,  464,  314,  465,  324,  122,  459,  549,  464,
      474,  122,  474,  302,  111,  474,  314,  474,   85,  464,
      467,  467,  467,  467,  467,  467,  467,  467,  467,   85,
      314,  122,  313,  280,  538,  324,  122,   85,  553,  468,
      469,  470,   85,  314,  471,  472,   85,  546,  472,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  313,  473,
      547,  539,  548,   85,  468,  469,  470,  314,  501,  471,
      502,  472,  567,  503,  504,   85,   85,  475,   85,  475,
      552,  472,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  482,  505,  483,  314,   85,  550,  482,   85,  292,

      482,   85,  273,  274,  275,   85,  554,  276,  277,   85,
      566,  277,   85,  563,  580,  555,  482,   85,  483,  575,
       85,  477,   85,  482,  582,  592,  292,  273,  274,  275,
      561,   85,  276,  482,  277,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  277,  560,  576,  564,  565,   85,
       85,  284,   85,  284,   85,  106,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  568,  501,  571,  502,  583,
      585,  503,  504,  507,  308,  508,   85,  309,  509,  510,
      106,  485,  485,   85,   85,  310,   85,  507,  569,  508,
       85,   85,  509,  510,  154,  579,  111,  292,  792,  581,

       85,  572,  309,  570,  486,  487,  488,  489,  490,  578,
      111,  511,  310,  491,   85,  490,  505,   85,  584,   85,
      492,  111,   85,  511,  292,   85,   85,  593,   85,  493,
      487,  594,  494,  595,  489,  111,  490,  586,  587,  588,
      491, 1367,  598,  601,   85,  490,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  309,  496,   85,  497,   85,   85,
      498,  499,  310,   85,  499,  596,   85,   85,  599,  597,
       85,   85,  602,   85,   85,  500,  589,  612,   85,  309,
      496,  590,  497,  600,  308,  498,  556,  499,  609,  310,

       85,   85,  557,  558,  559,  604,  603,  499,  513,   85,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  525,
      607,  526,  610,   85,  527,  528,  514,  514,  514,  514,
      514,  514,  608,  515,  516,  517,  518,  519,   85,   85,
       85,   85,  520,  529,  521,  639,  759,   85,  614,  522,
      314,  514,  514,  514,  514,  514,  514,  616,  523,  516,
      613,  524,  525,  518,  526,  519,   85,  527,  528,  520,
       85,  605,   85,  531,  521,  532,   85,  314,  533,  534,
      531,   85,  532,  618,   85,  533,  534,   85,  606,   85,
      617,   85,   85,  314,  619,   85,  122,  535,  624,   85,

       85,  623,   85,  122,  621,   85,   85,  622,  629,   85,
       85,  631,  529,  625,  627,  626,   85,  630,  632,  634,
      314,  122,  628,   85,   85,  633,   85,  635,  122,  636,
      535,  117,  117,  117,  117,  117,  117,  117,  117,  117,
       85,   85,   85,  642,   85,  637,  641,  640,  638,   85,
      447,   85,  448,  437,  232,  232,  644,  643,  437,  660,
      438,  230,  447,  268,  448,  680,  756,  645,  292,  277,
      327,  238,  238,  238,  238,  238,  238,  238,  439,  439,
      439,  439,  439,  439,  439,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  457,  292,  457, 1158,  667,  458,

      458,  458,  458,  458,  458,  458,  458,  458,  706,  717,
      647,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      663,  718,  664,  667,  714,  665,  666,  292,  504,   85,
      264,  111,  266,  706,  715,  267,  268,  717,  510,  268,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  111,
      659,  314, 1367,   85,  292,  264,  111,  266,  774,  742,
      267,  743,  268,  528,  667,  534,  667,  687,  314,  667,
      667,  683,  268,  684,  111,  688,  685,  686,  314,  466,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  667,
      122,  667,  687,  741,  667,  314,  667,  489,  687,  468,

      469,  470,  688,  687,  471,  472,  688,  671,  472,  672,
      122,  688,  673,  674,   85,  122,   85,   85,   85,  473,
      777, 1367,  803,  687,  468,  469,  470,  489,  687,  471,
      667,  472,  744,  688,  755,  122,  757,  668,  688,  668,
       85,  472,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  675,   85,  676,   85,  667,  766,  675,   85,  745,
      675,  476,  476,  476,  476,  476,  476,  476,  476,  476,
       85,   85,  773,  863,  763, 1367,  675,  464,  676,  760,
      767,  670,  754,  675,  279,  279,  279,  279,  279,  279,
      279,  104,  104,  675,  678,  678,  678,  678,  678,  678,

      678,  678,  678,   85,  700,  688,  701,  702,  717,   85,
      784,   85,   85,  273,  761,  275,  518,  720,  276,  277,
      719,  762,  277,  484,  758,  721,   85,   85,   85,  703,
      688,  768,  704,  679,  702,  764,  717,  785,  273,   85,
      275,  765,  720,  276,  706,  277,  706,  997,  778,  706,
      706,  475,  721,  475,   85,  277,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  485,  485,  769,   85,  706,
      689,  706,  690,  691,  706,   85,  706,   85,  695,  692,
      696,   85,   85,  697,  698,  851,  779,  781,  486,  487,
      488,  489,  490,  770,  771,  693,   85,  491,  694,  490,

      691,  687,  699,  772,  492,  707,  692,  708,  793,  688,
      709,  710,   85,  493,  487,   85,  494,  695,  489,  696,
      490,   85,  697,  698,  491,   85,  687,   85,  706,  490,
      775,  720,  711,  794,  712,   85,  688,  776,  711,  721,
      687,  711,   85,  791,  782,  780,   85,   85,  688,  795,
      783,   85,   85,  706,   85, 1352,  720,  711,   85,  712,
      722,  804,  723,  724,  711,  687,  721,  699,  790,  725,
      799,  798,  796,  807,  711,  688,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  726,   85,   85,  727,   85,
      724,  736,  721,  737,  738,  496,  725,  497,   85,  720,

      498,  499,   85,   85,  499,   85,  800,  721,  797,  801,
       85,  805,   85,  806,   85,  500,  739,  721,   85,  740,
      496,  738,  497,  518,  720,  498,  802,  499,   85,   85,
      808,  811,   85,  810,  721,  818,  809,  499,  513,   85,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  814,
      812,   85,  816,   85,  813,   85,  514,  514,  514,  514,
      514,  514,  815,  515,  516,  517,  518,  519,  817,   85,
       85,   85,  520,   85,  521,   85, 1367,  819,   85,  522,
      822,  514,  514,  514,  514,  514,  514,  829,  523,  516,
      843,  524,  728,  518,  729,  519,  820,  730,  731,  520,

      733,   85,  733,   85,  521,  734,  734,  734,  734,  734,
      734,  734,  734,  734,   85,  720,  732,   85,   85,   85,
      728,  825,  729,  721,   85,  730,  731,  823,   85,   85,
       85,  831,   85,   85,   85,   85,  821,  832,  824,  826,
      720,  833,  834,  720,  735,   85,  828,  830,  827,   85,
      721,  721,  837,   85,  835,   85,   85,   85,  836,   85,
       85,   85,  839,   85,  840,   85,  844,  838,  720,  841,
      732,  848,  850,  232,  842,  847,  456,  456,  721,  852,
      845,  846,  930, 1367,  849,  238,  238,  238,  238,  238,
      238,  238,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  456,  456,  868,  871,  688,  872,  472,  877,  873,
      874,  264,  482,  266,  268,  268,  267,  268,   85,   85,
      268,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      885,  659,  688,  891,  698,  933,  264,  499,  266,  474,
      934,  267,  474,  268,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  268,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  691,  474,  692,  687,  474,  692,  490,
      702,  490,  692,  468,  688,  470,  724,  277,  471,  472,
      277,  721,  472,  677,  691,  725,  717,   85,   85,   85,
     1345,  687,  692,  867,  490,  692,  490,  947,  468,  692,

      470,  688,  931,  471,  880,  472,  881,  935,  721,  882,
      883,  668,  725,  668,  717,  472,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  880,  692,  881,  907,   85,  882,
      883,  731,   85,  687,  273,  521,  275,   85,  490,  276,
      277,  688,  725,  277,  884,  485,  485,  932,  884,  946,
      936,  886,  692,  887,  679,  692,  888,  889,  687,  273,
      521,  275,  702,  490,  276,  886,  277,  887,  688,  725,
      888,  889,   85,  717,  490,  890,  277,  939,   85,   85,
       85,  894,  692,  895,  705,  718,  896,  897,  490,  495,

      495,  495,  495,  495,  495,  495,  495,  495,  898,  490,
      898,  717,  717,  899,  899,  899,  899,  899,  899,  899,
      899,  899,   85,  490,  901,  890,  902,  725,  903, 1367,
       85,  904,  905,  941,  720,  938,   85,   85,  713,  902,
      717,  903,  721,  724,  904,  905,  952,  720,  738,  521,
      906,  521,  900,   85,  725,  721,   85,  725,  937,  720,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  721,
      725,  944,  720,  942,  521,  738,  521,   85,   85,  951,
       85,   85,  721,   85,  725,  913,  948,  914,  940,  906,
      915,  916,   85,  950,  949,   85,  943,  725,  908,  908,

      908,  908,  908,  908,  908,  908,  908,   85,  521,  917,
     1342,  945,  954,   85,   85,   85,   85,  909,   85,  910,
       85,  958,  911,  909,  955,  913,  909,  914,   85,  953,
      915,  916,   85,  521,   85,  957,  970,  912,  975,  967,
       85,  956,  909,   85,  910,  969,   85,  911,  521,  909,
      974,  987,  968,  995,   85,  733, 1367,  733,   85,  909,
      734,  734,  734,  734,  734,  734,  734,  734,  734,   85,
       85,  973,   85,  521,   85,  917,   85,   85,  971,  972,
      980,   85,   85,   85,   85,  978,  979,  976,   85,  977,
      984,   85,   85,   85,  982,   85,  985,  988,  981,  983,

      989,  991,  992,  986,   85,   85,   85,   85,   85,   85,
       85,   85,   85, 1004,  999,   85,  998,  993,   85, 1003,
       85, 1002,  996,   85, 1006,   85,  994, 1001, 1008,   85,
     1000, 1007,   85,   85,   85, 1005,   85, 1010,   85,   85,
     1028, 1032, 1012,   85,  675,  883, 1009, 1011,  456,  667,
      667,   85, 1033, 1035, 1013, 1014,  889,  711, 1061, 1296,
      474, 1015,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  490,  692,  456,  667,  667,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  474,  268,  472,  472,  692,
     1341, 1040,  490,  706,  706,  905,  490,  725,  277,  692,

     1041,  861,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  725,  521,   85,  521,  875,  692,  490,  706,  706,
       85,  468, 1062,  470,  725, 1041,  471,  472,   85, 1049,
      472,  499,  499,  916,   85,   85,   85,  521,  725,  521,
     1063,  867,   85, 1069, 1071, 1068,  468, 1067,  470, 1070,
       85,  471,   85,  472,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  472, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038,  908,  908,  908,  908,  908,  908,  908,
      908,  908,   85,  909,   85,  910,   85, 1059,  911,  909,
       85, 1042,  909, 1043,   85,   85, 1044, 1045, 1073, 1074,

     1060, 1072,   85, 1039, 1083, 1075,   85, 1079,  909,   85,
      910, 1087,  912,  911, 1041,  909, 1076, 1064,   85, 1065,
       85,  898, 1066,  898, 1077,  909,  899,  899,  899,  899,
      899,  899,  899,  899,  899, 1046,   85, 1047,   85, 1041,
     1078, 1046, 1080,   85, 1046,   85, 1081,   85,   85, 1089,
       85,   85,   85, 1082,   85,   85, 1086,   85,   85,   85,
     1046,   85, 1047, 1084,   85, 1085, 1102, 1046, 1088, 1100,
       85, 1105,   85, 1090, 1101, 1099,   85, 1046,   85,   85,
     1111, 1103, 1112, 1104,   85, 1107, 1106,   85,   85,   85,
       85, 1108, 1109,   85,   85,   85,  667,   85, 1119, 1117,

       85, 1118,   85, 1121, 1113, 1120, 1110,   85,   85, 1115,
     1114, 1122,   85, 1116,   85,   85,   85, 1125,   85,   85,
       85,  667, 1124,   85, 1135,   85,   85,  706,  909, 1123,
     1126, 1127, 1157, 1152,  472, 1138,   85, 1139, 1167, 1128,
     1140, 1141, 1129,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  706,  908,  908,  908,  908,  908,  908,  908,
      908,  908, 1153,   85, 1155,  499,   85,   85, 1156,   85,
       85,   85,   85,   85, 1159, 1160,   85,   85, 1154, 1165,
     1162,   85, 1026, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1048, 1151,   85,   85, 1161, 1163,   85, 1164,

       85, 1175,  909,   85,  910,   85, 1169,  911,  909, 1168,
     1171,  909,   85, 1181,   85, 1173, 1172, 1166,   85, 1367,
       85, 1176, 1039, 1174,   85,   85, 1170,  909,   85,  910,
       85,   85,  911, 1177,  909, 1180, 1178, 1182,   85, 1179,
       85,   85,   85,   85,  909,   85,   85,   85,   85, 1190,
     1192, 1197,   85,   85,   85,   85,   85,   85,   85, 1191,
     1193, 1201, 1199, 1224, 1194, 1204, 1195, 1205,   85, 1202,
     1198, 1196, 1041, 1041, 1212, 1200, 1203,   85, 1046,   85,
       85, 1206, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1221,   85, 1222,   85,   85, 1223, 1041, 1041,   85,

       85,   85,   85, 1225, 1229, 1226,   85,   85,   85,   85,
      909,  909, 1228, 1238, 1227, 1230, 1231,   85, 1239, 1246,
     1236, 1134, 1237,   85, 1232, 1234,   85,   85,   85, 1233,
     1240, 1241,   85, 1235,   85, 1242,   85,   85, 1247, 1244,
     1245, 1243,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85, 1254,   85, 1041,   85, 1271, 1272,   85,
     1252,   85, 1255, 1273,   85,   85, 1253, 1259,   85, 1256,
     1257, 1261, 1258,   85, 1284, 1260, 1278,   85,   85,   85,
     1041, 1281, 1277,   85,   85, 1274, 1276, 1282, 1275,   85,
     1279,   85,   85,  909,   85,   85, 1280, 1283,   85,   85,

       85, 1285, 1288,   85,   85, 1286,   85, 1289,   85, 1290,
     1295, 1287,   85,   85,   85, 1298, 1307, 1291,   85,   85,
     1299,   85,   85, 1297, 1310,   85, 1309,   85,   85,   85,
     1300, 1311, 1315,   85, 1312,   85, 1317,   85,   85, 1308,
     1319,   85,   85,   85, 1316,   85, 1313, 1324, 1327,   85,
       85, 1326, 1314, 1325,   85,   85,   85, 1318, 1328, 1332,
     1333,   85,   85,   85, 1334,   85, 1335, 1336, 1337,   85,
       85,   85, 1338, 1339, 1343,   85,   85,   85, 1344, 1348,
       85,   85,   85, 1350, 1351,   85,   85, 1349,   85,   85,
     1347, 1346,   85,   85,   85, 1358,   85,   85, 1356,   85,

       85,   85, 1360, 1331, 1353, 1367, 1330, 1354, 1357, 1355,
     1362, 1366, 1359, 1367, 1367, 1364, 1361, 1363,   85, 1367,
     1323, 1321, 1365,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   84,   85,   85,
       84,   84,   84,   84,   84,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  235,   85,  235,  235,
       85,  235,  235,  235,  235,   85,  235,  243,   85,   85,

      243,  243,  243,  243,  243,  243,   85,  243,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  306,
      306,  306,   85, 1367,  306,  336, 1367, 1306, 1304,  336,
      336,  336,  336,  338,  338, 1046, 1367,  338,  340,  340,
     1302, 1367,  340,  366, 1301,   85,   85,  366,  366,  366,
      366,  441,  441,   85,   85,  441,  443,  443, 1294, 1367,
      443,  445,  445, 1367,   85,  445,  452,  452,   85,   85,
      452,  454,  454,   85,   85,  454,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  512,  512,  306,
      306,  306,  536,   85, 1367,  536,  536,  536,  536,  536,

      540,  540, 1270, 1269,  540,  338,  338,  542,  542, 1367,
     1046,  542,  340,  340,   84, 1046, 1266,   84,   84,   84,
       84,   84,  573, 1367, 1265,  573,  573,  573,  573,  573,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  648,  648, 1367, 1263,  648,  441,  441,  650,
      650,   85,   85,  650,  443,  443,  652,  652,   85,   85,
      652,  445,  445,  654,  654,   85,   85,  654,  452,  452,
      656,  656,   85, 1367,  656,  454,  454,  716,  716,  716,
     1367,  716,  512,  512,  512, 1367,  512,  536, 1250, 1367,

      536,  536,  536,  536,  536,  746,  746, 1249,   85,  746,
      748,  748,   85,   85,  748,  750,  750,   85,   85,  750,
      540,  540,  752,  752,   85,   85,  752,  542,  542,   84,
     1367, 1220,   84,   84,   84,   84,   84,  573, 1367, 1367,
      573,  573,  573,  573,  573,  786,  786, 1367, 1217,  786,
      788,  788, 1367, 1216,  788,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  853,  853, 1046, 1214,
      853,  648,  648,  855,  855, 1213, 1211,  855,  650,  650,
      652,  652,  711,  675,  652,  857,  857, 1210, 1208,  857,
      654,  654,  859,  859,   85,   85,  859,  656,  656,  716,

      716,  716,   85,  716,  514,  514,   85,   85,  514,  918,
      918,   85,   85,  918,  920,  920,   85,   85,  920,  922,
      922,   85,   85,  922,  746,  746,  924,  924,   85,   85,
      924,  748,  748,  926,  926,   85,   85,  926,  750,  750,
      928,  928, 1189, 1188,  928,  752,  752,   84, 1186, 1184,
       84,   84,   84,   84,   84,  959,  959,   85,   85,  959,
      961,  961, 1150, 1148,  961,  963,  963, 1147, 1145,  963,
      786,  786,  965,  965, 1143,  916,  965,  788,  788, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1018, 1018,  909, 1137, 1018,  853,  853, 1020, 1020, 1136,

      905, 1020,  855,  855, 1022, 1022, 1134,  711, 1022,  857,
      857,   84,   84,  711, 1133,   84,  859,  859,  716,  716,
      889,  883,  716, 1050, 1050,  482,  675, 1050,  918,  918,
     1052, 1052,  675, 1132, 1052,  920,  920, 1054, 1054,  464,
     1017, 1054,  922,  922, 1056, 1056,   85,   85, 1056,  924,
      924, 1058, 1058,  926,  926,   84,   85,   85,   84,   84,
       84,   84,   84,  928,  928, 1091, 1091,   85,   85, 1091,
      959,  959, 1093, 1093,   85,   85, 1093,  961,  961, 1095,
     1095,   85,   85, 1095,  963,  963, 1097, 1097,   85,   85,
     1097,  965,  965, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1130, 1130, 1018, 1018, 1020, 1020,
     1131, 1131, 1022, 1022,   84,   84, 1142, 1142,   85,   85,
     1142, 1050, 1050, 1144, 1144,   85,   85, 1144, 1052, 1052,
     1146, 1146,   85,   85, 1146, 1054, 1054,  336,  336, 1098,
     1096,  336, 1056, 1056, 1149, 1149, 1094, 1092, 1149, 1183,
     1183,   85, 1057, 1183, 1091, 1091, 1185, 1185, 1055, 1053,
     1185, 1093, 1093, 1187, 1187, 1051,  916, 1187, 1095, 1095,
      366,  366,  916, 1048,  366, 1097, 1097, 1207, 1207,  731,
      905, 1207, 1209, 1209,  905,  901, 1209, 1215, 1215,  711,
     1037, 1215,  536,  536, 1036, 1034,  536, 1218, 1218, 1219,

     1219,  889,  889, 1219, 1248, 1248,  698,  883, 1248,  573,
      573,  883,  482,  573, 1251, 1251, 1262, 1262,  482, 1031,
     1262, 1264, 1264,  675, 1030, 1264, 1267, 1267, 1215, 1215,
     1268, 1268, 1029, 1027, 1268,  928,  928, 1026,  464,  928,
     1292, 1292, 1293, 1293,  464, 1025, 1293, 1020, 1020, 1024,
     1023, 1020,   84,   84, 1021, 1019,   84, 1303, 1303, 1017,
       85, 1303, 1305, 1305,   85,   85, 1305, 1320, 1320,   85,
       85, 1320, 1322, 1322,   85,   85, 1322, 1329, 1329,   85,
       85, 1329,  336,  336,   85,   85,  336, 1340, 1340,   85,
       85, 1340,  366,  366,   85,   85,  366,  966,  964,  962,

      960,   85,  929,  927,  925,  923,  921,  919,  534,  528,
      741,  731,  731,  510,  504,  499,  893,  892,  698,  698,
      482,  879,  878,  876,  875,  472,  870,  869,  464,  865,
      864,  862,  861,  860,  858,  653,  653,  856,  854,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,  789,
      787,  574,  753,  751,  749,  747,  537,  534,  534,  320,
      528,  528,  510,  510,  298,  504,  504,  713,  705,  277,
      682,  681,  677,  268,  662,  661,  657,  655,  448,  448,
      653,  651,  649,   85,   85,   85,  574,  544,  543,  541,
      537,  332,  331,  320,  320,  305,  298,  298,  271,  466,

      455,  453,  451,  448,  447,  446,  444,  442,  232,   85,
       85,  367,  342,  341,  339,  332,  337,  335,  332,  330,
      329,  328,  271,  262,  261,   83,   83,   85,  234,  173,
      132,  127,   85, 1367,   71,   71,   11, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367
    } ;

static const flex_int16_t yy_chk[4229] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    8,    9,   10,    2,   19,   19,    2,

        9,   10,   20,    7,    8,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   16,   24,   16,
       24,   25,   36,   36,   20,   28,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   34,   85,   25,   29,
       25,   27,   27,   27,   29,   43,   41,   43,    7,    8,
        9,   10,   38,   57,  113,   38,   34,   29,   34,   34,
       39,   65,   57,   46,   85,   39,   41,   44,   44,   44,
       44,   47,   44,   44,   52,   44,   47,   44,   46,   53,
       46,   44,   44,   52,   46,  818,   46,   44,  124,   53,
       44,   47,   52,   41,   54,  113,   53,   27,   30,   56,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   67,
       39,   67,   54,   39,  818,   65,   56,   30,   55,   56,
       30,   56,   49,   30,   30,   30,   30,   30,  136,  124,
      136,   49,   30,   30,   30,   49,   55,   50,   48,   30,
       49,   55,   30,   48,   49,   30,  105,  105,   30,   30,
       48,   30,   50,   30,   50,   30,   48,  357,  137,   30,
      137,   60,   30,   50,   30,   31,   60,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   59,   63,  139,  142,
      139,  142,   60,  357,  174,  105,   63,   31,   59,   59,
       31,   31,   31,   31,   31,   51,   59,  174,   59,   31,

       51,   31,  140,   59,  143,  143,   31,  143,   51,  166,
       51,   60,   31,   51,   60,   31,   31,   51,   31,  140,
       31,  140,   31,  368,  166,   61,   31,  144,   60,  144,
      156,   31,   37,  141,  368,  156,   37,   37,   61,   37,
       58,   37,   37,   61,   37,  165,   37,   61,  141,  147,
      141,  147,   58,   58,  165,  148,   62,  148,   37,   37,
       37,   62,   58,   58,  151,   58,  151,  171,   62,   62,
       68,   68,   68,   68,   68,   68,   69,   69,   68,  171,
      156,   69,   37,   37,  245,   37,  245,   37,   78,   78,
       78,   78,   78,   78,  145,  145,  145,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   80,   80,   80,   80,
       80,   80,   37,   37,   75,   75,  107,  107,  168,   75,
      186,   75,  170, 1366,  167,  107,   75,   81,   81,   81,
       81,   81,   81,  167,  168,   75,   75,   75,   75,   75,
       75,   75,  107,  110,  170,  175,  179,  186,  115,   75,
      176,  110,  107,  175,  178,  179,  115,  103,  103,  103,
      103,  103,  103,  103,  162,  114,  176,   75,  110,  163,
      177,   75,  115,  115,  103,  178,   75,   75,  110,  162,
       75,   75, 1365,  115,  114,  295,  162,  163,   75,  295,
      103,   75,  177,   75,   75,   75,  103,   75,   83,  103,

      114,  183,   83,   83,  164,   83,  114,   83,   83,  114,
       83,  183,   83, 1362,  112,  112,  112,  112,  202,  103,
      185,  268,  164,  169,   83,   83,   83,  202,  104,  114,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  112,
      112,  169,  112,  185,  112,  180,  268,  184,   83,   83,
      104,   83,  106,  405,  106,  192,  405,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  180,  180,  184,  104,
      187,  181,  116,  192,  116,  104,  181,  116,  116,   83,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  181,
      194,  187,  190,  193,  195,  116,  106,  118,  118,   98,

       98,   98,  121,  116,   98,   98,  118,  190,   98,  188,
      121,  195, 1354,  193,  188,  210,  220,  194,  199,   98,
      116,  220,  116,  118,   98,   98,   98,  121,  210,   98,
      116,   98,  188,  118,  109,  199,  109,  121,  191,  109,
      109,   98,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  196,  189,  201,  223,  191,  204,  109,  109,  189,
      125,  102,  102,  102,  191,  109,  102,  102,  125,  108,
      102,  108,  108,  196,  189,  201,  223,  214,  108,  200,
     1353,  102,  109,  204,  125,  125,  102,  102,  102,  209,
      215,  102,  109,  102,  108,  125,  200,  108,  119,  108,

      119,  119,  206,  102,  214,  108,  120,  119,  120,  215,
      209,  120,  120,  123,  123,  123,  123, 1352,  198,  126,
      206,  126,  280,  119,  126,  126,  119,  208,  119,  120,
      120,  211,  208,  198,  119,  182,  217,  120,  123,  123,
      198,  123,  126,  123,  182,  182,  212,  208,  207,  217,
      126,  211,  182,  216,  120,  182,  317,  217,  182,  207,
      317,  218,  212,  280,  120,  172,  221,  126,  213,  126,
      172,  172,  172,  213,  172,  172,  207,  126,  172,  221,
      172,  218,  287,  205,  219,  172,  172,  172,  172,  172,
      205,  246,  224,  246,  205,  213,  401,  219,  222,  219,

      277,  302,  205,  216,  205,  205,  216,  222,  248,  287,
      248,  222,  224,  228,  228,  228,  228,  228,  228,  229,
      229,  228,  236,  236,  229,  277,  302,  236,  231,  231,
      251,  401,  251,  231,  252,  252,  253,  252,  253,  410,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  233,  233,
      250,  410,  256,  233,  256,  233,  239,  239,  239,  239,
      239,  239,  239,  249,  257,  250,  257,  250,  324,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  289,  258,
      249,  258,  249,  254,  254,  254,  266,  289,  266,  283,

      283,  266,  266,  324,  343,  239,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  291,  264,  343,  264,  266,
      293,  264,  264,  349,  289,  263,  263,  263, 1351,  298,
      263,  263,  382,  275,  263,  275,  293,  298,  275,  275,
      349,  264,  291,  264,  266,  263,  264,  293,  264,  382,
      263,  263,  263,  299,  298,  263,  275,  263,  300,  300,
      333,  299,  333,  265,  298,  265,  309,  263,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  267,  299,  267,
      334,  275,  334,  267,  300,  273,  267,  273,  299,  303,
      273,  273,  279,  309,  279,  279,  279,  279,  279,  279,

      279,  347,  267,  313,  267,  322,  322,  265,  347,  267,
      273,  325,  273,  303,  303,  273,  315,  273,  351,  267,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  344,
      313,  322,  315,  279,  337,  325,  325, 1348,  351,  272,
      272,  272,  345,  315,  272,  272,  346,  344,  272,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  311,  272,
      345,  337,  346,  361,  272,  272,  272,  311,  290,  272,
      290,  272,  361,  290,  290,  350, 1347,  274,  348,  274,
      350,  272,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  276,  290,  276,  311,  353,  348,  276,  358,  290,

      276,  352,  278,  278,  278,  360,  352,  278,  278,  373,
      360,  278,  356,  358,  373,  353,  276,  375,  276,  367,
      383,  274,  355,  276,  375,  383,  290,  278,  278,  278,
      356,  359,  278,  276,  278,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  278,  355,  367,  359,  359,  376,
      378,  286,  362,  286,  364,  281,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  362,  294,  364,  294,  376,
      378,  294,  294,  304,  281,  304,  363,  320,  304,  304,
      281,  282,  282,  365,  580,  320,  372,  301,  363,  301,
      374,  371,  301,  301,  425,  372,  304,  294,  580,  374,

      377,  365,  320,  363,  282,  282,  282,  282,  282,  371,
      301,  301,  320,  282,  386,  282,  294,  380,  377,  379,
      282,  304,  384,  304,  294,  385,  389,  384,  392,  282,
      282,  385,  282,  386,  282,  301,  282,  379,  380,  380,
      282, 1345,  389,  392,  425,  282,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  321,  285,  387,  285,  381,  390,
      285,  285,  321,  388,  285,  387,  402,  393,  390,  388,
      399,  354,  393,  394,  391,  285,  381,  402, 1344,  321,
      285,  381,  285,  391,  308,  285,  354,  285,  399,  321,

      395,  397,  354,  354,  354,  395,  394,  285,  306,  400,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  312,
      397,  312,  400,  398,  312,  312,  306,  306,  306,  306,
      306,  306,  398,  306,  306,  306,  306,  306,  406,  404,
      430,  550,  306,  312,  306,  430,  550,  403,  404,  306,
      312,  306,  306,  306,  306,  306,  306,  406,  306,  306,
      403,  306,  316,  306,  316,  306,  396,  316,  316,  306,
      408,  396,  407,  323,  306,  323,  409,  312,  323,  323,
      326,  411,  326,  408,  413,  326,  326,  412,  396,  414,
      407,  415,  416,  316,  409,  417,  323,  323,  414,  419,

      418,  413,  420,  326,  411,  421,  423,  412,  419,  426,
      424,  420,  316,  415,  417,  416,  427,  419,  421,  424,
      316,  323,  418,  428,  432,  423,  433,  426,  326,  427,
      326,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      429,  431,  434,  433,  435,  428,  432,  431,  429,  436,
      449,  547,  449,  437,  437,  438,  435,  434,  437,  460,
      437,  438,  450,  460,  450,  478,  547,  436,  504,  478,
      327,  439,  439,  439,  439,  439,  439,  439,  440,  440,
      440,  440,  440,  440,  440,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  459,  504,  459, 1066,  472,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  499,  512,
      439,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      465,  512,  465,  472,  501,  465,  465,  505,  501, 1066,
      458,  510,  458,  499,  507,  458,  458,  512,  507,  458,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  511,
      458,  528,  522,  564,  505,  458,  510,  458,  564,  525,
      458,  531,  458,  525,  468,  531,  468,  489,  529,  468,
      468,  483,  458,  483,  511,  489,  483,  483,  528,  466,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  468,
      534,  468,  489,  522,  468,  529,  468,  486,  486,  467,

      467,  467,  489,  493,  467,  467,  486,  470,  467,  470,
      535,  493,  470,  470,  566,  534,  593,  548,  546,  467,
      566, 1342,  593,  486,  467,  467,  467,  493,  493,  467,
      470,  467,  537,  486,  546,  535,  548,  469,  493,  469,
      557,  467,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  471,  554,  471,  563,  470,  557,  471,  558,  537,
      471,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      551,  545,  563,  663,  554, 1341,  471,  663,  471,  551,
      558,  469,  545,  471,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  471,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  552,  491,  491,  491,  491,  513,  559,
      574,  549,  553,  476,  552,  476,  515,  515,  476,  476,
      513,  553,  476,  484,  549,  515,  555,  567,  556,  491,
      491,  559,  491,  476,  491,  555,  513,  574,  476,  829,
      476,  556,  515,  476,  496,  476,  496,  829,  567,  496,
      496,  477,  515,  477,  560,  476,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  485,  485,  560,  570,  496,
      487,  496,  487,  487,  496,  568,  496,  561,  488,  487,
      488,  562,  645,  488,  488,  645,  568,  570,  485,  485,
      485,  485,  485,  561,  561,  487,  582,  485,  487,  485,

      487,  488,  488,  562,  485,  497,  487,  497,  582,  488,
      497,  497,  584,  485,  485,  565,  485,  494,  485,  494,
      485,  579,  494,  494,  485,  569,  488,  571,  497,  485,
      565,  518,  498,  584,  498,  572,  488,  565,  498,  518,
      494,  498,  585,  579,  571,  569,  594,  589,  494,  585,
      572,  577,  586,  497,  599, 1340,  518,  498,  588,  498,
      516,  594,  516,  516,  498,  494,  518,  494,  577,  516,
      589,  588,  586,  599,  498,  494,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  516,  587,  591,  516,  590,
      516,  520,  520,  520,  520,  495,  516,  495,  597,  523,

      495,  495,  595,  592,  495, 1339,  590,  523,  587,  591,
      600,  595,  603,  597,  601,  495,  520,  520,  602,  520,
      495,  520,  495,  523,  523,  495,  592,  495,  604,  606,
      600,  603,  608,  602,  523,  611,  601,  495,  514,  605,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  606,
      604,  610,  608,  607,  605,  613,  514,  514,  514,  514,
      514,  514,  607,  514,  514,  514,  514,  514,  610,  611,
      614,  616,  514,  635,  514, 1338, 1331,  613,  623,  514,
      616,  514,  514,  514,  514,  514,  514,  623,  514,  514,
      635,  514,  517,  514,  517,  514,  614,  517,  517,  514,

      519,  619,  519,  617,  514,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  615,  517,  517,  618,  625,  620,
      524,  619,  524,  517,  622,  524,  524,  617,  621,  624,
      626,  625,  627,  630,  631,  628,  615,  626,  618,  620,
      517,  627,  628,  524,  519,  632,  622,  624,  621,  629,
      517,  524,  631,  633,  629,  636,  634,  637,  630,  639,
      640,  641,  633,  643,  634,  754,  636,  632,  524,  634,
      524,  641,  643,  646,  634,  640,  661,  662,  524,  646,
      637,  639,  754, 1330,  641,  647,  647,  647,  647,  647,
      647,  647,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  661,  662,  671,  676,  687,  676,  671,  683,  676,
      676,  658,  683,  658,  661,  662,  658,  658,  759,  758,
      658,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      695,  658,  687,  707,  695,  758,  658,  707,  658,  681,
      759,  658,  682,  658,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  658,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  689,  681,  691,  698,  682,  693,  702,
      700,  700,  689,  669,  698,  669,  722,  681,  669,  669,
      682,  720,  669,  677,  693,  722,  719,  760,  772,  755,
     1329,  698,  691,  669,  702,  693,  700,  772,  669,  689,

      669,  698,  755,  669,  694,  669,  694,  760,  720,  694,
      694,  670,  722,  670,  719,  669,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  690,  694,  690,  728,  771,  690,
      690,  728,  757,  699,  678,  738,  678,  761,  703,  678,
      678,  699,  724,  678,  694,  705,  705,  757,  690,  771,
      761,  701,  694,  701,  678,  690,  701,  701,  699,  678,
      738,  678,  703,  703,  678,  704,  678,  704,  699,  724,
      704,  704,  764,  716,  701,  701,  678,  764, 1328, 1325,
     1324,  712,  690,  712,  705,  716,  712,  712,  704,  713,

      713,  713,  713,  713,  713,  713,  713,  713,  717,  701,
      717,  716,  718,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  763,  704,  718,  704,  723,  726,  723, 1323,
      766,  723,  723,  766,  731,  763,  762,  777,  713,  727,
      718,  727,  731,  726,  727,  727,  777,  732,  736,  736,
      723,  739,  717,  767,  726,  732,  769,  723,  762,  731,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  731,
      727,  769,  732,  767,  736,  739,  739,  765,  768,  776,
      775,  773,  732,  774,  723,  737,  773,  737,  765,  727,
      737,  737,  770,  775,  774,  779,  768,  727,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  778,  737,  737,
     1322,  770,  779,  782,  776,  780,  783,  734,  791,  734,
      801,  783,  734,  734,  780,  740,  734,  740,  799,  778,
      740,  740,  781,  737,  790,  782,  793,  734,  801,  790,
      826,  781,  734,  793,  734,  791,  814,  734,  740,  734,
      799,  814,  790,  826,  798,  735, 1321,  735,  807,  734,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  794,
      795,  798,  802,  740,  803,  740,  804,  806,  794,  795,
      807,  808,  809,  819,  810,  804,  806,  802,  813,  803,
      812,  817,  816,  823,  809,  824,  812,  816,  808,  810,

      817,  819,  823,  813,  825,  827,  830,  831,  832,  834,
      833,  835,  837,  836,  831,  840,  830,  824,  842,  835,
      836,  834,  827,  841,  840,  812,  825,  833,  842,  844,
      832,  841,  845,  847,  846,  837,  848,  845,  849,  851,
      871,  880,  847, 1253,  871,  880,  844,  846,  862,  869,
      870,  931,  886,  894,  848,  849,  886,  894,  931, 1253,
      876,  851,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  889,  883,  862,  869,  870,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  876,  862,  869,  870,  884,
     1320,  902,  890,  892,  893,  902,  889,  905,  876,  883,

      909,  861,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  906,  916,  932,  917,  875,  884,  890,  892,  893,
      937,  866,  932,  866,  905,  909,  866,  866,  936,  913,
      866,  892,  893,  913,  935,  933,  939,  916,  906,  917,
      933,  866,  938,  937,  939,  936,  866,  935,  866,  938,
     1318,  866, 1315,  866,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  866,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  930,  899,  940,  899,  942,  930,  899,  899,
      947,  910,  899,  910,  944,  941,  910,  910,  941,  942,

      930,  940,  943,  899,  951,  943,  955,  947,  899,  945,
      899,  955,  908,  899,  910,  899,  944,  934,  946,  934,
      948,  900,  934,  900,  945,  899,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  911,  950,  911,  951,  910,
      946,  911,  948,  949,  911,  953,  949,  954,  952,  957,
      956,  958,  934,  950,  967,  969,  954,  970,  973,  968,
      911,  975,  911,  952,  976,  953,  970,  911,  956,  968,
      974,  975,  982,  958,  969,  967,  977,  911,  980,  983,
      984,  973,  985,  974,  957,  977,  976,  987,  988,  991,
      993,  980,  982,  992,  995,  999, 1027, 1001,  999,  993,

     1003,  995, 1004, 1003,  987, 1001,  983, 1005, 1009,  991,
      988, 1004, 1006,  992,  984, 1010, 1011, 1009,  985, 1013,
     1014, 1027, 1006, 1060, 1042, 1076, 1312, 1034, 1042, 1005,
     1010, 1011, 1065, 1060, 1027, 1047, 1062, 1047, 1076, 1013,
     1047, 1047, 1014, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1034, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1062, 1063, 1064, 1034, 1065, 1067, 1064, 1310,
     1068, 1307, 1059, 1074, 1067, 1068, 1069, 1070, 1063, 1074,
     1070, 1072, 1026, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1048, 1059, 1071, 1075, 1069, 1071, 1064, 1072,

     1077, 1083, 1038, 1078, 1038, 1079, 1078, 1038, 1038, 1077,
     1080, 1038, 1081, 1089, 1082, 1081, 1080, 1075, 1084, 1306,
     1085, 1084, 1038, 1082, 1090, 1088, 1079, 1038, 1086, 1038,
     1083, 1087, 1038, 1085, 1038, 1088, 1086, 1090, 1102, 1087,
     1101, 1103, 1117, 1104, 1038, 1080, 1108, 1089, 1109, 1101,
     1103, 1111, 1114, 1118, 1121, 1122, 1119, 1125, 1127, 1102,
     1104, 1119, 1117, 1155, 1108, 1125, 1109, 1127, 1129, 1121,
     1114, 1109, 1136, 1137, 1138, 1118, 1122, 1157, 1138, 1158,
     1111, 1129, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1154, 1155, 1154, 1160, 1161, 1154, 1136, 1137, 1162,

     1163, 1165, 1166, 1157, 1162, 1158, 1164, 1168, 1167, 1170,
     1136, 1137, 1161, 1171, 1160, 1163, 1164, 1169, 1172, 1181,
     1169, 1134, 1170, 1182, 1165, 1167, 1154, 1174, 1175, 1166,
     1174, 1175, 1176, 1168, 1177, 1176, 1178, 1180, 1182, 1178,
     1180, 1177, 1190, 1191, 1193, 1194, 1195, 1171, 1181, 1202,
     1198, 1201, 1203, 1193, 1172, 1211, 1206, 1221, 1222, 1224,
     1190, 1227, 1194, 1223, 1230, 1229, 1191, 1202, 1232, 1195,
     1198, 1206, 1201, 1231, 1238, 1203, 1231, 1233, 1234, 1237,
     1211, 1234, 1230, 1241, 1235, 1224, 1229, 1235, 1227, 1243,
     1232, 1221, 1222, 1211, 1258, 1223, 1233, 1237, 1240, 1244,

     1252, 1240, 1244, 1238, 1245, 1241, 1246, 1245, 1247, 1246,
     1252, 1243, 1256, 1259, 1260, 1258, 1271, 1247, 1276, 1277,
     1259, 1278, 1279, 1256, 1278, 1280, 1277, 1283, 1281, 1282,
     1260, 1279, 1282, 1287, 1280, 1290, 1287, 1291, 1296, 1276,
     1291, 1297, 1298, 1299, 1283, 1271, 1281, 1296, 1299, 1300,
     1308, 1298, 1281, 1297, 1326, 1309, 1313, 1290, 1300, 1308,
     1309, 1311, 1314, 1327, 1311, 1316, 1313, 1314, 1316, 1317,
     1319, 1332, 1317, 1319, 1326, 1333, 1334, 1335, 1327, 1334,
     1336, 1337, 1343, 1336, 1337, 1346, 1355, 1335, 1349, 1357,
     1333, 1332, 1356, 1350, 1358, 1355, 1360, 1361, 1350, 1359,

     1363, 1364, 1357, 1305, 1343, 1304, 1303, 1346, 1350, 1349,
     1359, 1364, 1356, 1302, 1301, 1361, 1358, 1360, 1295, 1294,
     1293, 1292, 1363, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1372, 1289, 1288,
     1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1374, 1286, 1374, 1374,
     1285, 1374, 1374, 1374, 1374, 1284, 1374, 1375, 1275, 1274,

     1375, 1375, 1375, 1375, 1375, 1375, 1273, 1375, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377,
     1377, 1377, 1272, 1270, 1377, 1378, 1269, 1268, 1267, 1378,
     1378, 1378, 1378, 1379, 1379, 1266, 1265, 1379, 1380, 1380,
     1264, 1263, 1380, 1381, 1262, 1261, 1257, 1381, 1381, 1381,
     1381, 1382, 1382, 1255, 1254, 1382, 1383, 1383, 1251, 1250,
     1383, 1384, 1384, 1249, 1242, 1384, 1385, 1385, 1239, 1236,
     1385, 1386, 1386, 1228, 1226, 1386, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1388, 1388, 1389,
     1389, 1389, 1390, 1225, 1220, 1390, 1390, 1390, 1390, 1390,

     1391, 1391, 1219, 1218, 1391, 1392, 1392, 1393, 1393, 1217,
     1214, 1393, 1394, 1394, 1395, 1213, 1212, 1395, 1395, 1395,
     1395, 1395, 1396, 1210, 1209, 1396, 1396, 1396, 1396, 1396,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1399, 1399, 1208, 1207, 1399, 1400, 1400, 1401,
     1401, 1205, 1204, 1401, 1402, 1402, 1403, 1403, 1200, 1199,
     1403, 1404, 1404, 1405, 1405, 1197, 1196, 1405, 1406, 1406,
     1407, 1407, 1192, 1189, 1407, 1408, 1408, 1409, 1409, 1409,
     1188, 1409, 1410, 1410, 1410, 1186, 1410, 1411, 1185, 1184,

     1411, 1411, 1411, 1411, 1411, 1412, 1412, 1183, 1179, 1412,
     1413, 1413, 1173, 1159, 1413, 1414, 1414, 1156, 1153, 1414,
     1415, 1415, 1416, 1416, 1152, 1151, 1416, 1417, 1417, 1418,
     1150, 1149, 1418, 1418, 1418, 1418, 1418, 1419, 1148, 1147,
     1419, 1419, 1419, 1419, 1419, 1420, 1420, 1145, 1144, 1420,
     1421, 1421, 1143, 1142, 1421, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1423, 1423, 1141, 1140,
     1423, 1424, 1424, 1425, 1425, 1139, 1135, 1425, 1426, 1426,
     1427, 1427, 1133, 1132, 1427, 1428, 1428, 1131, 1130, 1428,
     1429, 1429, 1430, 1430, 1128, 1126, 1430, 1431, 1431, 1432,

     1432, 1432, 1124, 1432, 1433, 1433, 1123, 1120, 1433, 1434,
     1434, 1116, 1115, 1434, 1435, 1435, 1113, 1112, 1435, 1436,
     1436, 1110, 1107, 1436, 1437, 1437, 1438, 1438, 1106, 1105,
     1438, 1439, 1439, 1440, 1440, 1100, 1099, 1440, 1441, 1441,
     1442, 1442, 1097, 1095, 1442, 1443, 1443, 1444, 1093, 1091,
     1444, 1444, 1444, 1444, 1444, 1445, 1445, 1073, 1061, 1445,
     1446, 1446, 1058, 1056, 1446, 1447, 1447, 1054, 1052, 1447,
     1448, 1448, 1449, 1449, 1050, 1049, 1449, 1450, 1450, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1452, 1452, 1045, 1044, 1452, 1453, 1453, 1454, 1454, 1043,

     1040, 1454, 1455, 1455, 1456, 1456, 1039, 1037, 1456, 1457,
     1457, 1458, 1458, 1036, 1035, 1458, 1459, 1459, 1460, 1460,
     1033, 1032, 1460, 1461, 1461, 1031, 1030, 1461, 1462, 1462,
     1463, 1463, 1029, 1028, 1463, 1464, 1464, 1465, 1465, 1025,
     1016, 1465, 1466, 1466, 1467, 1467, 1015, 1012, 1467, 1468,
     1468, 1469, 1469, 1470, 1470, 1471, 1008, 1007, 1471, 1471,
     1471, 1471, 1471, 1472, 1472, 1473, 1473, 1002, 1000, 1473,
     1474, 1474, 1475, 1475,  998,  997, 1475, 1476, 1476, 1477,
     1477,  996,  994, 1477, 1478, 1478, 1479, 1479,  990,  989,
     1479, 1480, 1480, 1481, 1481, 1481, 1481, 1481, 1481, 1481,

     1481, 1481, 1481, 1481, 1482, 1482, 1483, 1483, 1484, 1484,
     1485, 1485, 1486, 1486, 1487, 1487, 1488, 1488,  986,  981,
     1488, 1489, 1489, 1490, 1490,  979,  978, 1490, 1491, 1491,
     1492, 1492,  972,  971, 1492, 1493, 1493, 1494, 1494,  965,
      963, 1494, 1495, 1495, 1496, 1496,  961,  959, 1496, 1497,
     1497,  928,  924, 1497, 1498, 1498, 1499, 1499,  922,  920,
     1499, 1500, 1500, 1501, 1501,  918,  915, 1501, 1502, 1502,
     1503, 1503,  914,  912, 1503, 1504, 1504, 1505, 1505,  907,
      904, 1505, 1506, 1506,  903,  901, 1506, 1507, 1507,  897,
      896, 1507, 1508, 1508,  895,  891, 1508, 1509, 1509, 1510,

     1510,  888,  887, 1510, 1511, 1511,  885,  882, 1511, 1512,
     1512,  881,  879, 1512, 1513, 1513, 1514, 1514,  878,  877,
     1514, 1515, 1515,  874,  873, 1515, 1516, 1516, 1517, 1517,
     1518, 1518,  872,  868, 1518, 1519, 1519,  867,  865, 1519,
     1520, 1520, 1521, 1521,  864,  863, 1521, 1522, 1522,  859,
      857, 1522, 1523, 1523,  855,  853, 1523, 1524, 1524,  852,
      850, 1524, 1525, 1525,  843,  839, 1525, 1526, 1526,  838,
      828, 1526, 1527, 1527,  822,  821, 1527, 1528, 1528,  820,
      815, 1528, 1529, 1529,  811,  805, 1529, 1530, 1530,  800,
      797, 1530, 1531, 1531,  796,  792, 1531,  788,  786,  785,

      784,  756,  752,  750,  748,  746,  745,  744,  743,  742,
      741,  730,  729,  715,  714,  710,  709,  708,  697,  696,
      686,  685,  684,  680,  679,  674,  673,  672,  666,  665,
      664,  660,  659,  656,  654,  653,  652,  650,  648,  644,
      642,  638,  612,  609,  598,  596,  583,  581,  578,  576,
      575,  573,  542,  540,  539,  538,  536,  533,  532,  530,
      527,  526,  509,  508,  506,  503,  502,  500,  492,  481,
      480,  479,  473,  463,  462,  461,  454,  452,  451,  447,
      445,  443,  441,  422,  370,  369,  366,  342,  340,  338,
      336,  335,  330,  319,  318,  307,  297,  296,  270,  269,

      260,  259,  255,  247,  244,  242,  241,  240,  230,  203,
      197,  173,  161,  159,  158,  150,  149,  146,  138,  135,
      134,  130,  100,   97,   96,   93,   91,   84,   71,   45,
       35,   32,   18,   11,    4,    3, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[238] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Thu Jun 20 16:54:05 2024
 * Update Count     : 778
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.hpp"                          // for DeclarationNode
#include "ExpressionNode.hpp"                           // for LabelNode
#include "InitializerNode.hpp"                          // for InitializerNode
#include "ParseNode.hpp"
#include "ParserTypes.hpp"                              // for Token
#include "StatementNode.hpp"                            // for CondCtl, ForCtrl
#include "TypedefTable.hpp"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 1991 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// ' stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}




#line 2008 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define BKQUOTE 2
#define QUOTE 3
#define STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 180 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 2233 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1368 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4137 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 182 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 204 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 207 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 208 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 209 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 212 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 217 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }
	YY_BREAK
/* keywords */
case 10:
YY_RULE_SETUP
#line 220 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 221 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 224 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 225 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CORUN); }				// CFA
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COFOR); }				// CFA
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT16); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32X); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64X); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 108:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COUNTOF); }			// GCC
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 362 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 152:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* numeric constants */
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 373 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 374 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 375 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 378 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 379 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value */
case 162:
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 384 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant */
case 165:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 390 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 168:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 396 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 171:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 402 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 403 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 408 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 409 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATTR); }				// CFA, attribute shorthand
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 185:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 189:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 430 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 452 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 457 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 463 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 230:
YY_RULE_SETUP
#line 466 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 467 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 468 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 469 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 474 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 235:
YY_RULE_SETUP
#line 501 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 236:
YY_RULE_SETUP
#line 513 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 515 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 3573 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BKQUOTE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1368 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1368 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1367);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 515 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

