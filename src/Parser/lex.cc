
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 239
#define YY_END_OF_BUFFER 240
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1370] =
    {   0,
        0,    0,    0,    0,    0,    0,  163,  163,  166,  166,
      240,  238,    7,    9,    8,  189,  165,  152,  195,  198,
      162,  175,  176,  192,  190,  179,  191,  182,  194,  155,
      156,  180,  181,  200,  202,  201,  203,  171,  152,  173,
      193,  174,  196,  152,  172,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  177,  199,  178,  197,    7,  238,    4,
        4,  239,  163,  164,  170,  166,  167,    7,    9,    0,
        8,  207,  232,  152,    0,  220,  188,  212,  221,  218,
      204,  215,  227,  205,  216,  214,  230,    0,  159,    3,

        0,  219,  158,  155,    0,    0,    0,  155,  155,  155,
      155,  155,  155,    0,    0,  155,  155,  156,  156,  156,
      156,  156,  156,  156,    0,  156,  156,  186,  187,  185,
      208,  210,  206,  211,  209,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  226,  183,  165,  162,  152,  217,    0,    0,
      223,    0,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,    0,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,   49,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,   81,  152,  152,

      152,  152,  152,   99,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  222,  213,  228,    7,    0,
        0,    0,    2,    0,    5,  163,    0,  169,  168,  168,
        0,    0,    0,  166,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  229,  231,  184,  159,  159,    0,  159,  159,  159,
      159,    0,    6,  160,  158,    0,  158,  158,  158,  158,
      155,    0,    0,  154,    0,    0,  160,    0,  155,  155,
      155,  155,  155,  155,  155,  155,    0,    0,    0,  155,

      155,  155,  155,  155,  155,  155,    0,  157,    0,    0,
      156,  156,  156,  156,  156,  156,  156,  156,    0,    0,
        0,  156,  156,  156,  156,  156,  156,  156,    0,  224,
      225,    0,  236,  233,    0,    0,    0,  235,    0,    0,
        0,    0,    0,    0,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  153,    0,  152,
       16,   17,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,   74,  152,  152,

      152,  152,   88,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  128,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,    0,    0,
      168,    0,    0,    0,    0,    0,  168,    0,    0,  237,
        0,    0,    0,    0,    0,    0,    0,  159,    0,  159,
        0,    0,    0,    0,    0,  159,  159,    0,  160,  160,
        0,  160,  160,  160,  160,  158,    0,  158,    0,    0,
        0,    0,    0,  158,  158,    0,  154,  154,  154,  154,
      154,  154,  154,    0,  154,  154,  160,  160,  160,  160,

      160,  160,    0,    0,    0,  155,  155,    0,    0,    0,
        0,  155,  155,    0,    0,  157,  157,  157,  157,  157,
      157,  157,  157,    0,  157,  157,    0,    0,    0,  156,
      156,    0,    0,    0,    0,  156,  156,  235,    0,    0,
        0,    0,    0,    0,    0,  234,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  153,    0,    0,    0,  152,   23,
      152,  152,   28,  152,   31,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,   52,  152,   54,

      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
       80,  152,  152,   93,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  141,
      152,  152,  152,  148,  152,  150,  152,    0,    0,    0,
        0,    0,    0,  168,    0,    0,    0,    0,    0,  159,
      159,    0,  159,  159,    0,    0,    0,    0,  160,    0,
      160,    0,    0,    0,    0,    0,  160,  160,    0,  158,
      158,    0,  158,  158,    0,    0,    0,    0,  154,  154,
      154,  154,  154,  154,  154,  154,    0,    0,    0,  154,

      154,  154,  154,  154,  154,  154,    0,  160,    0,    0,
        0,    0,  160,  160,    0,    0,    0,    0,    0,    0,
        0,  157,  157,  157,  157,  157,  157,  157,  157,    0,
        0,    0,  157,  157,    0,  161,    0,  157,  157,  157,
      157,  157,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  152,  152,   26,  152,  152,
      152,  152,  152,  152,  152,  152,  152,   18,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,    0,    0,    0,    0,    0,
        0,  152,  152,   27,   29,  152,  152,   35,   39,  152,

      152,   34,  152,  152,  152,  152,   51,  152,  152,  152,
      152,  152,   61,   62,  152,  152,   77,  152,  152,  152,
      152,   95,   98,  100,  152,  152,  152,  152,  152,  108,
      152,  152,  152,  152,  152,  152,  152,  124,  152,  127,
      129,  152,  152,  152,  135,  152,  152,  152,  152,  152,
      152,  149,  152,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  159,    0,  159,  159,  160,  160,    0,
      160,  160,    0,    0,    0,    0,    0,  158,    0,  158,
      158,    0,    0,    0,  154,  154,    0,    0,    0,    0,
      154,  154,    0,  160,  160,    0,    0,    0,    0,    0,

      161,    0,    0,    0,    0,    0,  157,  157,    0,  161,
      161,  161,  161,  161,    0,    0,    0,  157,  157,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  152,
        0,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
       83,  152,  152,  152,  152,  152,  152,  152,  152,  152,
        0,    0,    0,    0,    0,    0,    0,    0,  152,  152,
      152,  152,   32,   33,  152,  152,  152,  152,  152,   50,
       53,  152,   57,  152,  152,  152,  152,   75,  152,  152,
       85,   89,  152,  152,  152,  103,  152,  107,  109,  112,

      114,  117,  152,  119,  120,  152,  152,  152,  134,  131,
      152,  152,  152,  145,  152,  152,  151,    0,    1,    0,
        0,  168,    0,    0,    0,    0,  159,    0,  160,    0,
      160,  160,  158,    0,    0,  160,    0,  160,  160,  161,
      161,    0,  161,    0,    0,    0,    0,  161,  161,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      152,  152,   20,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,   19,  152,  152,  152,  152,   40,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,    0,    0,    0,    0,    0,    0,    0,    0,

       10,   12,  152,  152,  152,  152,  113,   47,   48,  152,
      152,   60,  152,   64,   76,  152,   94,  101,  152,  152,
      152,  118,  152,  152,  126,  130,  152,  140,  152,  146,
      152,    0,    0,  160,  160,    0,    0,  161,  161,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   11,   13,   36,  152,  152,   67,   68,   70,
       79,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,   84,   86,   90,  152,  152,  110,
      121,  132,  152,  152,    0,    0,    0,    0,    0,    0,
        0,  152,  152,   42,  152,  152,  152,   59,   66,  152,

      102,  104,  152,  152,  152,  137,  142,  152,    0,    0,
        0,    0,  161,    0,  161,  161,    0,    0,    0,    0,
        0,    0,  152,  152,  152,   72,   69,   71,  152,   96,
      152,  152,   14,  152,  152,  152,   37,   41,  152,  152,
       63,  152,  152,   92,  152,  152,  152,  152,  152,    0,
        0,    0,    0,  152,  152,   43,   55,  152,   78,  152,
      152,  152,  147,    0,    0,    0,    0,  161,    0,    0,
        0,    0,  152,   44,   45,   73,   82,  152,  152,  152,
      152,  152,  152,  152,  152,   65,   87,   91,  105,  111,
      133,  152,  143,    0,    0,    0,   25,  152,  152,  152,

      152,  152,    0,    0,    0,    0,    0,    0,   46,  152,
      152,   15,   21,   24,  152,  152,   38,  152,  152,  136,
      152,    0,    0,    0,    0,   30,   58,  152,  152,  125,
        0,    0,    0,  152,  152,  152,  152,  152,  152,  106,
      144,    0,    0,    0,  152,  123,    0,  152,  122,   22,
      152,  152,   56,    0,  116,  115,  152,  152,  152,  152,
      152,  152,  152,  138,  152,  152,  139,   97,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   11,   51,   56,   11,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   11,   73,   74,   75,   76,
       77,   78,   51,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[92] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    4,    4,    4,    4,    4,    9,
        4,    4,    4,    4,    4,    4,    4,    1,   10,    1,
        1,   11,    1,    8,    8,    8,    8,    8,    8,    4,
        4,    4,    4,    4,    4,    4,    4,    9,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1

    } ;

static const flex_int16_t yy_base[1534] =
    {   0,
        0,   90, 4121, 4120,    0,    0,   90,   91,   92,   93,
     4136, 4139,  104, 4139,  110,   83, 4139, 4076,   63,   90,
     4139, 4139, 4139,   84,  104, 4139,  107,  105,  123,  178,
      245, 4098, 4139,  125, 4098,   88,  325,  118,  152, 4139,
      112, 4139,  111,  129, 4069,  105,  113,  180,  164,  179,
      237,  116,  121,  153,  160,  141,   95,  282,  218,  253,
      267,  298,  219, 4139,  127, 4139,  178,  369,  375, 4139,
     4109, 4139,    0, 4139,  413,    0, 4139,  387, 4139,  405,
      426, 4139,  491, 4071,   83, 4139, 4139, 4139, 4139, 4139,
     4092, 4139, 4093, 4090, 4139, 4139, 4091, 4104,  558, 4139,

     4121, 4139,  620,  435,  508,  224,  535,  371,  624,  611,
      397, 4139,  469,  134,  445,  402,  549,    0,  552,  653,
      683,  556, 4139,  668,  258,  614,  696, 4139, 4139, 4139,
     4088, 4139, 4139, 4139, 4087, 4086,  194,  224, 4104,  245,
      287,  314,  271,  321,  293,  360, 4082,  315,  330, 4059,
     4027,  350, 4139, 4139, 4139, 4139,  322, 4139, 4054, 4053,
     4139, 4026,  406,  226,  411,  366,  251,  386,  360,  446,
      287,  396,  707, 4054,  485,  389,  427,  365,  130,  453,
      487,  513,  677,  424,  489,  199,  488,  512,  460,  594,
      534,  580,  535,  392,  532,  557,  536, 4053,  555,  598,

      621,  595,  551, 4052,  619,  682,  644,  710,  732,  631,
      651,  675,  674,  718,  632,  669,  741,  726,  678,  733,
      735,  660,  742,  596,  705, 4139, 4139, 4139,  813,  806,
     4107,  819, 4139,  849, 4139,    0,  852, 4139, 4139,  837,
     4047, 4046, 4045,    0, 4071,  386,  519, 4089,  578,  849,
      804,  758,  834,  790,  846, 4067,  803,  850,  853, 4041,
     4040, 4139, 4139, 4139,  877,  868,  939,  903,  929,  711,
     4039, 4097, 4139,  991,  937, 1053,  965, 1043,  781, 1054,
      868,  740, 1000, 1116,  890, 1021, 1181, 1123,  854, 4139,
      871, 1131,  856, 4139,  876, 1167,  893, 4074, 4071,  985,

     1017,  936, 1190,  851, 1048, 1210,    0, 1264, 4076, 1106,
      905, 4139, 1063, 1272,  917, 4139, 1087, 1242,  923, 4071,
     4068, 1197, 1204, 1128, 1315,  989, 1053, 1323, 1348, 4139,
     4139, 4057, 4139, 4139,  906,  919, 4033, 4033,  923, 4029,
        0, 4028,    0, 3999,  798,  915,  997,  927,  708, 1011,
      917, 1044,  931, 1047, 1007, 1284, 1010, 1100, 1031, 1108,
     1126, 1117,  929,  982, 1113, 1111, 1156, 4029, 1163, 1034,
     4028, 4027, 1158, 1121, 1162, 1188,  941, 1195, 1165, 1199,
     1187, 1275, 1240, 1201, 1211, 1259,  463, 1202, 1241, 1048,
     1208, 1289, 1291, 1308, 1321, 1278, 1322, 1324, 1325, 1330,

     1204, 1332, 1171, 1331, 1334, 1340,  622, 1333, 1335, 1337,
     1341, 1343, 1348, 1354, 1355, 1357, 1356, 1358, 1360, 1361,
     1364, 1367, 1362, 4026, 1368, 1377, 1413, 1370, 1380, 1369,
     1302, 1384, 1390, 1385, 1392, 1395, 1085, 1394, 1454, 1455,
     1450, 1457, 4022,    0, 4021,    0, 4020,    0, 4044, 4139,
     1425, 1430, 4020, 4017,    0, 4016,    0, 4139, 1464, 1490,
     1478, 1202, 4052, 4049, 4052, 4139, 1498, 1519, 1559, 1524,
     1621, 1585, 1611, 1453, 4012, 4139, 1640, 1673, 1735, 1501,
     4048, 4045, 4048, 4139, 1549, 1663, 1744, 1553, 1726, 1756,
     1522, 4139, 1660, 4008, 1558, 1795, 1855, 1704, 1783, 1792,

     1463, 4007, 1504, 4043, 4040, 1415, 1476, 4036, 1511, 4040,
     4037, 1504, 1508, 1461, 1660, 1919, 1672, 1816, 1970, 1786,
     1984, 1847, 4139, 1533, 1854, 1998, 1531, 4038, 4035, 1510,
     1515, 4031, 1538, 4035, 4032, 1565, 1570, 3999, 1579, 3995,
     3994, 3993,    0, 3992,    0, 4139, 1614, 1561, 1564, 1597,
     1654, 1560, 1613, 1646, 1655, 1595, 1669, 1671, 1599, 1601,
     1652, 1697, 1720, 1724, 1711, 1725, 1758, 1557,  875, 1680,
     1670, 1751, 1768, 1778, 3994, 1732, 3990, 3989, 1787, 3991,
     1764,  225, 3990, 1776, 3989, 1718, 1790, 1794, 1789, 1816,
     1792, 1813, 1832, 1846, 1795, 1841, 1848, 3988, 1861, 3987,

     1852, 1853, 1872, 1878, 1855, 1875, 1896, 1892, 1905, 1898,
     3986, 1913, 1879, 3985, 1939, 1895, 1957, 1962,  431, 1923,
     1960, 1964, 1970, 1967, 1972, 1973, 1920, 1975, 1976, 1988,
     1992, 1974, 1978, 1998, 2000, 2004, 2001, 2003, 2002, 3984,
     2005, 2008, 2006, 3983, 2010, 3982, 1916, 2080, 2067, 3978,
        0, 3977,    0, 3976, 3975, 3974,    0, 3973,    0, 2074,
     3972, 4003, 2038, 2059, 2082, 4007, 4004, 4007, 4139, 2126,
     2136, 2198, 2083, 4004, 4001, 4004, 4139, 2100, 2145, 2207,
     3964, 3995, 2062, 2130, 2088, 3999, 3996, 3999, 2032, 4139,
     2135, 2215, 2060, 4139, 2124, 2235, 2103, 3996, 3993, 2195,

     2201, 2073, 2256, 2139, 2141, 2242, 2264, 4139, 2108, 3994,
     3991, 3994, 4139, 2167, 2306, 3986, 3985, 2234, 2320, 2243,
     2169, 2127, 4139, 2260, 2328, 2220, 4139, 2237, 2335, 2110,
     3989, 3986, 2315, 2316, 2376, 2395, 2457, 2206, 2404, 2142,
     2251, 2424, 3950, 3981, 3980, 3947, 3946, 3945,    0, 3944,
        0, 3943,    0, 3942,    0, 2181, 2068, 3944, 2126, 2187,
     2294, 2241, 2235, 2296, 2252, 2135, 2240, 2142, 2301, 2236,
     2282, 2307, 2259, 2310, 2308, 2314, 2320, 1653, 2327, 2315,
     2184, 2368, 2370, 2330, 2349, 3940, 3939, 3938,    0, 3936,
        0, 2381, 2355, 3938, 2397, 2376, 2400, 3934, 3933, 2356,

     2335, 3929, 2388, 2396, 2404, 2431, 3928, 2432, 2413, 2430,
     2322, 2433, 3924, 2436, 2434, 2438, 3923, 2445, 2442,  417,
     2444, 3919, 3918, 3914, 2446, 2452, 2453, 2402, 2454, 3913,
     1494, 1256, 2456, 2457, 2459, 2458, 2007, 2467, 2461, 3909,
     3908, 2464, 2469, 2468, 3904, 2465, 2480, 2481, 2483, 2472,
     2486, 3903, 2466, 3955, 3895,    0, 3891,    0, 3890,    0,
     3886,    0, 2540, 2501, 3917, 3856, 3855, 2580, 3874, 3905,
     2503, 2505, 2529, 3902, 3899, 3899, 2568, 2529, 3891, 3830,
     3829, 2530, 3885, 3882, 2501, 2502, 3875, 2549, 3879, 3871,
     2513, 2540, 3867, 2553, 2568, 2588, 3868, 3865, 3865, 2632,

     2642, 2704, 3825, 2591, 3858, 3855, 2563, 2564, 3846, 2651,
     2576, 2668, 2694, 3813, 2604, 3844, 3841, 2579, 2636, 3800,
        0, 3799,    0, 3793,    0, 3792,    0,    0,    0, 3791,
        0, 2573, 2513, 2521, 2575, 2694, 2628, 2626, 2562, 2577,
     2629, 2636, 2644, 2678, 2648, 2640, 2487, 2658, 2682, 2666,
     2684, 2689, 2724, 2685, 2692, 2696, 2693, 2642, 2730, 2701,
     3787,    0, 3781,    0, 3780,    0, 3774,    0, 2332, 2697,
     2703, 2708, 3776, 3770, 2710, 2713, 2711, 2714, 2716, 3769,
     3763, 2715, 3762, 2718, 2720, 2761, 2765, 3733, 2731, 2732,
     3732, 3726, 2735, 2737, 2734, 3725, 2739, 3719, 3718, 3712,

     2741, 3711, 2742, 3701, 2749, 2751, 2740, 2753, 3700, 3691,
     2758, 2756, 2759, 3690, 2764, 2766, 3684, 3739, 4139,    0,
        0, 4139,    0,    0,    0,    0, 3651, 2811, 2780, 3705,
     3644, 3643, 3639, 3693, 3687, 2781, 3686, 3625, 3624, 2851,
     3641, 3672, 4139, 2819, 3671, 3668, 3655, 4139, 2825, 2860,
     3647, 3609,    0, 3608,    0, 3604,    0, 3603,    0, 3599,
     2770, 2787, 3601, 2242, 2786, 2833, 2838, 2805, 2802, 2808,
     2835, 2841, 2842, 2847, 3593, 2576, 2846, 2798, 2848, 2849,
     2837, 2885, 2867, 2851, 2882, 2869, 2862, 2871, 2873, 2800,
     2908, 2877, 3589,    0, 3584,    0, 3583,    0, 3577,    0,

     3579, 3573, 2878, 2880, 2883, 2886, 3572, 3566, 3565, 2884,
     2888, 3561, 2918, 3560, 3556, 2891, 3555, 3551, 2893, 2894,
     2895, 3550, 2897, 2896, 3546, 3539, 2899, 3538, 2905, 3532,
     2910, 3528, 3524, 3500, 3494, 2960, 3548, 2927, 2931, 2967,
     3547, 3544, 3533, 3493, 3489, 3488, 3480,    0, 3479, 3472,
     3471, 3466, 3468, 3462, 3461, 2969, 2949, 3457, 2921, 2922,
     3456, 2935, 2941, 2938, 2945, 2942, 2950, 2745, 2951, 2946,
     2956, 2954, 2995, 2998, 3452, 2971, 2975, 2976, 2970, 2980,
     3451, 2981, 2993, 2982, 3440, 3439, 3436, 3431,    0, 3424,
     3423, 2985, 2965, 3420, 2987, 2989, 2986, 3419, 3413, 2990,

     3412, 3406, 2991, 2999, 2992, 3405, 3399, 3001, 3395, 3365,
     3364, 3357, 3006, 3388, 3328, 3327,    0,    0, 3344, 3343,
     3335, 3334, 3000, 3036, 3037, 3004, 3318, 3317, 3007, 3313,
     3008, 3013, 3011, 3018, 3020, 3021, 3022, 3312, 3023, 3055,
     3308, 3035, 3027, 3307, 3028, 3042, 3043, 3044, 3048,    0,
     3300, 3299, 3295, 3051, 3052, 3297, 3290, 3053, 3289, 3033,
     3056, 3058, 3288, 3282, 3281, 3277, 3276, 3246, 3268, 3267,
     3264, 3263, 3088, 3250, 3243, 3242, 3239, 3060, 3062, 3067,
     3066, 3071, 3065, 3073, 3077, 3234, 3231, 3213, 3079, 3212,
     3165, 3078, 3084, 3161, 3158, 3157, 3157, 3086, 3085, 3090,

     3091, 3092, 3152, 3150, 3143, 3069, 2901, 2895, 2812, 3093,
     3098, 2646, 3104, 2632, 3105, 3106, 2523, 3109, 3110, 2522,
     3114, 2411, 2369, 2263, 2130, 2079, 1977, 3108, 3116, 1946,
     1879, 1848, 1846, 3118, 3119, 3120, 3122, 3121, 3126, 1798,
     1682, 1617, 1556, 1437, 3125, 1400, 1306, 3127, 1214, 1055,
     3130, 3135,  996,  750,  593,  563, 3133, 3136, 3139, 3137,
     3143, 3141, 3145,  321, 3144, 3148,  276,  127, 4139, 3225,
     3236, 3247, 3258, 3266, 3277, 3288, 3299, 3310, 3316, 3324,
     3329, 3334, 3342, 3347, 3352, 3357, 3362, 3367, 3378, 3383,
     3386, 3391, 3396, 3401, 3403, 3408, 3413, 3421, 3432, 3443,

     3448, 3453, 3455, 3460, 3462, 3467, 3469, 3474, 3476, 3481,
     3483, 3488, 3496, 3501, 3506, 3511, 3516, 3518, 3523, 3528,
     3536, 3541, 3546, 3557, 3562, 3567, 3569, 3574, 3576, 3581,
     3586, 3588, 3593, 3595, 3600, 3605, 3610, 3615, 3620, 3622,
     3627, 3629, 3634, 3636, 3641, 3646, 3651, 3656, 3661, 3666,
     3668, 3673, 3681, 3686, 3691, 3693, 3698, 3700, 3705, 3707,
     3712, 3714, 3719, 3724, 3726, 3731, 3733, 3738, 3740, 3745,
     3747, 3749, 3754, 3759, 3761, 3766, 3768, 3773, 3775, 3780,
     3782, 3787, 3795, 3800, 3802, 3804, 3806, 3808, 3810, 3812,
     3817, 3819, 3824, 3826, 3831, 3833, 3838, 3840, 3845, 3850,

     3852, 3857, 3859, 3864, 3866, 3871, 3873, 3878, 3883, 3888,
     3893, 3895, 3900, 3905, 3910, 3912, 3917, 3922, 3924, 3926,
     3931, 3936, 3938, 3943, 3948, 3953, 3958, 3963, 3968, 3973,
     3978, 3983, 3988
    } ;

static const flex_int16_t yy_def[1534] =
    {   0,
     1369,    1, 1370, 1370, 1371, 1371, 1372, 1372, 1373, 1373,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1374, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1374, 1369,
     1369, 1369, 1369, 1374, 1369, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1369, 1369, 1369, 1369, 1369, 1375, 1369,
     1369, 1369, 1376, 1369, 1369, 1377, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1374, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1378, 1369, 1369,   30, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1379,   30, 1369, 1369,   31, 1369, 1369,
     1369, 1369, 1369, 1369,   31, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1380,
     1369, 1369, 1369, 1369, 1369, 1369, 1374, 1369, 1381, 1382,
     1369, 1369, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1383, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,

     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1369, 1369, 1369, 1369, 1375,
     1375, 1375, 1369, 1375, 1369, 1376, 1369, 1369, 1369, 1369,
     1384, 1385, 1386, 1377, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1387,
     1388, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
      265, 1389, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
      115,  281, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1390, 1369, 1391, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1392, 1369, 1393,
     1394, 1395, 1396, 1369, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1398, 1369, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,

     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1399, 1400,
     1369, 1369, 1401, 1402, 1403, 1404, 1405, 1406, 1369, 1369,
     1369, 1369, 1369, 1407, 1408, 1409, 1410, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369,  469, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369,  487, 1369, 1369, 1369, 1369, 1369, 1369,

     1369,  497, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1411, 1412, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369,  516, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1413, 1369, 1414,
     1415, 1416, 1417, 1418, 1419, 1369, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1421, 1369, 1422, 1423, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1424, 1369, 1425,
     1426, 1427, 1428, 1429, 1429, 1430, 1431, 1432, 1433, 1369,
      660, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
      680, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1434, 1369, 1434,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1435, 1369, 1369, 1436, 1437, 1438, 1439, 1440,
     1441, 1442, 1443, 1444, 1445, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1447, 1448, 1449, 1450, 1451,
     1452, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
     1460, 1461, 1369, 1369, 1369, 1369, 1369, 1369,  868, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1462, 1369, 1369, 1369, 1369, 1369, 1369,  901,
     1369, 1369, 1369,  910, 1369, 1369, 1369, 1369, 1369, 1463,
     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
     1474, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,

     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1483, 1369, 1484,
     1485, 1369, 1486, 1487, 1488, 1489, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1040, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,

     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1507, 1508, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1509, 1490, 1510, 1492, 1511, 1494, 1496,
     1512, 1498, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1513, 1499, 1514, 1501, 1515, 1503,
     1505, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,

     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1516, 1507,
     1517, 1508, 1369, 1369, 1369, 1369, 1518, 1519, 1510, 1520,
     1521, 1512, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1522,
     1513, 1514, 1523, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1524, 1516, 1525, 1517, 1369, 1526, 1527,
     1520, 1521, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1528, 1529, 1523, 1473, 1473, 1473, 1473,

     1473, 1473, 1524, 1525, 1530, 1526, 1531, 1527, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1532, 1528, 1533, 1529, 1473, 1473, 1473, 1473, 1473,
     1510, 1530, 1531, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1514, 1532, 1533, 1473, 1473, 1510, 1473, 1473, 1473,
     1473, 1473, 1473, 1514, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,    0, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369
    } ;

static const flex_int16_t yy_nxt[4231] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   31,   31,   31,   31,   31,
       31,   32,   33,   34,   35,   36,   37,   38,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   39,   18,   18,
       18,   18,   18,   18,   39,   18,   18,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       18,   53,   18,   54,   55,   18,   56,   18,   57,   58,
       59,   60,   61,   62,   18,   18,   63,   64,   65,   66,
       67,   68,   74,   74,   77,   77,   68,   86,   87,   69,

       77,   77,   88,   74,   74,   78,   79,   80,   80,   80,
       78,   80,   79,   81,   81,   81,   80,   82,   90,   83,
       83,   91,  134,  135,   89,   98,   94,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  129,  260,   92,  100,
       83,   95,   96,   83,  101,  161,  158,  162,   75,   75,
       75,   75,  153,   85,  307,  154,  130,  102,  131,  132,
      155,  226,  206,   85,  261,  156,  159,  163,  164,  165,
      166,   85,  167,  168,   85,  169,  179,  170,  175,   85,
      176,  171,  172,  196,  177,   85,  178,   85,   85,  198,
      173,  180,  197,  160,   93,  309,  199,   97,  103,   85,

      104,  104,  104,  104,  104,  104,  104,  105,  105,  374,
       85,   85,  228,  157,   83,  227,  203,  106,   85,  204,
      107,  205,   85,  108,  109,  110,  111,  112,  332,  200,
      333,  184,  113,  114,  112,  185,  201,   85,   85,  115,
      186,  202,  106,  181,  187,  107,  284,  284,  116,  109,
      182,  117,  188,  111,  189,  112,  183,   85,  332,  113,
      333,  155,  114,  190,  112,  103,  156,  118,  118,  118,
      118,  118,  118,  118,  118,  118,   85,   85, 1369,  332,
      387,  333,  217,   85,   85,  285,  225,  107,  212,  213,
      119,  120,  121,  122,  123,   85,  214,  794,  215,  124,

      191,  123,  347,  216,  334,  332,  125,  333,  192,   85,
      193,   85,  107,  194,  157,  126,  120,  195,  127,  329,
      122,  332,  123,  333,  350,   85,  124,  332,  218,  333,
      155,  123,  136,  334,   85,  156,  137,  138,  219,  139,
       85,  140,  141,  220,  142,   85,  143,  221,  332,  332,
      333,  333,  207,  208,  335,  332,   85,  333,  144,  145,
      146,  222,  209,  210,  332,  211,  333,  354,  223,  224,
      229,   79,   80,   80,   80,  229,  232,  233,  230,   85,
       85,  232,  147,  148,  332,  149,  333,  150,   78,   79,
       80,   80,   80,   78,  332,  336,  333,  234,  234,  234,

      234,  234,  234,  234,  234,  234,   80,   79,   80,   80,
       80,   80,  151,  152,  237,  238,  111,  289,   85,  237,
      449,  239,  450,   85,   85,  290,  239,   80,   79,   81,
       81,   81,   80,  349,  352,  240,  240,  240,  240,  240,
      240,  240,  289,  289,   85,  373,  992,   85,  289,  239,
       85,  290,  290,  351,   85,  371,  290,  281,  281,  281,
      281,  281,  281,  281,   85, 1369,  355,  241,  289,   85,
      398,  239,  111,  289, 1369,   85,  239,  239,  290,  345,
      239,  239,   85,  290, 1369,   85,  346,  348,  239,   85,
     1369,  239,  385,  239,  242,  239,  282,  243,  245, 1369,

     1369,  372,  246,  247,   85,  248,  310,  249,  250, 1369,
      251,   85,  252,  825,  302,  290,  303,  304,   85, 1369,
      375,   85,  353,  390,  253,  254,  255,  596,  103, 1369,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  305,
      290,  391,  306,   85,  304,   85,   85,   85,  256,  257,
      107,  258,  286,  449,  286,  450,  370,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  376,  377,  386,  283,
       85,   85,  297,  388,  298,  107,  378,  299,  300,  259,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  379,
       85,  389,   85,   85,   85,  289,  288,  122,  311,  266,

      267,  268,  311,  290,  269,  270,  312,  394,  270,   85,
      312,  397,  449,   85,  450,   85,  401,  399,  407,  271,
      289,   85,  301,  311,  266,  267,  268,  311,  402,  269,
      290,  270,  400,  312,  297,  403,  298,  312,   85,  299,
      300,  270,  274,  274,  274,  274,  274,  274,  274,  274,
      274,   85,   85,   85,   85,  395,   85,  289,  301,  392,
      311,  275,  276,  277,  396,  290,  278,  279,  312,  291,
      279,  292,  293,  404,  393,  406,  437,   85,  294,   85,
       85,  280,  289,  617,  122,  311,  275,  276,  277,   85,
       85,  278,  290,  279,  295,  312,  405,  296,  313,  293,

      314,  315,   85,  279,  408,  294,  319,  316,  320,   85,
      419,  321,  322,  324,  312,  325,  326,  425,   85,  319,
      414,  320,  420,  317,  321,  322,  318,   85,  315,  311,
      323,  434,   85,   85,  316,   85,   85,  312,  327,  312,
       85,  328,  311,  326,  380,  381,  426,  409,  422,  155,
      312,  410,  382,  421,  311,  383,  430,  458,  384,  411,
     1369,  412,  413,   85,  312,   85,   85,  311,   85,  323,
      356,  357,  358,  551,  359,  360,   85,  312,  361,  415,
      362,  423,  458,  438,   85,  363,  364,  365,  366,  367,
       85,   85,  449,   85,  450,  417,  416,  428,  433,   85,

       85,  486,  427,  424,  431,  429,  432,  232,  233,  435,
      418, 1369,  232,  436,  229,   79,   80,   80,   80,  229,
      232,  233,  230,  450,  449,  232,  450,  476,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  449,  449,  450,
      450,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      439,  233,  476,  237,  238,  439,   85,  440,  237,  441,
      441,  441,  441,  441,  441,  441,  450,  451,  449,  547,
      450,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      449,  452,  450,  449,  449,  450,  450,  449,  103,  450,
      281,  281,  281,  281,  281,  281,  281,  112,  442,  265,

      265,  265,  265,  265,  265,  265,  265,  265,  290,  458,
      294,  458,  284,  284,  458,  458,  293,  508,  266,  267,
      268,  300,  112,  269,  270,  294,  462,  270,  463,  282,
      294,  464,  465,   85,  458,  290,  458,  294,  271,  458,
      332,  458,  333,  266,  267,  268,  293,  532,  269,  458,
      270,  322,  294,  332,  780,  333,  459,  294,  459,  312,
      270,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      466,  316,  467,   85,  458,   85,  466,  540,  476,  466,
      476,  304,  112,  476,  476,   85,  312,   85,  480,   85,
      481,  548,  553,  482,  483,  466,  569,  467,  316,   85,

      461,  550,  466,  476,  541,  476,  584,  112,  476,  555,
      476,  476,  466,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  289,  470,  471,  472,  123,  476,  473,  474,  290,
       85,  474,  107,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  475,  570,   85,   85,  289,  470,  471,  472,
      123,  310,  473,  289,  474,   85,  290,  107,   85,   85,
      477,  290,  477,  549,  474,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  484,  557,  485,  552,  289,   85,
      484,  562,   85,  484,  112,  275,  276,  277,  290,  123,

      278,  279,   85,  579,  279,   85,   85,  554,  315,  484,
      556,  485,  599,   85,  479,  564,  484,  316,  304,  112,
      275,  276,  277,  326,  123,  278,  484,  279,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  279,  487,  487,
      286,  316,  286,   85,  316,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  503,  646,  504,  315,   85,  505,
      506,  488,  489,  490,  491,  492,   85,  310,  316,   85,
      493,   85,  492,  326,  123,   85,  563,  494,  507,   85,
      568,  565,  573,  571,   85,  294,  495,  489,  581,  496,
      503,  491,  504,  492,  613,  505,  506,  493,  572,  123,

      566,  567,  492,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  294,  509,   85,  510,   85,  577,  511,  512,
       85,  294,  498,   85,  499,  582,  662,  500,  501,   85,
      270,  501,  574,  509,  580,  510,  112,  513,  511,  512,
      507,  586,  502,  311,  578,   85,   85,  498,  294,  499,
      311,  312,  500,   85,  501,  583,  112,   85,  312,   85,
       85,  112,   85,  588,  501,  527,   85,  528,  311,   85,
      529,  530,   85,  585,  594,  311,  593,  587,  312,  597,
      611,  112,  600,  513,  515,  312,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  527,  316,  528,   85,   85,

      529,  530,  516,  516,  516,  516,  516,  516,  598,  517,
      518,  519,  520,  521,   85,  531,  591,   85,  522,  531,
      523,  592,  595,  316, 1000,  524,  316,  516,  516,  516,
      516,  516,  516,   85,  525,  518,   85,  526,  533,  520,
      534,  521,   85,  535,  536,  522,  533,   85,  534,   85,
      523,  535,  536,  316,  589,  590,  601,  558,  602,  605,
       85,  123,  537,  559,  560,  561,   85, 1369,  640,  123,
      118,  118,  118,  118,  118,  118,  118,  118,  118,   85,
       85,  603,   85,   85,  604,  606,  123,  607,   85,   85,
       85,   85,   85,   85,  123,   85,  537,  610,   85,   85,

      614,   85,  609,  612,  608,  615,   85,  616,  620,  329,
      618,  619,   85,   85,   85,   85,   85,  621,   85,   85,
       85,  155,   85,  622,  626,   85,   85,   85,   85,  623,
      625,  631,  624,  634,  633,   85,  627,  629,   85,  628,
      632,  630,   85,   85,  636,  635,  637,  641,   85,  639,
       85,  638,   85,   85,  642,  439,  233,  233,   85,  449,
      439,  450,  440,  231,  449,  643,  450,  644,  645,  294,
      647,   85,  239,  239,  239,  239,  239,  239,  239,  441,
      441,  441,  441,  441,  441,  441,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  459,  294,  459, 1369,  669,

      460,  460,  460,  460,  460,  460,  460,  460,  460,  708,
      719,  649,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  665,  720,  666,  669,  682,  667,  668,  716,  279,
      294,  266,  506,  268,  708,  717,  269,  270,  719,  512,
      270,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      112,  661,   85, 1369,  112,  744,  266,  294,  268,  530,
      999,  269,  745,  270,  316,  669,  536,  669,  689,  316,
      669,  669,  685,  270,  686,  112,  690,  687,  688,  112,
      468,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      669,  316,  669,  689,  743,  669,  316,  669,  491,  689,

      470,  471,  472,  690,  689,  473,  474,  690,  673,  474,
      674,  123,  690,  675,  676,   85,  123, 1369,   85,   85,
      475,  779,   85,  761,  689,  470,  471,  472,  491,  689,
      473,  669,  474,  746,  690,  757,  123,  758,  670,  690,
      670,  123,  474,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  677,   85,  678,   85,  669,   85,  677,   85,
      747,  677,  478,  478,  478,  478,  478,  478,  478,  478,
      478,   85,   85,  768,  759,  765,  953,  677, 1354,  678,
      762,  769,  672,  756,  677,  281,  281,  281,  281,  281,
      281,  281,  105,  105,  677,  680,  680,  680,  680,  680,

      680,  680,  680,  680,   85,  702,  690,  703,  704,  719,
       85,   85,   85,   85,  275,  763,  277,  520,  722,  278,
      279,  721,  764,  279,  486,  760,  723,   85,   85,   85,
      705,  690,  770,  706,  681,  704,  766,  719,   85,  275,
       85,  277,  767,  722,  278,  708,  279,  708,  782,  781,
      708,  708,  477,  723,  477,   85,  279,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  487,  487,  771,   85,
      708,  691,  708,  692,  693,  708,   85,  708,   85,  697,
      694,  698,   85,   85,  699,  700,  786,  775,  776,  488,
      489,  490,  491,  492,  772,  773,  695,  796,  493,  696,

      492,  693,  689,  701,  774,  494,  709,  694,  710,   85,
      690,  711,  712,  787,  495,  489,   85,  496,  697,  491,
      698,  492,   85,  699,  700,  493,   85,  689,  783,  708,
      492,  777,  722,  713,   85,  714,   85,  690,  778,  713,
      723,  689,  713,  784,  793,   85,  795,   85,   85,  690,
       85,  785,   85,   85,  708,  797,   85,  722,  713,  805,
      714,  724,  792,  725,  726,  713,  689,  723,  701,  799,
      727,   85,  798,  801,   85,  713,  690,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  728,  800,  802,  729,
       85,  726,  738,  723,  739,  740,  498,  727,  499,   85,

      722,  500,  501,  820,   85,  501,   85, 1369,  723, 1369,
       85,   85,  803,   85,  806,  807,  502,  741,  723,   85,
      742,  498,  740,  499,  520,  722,  500,  804,  501,  809,
       85,  810,  813,   85,  808,  723,   85,   85,  501,  515,
     1347,  516,  516,  516,  516,  516,  516,  516,  516,  516,
       85,  812,  811,   85,   85,  814,   85,  516,  516,  516,
      516,  516,  516,   85,  517,  518,  519,  520,  521,  815,
      816,   85,  817,  522,   85,  523,  818,  853,   85,  822,
      524,   85,  516,  516,  516,  516,  516,  516,  819,  525,
      518,  833,  526,  730,  520,  731,  521,   85,  732,  733,

      522,  735,  826,  735,   85,  523,  736,  736,  736,  736,
      736,  736,  736,  736,  736,   85,  722,  734,   85,  821,
       85,  730,   85,  731,  723,   85,  732,  733,   85,  824,
       85,   85,   85,   85,   85,   85,   85,  823,  827,  831,
      834,  722,  828,  835,  722,  737,   85,  830,  829,  832,
       85,  723,  723,  836,  839,  837,   85,  838,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  841,   85,  722,
      842,  734,  846, 1005,  850,  843,  845,  852,  840,  723,
      844,  849,  233,  847,  458,  848,  690,  851,  854,  239,
      239,  239,  239,  239,  239,  239,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  458,  865,  870,  476,  458,
      466,  474,  879,  690,  694,  266,  484,  268,  704,  492,
      269,  270,  270,  873,  270,  874,   85,  887,  875,  876,
      458,  700,  893,  476,  909,  661,  501,   85,  733,  933,
      266,  694,  268,  270,  492,  269,  279,  270,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  270,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  476,  470,  694,  472,
      693,  723,  473,  474,   85,  492,  474,  492,  523,  694,
      896, 1369,  897,   85,  693,  898,  899,  869,  941,  934,

       85,  476,  470,  943,  472,  694,  679,  473,  723,  474,
      492,  704,  492,  523,  279,  670,  694,  670,  719,  474,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  882,   85,
      883,  689,   85,  884,  885,   85,  719,  689,  275,  690,
      277,  740,  523,  278,  279,  690,  932,  279,  882,  956,
      883,  935,  886,  884,  885,  888,  689,  889,  681,  694,
      890,  891,  689,  275,  727,  277,  690,  523,  278,  888,
      279,  889,  690,  719,  890,  891,  487,  487,  492,  694,
      279,  727,  719,   85,   85,  720,  694,  523,   85,   85,

       85,  727,  492,  892,  903,  726,  938,  726,  886,  942,
       85,  719,  945,  492,  727,  892,  694,   85,  727,  937,
      719,  740,  523,  940, 1344,  707, 1155,  492,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  900,  948,  900,
       85,  727,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  904,   85,  905,   85,  946,  906,  907,  904,   85,
      905,  722,  722,  906,  907,   85,   85,  715,   85,  723,
      723,  950,   85,   85,  936,  908,  939,  949,   85,  944,
       85,  902,  727,  951,  947,   85,  722,  722,   85,  727,
       85,  952,  984,   85,  954,  955,  723,  723,  736,  736,

      736,  736,  736,  736,  736,  736,  736,   85,  908,  727,
      959, 1101,  960,   85,   85,  976,  727,  910,  910,  910,
      910,  910,  910,  910,  910,  910,   85,  915,   85,  916,
     1369,  975,  917,  918,   85,  957,  911,  958,  912,   85,
      971,  913,  911,  973,  969,  911,   85,  915,  972,  916,
      523,  919,  917,  918,   85,   85,  914,  970,   85,  986,
       85,  911,   85,  912,  977,  987,  913,  974,  911,  978,
      523,   85, 1343,  997,  735,  523,  735,  979,  911,  736,
      736,  736,  736,  736,  736,  736,  736,  736,   85,   85,
       85,   85,   85,  982,   85,  523,   85,  919,  980,  981,

       85,  989,   85,   85,   85,  983,  985,  988,  990,  991,
       85,   85,   85,  994,   85,   85,   85,   85, 1006,   85,
      993, 1001,   85,   85,   85,   85,   85,   85, 1004,  998,
       85, 1008,  995,  996, 1003, 1009, 1010, 1002,   85,   85,
     1011,   85, 1007, 1012,   85,   85, 1017,  458, 1015,  669,
     1014,  669, 1013, 1030, 1034,  694,  694,  677,  885,  492,
     1079, 1016,  660,  660,  660,  660,  660,  660,  660,  660,
      660,   85,  458, 1035,  669,  476,  669,  891, 1063,   85,
       85,   85,  694,  694,  492,  270,  492,  474, 1064,  474,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  708,

      476,  863,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  492, 1037,  279,  708, 1042,  713,  727,  727,  907,
       85,  470, 1043,  472,  708,  523,  473,  474, 1051,  877,
      474,   85,  918,   85,   85,   85, 1061,  501, 1065,  708,
     1167,  869, 1072, 1071,  727,  727,  470, 1043,  472, 1062,
      523,  473,  501,  474,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  474, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  523,  911,   85,  912,   85,   85,  913,  911,
       85, 1044,  911, 1045,   85, 1073, 1046, 1047,   85, 1069,

       85, 1070,   85, 1041,   85, 1075,   85,  523,  911, 1077,
      912, 1074,  914,  913, 1043,  911,   85, 1066, 1090, 1067,
     1078,  900, 1068,  900,   85,  911,  901,  901,  901,  901,
      901,  901,  901,  901,  901, 1048,   85, 1049, 1080, 1043,
       85, 1048,   85,   85, 1048, 1083, 1082,   85, 1085, 1076,
       85,   85,   85, 1091,   85,   85, 1089, 1081, 1086,   85,
     1048,   85, 1049, 1088, 1084, 1102,   85, 1048,   85,   85,
     1087,   85,   85,   85,   85, 1104,   85, 1048,   85, 1107,
     1103, 1092,   85, 1109, 1106, 1113, 1110, 1114,   85,   85,
       85, 1105,   85,   85, 1108,   85, 1111,   85,   85,   85,

       85, 1119, 1121,   85, 1120, 1112, 1115,   85, 1122,   85,
     1123,   85, 1116, 1117,   85, 1118,   85,   85, 1124,   85,
     1125, 1126,   85,   85,   85, 1127,  669,  708,   85, 1128,
     1235, 1160, 1129,  868,  868,  868,  868,  868,  868,  868,
      868,  868, 1130, 1137,   85,   85, 1131,  911, 1140, 1153,
     1141,  669,  708, 1142, 1143, 1154,   85, 1157,   85, 1156,
       85, 1158, 1159,   85,  474,  501,   85, 1161, 1182, 1169,
       85, 1162, 1028, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040,  910,  910,  910,  910,  910,  910,  910,  910,
      910,   85,  911,   85,  912,   85,   85,  913,  911,   85,

       85,  911, 1164, 1165,   85,   85,   85,   85, 1173,   85,
     1171, 1177, 1041, 1163, 1174, 1170, 1172,  911, 1176,  912,
       85, 1050,  913, 1166,  911,   85, 1168,   85, 1175,   85,
     1178,   85, 1183, 1179,  911,   85,   85, 1180,   85, 1181,
       85,   85,   85,   85,   85, 1192,   85, 1199, 1184,   85,
     1194,   85,   85,   85,   85,   85, 1369,   85, 1203, 1193,
     1196, 1195, 1333,   85, 1197, 1206,   85, 1200,   85, 1198,
     1204, 1201, 1207, 1043, 1202, 1205,   85, 1043, 1226,   85,
       85, 1208, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1214, 1223,   85, 1224, 1048,   85, 1225, 1043,   85,

       85, 1231, 1043,   85,   85, 1227, 1228,   85,   85,   85,
     1233,  911,   85, 1229,   85,  911, 1230, 1238, 1232, 1240,
     1241, 1136, 1248,   85, 1273, 1239, 1236,   85,   85,   85,
     1237, 1234, 1242,   85,   85, 1245, 1243, 1244,   85,   85,
       85, 1246, 1247,   85,   85,   85, 1255,   85,   85,   85,
       85,   85, 1043,   85, 1256, 1249,   85,   85,   85,   85,
     1274, 1254,   85, 1275, 1257,   85,   85, 1258, 1259,   85,
     1260,   85, 1280, 1262, 1263, 1261,   85, 1043,   85,   85,
       85,   85, 1283, 1284, 1286,   85,   85, 1278, 1276, 1279,
      911,   85, 1277,   85,   85,   85, 1287, 1282, 1281, 1285,

       85,   85,   85, 1290, 1291, 1292,   85, 1288, 1289,   85,
       85,   85, 1300,   85,   85, 1293,   85, 1309,   85, 1297,
       85, 1301, 1299,   85,   85,   85, 1298, 1311, 1312,   85,
     1369,   85, 1302, 1313, 1317,   85,   85,   85, 1314, 1310,
     1319, 1315,   85,   85,   85, 1321,   85, 1316,   85,   85,
       85,   85, 1318, 1326, 1329, 1327,   85, 1328, 1320, 1330,
     1334, 1335,   85,   85,   85, 1336,   85,   85,   85, 1338,
     1339, 1340,   85, 1337,   85, 1341,   85,   85,   85,   85,
       85, 1350, 1352,   85,   85,   85, 1345, 1353,   85, 1346,
     1351,   85, 1349,   85,   85,   85, 1348,   85, 1358,   85,

     1360,   85,   85,   85, 1332, 1355,   85, 1356, 1359, 1357,
     1362, 1369, 1364, 1369, 1361,   85, 1368, 1363, 1369, 1325,
     1365, 1366, 1323,   85, 1367,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   84,
       85,   85,   84,   84,   84,   84,   84,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  236,   85,
      236,  236,   85,  236,  236,  236,  236,   85,  236,  244,

       85,   85,  244,  244,  244,  244,  244,  244,   85,  244,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  308,  308,  308, 1369, 1369,  308,  338, 1308, 1306,
     1048,  338,  338,  338,  338,  340,  340, 1369, 1304,  340,
      342,  342, 1369, 1303,  342,  368,   85,   85,   85,  368,
      368,  368,  368,  443,  443,   85, 1296,  443,  445,  445,
     1369, 1369,  445,  447,  447,   85,   85,  447,  454,  454,
       85,   85,  454,  456,  456,   85,   85,  456,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  514,
      514,  308,  308,  308,  538, 1369, 1272,  538,  538,  538,

      538,  538,  542,  542, 1271, 1369,  542,  340,  340,  544,
      544, 1048, 1048,  544,  342,  342,   84, 1268, 1369,   84,
       84,   84,   84,   84,  575, 1267, 1369,  575,  575,  575,
      575,  575,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  650,  650, 1265,   85,  650,  443,
      443,  652,  652,   85,   85,  652,  445,  445,  654,  654,
       85,   85,  654,  447,  447,  656,  656,   85,   85,  656,
      454,  454,  658,  658, 1369, 1369,  658,  456,  456,  718,
      718,  718, 1369,  718,  514,  514,  514, 1252,  514,  538,

     1369, 1251,  538,  538,  538,  538,  538,  748,  748,   85,
       85,  748,  750,  750,   85,   85,  750,  752,  752,   85,
       85,  752,  542,  542,  754,  754,   85, 1369,  754,  544,
      544,   84, 1222, 1369,   84,   84,   84,   84,   84,  575,
     1369, 1369,  575,  575,  575,  575,  575,  788,  788, 1219,
     1369,  788,  790,  790, 1218, 1048,  790,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  855,  855,
     1216, 1215,  855,  650,  650,  857,  857, 1213,  713,  857,
      652,  652,  654,  654,  677, 1212,  654,  859,  859, 1210,
       85,  859,  656,  656,  861,  861,   85,   85,  861,  658,

      658,  718,  718,  718,   85,  718,  516,  516,   85,   85,
      516,  920,  920,   85,   85,  920,  922,  922,   85,   85,
      922,  924,  924,   85,   85,  924,  748,  748,  926,  926,
       85,   85,  926,  750,  750,  928,  928,   85, 1191,  928,
      752,  752,  930,  930, 1190, 1188,  930,  754,  754,   84,
     1186,   85,   84,   84,   84,   84,   84,  961,  961,   85,
     1152,  961,  963,  963, 1150, 1149,  963,  965,  965, 1147,
     1145,  965,  788,  788,  967,  967,  918,  911,  967,  790,
      790, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1020, 1020, 1139, 1138, 1020,  855,  855, 1022,

     1022,  907, 1136, 1022,  857,  857, 1024, 1024,  713,  713,
     1024,  859,  859,   84,   84, 1135,  891,   84,  861,  861,
      718,  718,  885,  484,  718, 1052, 1052,  677,  677, 1052,
      920,  920, 1054, 1054, 1134,  466, 1054,  922,  922, 1056,
     1056, 1019,   85, 1056,  924,  924, 1058, 1058,   85,   85,
     1058,  926,  926, 1060, 1060,  928,  928,   84,   85,   85,
       84,   84,   84,   84,   84,  930,  930, 1093, 1093,   85,
       85, 1093,  961,  961, 1095, 1095,   85,   85, 1095,  963,
      963, 1097, 1097,   85,   85, 1097,  965,  965, 1099, 1099,
       85,   85, 1099,  967,  967, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1132, 1132, 1020, 1020,
     1022, 1022, 1133, 1133, 1024, 1024,   84,   84, 1144, 1144,
       85,   85, 1144, 1052, 1052, 1146, 1146,   85,   85, 1146,
     1054, 1054, 1148, 1148,   85, 1100, 1148, 1056, 1056,  338,
      338, 1098, 1096,  338, 1058, 1058, 1151, 1151, 1094,   85,
     1151, 1185, 1185, 1059, 1057, 1185, 1093, 1093, 1187, 1187,
     1055, 1053, 1187, 1095, 1095, 1189, 1189,  918,  918, 1189,
     1097, 1097,  368,  368, 1050,  733,  368, 1099, 1099, 1209,
     1209,  907,  907, 1209, 1211, 1211,  903,  713, 1211, 1217,
     1217, 1039, 1038, 1217,  538,  538, 1036,  891,  538, 1220,

     1220, 1221, 1221,  891,  700, 1221, 1250, 1250,  885,  885,
     1250,  575,  575,  484,  484,  575, 1253, 1253, 1264, 1264,
     1033,  677, 1264, 1266, 1266, 1032, 1031, 1266, 1269, 1269,
     1217, 1217, 1270, 1270, 1029, 1028, 1270,  930,  930,  466,
      466,  930, 1294, 1294, 1295, 1295, 1027, 1026, 1295, 1022,
     1022, 1025, 1023, 1022,   84,   84, 1021, 1019,   84, 1305,
     1305,   85,   85, 1305, 1307, 1307,   85,   85, 1307, 1322,
     1322,   85,   85, 1322, 1324, 1324,   85,   85, 1324, 1331,
     1331,   85,   85, 1331,  338,  338,   85,   85,  338, 1342,
     1342,   85,   85, 1342,  368,  368,   85,  968,  368,  966,

      964,  962,   85,  931,  929,  927,  925,  923,  921,  536,
      530,  743,  733,  733,  512,  506,  501,  895,  894,  700,
      700,  484,  881,  880,  878,  877,  474,  872,  871,  466,
      867,  866,  864,  863,  862,  860,  655,  655,  858,  856,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      791,  789,  576,  755,  753,  751,  749,  539,  536,  536,
      322,  530,  530,  512,  512,  300,  506,  506,  715,  707,
      279,  684,  683,  679,  270,  664,  663,  659,  657,  450,
      450,  655,  653,  651,   85,   85,   85,  576,  546,  545,
      543,  539,  334,  333,  322,  322,  307,  300,  300,  273,

      468,  457,  455,  453,  450,  449,  448,  446,  444,  233,
       85,   85,  369,  344,  343,  341,  334,  339,  337,  334,
      332,  331,  330,  273,  264,  263,   83,  262,   83,   85,
      235,  174,  133,  128,   85, 1369,   71,   71,   11, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369
    } ;

static const flex_int16_t yy_chk[4231] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    8,    9,   10,    2,   19,   19,    2,

        9,   10,   20,    7,    8,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   16,   24,   16,
       24,   25,   36,   36,   20,   28,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   34,   85,   25,   29,
       25,   27,   27,   27,   29,   43,   41,   43,    7,    8,
        9,   10,   38,   57,  114,   38,   34,   29,   34,   34,
       39,   65,   57,   46,   85,   39,   41,   44,   44,   44,
       44,   47,   44,   44,   52,   44,   47,   44,   46,   53,
       46,   44,   44,   52,   46, 1368,   46,   44,  179,   53,
       44,   47,   52,   41,   25,  114,   53,   27,   30,   56,

       30,   30,   30,   30,   30,   30,   30,   30,   30,  179,
       39,   54,   67,   39,   67,   65,   56,   30,   55,   56,
       30,   56,   49,   30,   30,   30,   30,   30,  137,   54,
      137,   49,   30,   30,   30,   49,   55,   50,   48,   30,
       49,   55,   30,   48,   49,   30,  106,  106,   30,   30,
       48,   30,   50,   30,   50,   30,   48,  186,  138,   30,
      138,   60,   30,   50,   30,   31,   60,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   59,   63,  125,  140,
      186,  140,   60,  582,  164,  106,   63,   31,   59,   59,
       31,   31,   31,   31,   31,   51,   59,  582,   59,   31,

       51,   31,  164,   59,  141,  143,   31,  143,   51,  167,
       51,   60,   31,   51,   60,   31,   31,   51,   31,  125,
       31,  141,   31,  141,  167,   61,   31,  145,   60,  145,
      157,   31,   37,  142, 1367,  157,   37,   37,   61,   37,
       58,   37,   37,   61,   37,  171,   37,   61,  142,  148,
      142,  148,   58,   58,  144,  144,   62,  144,   37,   37,
       37,   62,   58,   58,  149,   58,  149,  171,   62,   62,
       68,   68,   68,   68,   68,   68,   69,   69,   68, 1364,
      157,   69,   37,   37,  152,   37,  152,   37,   78,   78,
       78,   78,   78,   78,  146,  146,  146,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   80,   80,   80,   80,
       80,   80,   37,   37,   75,   75,  108,  108,  169,   75,
      246,   75,  246,  178,  166,  108,   75,   81,   81,   81,
       81,   81,   81,  166,  169,   75,   75,   75,   75,   75,
       75,   75,  108,  111,  168,  178,  820,  176,  116,   75,
      194,  111,  108,  168,  172,  176,  116,  104,  104,  104,
      104,  104,  104,  104,  163,  115,  172,   75,  111,  165,
      194,   75,  116,  116,  104,  820,   75,   75,  111,  163,
       75,   75,  184,  116,  115,  177,  163,  165,   75,  619,
      104,   75,  184,   75,   75,   75,  104,   75,   83,  104,

      115,  177,   83,   83,  170,   83,  115,   83,   83,  115,
       83,  180,   83,  619,  113,  113,  113,  113,  189,  104,
      180,  387,  170,  189,   83,   83,   83,  387,  105,  115,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  113,
      113,  189,  113,  175,  113,  181,  187,  185,   83,   83,
      105,   83,  107,  247,  107,  247,  175,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  181,  181,  185,  105,
      188,  182,  117,  187,  117,  105,  182,  117,  117,   83,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  182,
      195,  188,  191,  193,  197,  117,  107,  119,  119,   99,

       99,   99,  122,  117,   99,   99,  119,  191,   99,  203,
      122,  193,  249,  199,  249,  196,  197,  195,  203,   99,
      117, 1356,  117,  119,   99,   99,   99,  122,  199,   99,
      117,   99,  196,  119,  110,  199,  110,  122,  192,  110,
      110,   99,  103,  103,  103,  103,  103,  103,  103,  103,
      103, 1355,  190,  202,  224,  192,  200,  110,  110,  190,
      126,  103,  103,  103,  192,  110,  103,  103,  126,  109,
      103,  109,  109,  200,  190,  202,  224,  205,  109,  201,
      407,  103,  110,  407,  126,  126,  103,  103,  103,  210,
      215,  103,  110,  103,  109,  126,  201,  109,  120,  109,

      120,  120,  207,  103,  205,  109,  121,  120,  121,  211,
      210,  121,  121,  124,  124,  124,  124,  215,  222,  127,
      207,  127,  211,  120,  127,  127,  120,  216,  120,  121,
      121,  222,  213,  212,  120,  183,  219,  121,  124,  124,
      206,  124,  127,  124,  183,  183,  216,  206,  213,  217,
      127,  206,  183,  212,  121,  183,  219,  270,  183,  206,
      282,  206,  206,  225,  121,  173,  349,  127,  208,  127,
      173,  173,  173,  349,  173,  173,  214,  127,  173,  208,
      173,  214,  270,  225,  218,  173,  173,  173,  173,  173,
      209,  220,  252,  221,  252,  209,  208,  218,  221,  217,

      223,  282,  217,  214,  220,  218,  220,  230,  230,  223,
      209, 1354,  230,  223,  229,  229,  229,  229,  229,  229,
      232,  232,  229,  251,  254,  232,  254,  279,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  257,  251,  257,
      251,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      234,  234,  279,  237,  237,  234,  345,  234,  237,  240,
      240,  240,  240,  240,  240,  240,  250,  253,  253,  345,
      253,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      255,  255,  255,  250,  258,  250,  258,  259,  281,  259,
      281,  281,  281,  281,  281,  281,  281,  304,  240,  265,

      265,  265,  265,  265,  265,  265,  265,  265,  289,  266,
      293,  266,  285,  285,  266,  266,  291,  297,  265,  265,
      265,  297,  304,  265,  265,  291,  268,  265,  268,  281,
      295,  268,  268,  569,  266,  289,  266,  293,  265,  266,
      335,  266,  335,  265,  265,  265,  295,  319,  265,  268,
      265,  319,  291,  336,  569,  336,  267,  295,  267,  311,
      265,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      269,  315,  269,  346,  268,  351,  269,  339,  275,  269,
      275,  302,  302,  275,  275,  348,  311,  363,  277,  353,
      277,  346,  351,  277,  277,  269,  363,  269,  315,  377,

      267,  348,  269,  275,  339,  275,  377,  302,  275,  353,
      275,  277,  269,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  300,  274,  274,  274,  326,  277,  274,  274,  300,
      364,  274,  283,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  274,  364, 1353,  347,  300,  274,  274,  274,
      326,  283,  274,  301,  274,  355,  300,  283,  357,  350,
      276,  301,  276,  347,  274,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  278,  355,  278,  350,  301,  359,
      278,  357,  370,  278,  305,  280,  280,  280,  301,  327,

      280,  280,  352,  370,  280,  354,  390,  352,  313,  278,
      354,  278,  390, 1350,  276,  359,  278,  313,  305,  305,
      280,  280,  280,  327,  327,  280,  278,  280,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  280,  284,  284,
      288,  317,  288,  437,  313,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  292,  437,  292,  317,  358,  292,
      292,  284,  284,  284,  284,  284,  360,  310,  317,  366,
      284,  365,  284,  324,  324,  362,  358,  284,  292,  374,
      362,  360,  366,  365,  361,  292,  284,  284,  374,  284,
      296,  284,  296,  284,  403,  296,  296,  284,  365,  324,

      361,  361,  284,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  292,  303,  367,  303,  373,  369,  303,  303,
      375,  296,  287,  379,  287,  375,  462,  287,  287,  403,
      462,  287,  367,  306,  373,  306,  303,  303,  306,  306,
      296,  379,  287,  322,  369,  381,  376,  287,  296,  287,
      323,  322,  287,  378,  287,  376,  306,  380,  323,  384,
      388,  303,  401,  381,  287,  318,  391,  318,  322,  385,
      318,  318, 1349,  378,  385,  323,  384,  380,  322,  388,
      401,  306,  391,  306,  308,  323,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  314,  318,  314,  383,  389,

      314,  314,  308,  308,  308,  308,  308,  308,  389,  308,
      308,  308,  308,  308,  832,  318,  383,  386,  308,  314,
      308,  383,  386,  318,  832,  308,  314,  308,  308,  308,
      308,  308,  308,  382,  308,  308,  396,  308,  325,  308,
      325,  308,  356,  325,  325,  308,  328,  392,  328,  393,
      308,  328,  328,  314,  382,  382,  392,  356,  393,  396,
      431,  325,  325,  356,  356,  356,  394, 1347,  431,  328,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  395,
      397,  394,  398,  399,  395,  397,  325,  398,  400,  404,
      402,  408,  405,  409,  328,  410,  328,  400,  406,  411,

      404,  412,  399,  402,  398,  405,  413,  406,  410,  329,
      408,  409,  414,  415,  417,  416,  418,  411,  419,  420,
      423,  427,  421,  412,  416,  422,  425,  430,  428,  413,
      415,  421,  414,  423,  422,  426,  417,  419,  429,  418,
      421,  420,  432,  434,  426,  425,  428,  432,  433,  430,
      435,  429,  438,  436,  433,  439,  439,  440, 1346,  451,
      439,  451,  439,  440,  452,  434,  452,  435,  436,  506,
      438,  427,  441,  441,  441,  441,  441,  441,  441,  442,
      442,  442,  442,  442,  442,  442,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  461,  506,  461, 1344,  474,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  501,
      514,  441,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  467,  514,  467,  474,  480,  467,  467,  503,  480,
      507,  460,  503,  460,  501,  509,  460,  460,  514,  509,
      460,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      512,  460,  831,  524,  513,  527,  460,  507,  460,  527,
      831,  460,  533,  460,  530,  470,  533,  470,  491,  531,
      470,  470,  485,  460,  485,  512,  491,  485,  485,  513,
      468,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      470,  530,  470,  491,  524,  470,  531,  470,  488,  488,

      469,  469,  469,  491,  495,  469,  469,  488,  472,  469,
      472,  536,  495,  472,  472,  568,  537, 1343,  552,  548,
      469,  568,  549,  552,  488,  469,  469,  469,  495,  495,
      469,  472,  469,  539,  488,  548,  536,  549,  471,  495,
      471,  537,  469,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  473,  556,  473,  550,  472,  559,  473,  560,
      539,  473,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  553,  547,  559,  550,  556,  778,  473, 1342,  473,
      553,  560,  471,  547,  473,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  473,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  554,  493,  493,  493,  493,  515,
      561,  778,  551,  555,  478,  554,  478,  517,  517,  478,
      478,  515,  555,  478,  486,  551,  517,  557,  571,  558,
      493,  493,  561,  493,  478,  493,  557,  515,  570,  478,
     1341,  478,  558,  517,  478,  498,  478,  498,  571,  570,
      498,  498,  479,  517,  479,  562,  478,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  487,  487,  562,  565,
      498,  489,  498,  489,  489,  498,  586,  498,  563,  490,
      489,  490,  564,  566,  490,  490,  576,  565,  566,  487,
      487,  487,  487,  487,  563,  563,  489,  586,  487,  489,

      487,  489,  490,  490,  564,  487,  499,  489,  499,  572,
      490,  499,  499,  576,  487,  487,  567,  487,  496,  487,
      496,  487,  581,  496,  496,  487,  573,  490,  572,  499,
      487,  567,  520,  500,  584,  500,  574,  490,  567,  500,
      520,  496,  500,  573,  581,  579,  584,  589,  587,  496,
      591,  574,  588,  595,  499,  587, 1340,  520,  500,  595,
      500,  518,  579,  518,  518,  500,  496,  520,  496,  589,
      518,  592,  588,  591,  590,  500,  496,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  518,  590,  592,  518,
      593,  518,  522,  522,  522,  522,  497,  518,  497,  596,

      525,  497,  497,  613,  594,  497,  597, 1333,  525, 1332,
      601,  602,  593,  605,  596,  597,  497,  522,  522,  599,
      522,  497,  522,  497,  525,  525,  497,  594,  497,  601,
      603,  602,  605,  606,  599,  525,  604,  613,  497,  516,
     1331,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      608,  604,  603,  616,  607,  606,  610,  516,  516,  516,
      516,  516,  516,  609,  516,  516,  516,  516,  516,  607,
      608,  612,  609,  516,  647,  516,  610,  647,  627,  616,
      516,  620,  516,  516,  516,  516,  516,  516,  612,  516,
      516,  627,  516,  519,  516,  519,  516,  615,  519,  519,

      516,  521,  620,  521, 1330,  516,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  617,  519,  519,  621,  615,
      618,  526,  622,  526,  519,  624,  526,  526,  623,  618,
      625,  626,  632,  628,  629, 1327,  633,  617,  621,  625,
      628,  519,  622,  629,  526,  521,  630,  624,  623,  626,
      631,  519,  526,  630,  633,  631,  634,  632,  635,  637,
      639,  638,  636,  641,  643,  837,  642,  635,  645,  526,
      636,  526,  638,  837,  643,  636,  637,  645,  634,  526,
      636,  642,  648,  639,  663,  641,  689,  643,  648,  649,
      649,  649,  649,  649,  649,  649,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  664,  665,  673,  683,  663,
      665,  673,  685,  689,  693,  660,  685,  660,  702,  702,
      660,  660,  663,  678,  660,  678,  757,  697,  678,  678,
      664,  697,  709,  683,  730,  660,  709, 1326,  730,  757,
      660,  693,  660,  664,  702,  660,  683,  660,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  660,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  684,  671,  695,  671,
      691,  722,  671,  671,  759,  704,  671,  705,  740,  691,
      714, 1325,  714,  766,  695,  714,  714,  671,  766,  759,

      768,  684,  671,  768,  671,  695,  679,  671,  722,  671,
      704,  705,  705,  740,  684,  672,  691,  672,  721,  671,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  692,  756,
      692,  700,  781,  692,  692,  760,  721,  701,  680,  700,
      680,  738,  738,  680,  680,  701,  756,  680,  696,  781,
      696,  760,  692,  696,  696,  706,  700,  706,  680,  692,
      706,  706,  701,  680,  726,  680,  700,  738,  680,  703,
      680,  703,  701,  718,  703,  703,  707,  707,  706,  696,
      680,  728,  720,  763,  770,  718,  692,  741,  767,  762,

     1064,  726,  703,  703,  720,  724,  763,  728,  696,  767,
      765,  718,  770,  706,  724,  706,  696,  773,  728,  762,
      720,  741,  741,  765, 1324,  707, 1064,  703,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  719,  773,  719,
      771,  724,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  725,  761,  725,  764,  771,  725,  725,  729,  769,
      729,  733,  734,  729,  729,  772,  775,  715,  774,  733,
      734,  775,  776,  780,  761,  725,  764,  774,  777,  769,
      811,  719,  725,  776,  772,  779,  733,  734,  784,  729,
      969,  777,  811,  801,  779,  780,  733,  734,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  785,  729,  725,
      784,  969,  785,  793,  800,  801,  729,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  782,  739,  783,  739,
     1323,  800,  739,  739,  796,  782,  736,  783,  736,  792,
      793,  736,  736,  796,  792,  736,  803,  742,  795,  742,
      739,  739,  742,  742,  804,  795,  736,  792,  797,  814,
      828,  736,  805,  736,  803,  814,  736,  797,  736,  804,
      742,  809, 1322,  828,  737,  739,  737,  805,  736,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  810,  806,
      808,  812,  815,  809,  814,  742,  816,  742,  806,  808,

      819,  816,  821,  818,  825,  810,  812,  815,  818,  819,
      826,  827,  829,  825,  833,  834,  836,  835,  838,  839,
      821,  833,  842,  846,  853,  838,  844,  843,  836,  829,
      850,  842,  826,  827,  835,  843,  844,  834,  847,  848,
      846,  849,  839,  847,  851,  947,  853,  864,  850,  871,
      849,  872,  848,  873,  882,  885,  886,  873,  882,  891,
      947,  851,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  933,  864,  888,  871,  878,  872,  888,  933,  934,
     1320, 1317,  885,  886,  891,  864,  892,  871,  934,  872,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  894,

      878,  863,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  892,  896,  878,  895,  904,  896,  907,  908,  904,
      939,  868,  911,  868,  894,  918,  868,  868,  915,  877,
      868,  932,  915,  935, 1076,  940,  932,  894,  935,  895,
     1076,  868,  940,  939,  907,  908,  868,  911,  868,  932,
      918,  868,  895,  868,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  868,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  919,  901,  938,  901,  937,  941,  901,  901,
     1314,  912,  901,  912,  942,  941,  912,  912,  946,  937,

      958,  938,  943,  901, 1312,  943,  945,  919,  901,  945,
      901,  942,  910,  901,  912,  901,  948,  936,  958,  936,
      946,  902,  936,  902,  950,  901,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  913,  944,  913,  948,  912,
      949,  913,  951,  954,  913,  951,  950,  952,  953,  944,
      955,  957,  936,  959,  956,  970,  957,  949,  954,  960,
      913,  971,  913,  956,  952,  970,  972,  913,  975,  977,
      955,  976,  978,  982,  979,  972,  984,  913,  985,  977,
      971,  960,  953,  979,  976,  986,  982,  987,  959,  989,
      990,  975,  995,  993,  978,  994,  984,  997, 1007, 1001,

     1003,  995, 1001, 1168,  997,  985,  989, 1005, 1003, 1006,
     1005, 1008,  990,  993, 1012,  994, 1011, 1013, 1006,  986,
     1007, 1008, 1015,  987, 1016, 1011, 1029, 1036, 1061, 1012,
     1168, 1068, 1013, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1015, 1044, 1065, 1062, 1016, 1044, 1049, 1061,
     1049, 1029, 1036, 1049, 1049, 1062, 1078, 1066, 1090, 1065,
     1069, 1066, 1067, 1068, 1029, 1036, 1070, 1069, 1090, 1078,
     1309, 1070, 1028, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1066, 1040, 1071, 1040, 1081, 1067, 1040, 1040, 1072,

     1073, 1040, 1072, 1073, 1077, 1074, 1079, 1080, 1082, 1084,
     1080, 1085, 1040, 1071, 1082, 1079, 1081, 1040, 1084, 1040,
     1087, 1050, 1040, 1074, 1040, 1083, 1077, 1086, 1083, 1088,
     1086, 1089, 1091, 1087, 1040, 1092, 1103, 1088, 1104, 1089,
     1085, 1105, 1110, 1082, 1106, 1103, 1111, 1113, 1092, 1116,
     1105, 1119, 1120, 1121, 1124, 1123, 1308, 1127, 1121, 1104,
     1110, 1106, 1307, 1129, 1111, 1127, 1091, 1116, 1131, 1111,
     1123, 1119, 1129, 1138, 1120, 1124, 1113, 1139, 1157, 1159,
     1160, 1131, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1140, 1156, 1162, 1156, 1140, 1164, 1156, 1138, 1163,

     1166, 1164, 1139, 1165, 1170, 1159, 1160, 1157, 1167, 1169,
     1166, 1138, 1172, 1162, 1171, 1139, 1163, 1171, 1165, 1173,
     1174, 1136, 1183, 1193, 1223, 1172, 1169, 1156, 1179, 1176,
     1170, 1167, 1176, 1177, 1178, 1179, 1177, 1178, 1180, 1182,
     1184, 1180, 1182, 1192, 1197, 1195, 1193, 1196, 1200, 1203,
     1205, 1183, 1213, 1173, 1195, 1184, 1174, 1204, 1223, 1208,
     1224, 1192, 1226, 1225, 1196, 1229, 1231, 1197, 1200, 1233,
     1203, 1232, 1233, 1205, 1208, 1204, 1234, 1213, 1235, 1236,
     1237, 1239, 1236, 1237, 1240, 1243, 1245, 1231, 1226, 1232,
     1213, 1260, 1229, 1242, 1224, 1225, 1242, 1235, 1234, 1239,

     1246, 1247, 1248, 1246, 1247, 1248, 1249, 1243, 1245, 1254,
     1255, 1258, 1260, 1240, 1261, 1249, 1262, 1273, 1278, 1254,
     1279, 1261, 1258, 1283, 1281, 1280, 1255, 1279, 1280, 1282,
     1306, 1284, 1262, 1281, 1284, 1285, 1292, 1289, 1282, 1278,
     1289, 1283, 1293, 1299, 1298, 1293, 1273, 1283, 1300, 1301,
     1302, 1310, 1285, 1298, 1301, 1299, 1311, 1300, 1292, 1302,
     1310, 1311, 1313, 1315, 1316, 1313, 1328, 1318, 1319, 1316,
     1318, 1319, 1321, 1315, 1329, 1321, 1334, 1335, 1336, 1338,
     1337, 1336, 1338, 1345, 1339, 1348, 1328, 1339, 1351, 1329,
     1337, 1357, 1335, 1352, 1358, 1360, 1334, 1359, 1352, 1362,

     1357, 1361, 1365, 1363, 1305, 1345, 1366, 1348, 1352, 1351,
     1359, 1304, 1361, 1303, 1358, 1297, 1366, 1360, 1296, 1295,
     1362, 1363, 1294, 1291, 1365, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1374,
     1290, 1288, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1376, 1287,
     1376, 1376, 1286, 1376, 1376, 1376, 1376, 1277, 1376, 1377,

     1276, 1275, 1377, 1377, 1377, 1377, 1377, 1377, 1274, 1377,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1379, 1379, 1379, 1272, 1271, 1379, 1380, 1270, 1269,
     1268, 1380, 1380, 1380, 1380, 1381, 1381, 1267, 1266, 1381,
     1382, 1382, 1265, 1264, 1382, 1383, 1263, 1259, 1257, 1383,
     1383, 1383, 1383, 1384, 1384, 1256, 1253, 1384, 1385, 1385,
     1252, 1251, 1385, 1386, 1386, 1244, 1241, 1386, 1387, 1387,
     1238, 1230, 1387, 1388, 1388, 1228, 1227, 1388, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1390,
     1390, 1391, 1391, 1391, 1392, 1222, 1221, 1392, 1392, 1392,

     1392, 1392, 1393, 1393, 1220, 1219, 1393, 1394, 1394, 1395,
     1395, 1216, 1215, 1395, 1396, 1396, 1397, 1214, 1212, 1397,
     1397, 1397, 1397, 1397, 1398, 1211, 1210, 1398, 1398, 1398,
     1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1401, 1401, 1209, 1207, 1401, 1402,
     1402, 1403, 1403, 1206, 1202, 1403, 1404, 1404, 1405, 1405,
     1201, 1199, 1405, 1406, 1406, 1407, 1407, 1198, 1194, 1407,
     1408, 1408, 1409, 1409, 1191, 1190, 1409, 1410, 1410, 1411,
     1411, 1411, 1188, 1411, 1412, 1412, 1412, 1187, 1412, 1413,

     1186, 1185, 1413, 1413, 1413, 1413, 1413, 1414, 1414, 1181,
     1175, 1414, 1415, 1415, 1161, 1158, 1415, 1416, 1416, 1155,
     1154, 1416, 1417, 1417, 1418, 1418, 1153, 1152, 1418, 1419,
     1419, 1420, 1151, 1150, 1420, 1420, 1420, 1420, 1420, 1421,
     1149, 1147, 1421, 1421, 1421, 1421, 1421, 1422, 1422, 1146,
     1145, 1422, 1423, 1423, 1144, 1143, 1423, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1425, 1425,
     1142, 1141, 1425, 1426, 1426, 1427, 1427, 1137, 1135, 1427,
     1428, 1428, 1429, 1429, 1134, 1133, 1429, 1430, 1430, 1132,
     1130, 1430, 1431, 1431, 1432, 1432, 1128, 1126, 1432, 1433,

     1433, 1434, 1434, 1434, 1125, 1434, 1435, 1435, 1122, 1118,
     1435, 1436, 1436, 1117, 1115, 1436, 1437, 1437, 1114, 1112,
     1437, 1438, 1438, 1109, 1108, 1438, 1439, 1439, 1440, 1440,
     1107, 1102, 1440, 1441, 1441, 1442, 1442, 1101, 1099, 1442,
     1443, 1443, 1444, 1444, 1097, 1095, 1444, 1445, 1445, 1446,
     1093, 1075, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1063,
     1060, 1447, 1448, 1448, 1058, 1056, 1448, 1449, 1449, 1054,
     1052, 1449, 1450, 1450, 1451, 1451, 1051, 1047, 1451, 1452,
     1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1454, 1454, 1046, 1045, 1454, 1455, 1455, 1456,

     1456, 1042, 1041, 1456, 1457, 1457, 1458, 1458, 1039, 1038,
     1458, 1459, 1459, 1460, 1460, 1037, 1035, 1460, 1461, 1461,
     1462, 1462, 1034, 1033, 1462, 1463, 1463, 1032, 1031, 1463,
     1464, 1464, 1465, 1465, 1030, 1027, 1465, 1466, 1466, 1467,
     1467, 1018, 1017, 1467, 1468, 1468, 1469, 1469, 1014, 1010,
     1469, 1470, 1470, 1471, 1471, 1472, 1472, 1473, 1009, 1004,
     1473, 1473, 1473, 1473, 1473, 1474, 1474, 1475, 1475, 1002,
     1000, 1475, 1476, 1476, 1477, 1477,  999,  998, 1477, 1478,
     1478, 1479, 1479,  996,  992, 1479, 1480, 1480, 1481, 1481,
      991,  988, 1481, 1482, 1482, 1483, 1483, 1483, 1483, 1483,

     1483, 1483, 1483, 1483, 1483, 1483, 1484, 1484, 1485, 1485,
     1486, 1486, 1487, 1487, 1488, 1488, 1489, 1489, 1490, 1490,
      983,  981, 1490, 1491, 1491, 1492, 1492,  980,  974, 1492,
     1493, 1493, 1494, 1494,  973,  967, 1494, 1495, 1495, 1496,
     1496,  965,  963, 1496, 1497, 1497, 1498, 1498,  961,  930,
     1498, 1499, 1499,  926,  924, 1499, 1500, 1500, 1501, 1501,
      922,  920, 1501, 1502, 1502, 1503, 1503,  917,  916, 1503,
     1504, 1504, 1505, 1505,  914,  909, 1505, 1506, 1506, 1507,
     1507,  906,  905, 1507, 1508, 1508,  903,  899, 1508, 1509,
     1509,  898,  897, 1509, 1510, 1510,  893,  890, 1510, 1511,

     1511, 1512, 1512,  889,  887, 1512, 1513, 1513,  884,  883,
     1513, 1514, 1514,  881,  880, 1514, 1515, 1515, 1516, 1516,
      879,  876, 1516, 1517, 1517,  875,  874, 1517, 1518, 1518,
     1519, 1519, 1520, 1520,  870,  869, 1520, 1521, 1521,  867,
      866, 1521, 1522, 1522, 1523, 1523,  865,  861, 1523, 1524,
     1524,  859,  857, 1524, 1525, 1525,  855,  854, 1525, 1526,
     1526,  852,  845, 1526, 1527, 1527,  841,  840, 1527, 1528,
     1528,  830,  824, 1528, 1529, 1529,  823,  822, 1529, 1530,
     1530,  817,  813, 1530, 1531, 1531,  807,  802, 1531, 1532,
     1532,  799,  798, 1532, 1533, 1533,  794,  790, 1533,  788,

      787,  786,  758,  754,  752,  750,  748,  747,  746,  745,
      744,  743,  732,  731,  717,  716,  712,  711,  710,  699,
      698,  688,  687,  686,  682,  681,  676,  675,  674,  668,
      667,  666,  662,  661,  658,  656,  655,  654,  652,  650,
      646,  644,  640,  614,  611,  600,  598,  585,  583,  580,
      578,  577,  575,  544,  542,  541,  540,  538,  535,  534,
      532,  529,  528,  511,  510,  508,  505,  504,  502,  494,
      483,  482,  481,  475,  465,  464,  463,  456,  454,  453,
      449,  447,  445,  443,  424,  372,  371,  368,  344,  342,
      340,  338,  337,  332,  321,  320,  309,  299,  298,  272,

      271,  261,  260,  256,  248,  245,  243,  242,  241,  231,
      204,  198,  174,  162,  160,  159,  151,  150,  147,  139,
      136,  135,  131,  101,   98,   97,   94,   93,   91,   84,
       71,   45,   35,   32,   18,   11,    4,    3, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[240] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Thu Jun 27 14:38:27 2024
 * Update Count     : 780
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.hpp"                          // for DeclarationNode
#include "ExpressionNode.hpp"                           // for LabelNode
#include "InitializerNode.hpp"                          // for InitializerNode
#include "ParseNode.hpp"
#include "ParserTypes.hpp"                              // for Token
#include "StatementNode.hpp"                            // for CondCtl, ForCtrl
#include "TypedefTable.hpp"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 1992 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// ' stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}




#line 2009 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define BKQUOTE 2
#define QUOTE 3
#define STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 180 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 2234 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1370 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4139 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 182 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 204 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 207 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 208 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 209 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 212 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 217 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }
	YY_BREAK
/* keywords */
case 10:
YY_RULE_SETUP
#line 220 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 221 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 224 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 225 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CORUN); }				// CFA
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COFOR); }				// CFA
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT16); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32X); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64X); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 108:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COUNTOF); }			// GCC
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 362 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 152:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* numeric constants */
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 373 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 374 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 375 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 378 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 379 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value */
case 162:
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 384 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant */
case 165:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 390 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 168:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 396 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 171:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 402 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 403 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 408 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 409 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATTR); }				// CFA, attribute shorthand
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 185:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 189:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 430 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 452 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 457 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUp); }			// CFA
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 463 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 464 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 465 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 232:
YY_RULE_SETUP
#line 468 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 469 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 470 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 471 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 476 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 237:
YY_RULE_SETUP
#line 503 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 238:
YY_RULE_SETUP
#line 515 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 517 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 3584 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BKQUOTE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1370 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1370 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1369);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 517 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

