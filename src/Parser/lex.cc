
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 244
#define YY_END_OF_BUFFER 245
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1408] =
    {   0,
        0,    0,    0,    0,    0,    0,  168,  168,  171,  171,
      245,  243,    7,    9,    8,  194,  170,  157,  200,  203,
      167,  180,  181,  197,  195,  184,  196,  187,  199,  160,
      161,  185,  186,  205,  207,  206,  208,  176,  157,  178,
      198,  179,  201,  157,  177,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  182,  204,  183,  202,    7,  243,    4,
        4,  244,  168,  169,  175,  171,  172,    7,    9,    0,
        8,  212,  237,  157,    0,  225,  193,  217,  226,  223,
      209,  220,  232,  210,  221,  219,  235,    0,  164,    3,

        0,  224,  163,  160,    0,    0,    0,  160,  160,  160,
      160,  160,  160,    0,    0,  160,  160,  161,  161,  161,
      161,  161,  161,  161,    0,  161,  161,  191,  192,  190,
      213,  215,  211,  216,  214,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  231,  188,  170,  167,  157,  222,    0,    0,
      228,    0,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,    0,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,   50,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,   86,  157,  157,

      157,  157,  157,  104,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  227,  218,  233,    7,    0,
        0,    0,    2,    0,    5,  168,    0,  174,  173,  173,
        0,    0,    0,  171,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  234,  236,  189,  164,  164,    0,  164,  164,  164,
      164,    0,    6,  165,  163,    0,  163,  163,  163,  163,
      160,    0,    0,  159,    0,    0,  165,    0,  160,  160,
      160,  160,  160,  160,  160,  160,    0,    0,    0,  160,

      160,  160,  160,  160,  160,  160,    0,  162,    0,    0,
      161,  161,  161,  161,  161,  161,  161,  161,    0,    0,
        0,  161,  161,  161,  161,  161,  161,  161,    0,  229,
      230,    0,  241,  238,    0,    0,    0,  240,    0,    0,
        0,    0,    0,    0,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  158,
        0,  157,   16,   17,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,   79,

      157,  157,  157,  157,   93,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  133,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
        0,    0,  173,    0,    0,    0,    0,    0,  173,    0,
        0,  242,    0,    0,    0,    0,    0,    0,    0,  164,
        0,  164,    0,    0,    0,    0,    0,  164,  164,    0,
      165,  165,    0,  165,  165,  165,  165,  163,    0,  163,
        0,    0,    0,    0,    0,  163,  163,    0,  159,  159,
      159,  159,  159,  159,  159,    0,  159,  159,  165,  165,

      165,  165,  165,  165,    0,    0,    0,  160,  160,    0,
        0,    0,    0,  160,  160,    0,    0,  162,  162,  162,
      162,  162,  162,  162,  162,    0,  162,  162,    0,    0,
        0,  161,  161,    0,    0,    0,    0,  161,  161,  240,
        0,    0,    0,    0,    0,    0,    0,  239,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  158,    0,
        0,    0,  157,   23,  157,  157,   29,  157,   32,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,

      157,   53,  157,   55,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,   85,  157,  157,   98,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  146,  157,  157,  157,  153,  157,  155,
      157,    0,    0,    0,    0,    0,    0,  173,    0,    0,
        0,    0,    0,  164,  164,    0,  164,  164,    0,    0,
        0,    0,  165,    0,  165,    0,    0,    0,    0,    0,
      165,  165,    0,  163,  163,    0,  163,  163,    0,    0,
        0,    0,  159,  159,  159,  159,  159,  159,  159,  159,

        0,    0,    0,  159,  159,  159,  159,  159,  159,  159,
        0,  165,    0,    0,    0,    0,  165,  165,    0,    0,
        0,    0,    0,    0,    0,  162,  162,  162,  162,  162,
      162,  162,  162,    0,    0,    0,  162,  162,    0,  166,
        0,  162,  162,  162,  162,  162,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  157,
      157,   26,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,   18,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,    0,    0,    0,    0,    0,    0,  157,  157,

       28,   30,  157,  157,   36,   40,  157,  157,   35,  157,
      157,  157,  157,   52,  157,  157,  157,  157,  157,   62,
       63,  157,  157,   82,  157,  157,  157,  157,  100,  103,
      105,  157,  157,  157,  157,  157,  113,  157,  157,  157,
      157,  157,  157,  157,  129,  157,  132,  134,  157,  157,
      157,  140,  157,  157,  157,  157,  157,  157,  154,  157,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      164,    0,  164,  164,  165,  165,    0,  165,  165,    0,
        0,    0,    0,    0,  163,    0,  163,  163,    0,    0,
        0,  159,  159,    0,    0,    0,    0,  159,  159,    0,

      165,  165,    0,    0,    0,    0,    0,  166,    0,    0,
        0,    0,    0,  162,  162,    0,  166,  166,  166,  166,
      166,    0,    0,    0,  162,  162,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  157,    0,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
       88,  157,  157,  157,  157,  157,  157,  157,  157,  157,
        0,    0,    0,    0,    0,    0,    0,    0,  157,  157,
      157,  157,   33,   34,  157,  157,  157,  157,  157,   51,
       54,  157,   58,  157,  157,  157,  157,   80,  157,  157,

       90,   94,  157,  157,  157,  108,  157,  112,  114,  117,
      119,  122,  157,  124,  125,  157,  157,  157,  139,  136,
      157,  157,  157,  150,  157,  157,  156,    0,    1,    0,
        0,  173,    0,    0,    0,    0,  164,    0,  165,    0,
      165,  165,  163,    0,    0,  165,    0,  165,  165,  166,
      166,    0,  166,    0,    0,    0,    0,  166,  166,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      157,  157,   20,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,   19,  157,  157,
      157,  157,   41,  157,  157,  157,  157,  157,  157,  157,

      157,  157,  157,  157,  157,    0,    0,    0,    0,    0,
        0,    0,    0,   10,   12,  157,  157,  157,  157,  118,
       48,   49,  157,  157,   61,  157,   65,   81,  157,   99,
      106,  157,  157,  157,  123,  157,  157,  131,  135,  157,
      145,  157,  151,  157,    0,    0,  165,  165,    0,    0,
      166,  166,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   11,   13,   37,  157,  157,
       68,   69,   71,   84,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,   89,   91,   95,  157,  157,  115,  126,  137,  157,

      157,    0,    0,    0,    0,    0,    0,    0,  157,  157,
       43,  157,  157,  157,   60,   67,  157,  107,  109,  157,
      157,  157,  142,  147,  157,    0,    0,    0,    0,  166,
        0,  166,  166,    0,    0,    0,    0,    0,    0,  157,
      157,  157,   73,   70,   72,  157,  101,  157,  157,  157,
      157,  157,  157,   14,  157,  157,  157,   38,   42,  157,
      157,   64,  157,  157,   97,  157,  157,  157,  157,  157,
        0,    0,    0,    0,  157,  157,   44,   56,  157,   83,
      157,  157,  157,  152,    0,    0,    0,    0,  166,    0,
        0,    0,    0,  157,   45,   46,   74,   87,  157,  157,

      157,  157,   27,  157,  157,  157,  157,  157,  157,  157,
      157,   66,   92,   96,  110,  116,  138,  157,  148,    0,
        0,    0,   25,  157,  157,  157,  157,  157,    0,    0,
        0,    0,    0,    0,   47,  157,  157,  157,  157,  157,
      157,   15,   21,   24,  157,  157,   39,  157,  157,  141,
      157,    0,    0,    0,    0,   31,   59,  157,  157,  130,
        0,    0,    0,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  111,  149,    0,    0,    0,  157,  128,
        0,  157,  127,   75,   76,   77,   78,   22,  157,  157,
       57,    0,  121,  120,  157,  157,  157,  157,  157,  157,

      157,  143,  157,  157,  144,  102,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   56,   51,   57,   11,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,

       69,   70,   71,   72,   73,   11,   74,   75,   76,   77,
       78,   79,   51,   80,   81,   82,   83,   84,   85,   86,
       87,   88,   89,   90,   91,   92,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[93] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    4,    4,    4,    4,    4,    9,
        4,    4,    4,    4,    4,    4,    4,    4,    1,   10,
        1,    1,   11,    1,    8,    8,    8,    8,    8,    8,
        4,    4,    4,    4,    4,    4,    4,    4,    9,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    1,
        1,    1

    } ;

static const flex_int16_t yy_base[1572] =
    {   0,
        0,   91, 4198, 4197,    0,    0,   91,   92,   93,   94,
     4213, 4216,  105, 4216,  111,   84, 4216, 4152,   64,   91,
     4216, 4216, 4216,   85,  105, 4216,  108,  106,  124,  180,
      248, 4175, 4216,  126, 4175,   89,  329,  112,  153, 4216,
      113, 4216,  120,  130, 4145,  105,  134,  113,  172,  165,
      227,  155,   79,  103,  161,  204,  129,  285,  299,  253,
      296,  288,  162, 4216,  129, 4216,  199,  392,  380, 4216,
     4186, 4216,    0, 4216,  418,    0, 4216,  410, 4216,  431,
      446, 4216,  497, 4147,  205, 4216, 4216, 4216, 4216, 4216,
     4169, 4216, 4170, 4167, 4216, 4216, 4168, 4181,  565, 4216,

     4198, 4216,  628,  440,  515,  266,  542,  435,  632,  556,
      260, 4216,  475,  155,  558,  267,  619,    0,  622,  662,
      694,  279, 4216,  679,  249,  559,  706, 4216, 4216, 4216,
     4165, 4216, 4216, 4216, 4164, 4163,  221,  245, 4181,  264,
      355,  273,  340,  389,  393,  421, 4159,  394,  424, 4135,
     4103,  425, 4216, 4216, 4216, 4216,  465, 4216, 4130, 4129,
     4216, 4102,  410,  187,  306,  259,  127,  316,  278,  362,
      135,  417,  746, 4130,  188,  264,  415,  394,  320,  447,
      412,  558,  688,  426,  439,  451,  467,  468,  470,  559,
      501,  560,  477,  132,  514,  258,  469, 4129,  607,  504,

      523,  515,  604, 4128,  601,  703,  539,  662,  695,  602,
      587,  542,  624,  625,  656,  225,  684,  699,  550,  646,
      704,  626,  718,  680,  686, 4216, 4216, 4216,  790,  815,
     4184,  829, 4216,  859, 4216,    0,  800, 4216, 4216,  846,
     4123, 4122, 4121,    0, 4148,  590,  628, 4166,  694,  830,
      788,  751,  800,  812,  841, 4144,  844,  856,  857, 4117,
     4116, 4216, 4216, 4216,  887,  853,  950,  878,  940,  736,
     4115, 4174, 4216, 1003,  917,  975,  916, 1011,  751, 1047,
      993,  450, 1076, 1123,  781, 1100, 1189, 1130,  718, 4216,
      850, 1175,  844, 4216,  864, 1198,  785, 4151, 4148,  994,

      997,  950, 1161,  833,  894, 1218,    0, 1273, 4153, 1339,
      865, 4216,  903, 1303,  869, 4216,  952, 1348,  914, 4148,
     4145, 1010, 1014,  990, 1237,  936, 1037, 1359, 1367, 4216,
     4216, 4134, 4216, 4216,  934, 1005, 4109, 4109,  956, 4105,
        0, 4104,    0, 4075,  760,  934, 1004,  877, 1008, 1014,
      983,  838, 1053, 1075, 1054, 1061, 1052, 1194, 1058, 1084,
     1025, 1077, 1089, 1078, 1082,  790, 1107,  791, 1104, 4105,
     1120, 1103, 4104, 4103, 1129, 1108, 1123, 1124, 1165, 1161,
     1132, 1166, 1178, 1169, 1200, 1120, 1222, 1230, 1179, 1189,
     1210, 1220, 1195, 1249, 1265, 1232, 1246, 1264, 1270, 1289,

     1229, 1284, 1277, 1300, 1351, 1316, 1339, 1340, 1319, 1341,
     1344, 1345, 1347,  862, 1297, 1348, 1228, 1350,  872, 1353,
     1354, 1299, 1357, 1355, 1356, 4102, 1361, 1377, 1418, 1378,
     1379, 1381, 1175, 1382, 1383, 1384, 1385, 1390, 1388, 1391,
     1452, 1455, 1447, 1456, 4098,    0, 4097,    0, 4096,    0,
     4121, 4216, 1451, 1452, 4096, 4093,    0, 4092,    0, 4216,
     1467, 1488, 1551, 1428, 4129, 4126, 4129, 4216, 1475, 1497,
     1560, 1551, 1623, 1519, 1613, 1430, 4088, 4216, 1642, 1676,
     1739, 1477, 4125, 4122, 4125, 4216, 1538, 1666, 1748, 1554,
     1673, 1757, 1482, 4216, 1567, 4084, 1670, 1808, 1869, 1771,

     1685, 1801, 1460, 4083, 1509, 4120, 4117, 1476, 1487, 4113,
     1515, 4117, 4114, 1499, 1547, 1555, 1697, 1934, 1727, 1802,
     1986, 1807, 2000, 1856, 4216, 1446, 1863, 2013, 1525, 4115,
     4112, 1542, 1555, 4108, 1528, 4112, 4109, 1549, 1559, 4075,
     1576, 4071, 4070, 4069,    0, 4068,    0, 4216, 1481, 1598,
     1600, 1557, 1603, 1617, 1618, 1666, 1671, 1602, 1715, 1652,
     1694, 1717, 1676, 1653, 1673, 1718, 1725, 1732, 1729, 1620,
     1793, 1650, 1728, 1757, 1719, 1756, 1782, 1733, 4070, 1778,
     4066, 4065, 1787, 4067, 1796,  503, 4066, 1798, 4065, 1806,
     1762, 1828, 1800, 1841, 1596, 1807, 1852, 1847, 1849, 1846,

     1878, 4064, 1865, 4063, 1862, 1863, 1866, 1891, 1889, 1885,
     1896, 1890, 1919, 1892, 4062, 1812, 1961, 4061, 1909, 1867,
     1954, 1925,  654, 1927, 1972, 1975, 1978, 1980, 1936, 1986,
     1984, 1987, 1996, 2006, 1859, 1985, 1989, 1990, 2011, 2014,
     2001, 2019, 1993, 4060, 2015, 2023, 2021, 4059, 2024, 4058,
     1930, 2086, 2082, 4054,    0, 4053,    0, 4052, 4051, 4050,
        0, 4049,    0, 2089, 4048, 4080, 2052, 2053, 2098, 4084,
     4081, 4084, 4216, 2118, 2152, 2215, 2099, 4081, 4078, 4081,
     4216, 2137, 2161, 2224, 4040, 4072, 2082, 2083, 2125, 4076,
     4073, 4076, 2039, 4216, 2147, 2181, 2077, 4216, 2140, 2202,

     2172, 4073, 4070, 2215, 2218, 2125, 2260, 2004, 2187, 2276,
     2193, 4216, 2179, 4071, 4068, 4071, 4216, 2250, 2287, 4063,
     4062, 2269, 2311, 2280, 1969, 2212, 4216, 2298, 2328, 2238,
     4216, 2273, 2337, 2184, 4066, 4063, 2313, 2315, 2376, 2398,
     2461, 2300, 2361, 2231, 2322, 2389, 4026, 4058, 4057, 4023,
     4022, 4021,    0, 4020,    0, 4019,    0, 4018,    0, 2025,
     2061, 4020, 2098, 2075, 2201, 2295, 2146, 2221, 2209, 2105,
     2198, 2304, 2305, 2318, 1935, 2317, 2354, 2356, 2373, 2312,
     2370, 2260, 2377, 2311, 2393, 2375, 2378, 2381, 2387, 2390,
     2383, 2262, 4016, 4015, 4014,    0, 4013,    0, 2415, 2391,

     4015, 1448, 2394, 2407, 4014, 4013, 2395, 2414, 4012, 2417,
     2422, 2434, 2438, 4011, 2439, 2440, 2441, 2397, 2442, 4010,
     2480, 2445, 2446, 4009, 2454, 2443, 2266, 2453, 4008, 4006,
     4005, 2455, 2456, 2461, 2463, 2465, 4001, 1805,  988, 2154,
     2466, 2467, 2469, 2477, 2487, 2468, 4000, 3996, 2486, 2489,
     2490, 3995, 2475, 2493, 2494, 2496, 2499, 2501, 3991, 2502,
     4047, 3983,    0, 3982,    0, 3978,    0, 3977,    0, 2545,
     2516, 4006, 3949, 3945, 2586, 3967, 3996, 2517, 2519, 2505,
     4000, 3994, 3997, 2595, 2554, 3986, 3929, 3923, 2554, 3983,
     3977, 2549, 2552, 3973, 2556, 3970, 3967, 2533, 2582, 3960,

     2584, 2589, 2557, 3964, 3956, 3959, 2653, 2662, 2725, 3915,
     2562, 3952, 3946, 2583, 2584, 3942, 2671, 2595, 2691, 2715,
     3903, 2568, 3940, 3934, 2596, 2599, 3897,    0, 3893,    0,
     3892,    0, 3888,    0,    0,    0, 3890,    0, 2585, 2528,
     2584, 2534, 2679, 2587, 2588, 2581, 2647, 2651, 2591, 2658,
     2662, 2652, 2663, 2668, 2664, 2592, 2656, 2686, 2684, 2698,
     2702, 2700, 2742, 2709, 2711, 2673, 2710, 2714, 2748, 2713,
     3881,    0, 3880,    0, 3874,    0, 3873,    0, 2716, 2718,
     2719, 2727, 3870, 3869, 2721, 2726, 2733, 2729, 2741, 3863,
     3862, 2734, 3858, 2745, 2722, 2781, 2789, 3857, 2753, 2754,

     3851, 3850, 2755, 2757, 2758, 3844, 2756, 3843, 3837, 3836,
     2759, 3830, 2760, 3829, 2761, 2769, 2766, 2772, 3800, 3799,
     2771, 2779, 2783, 3793, 2773, 2774, 3792, 3843, 4216,    0,
        0, 4216,    0,    0,    0,    0, 3759, 2836, 2797, 3809,
     3752, 3742, 3741, 3788, 3787, 2798, 3781, 3724, 3718, 2877,
     3740, 3767, 4216, 2571, 3771, 3765, 3768, 4216, 2848, 2863,
     3755, 3721,    0, 3715,    0, 3714,    0, 3708,    0, 3707,
     2787, 2809, 3704, 2790, 2820, 2856, 2850, 1681, 2851, 2786,
     2837, 2792, 2849, 2894, 2838, 2862, 2836, 3703, 2869, 2855,
     2870, 2813, 2871, 2872, 2909, 2878, 2882, 2906, 2886, 2884,

     2888, 2895, 2898, 2934, 2900, 3683,    0, 3682,    0, 3676,
        0, 3675,    0, 3674, 3673, 2901, 2904, 2905, 2907, 3669,
     3668, 3660, 2911, 2912, 3659, 2945, 3654, 3653, 2918, 3647,
     3646, 2917, 2916, 2921, 3640, 2927, 2919, 3639, 3633, 2920,
     3632, 2922, 3628, 2933, 3624, 3620, 3596, 3592, 2984, 3647,
     2945, 2952, 2991, 3648, 3639, 3642, 3596, 3595, 3591, 3590,
        0, 3584, 3583, 3577, 3576, 3564, 3563, 3559, 2993, 2973,
     3558, 2941, 2944, 3550, 2961, 2963, 2964, 2968, 3001, 3005,
     2974, 2975, 2976, 2979, 2982, 2989, 2984, 2985, 2990, 3026,
     3029, 3549, 2995, 2996, 3004, 3008, 3011, 3542, 3013, 3024,

     3012, 3538, 3533, 3532, 3526,    0, 3525, 3521, 3000, 3017,
     3523, 3019, 3020, 3021, 3519, 3518, 3022, 3510, 3509, 3025,
     3023, 3030, 3506, 3501, 3032, 3491, 3490, 3484, 3483, 3044,
     3510, 3453, 3447,    0,    0, 3469, 3463, 3462, 3432, 3068,
     3069, 3071, 3035, 3434, 3427, 3036, 3426, 3039, 3048, 3049,
     3050, 3043, 3085, 3052, 3045, 3058, 3056, 3078, 3421, 3062,
     3094, 3420, 3079, 3073, 3414, 3074, 3083, 3084, 3088, 3089,
        0, 3410, 3402, 3401, 3090, 3092, 3385, 3384, 3093, 3380,
     3097, 3099, 3101, 3379, 3372, 3371, 3367, 3366, 3339, 3361,
     3354, 3353, 3352, 3102, 3352, 3351, 3347, 3346, 3103, 3105,

     3140, 3144, 3339, 3145, 3146, 3111, 3116, 3119, 3115, 3120,
     3121, 3338, 3337, 3334, 3126, 3333, 3317, 3127, 3131, 3307,
     3306, 3303, 3301, 3132, 3130, 3143, 3148, 3147, 3295, 3277,
     3276, 3229, 3228, 3227, 3227, 3150, 3155, 3151, 3158, 3162,
     3163, 3225, 3164, 3224, 3168, 3169, 3221, 3170, 3172, 3220,
     3176, 3216, 3133, 2920, 2794, 2538, 2473, 3137, 3171, 2472,
     2407, 2347, 2316, 3177, 3180, 3181, 3182, 3183, 3184, 3185,
     3189, 3187, 3191, 2264, 2158, 2090, 2040, 2038, 3192, 1766,
     1761, 3193, 1720, 1552, 1487, 1408, 1324, 1266, 3196, 3207,
     1212, 1113,  716,  379, 3200, 3198, 3122, 3201, 3202, 3208,

     3210,  340, 3211, 3216,  295,  106, 4216, 3293, 3304, 3315,
     3326, 3334, 3345, 3356, 3367, 3378, 3384, 3392, 3397, 3402,
     3410, 3415, 3420, 3425, 3430, 3435, 3446, 3451, 3454, 3459,
     3464, 3469, 3471, 3476, 3481, 3489, 3500, 3511, 3516, 3521,
     3523, 3528, 3530, 3535, 3537, 3542, 3544, 3549, 3551, 3556,
     3564, 3569, 3574, 3579, 3584, 3586, 3591, 3596, 3604, 3609,
     3614, 3625, 3630, 3635, 3637, 3642, 3644, 3649, 3654, 3656,
     3661, 3663, 3668, 3673, 3678, 3683, 3688, 3690, 3695, 3697,
     3702, 3704, 3709, 3714, 3719, 3724, 3729, 3734, 3736, 3741,
     3749, 3754, 3759, 3761, 3766, 3768, 3773, 3775, 3780, 3782,

     3787, 3792, 3794, 3799, 3801, 3806, 3808, 3813, 3815, 3817,
     3822, 3827, 3829, 3834, 3836, 3841, 3843, 3848, 3850, 3855,
     3863, 3868, 3870, 3872, 3874, 3876, 3878, 3880, 3885, 3887,
     3892, 3894, 3899, 3901, 3906, 3908, 3913, 3918, 3920, 3925,
     3927, 3932, 3934, 3939, 3941, 3946, 3951, 3956, 3961, 3963,
     3968, 3973, 3978, 3980, 3985, 3990, 3992, 3994, 3999, 4004,
     4006, 4011, 4016, 4021, 4026, 4031, 4036, 4041, 4046, 4051,
     4056
    } ;

static const flex_int16_t yy_def[1572] =
    {   0,
     1407,    1, 1408, 1408, 1409, 1409, 1410, 1410, 1411, 1411,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1412, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1412, 1407,
     1407, 1407, 1407, 1412, 1407, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1407, 1407, 1407, 1407, 1407, 1413, 1407,
     1407, 1407, 1414, 1407, 1407, 1415, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1412, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1416, 1407, 1407,   30, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1417,   30, 1407, 1407,   31, 1407, 1407,
     1407, 1407, 1407, 1407,   31, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1418,
     1407, 1407, 1407, 1407, 1407, 1407, 1412, 1407, 1419, 1420,
     1407, 1407, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1421, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,

     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1407, 1407, 1407, 1407, 1413,
     1413, 1413, 1407, 1413, 1407, 1414, 1407, 1407, 1407, 1407,
     1422, 1423, 1424, 1415, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1425,
     1426, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
      265, 1427, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
      115,  281, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1407, 1407, 1428, 1407, 1429, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1430, 1407, 1431,
     1432, 1433, 1434, 1407, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1436,
     1407, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,

     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1437, 1438, 1407, 1407, 1439, 1440, 1441, 1442, 1443, 1444,
     1407, 1407, 1407, 1407, 1407, 1445, 1446, 1447, 1448, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407,  471, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407,  489, 1407, 1407, 1407, 1407,

     1407, 1407, 1407,  499, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1449, 1450, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407,  518, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1451,
     1407, 1452, 1453, 1454, 1455, 1456, 1457, 1407, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1459, 1407,
     1460, 1461, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,

     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1462, 1407, 1463, 1464, 1465, 1466, 1467, 1467, 1468,
     1469, 1470, 1471, 1407,  664, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407,  684, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1472, 1407, 1472, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1473, 1407, 1407, 1474,
     1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1484, 1484,

     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1407,
     1407, 1407, 1407, 1407, 1407,  875, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1500,
     1407, 1407, 1407, 1407, 1407, 1407,  908, 1407, 1407, 1407,
      917, 1407, 1407, 1407, 1407, 1407, 1501, 1502, 1503, 1504,
     1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,

     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1521, 1407, 1522,
     1523, 1407, 1524, 1525, 1526, 1527, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1050, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,

     1511, 1511, 1511, 1511, 1511, 1537, 1538, 1539, 1540, 1541,
     1542, 1543, 1544, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1545, 1546, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1547, 1528, 1548, 1530,
     1549, 1532, 1534, 1550, 1536, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,

     1511, 1551, 1537, 1552, 1539, 1553, 1541, 1543, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1554, 1545, 1555, 1546, 1407,
     1407, 1407, 1407, 1556, 1557, 1548, 1558, 1559, 1550, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1560, 1551, 1552, 1561, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1562, 1554, 1563, 1555, 1407, 1564,
     1565, 1558, 1559, 1511, 1511, 1511, 1511, 1511, 1511, 1511,

     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1566,
     1567, 1561, 1511, 1511, 1511, 1511, 1511, 1511, 1562, 1563,
     1568, 1564, 1569, 1565, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1570, 1566, 1571, 1567, 1511, 1511, 1511, 1511, 1511,
     1548, 1568, 1569, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1552, 1570, 1571, 1511, 1511,
     1548, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1552, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,

     1511, 1511, 1511, 1511, 1511, 1511,    0, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407
    } ;

static const flex_int16_t yy_nxt[4309] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   31,   31,   31,   31,   31,
       31,   32,   33,   34,   35,   36,   37,   38,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   39,   18,   18,
       18,   18,   18,   18,   39,   18,   18,   18,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   18,   53,   18,   54,   55,   18,   56,   18,   57,
       58,   59,   60,   61,   62,   18,   18,   63,   64,   65,
       66,   67,   68,   74,   74,   77,   77,   68,   86,   87,

       69,   77,   77,   88,   74,   74,   78,   79,   80,   80,
       80,   78,   80,   79,   81,   81,   81,   80,   82,   90,
       83,   83,   91,  134,  135,   89,   98,   94,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  129,   85,   92,
      100,   83,   95,   96,   83,  101,  153,  158,  198,  154,
       75,   75,   75,   75,  161,  199,  162,  130,  102,  131,
      132,  155,   85,  226,   85,   85,  156,  159,  163,  164,
      165,  166,   85,  167,  168,  307,  169,  181,  170,  175,
      200,  176,  171,  172,  182,  177,   85,  178,   85,   85,
      183,   85,  173,   85,   85,  160,   93,  206,  179,   97,

      103,  350,  104,  104,  104,  104,  104,  104,  104,  105,
      105,  400,   85,  180,   85,  157,  354,  309,  227,  106,
       85,   85,  107,  196,   85,  108,  109,  110,  111,  112,
      225,   85,  197,  228,  113,   83,  114,  112,  201,  188,
      184,  189,  115,  202,  185,  106,   85,   85,  107,  186,
      190,  116,  109,  187,  117,  332,  111,  333,  112,  260,
      372,  155,  113,   85,  347,  114,  156,  112,  103, 1407,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  332,
      203,  333,  217,  204,   85,  205,   85,  261,  284,  284,
      107,  191,  334,  119,  120,  121,  122,  123,  332,  192,

      333,  193,  124,  428,  194,  123,  289,  332,  195,  333,
      125,  329,   85,  289,  290,  157,  107,   85,   85,  126,
      120,  290,  127,   85,  122,  311,  123,  349,  285,  218,
      124,  373,  289,  312,  402,  123,  136,   85,  111,  289,
      137,  138,  290,  139,   85,  140,  141,   85,  142,  290,
      143,  311,  222,  352,   85,   85,  207,  208,   85,  223,
      224,  312,  144,  145,  146,   85,  209,  210,  219,  211,
      212,  213,  334,  220,  332,   85,  333,  221,  214,   85,
      215,  232,  233,  348,  351,  216,  232,  147,  148,  332,
      149,  333,  150,  229,   79,   80,   80,   80,  229,   85,

      376,  230,  234,  234,  234,  234,  234,  234,  234,  234,
      234,   78,   79,   80,   80,   80,   78,  151,  152,  237,
      238,   85,  335,  332,  237,  333,  239,  332,  332,  333,
      333,  239,   80,   79,   80,   80,   80,   80,   85,  353,
      240,  240,  240,  240,  240,  240,  240,   80,   79,   81,
       81,   81,   80,   85,  239,  332,  336,  333,  332,  332,
      333,  333,  281,  281,  281,  281,  281,  281,  281,   85,
     1407,   85,  241,  155,   85,  375,   85,  239,  156, 1407,
      111,  289,  239,  239,  345,   85,  239,  239,  355,  290,
      374,  346,  378,  379,  239,  387, 1407,  239,   85,  239,

      242,  239,  282,  243,  245, 1407,   85,  289,  246,  247,
       85,  248,  488,  249,  250,  377,  251,  290,  252,  388,
      302,  290,  303,  304,   85, 1407,   85,   85,   85,   85,
      253,  254,  255,  389,  392,  103,   85,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  305,  290,  391,  306,
      403,  304,  393,  390,  399,  256,  257,  107,  258,  286,
       85,  286,   85,   85,  287,  287,  287,  287,  287,  287,
      287,  287,  287,   85,   85,  396,  801,  283, 1407,  297,
      406,  298,   85,  107,  299,  300,  259,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  408, 1407,   85,  407,

      401,   85,  289,  301,  288,  311,  266,  267,  268,   85,
      290,  269,  270,  312, 1407,  270,  416,   85,   85,   85,
      310,  423,  380, 1407,  451,  394,  452,  271,  289,  432,
      122,  311,  266,  267,  268,  381,  397,  269,  290,  270,
      395,  312,  297, 1407,  298,  398,   85,  299,  300,  270,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  422,
       85,   85,  451,   85,  452,  289,   85,  122,  311,  275,
      276,  277,  409,  290,  278,  279,  312,  291,  279,  292,
      293,  404,  421,   85,   85,   85,  294,  410,  405,  425,
      280,  289,  155,  301,  311,  275,  276,  277,  436,  424,

      278,  290,  279,  295,  312,   85,  296,  313,  293,  314,
      315,  426,  279,   85,  294,   85,  316,  319,  433,  320,
      434,   85,  321,  322,  324,  312,  325,  326,  451,  319,
      452,  320,  417,  317,  321,  322,  318,  832,  315,   85,
      311,  323,  427,   85,  316,   85,  429,   85,  312,  418,
      327,  312,  311,  328,   85,  326,  382,  383,   85,  419,
      312,  439,   85,   85,  384,  440,  311,  385,  435,  411,
      386,  430,  290,  412,  420,   85,  312,   85,  311,  431,
      323,  413,  460,  414,  415,  451,  437,  452,  312,  356,
      438,  229,   79,   80,   80,   80,  229,  478,  357,  230,

      290,  237,  238,  284,  284,   85,  237,  452,  460,  510,
      358,  359,  360,  300,  361,  362,  232,  233,  363,   85,
      364,  232,  451,  478,  452,  365,  366,  367,  368,  369,
      232,  233,  549,  453,  451,  232,  452,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  451,  452,  452,   85,
       85,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      441,  233,  574,  577,  451,  441,  452,  442,  443,  443,
      443,  443,  443,  443,  443,  451,  454,  452,  451,  112,
      452,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      451,  451,  452,  452,  460,  293,  460,   85,  294,  460,

      460,  464,  556,  465,  294,  112,  466,  467,  444,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  294,  312,
      460,   85,  460,  316,  460,  460,  294,  460,  266,  267,
      268,   85,  294,  269,  270,  293,   85,  270,  534,  482,
      112,  483,  322,  626,  484,  485,  294,  312,  315,  271,
      460,  316,  552,  631,  266,  267,  268,  316,  478,  269,
      478,  270,  478,  478,  478,  304,  112,  461,  332,  461,
      333,  270,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  468,  123,  469,  478,  316,  478,  468,  478,  478,
      468,  478,  479,   85,  479,  304,  112,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  316,  468,  123,  469,
      542,  550,  463,  103,  468,  281,  281,  281,  281,  281,
      281,  281,  112,  315,  468,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  316,  326,  123,  481,  543,  332,
      289,  333,   85,  289,  472,  473,  474,   85,  290,  475,
      476,  290,  486,  476,  487,  282,  311, 1010,  486,  555,
      311,  486,  123,   85,  312,  477,  289,   85,  312,  289,
      472,  473,  474,   85,  553,  475,  290,  476,  486,  290,
      487,  551,  311,  123,   85,  486,  311,  476,  275,  276,
      277,  554,  312,  278,  279,  486,  312,  279,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  561,  326,  123,
      568,   85,   85,   85,  275,  276,  277,   85,  107,  278,
       85,  279,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  279,  557,  559,   85,  560,   85,   85,  310,  558,
      566,   85,  572,   85,  107,  489,  489,  286,   85,  286,
      573,  569,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  567,   85,   85,  570,  571,   85,   85,  490,  491,
      492,  493,  494,  583,  581, 1407,  585,  495,  575,   85,
      494,  578,   85,   85,  511,  496,  512,  586,   85,  513,
      514,   85,  587,  576,  497,  491,  597,  498,  505,  493,

      506,  494,  582,  507,  508,  495,  584,  112,  515,  590,
      494,  499,  499,  499,  499,  499,  499,  499,  499,  499,
       85,  505,  509,  506,   85,   85,  507,  508,   85,  294,
      500,  588,  501,  112,   85,  502,  503,   85,   85,  503,
      589,  511,  644,  512,  600,  591,  513,  514,   85,  593,
      594,  504,  294,   85,   85,  592,  500,  294,  501,   85,
      535,  502,  536,  503,  112,  537,  538,  601,  562,   85,
      604,   85,  509,  503,  563,  564,  565,  595,  602,   85,
      294,   85,  596,  123,  539,  603,  598,   85,   85,   85,
      112,   85,  515,  517,  599,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  629,   85,  607,  613,   85,  123,
      608,  518,  518,  518,  518,  518,  518,  605,  519,  520,
      521,  522,  523,   85,   85,   85,  529,  524,  530,   85,
      525,  531,  532,  606,  610,  526,   85,  518,  518,  518,
      518,  518,  518,   85,  527,  520,  609,  528,   85,  522,
      533,  523,  614,  611,  615,  524,   85,  316,   85,   85,
      525,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      612,  529,  616,  530,  617,   85,  531,  532,   85,  627,
      634,  621,  535,   85,  536,  316,  618,  537,  538,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   85,   85,

       85,  310,  316,   85,   85,  123,   85,   85,  620,   85,
       85,  619,   85,   85,   85,   85,   85,  624,  630,  622,
       85,  623,  533,  637,  625,  635,  155,  628,  638,  329,
      316,  123,  633,  539,  636,  632,   85,   85,   85,  639,
       85,   85,   85,   85,   85,  640,  645,   85,  646,   85,
       85,  642,  666,  441,  233,  641,  270,  233,  441,  650,
      442,  648,  643,  231,  649,  647, 1407,   85,  651,  239,
      239,  239,  239,  239,  239,  239,  673,   85,  443,  443,
      443,  443,  443,  443,  443,  451,  451,  452,  452,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  669,  982,

      670,  686,  673,  671,  672,  279,  712,   85,  747,  653,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  693,  266,
      294,  268,  712,  720,  269,  270,  694,  508,  270,  721,
       85,  294,  677,  514,  678,  112,   85,  679,  680,  748,
      665,  760,  749,  532,  693,  266,  538,  268,  294,  470,
      269,  689,  270,  690,  694,  673,  691,  692,  461,  294,
      461,  112,  270,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  673,  673,  112,  673,  123,  316,  673,  673,  493,

      693,  472,  473,  474,  723,  123,  475,  476,  694,  316,
      476,   85,  706,  694,  707,  708,   85,  724,  673,  112,
      673,  123,  477,  673,  316,  673,  693,  472,  473,  474,
      750,  123,  475,  723,  476,  763,  694,  316,  709,  694,
      674,  710,  674,  708,  476,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  681,   85,  682,   85,  751,   85,
      681,   85,   85,  681,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  761,  762,  764,   85,   85,  808,   85,
      681,  765,  682,  769,  783,  676,  766,  681,  281,  281,
      281,  281,  281,  281,  281,  105,  105,  681,  684,  684,

      684,  684,  684,  684,  684,  684,  684, 1173,  713,   85,
      714,   85,   85,  715,  716,  786,  693,  275,  695,  277,
      696,  697,  278,  279,  694,   85,  279,  698,  488,  771,
       85,  712,   85,  772,  776,   85,  767,  773,  685,  768,
       85,  493,  693,  275,  699,  277,  723,  700,  278,  697,
      279,  775,  694,   85,  777,  698,  479,  712,  479,  725,
      279,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      489,  489,  522,  726,   85,  723,   85,   85,   85,   85,
      701,  727,  702,  770,   85,  703,  704,   85,   85,  774,
      778,   85,   85,  490,  491,  492,  493,  494,  789,  726,

      779,  780,  495,  693,  705,  494,  782,  792,  787,  727,
      496,  694,  712,  781,  712,   85,   85,  712,  712,  497,
      491,   85,  498, 1407,  493,   85,  494,  788,  804,  693,
      495,  701,  793,  702,  790,  494,  703,  704,  712,  694,
      712,   85,  717,  712,  718,  712,   85,  728,  717,  729,
      730,  717,   85,  726,  693,   85,  731,   85,  791,   85,
      794,  727,  694,  799,   85,   85,   85,  784,  717,  802,
      718,   85, 1009,  732,  785,  717,  733,  800,  730,  726,
      693,  806,  705,  809,  731,  717,  803,   85,  826,  727,
      694,  499,  499,  499,  499,  499,  499,  499,  499,  499,

       85,  742,  727,  743,  744,   85,   85,  805,   85,  726,
      500,   85,  501,  807,  812,  502,  503,  727,   85,  503,
      813,   85,   85,  844,   85,   85,   85,  745,  727,  811,
      746,  504,  744,  810,  522,  726,  500,   85,  501,  815,
      816,  502,  817,  503,   85,  727,  814,  818,   85,   85,
       85,   85,  829,  503,  517,   85,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  819,  821,  820,   85,  823,
      822,  825,  518,  518,  518,  518,  518,  518,   85,  519,
      520,  521,  522,  523,   85,  827,   85,  824,  524,   85,
      828,  525,  860,  831,   85,   85,  526,  953,  518,  518,

      518,  518,  518,  518,  838,  527,  520,  833,  528,  734,
      522,  735,  523,   85,  736,  737,  524,  739,  723,  739,
       85,  525,  740,  740,  740,  740,  740,  740,  740,  740,
      740,   85,  726,  738,   85,  830,  734,   85,  735,   85,
      727,  736,  737,   85,   85,   85,   85,  723,   85,   85,
      494,  834,   85,  841,  835,   85,  840,  836,  726,  726,
       85,  837,  741,  839,  842,   85,  846,  727,  727,  845,
       85,  847,  843,   85,   85,  854,  494,  852,   85,  848,
       85,  849,   85,   85,   85,  726,  850,  738,  233,  853,
      857,  851,  859,  694,  861,  727,  855,  856,  460,  460,

     1407,  939, 1407,  858,  239,  239,  239,  239,  239,  239,
      239,  664,  664,  664,  664,  664,  664,  664,  664,  664,
       85,  694,  872,  877,  460,  460,  468,  476,  478,  478,
      266,  698,  268,  940,   85,  269,  270,  270,  270,  270,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  886,
      942,  665, 1392,  486,  478,  478,  266,   85,  268,  698,
      880,  269,  881,  270,   85,  882,  883,  279,  279,  948,
      708,  494,  941,  270,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  697,  472,  698,  474,  894,  494,  475,  476,

      704,  698,  476,  900,  889,   85,  890,  503,  916,  891,
      892,  697,  737,   85,  876,  489,  489,   85,  945,  472,
     1011,  474,  698,  683,  475,  889,  476,  890,  893,  698,
      891,  892,  674,  494,  674,  698,  476,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  711,  698,   85,  708,  494,
       85,  693,  949,  698,  693,  275,  727,  277,   85,  694,
      278,  279,  694,  903,  279,  904,  893,  525,  905,  906,
       85,  947,  943,  895,  698,  896,  685,  693,  897,  898,
      693,  275,  731,  277,  727, 1002,  278,  694,  279,  895,

      694,  896,  946,  525,  897,  898,  494,  899,  279,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  723,   85,
      731,   85,  494,   85,  960,   85,  970,  731,  907,  723,
      907,  724,  494,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  910,  730,  730,  744,  525,  723,  494,  719,
      899,  911,  731,  912,   85,  731,  913,  914,  723,  726,
      911,  726,  912,   85,   85,  913,  914,  727,  525,  727,
       85,   85,  525,  909,  944,  915,   85,   85, 1407,  951,
      731,  950,  731,  962,  922,  726,  923,  726,  952,  924,
      925,  731,  958,  744,  525,  727,  954,  727,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  525,  926, 1407,
      731,  915,  922,   85,  923,   85,  963,  924,  925,  731,
      917,  917,  917,  917,  917,  917,  917,  917,  917,   85,
      956,  955,   85,  525,   85,  525,   85,   85,  959,  918,
       85,  919,   85,  964,  920,  918,   85,  961,  918,   85,
       85,  957,   85,   85,   85,  967,   85,  966,  968,  965,
      921,  525,  983,  926,  969,  918,   85,  919,  994, 1381,
      920,  985,  918,   85,   85,  984,   85,  981,  739,  979,
      739,   85,  918,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  980,   85,  987,  986,  988,   85,   85,   85,

       85,   85,   85,  996,   85,   85,  990,  991,  989,  997,
      999, 1001,   85,   85,   85,   85,  995,  993, 1000,  998,
       85,  992,   85, 1004,   85,   85,   85,   85,   85, 1040,
     1003,   85,   85,  681,   85, 1007,   85, 1005, 1016,   85,
     1014, 1008, 1006, 1013, 1015,   85,   85, 1012,   85,   85,
     1017, 1021,   85,   85, 1018,   85, 1019, 1022,   85, 1020,
       85,   85,  460,  673, 1024,  673, 1023,  664,  664,  664,
      664,  664,  664,  664,  664,  664, 1025, 1026, 1044,  494,
     1045, 1047,  892, 1027,  898,  717, 1052,   85,  460,  673,
      914,  673, 1061,   85, 1073, 1150,  925,   85, 1075,  918,

      478,  270,  476,  698,  476,  494,  698,  870,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  478,  472,  494,  474,
      712,  698,  475,  476,  698,  712,  476,  731,  731,  279,
       85, 1053,  525,   85,   85,  525,   85,   85,  876, 1071,
       85,   85, 1074,  472,  494,  474,  712,  884,  475, 1079,
      476,  712, 1072, 1081, 1080,  731,  731, 1053,  525,  503,
      476,  525, 1084, 1091,  503,  908,  908,  908,  908,  908,
      908,  908,  908,  908, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050,  917,  917,  917,  917,  917,  917,  917,

      917,  917, 1076,  918, 1077,  919,   85, 1078,  920,  918,
       85,   85,  918, 1082, 1054,   85, 1055,   85, 1083, 1056,
     1057,   85,   85,   85, 1051, 1088, 1090,   85, 1087,  918,
     1092,  919,   85,  921,  920, 1085,  918, 1053,   85, 1086,
     1089, 1101,  907,   85,  907,   85,  918,  908,  908,  908,
      908,  908,  908,  908,  908,  908, 1058,   85, 1059,   85,
     1094,   85, 1058, 1053, 1096, 1058, 1098, 1093,   85,   85,
       85, 1104,   85,   85, 1102,   85, 1097,   85,   85, 1095,
       85,   85, 1058, 1099, 1059,   85,   85, 1115,   85, 1058,
     1100, 1103,   85,   85, 1105, 1117, 1114, 1116, 1119, 1058,

       85,   85, 1120, 1118,   85, 1126, 1123,   85, 1125, 1122,
     1121, 1127,   85,   85,   85,   85,   85,   85,   85,   85,
       85, 1134, 1133, 1136, 1124,   85, 1132, 1135,   85, 1128,
       85,   85,   85,   85, 1130, 1129, 1131, 1137,   85, 1140,
       85, 1139,   85,  673,  712,   85,   85, 1138,   85,   85,
     1175,   85, 1143, 1141, 1177, 1144, 1407, 1142,  875,  875,
      875,  875,  875,  875,  875,  875,  875, 1166,   85,  673,
      712, 1153,   85, 1154, 1172, 1168, 1155, 1156, 1167,   85,
     1170, 1187,  476,  503, 1171,  917,  917,  917,  917,  917,
      917,  917,  917,  917, 1169,   85,   85,   85, 1038, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,   85,   85,
       85, 1178, 1181, 1183,   85,   85, 1176, 1174,  918, 1179,
      919,   85, 1180,  920,  918, 1060, 1182,  918,   85,   85,
       85,   85, 1190, 1188, 1184, 1194, 1185,   85, 1191, 1051,
     1192,   85, 1186,   85,  918,   85,  919,   85, 1195,  920,
     1193,  918, 1189,   85,   85, 1197, 1196,   85, 1200,   85,
       85,  918, 1198,   85,   85,   85,   85, 1199,   85, 1209,
       85,   85, 1201, 1211, 1216,   85,   85,   85,   85,   85,
       85,   85, 1378, 1212, 1210, 1220,   85, 1223, 1213, 1214,
     1224, 1053,   85,   85, 1215, 1217, 1218, 1219, 1053, 1222,

       85, 1221, 1243,   85,   85, 1225, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1231, 1240, 1053, 1241, 1058,
       85, 1242,   85,   85, 1053, 1250, 1244,   85, 1248, 1245,
      918, 1251,   85,   85,   85,   85, 1252,  918,   85, 1247,
     1246,   85, 1249,   85,   85, 1254, 1149, 1259,   85,   85,
     1261, 1262,   85, 1269,   85,   85, 1253, 1263, 1264,   85,
       85, 1255, 1260,   85,   85, 1257, 1265,   85, 1256, 1258,
       85,   85,   85, 1267, 1266, 1268,   85, 1275,   85,   85,
       85,   85,   85,   85,   85,   85, 1270, 1277,   85,   85,
     1053,   85, 1294, 1295,   85,   85, 1278, 1296,   85, 1276,

     1282, 1280,   85, 1279,   85, 1281, 1284,   85,   85,   85,
     1304,   85, 1283, 1305, 1306,   85, 1053,   85, 1309, 1299,
     1297,   85, 1298, 1312, 1303, 1300, 1307,   85,   85,  918,
       85, 1335,   85,   85, 1301, 1302, 1308,   85,   85, 1311,
     1310, 1313,   85,   85,   85, 1316, 1317,   85,   85,   85,
     1318,   85,   85,   85, 1314, 1315,   85, 1319,   85, 1323,
       85,   85,   85, 1325,   85, 1327, 1338, 1324, 1339, 1340,
       85, 1337, 1341, 1342,   85,   85, 1328, 1326,   85,   85,
       85,   85, 1347, 1336, 1343,   85,   85, 1344, 1349,   85,
       85,   85, 1345, 1351, 1400, 1407,   85, 1348, 1346,   85,

     1356, 1357,   85,   85,   85,   85,   85,   85, 1350,   85,
       85, 1358, 1359, 1366,   85, 1360, 1379,   85, 1364, 1365,
     1367,   85,   85,   85, 1368, 1369, 1370,   85,   85,   85,
       85,   85, 1373, 1372, 1374,   85,   85, 1371, 1375,   85,
       85,   85,   85,   85,   85, 1380,   85, 1388,   85, 1390,
       85,   85,   85, 1391, 1383,   85, 1382,   85, 1389,   85,
       85,   85, 1384, 1385, 1386, 1387,   85,   85, 1398,   85,
       85, 1396, 1402, 1393, 1394,   85, 1395, 1399, 1377,   85,
       85, 1397, 1401,   85,   85, 1406,   85, 1404, 1403, 1407,
     1363, 1407, 1405,   70,   70,   70,   70,   70,   70,   70,

       70,   70,   70,   70,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   84, 1362, 1407,
       84,   84,   84,   84,   84,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  236, 1407,  236,  236,
       85,  236,  236,  236,  236, 1407,  236,  244, 1355, 1353,
      244,  244,  244,  244,  244,  244,   85,  244,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  308,
      308,  308,   85,   85,  308,  338,   85,   85,   85,  338,

      338,  338,  338,  340,  340,   85,   85,  340,  342,  342,
       85,   85,  342,  370, 1407, 1407, 1334,  370,  370,  370,
      370,  445,  445, 1332, 1058,  445,  447,  447, 1407, 1330,
      447,  449,  449, 1407, 1329,  449,  456,  456,   85,   85,
      456,  458,  458,   85,   85,  458,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  516,  516,  308,
      308,  308,  540, 1322, 1407,  540,  540,  540,  540,  540,
      544,  544, 1407,   85,  544,  340,  340,  546,  546,   85,
       85,  546,  342,  342,   84,   85,   85,   84,   84,   84,
       84,   84,  579,   85, 1407,  579,  579,  579,  579,  579,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  654,  654, 1293, 1292,  654,  445,  445,  656,
      656, 1407, 1058,  656,  447,  447,  658,  658, 1058, 1289,
      658,  449,  449,  660,  660, 1407, 1288,  660,  456,  456,
      662,  662, 1407, 1286,  662,  458,  458,  722,  722,  722,
       85,  722,  516,  516,  516,   85,  516,  540,   85,   85,
      540,  540,  540,  540,  540,  752,  752,   85,   85,  752,
      754,  754,   85, 1407,  754,  756,  756, 1407, 1407,  756,
      544,  544,  758,  758, 1273, 1407,  758,  546,  546,   84,

     1272,   85,   84,   84,   84,   84,   84,  579,   85,   85,
      579,  579,  579,  579,  579,  795,  795,   85,   85,  795,
      797,  797,   85,   85,  797,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  862,  862, 1407, 1239,
      862,  654,  654,  864,  864, 1407, 1407,  864,  656,  656,
      658,  658, 1407, 1236,  658,  866,  866, 1407, 1235,  866,
      660,  660,  868,  868, 1058, 1233,  868,  662,  662,  722,
      722,  722, 1232,  722,  518,  518, 1230,  717,  518,  927,
      927,  681, 1229,  927,  929,  929, 1227,   85,  929,  931,
      931,   85,   85,  931,  752,  752,  933,  933,   85,   85,

      933,  754,  754,  935,  935,   85,   85,  935,  756,  756,
      937,  937,   85,   85,  937,  758,  758,   84,   85,   85,
       84,   84,   84,   84,   84,  971,  971,   85,   85,  971,
      973,  973,   85,   85,  973,  975,  975, 1208, 1207,  975,
      795,  795,  977,  977, 1205, 1203,  977,  797,  797, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1030, 1030,   85,   85, 1030,  862,  862, 1032, 1032, 1165,
     1163, 1032,  864,  864, 1034, 1034, 1162, 1160, 1034,  866,
      866,   84,   84, 1158,  925,   84,  868,  868,  722,  722,
      918, 1152,  722, 1062, 1062, 1151,  914, 1062,  927,  927,

     1064, 1064, 1149,  717, 1064,  929,  929, 1066, 1066,  717,
     1148, 1066,  931,  931, 1068, 1068,  898,  892, 1068,  933,
      933, 1070, 1070,  935,  935,   84,  486,  681,   84,   84,
       84,   84,   84,  937,  937, 1106, 1106,  681, 1147, 1106,
      971,  971, 1108, 1108,  468, 1029, 1108,  973,  973, 1110,
     1110,   85,   85, 1110,  975,  975, 1112, 1112,   85,   85,
     1112,  977,  977, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1145, 1145, 1030, 1030, 1032, 1032,
     1146, 1146, 1034, 1034,   84,   84, 1157, 1157,   85,   85,
     1157, 1062, 1062, 1159, 1159,   85,   85, 1159, 1064, 1064,

     1161, 1161,   85,   85, 1161, 1066, 1066,  338,  338,   85,
       85,  338, 1068, 1068, 1164, 1164,   85,   85, 1164, 1202,
     1202,   85,   85, 1202, 1106, 1106, 1204, 1204,   85,   85,
     1204, 1108, 1108, 1206, 1206, 1113, 1111, 1206, 1110, 1110,
      370,  370, 1109, 1107,  370, 1112, 1112, 1226, 1226,   85,
     1069, 1226, 1228, 1228, 1067, 1065, 1228, 1234, 1234, 1063,
      925, 1234,  540,  540,  925, 1060,  540, 1237, 1237, 1238,
     1238,  737,  914, 1238, 1271, 1271,  914,  910, 1271,  579,
      579,  717, 1049,  579, 1274, 1274, 1285, 1285, 1048, 1046,
     1285, 1287, 1287,  898,  898, 1287, 1290, 1290, 1234, 1234,

     1291, 1291,  704,  892, 1291,  937,  937,  892,  486,  937,
     1320, 1320, 1321, 1321,  486, 1043, 1321, 1032, 1032,  681,
     1042, 1032,   84,   84, 1041, 1039,   84, 1331, 1331, 1038,
      468, 1331, 1333, 1333,  468, 1037, 1333, 1352, 1352, 1036,
     1035, 1352, 1354, 1354, 1033, 1031, 1354, 1361, 1361, 1029,
       85, 1361,  338,  338,   85,   85,  338, 1376, 1376,   85,
       85, 1376,  370,  370,   85,   85,  370,   85,   85,   85,
       85,   85,   85,   85,   85,  978,  976,  974,  972,   85,
      938,  936,  934,  932,  930,  928,  538,  532,  747,  737,
      737,  514,  508,  503,  902,  901,  704,  704,  486,  888,

      887,  885,  884,  476,  879,  878,  468,  874,  873,  871,
      870,  869,  867,  659,  659,  865,  863,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  798,  796,  580,
      759,  757,  755,  753,  541,  538,  538,  322,  532,  532,
      514,  514,  300,  508,  508,  719,  711,  279,  688,  687,
      683,  270,  668,  667,  663,  661,  452,  452,  659,  657,
      655,   85,   85,   85,  580,  548,  547,  545,  541,  334,
      333,  322,  322,  307,  300,  300,  273,  470,  459,  457,
      455,  452,  451,  450,  448,  446,  233,   85,   85,  371,
      344,  343,  341,  334,  339,  337,  334,  332,  331,  330,

      273,  264,  263,   83,  262,   83,   85,  235,  174,  133,
      128,   85, 1407,   71,   71,   11, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407
    } ;

static const flex_int16_t yy_chk[4309] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    7,    8,    9,   10,    2,   19,   19,

        2,    9,   10,   20,    7,    8,   13,   13,   13,   13,
       13,   13,   15,   15,   15,   15,   15,   15,   16,   24,
       16,   24,   25,   36,   36,   20,   28,   27,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   34,   53,   25,
       29,   25,   27,   27,   27,   29,   38,   41,   53,   38,
        7,    8,    9,   10,   43,   53,   43,   34,   29,   34,
       34,   39,   54,   65,   46, 1406,   39,   41,   44,   44,
       44,   44,   48,   44,   44,  114,   44,   48,   44,   46,
       54,   46,   44,   44,   48,   46,  167,   46,   57,   44,
       48,  194,   44,   47,  171,   41,   25,   57,   47,   27,

       30,  167,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  194,   39,   47,   52,   39,  171,  114,   65,   30,
       55,   63,   30,   52,   50,   30,   30,   30,   30,   30,
       63,   49,   52,   67,   30,   67,   30,   30,   55,   50,
       49,   50,   30,   55,   49,   30,  164,  175,   30,   49,
       50,   30,   30,   49,   30,  137,   30,  137,   30,   85,
      175,   60,   30,   56,  164,   30,   60,   30,   31,  125,
       31,   31,   31,   31,   31,   31,   31,   31,   31,  138,
       56,  138,   60,   56,  216,   56,   51,   85,  106,  106,
       31,   51,  142,   31,   31,   31,   31,   31,  140,   51,

      140,   51,   31,  216,   51,   31,  111,  142,   51,  142,
       31,  125,   60,  116,  111,   60,   31,  196,  166,   31,
       31,  116,   31,  176,   31,  122,   31,  166,  106,   60,
       31,  176,  111,  122,  196,   31,   37,  169,  116,  116,
       37,   37,  111,   37,   58,   37,   37,   62,   37,  116,
       37,  122,   62,  169, 1405,   61,   58,   58,   59,   62,
       62,  122,   37,   37,   37,  165,   58,   58,   61,   58,
       59,   59,  141,   61,  143,  168,  143,   61,   59,  179,
       59,   69,   69,  165,  168,   59,   69,   37,   37,  141,
       37,  141,   37,   68,   68,   68,   68,   68,   68, 1402,

      179,   68,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   78,   78,   78,   78,   78,   78,   37,   37,   75,
       75,  170,  144,  144,   75,  144,   75,  145,  148,  145,
      148,   75,   80,   80,   80,   80,   80,   80, 1394,  170,
       75,   75,   75,   75,   75,   75,   75,   81,   81,   81,
       81,   81,   81,  178,   75,  146,  146,  146,  149,  152,
      149,  152,  104,  104,  104,  104,  104,  104,  104,  163,
      282,  181,   75,  157,  177,  178,  172,   75,  157,  104,
      108,  108,   75,   75,  163,  184,   75,   75,  172,  108,
      177,  163,  181,  181,   75,  184,  104,   75,  185,   75,

       75,   75,  104,   75,   83,  104,  180,  108,   83,   83,
      186,   83,  282,   83,   83,  180,   83,  108,   83,  185,
      113,  113,  113,  113,  157,  104,  187,  188,  197,  189,
       83,   83,   83,  186,  189,  105,  193,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  113,  113,  188,  113,
      197,  113,  189,  187,  193,   83,   83,  105,   83,  107,
      191,  107,  586,  200,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  195,  202,  191,  586,  105,  115,  110,
      200,  110,  201,  105,  110,  110,   83,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  202,  115,  207,  201,

      195,  212,  110,  110,  107,  126,   99,   99,   99,  219,
      110,   99,   99,  126,  115,   99,  207,  182,  190,  192,
      115,  212,  182,  115,  246,  190,  246,   99,  110,  219,
      126,  126,   99,   99,   99,  182,  192,   99,  110,   99,
      190,  126,  117,  115,  117,  192,  211,  117,  117,   99,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  211,
      205,  210,  247,  203,  247,  117,  199,  119,  119,  103,
      103,  103,  203,  117,  103,  103,  119,  109,  103,  109,
      109,  199,  210,  213,  214,  222,  109,  205,  199,  214,
      103,  117,  217,  117,  119,  103,  103,  103,  222,  213,

      103,  117,  103,  109,  119,  220,  109,  120,  109,  120,
      120,  214,  103,  623,  109,  215,  120,  121,  220,  121,
      220,  208,  121,  121,  124,  124,  124,  124,  249,  127,
      249,  127,  208,  120,  127,  127,  120,  623,  120,  224,
      121,  121,  215,  217,  120,  225,  217,  183,  121,  208,
      124,  124,  127,  124,  209,  124,  183,  183,  218,  209,
      127,  224,  206,  221,  183,  225,  121,  183,  221,  206,
      183,  218,  289,  206,  209, 1393,  121,  223,  127,  218,
      127,  206,  270,  206,  206,  252,  223,  252,  127,  173,
      223,  229,  229,  229,  229,  229,  229,  279,  173,  229,

      289,  237,  237,  285,  285,  173,  237,  251,  270,  297,
      173,  173,  173,  297,  173,  173,  230,  230,  173,  345,
      173,  230,  251,  279,  251,  173,  173,  173,  173,  173,
      232,  232,  345,  253,  253,  232,  253,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  254,  250,  254,  366,
      368,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      234,  234,  366,  368,  250,  234,  250,  234,  240,  240,
      240,  240,  240,  240,  240,  255,  255,  255,  257,  304,
      257,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      258,  259,  258,  259,  266,  291,  266,  352,  293,  266,

      266,  268,  352,  268,  291,  304,  268,  268,  240,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  295,  311,
      266,  414,  266,  315,  268,  266,  293,  266,  265,  265,
      265,  419,  291,  265,  265,  295,  348,  265,  319,  277,
      305,  277,  319,  414,  277,  277,  295,  311,  313,  265,
      268,  315,  348,  419,  265,  265,  265,  313,  275,  265,
      275,  265,  277,  275,  275,  305,  305,  267,  335,  267,
      335,  265,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  269,  326,  269,  275,  313,  275,  269,  277,  275,
      269,  275,  276,  346,  276,  302,  302,  276,  276,  276,

      276,  276,  276,  276,  276,  276,  317,  269,  326,  269,
      339,  346,  267,  281,  269,  281,  281,  281,  281,  281,
      281,  281,  302,  317,  269,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  317,  324,  324,  276,  339,  336,
      300,  336,  351,  301,  274,  274,  274,  839,  300,  274,
      274,  301,  278,  274,  278,  281,  322,  839,  278,  351,
      323,  278,  324,  347,  322,  274,  300,  349,  323,  301,
      274,  274,  274,  350,  349,  274,  300,  274,  278,  301,
      278,  347,  322,  327,  361,  278,  323,  274,  280,  280,
      280,  350,  322,  280,  280,  278,  323,  280,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  357,  327,  327,
      361,  357,  353,  355,  280,  280,  280,  359,  283,  280,
      356,  280,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  280,  353,  355,  354,  356,  362,  364,  283,  354,
      359,  365,  364,  360,  283,  284,  284,  288,  363,  288,
      365,  362,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  360,  372,  369,  363,  363,  367,  376,  284,  284,
      284,  284,  284,  372,  371, 1392,  376,  284,  367,  386,
      284,  369,  377,  378,  303,  284,  303,  377,  375,  303,
      303,  381,  378,  367,  284,  284,  386,  284,  292,  284,

      292,  284,  371,  292,  292,  284,  375,  303,  303,  381,
      284,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      380,  296,  292,  296,  379,  382,  296,  296,  384,  292,
      287,  379,  287,  303,  433,  287,  287,  383,  389,  287,
      380,  306,  433,  306,  389,  382,  306,  306,  390,  384,
      384,  287,  296,  358,  393,  383,  287,  292,  287,  385,
      325,  287,  325,  287,  306,  325,  325,  390,  358,  391,
      393, 1391,  296,  287,  358,  358,  358,  385,  391,  392,
      296,  387,  385,  325,  325,  392,  387,  417,  401,  388,
      306,  396,  306,  308,  388,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  417,  397,  396,  401,  394,  325,
      397,  308,  308,  308,  308,  308,  308,  394,  308,  308,
      308,  308,  308,  398,  395, 1388,  314,  308,  314,  399,
      308,  314,  314,  395,  399,  308,  403,  308,  308,  308,
      308,  308,  308,  402,  308,  308,  398,  308,  400,  308,
      314,  308,  402,  400,  403,  308,  415,  314,  422,  404,
      308,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      400,  318,  404,  318,  405,  406,  318,  318,  409,  415,
      422,  409,  328, 1387,  328,  314,  406,  328,  328,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  407,  408,

      410,  310,  318,  411,  412,  328,  413,  416,  408,  418,
      405,  407,  420,  421,  424,  425,  423,  412,  418,  410,
      427,  411,  318,  424,  413,  423,  429,  416,  425,  329,
      318,  328,  421,  328,  423,  420,  428,  430,  431,  427,
      432,  434,  435,  436,  437,  428,  434,  439,  435,  438,
      440,  431,  464,  441,  441,  430,  464,  442,  441,  439,
      441,  437,  432,  442,  438,  436,  526, 1386,  440,  443,
      443,  443,  443,  443,  443,  443,  476,  429,  444,  444,
      444,  444,  444,  444,  444,  453,  454,  453,  454,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  469,  802,

      469,  482,  476,  469,  469,  482,  503,  802,  526,  443,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  493,  462,
      508,  462,  503,  505,  462,  462,  493,  505,  462,  511,
      549,  509,  474,  511,  474,  514, 1385,  474,  474,  529,
      462,  549,  535,  529,  493,  462,  535,  462,  508,  470,
      462,  487,  462,  487,  493,  474,  487,  487,  463,  509,
      463,  514,  462,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  474,  472,  515,  472,  538,  532,  472,  472,  490,

      490,  471,  471,  471,  516,  539,  471,  471,  490,  533,
      471, 1384,  495,  495,  495,  495,  552,  516,  472,  515,
      472,  538,  471,  472,  532,  472,  490,  471,  471,  471,
      541,  539,  471,  516,  471,  552,  490,  533,  495,  495,
      473,  495,  473,  495,  471,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  475,  595,  475,  550,  541,  551,
      475,  558,  553,  475,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  550,  551,  553,  554,  555,  595,  570,
      475,  554,  475,  558,  570,  473,  555,  475,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  475,  480,  480,

      480,  480,  480,  480,  480,  480,  480, 1078,  501,  572,
      501,  560,  564,  501,  501,  572,  497,  480,  491,  480,
      491,  491,  480,  480,  497,  556,  480,  491,  488,  560,
      557,  501,  565,  561,  564,  563,  556,  561,  480,  557,
     1078,  497,  497,  480,  491,  480,  517,  491,  480,  491,
      480,  563,  497,  561,  565,  491,  481,  501,  481,  517,
      480,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      489,  489,  519,  519,  559,  517,  562,  566,  575, 1383,
      492,  519,  492,  559,  567,  492,  492,  573,  569,  562,
      566,  568,  578,  489,  489,  489,  489,  489,  575,  519,

      567,  567,  489,  492,  492,  489,  569,  578,  573,  519,
      489,  492,  500,  568,  500,  576,  574,  500,  500,  489,
      489,  591,  489, 1381,  489, 1380,  489,  574,  591,  492,
      489,  498,  580,  498,  576,  489,  498,  498,  500,  492,
      500,  577,  502,  500,  502,  500,  583,  520,  502,  520,
      520,  502,  571,  522,  498,  585,  520,  588,  577,  593,
      580,  522,  498,  583,  838,  590,  596,  571,  502,  588,
      502,  616,  838,  520,  571,  502,  520,  585,  520,  522,
      498,  593,  498,  596,  520,  502,  590,  592,  616,  522,
      498,  499,  499,  499,  499,  499,  499,  499,  499,  499,

      594,  524,  524,  524,  524,  600,  598,  592,  599,  527,
      499,  597,  499,  594,  599,  499,  499,  527,  635,  499,
      600,  605,  606,  635,  603,  607,  620,  524,  524,  598,
      524,  499,  524,  597,  527,  527,  499,  601,  499,  603,
      605,  499,  606,  499,  610,  527,  601,  607,  609,  612,
      608,  614,  620,  499,  518,  611,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  608,  610,  609,  619,  612,
      611,  614,  518,  518,  518,  518,  518,  518,  613,  518,
      518,  518,  518,  518,  622,  617,  624,  613,  518,  651,
      619,  518,  651,  622,  775,  629,  518,  775,  518,  518,

      518,  518,  518,  518,  629,  518,  518,  624,  518,  521,
      518,  521,  518,  621,  521,  521,  518,  523,  725,  523,
      617,  518,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  625,  521,  521,  626,  621,  528,  627,  528,  628,
      521,  528,  528,  631,  636,  630,  632,  725,  637,  638,
      708,  625,  643,  632,  626,  633,  631,  627,  521,  528,
      641,  628,  523,  630,  633,  634,  637,  528,  521,  636,
      639,  638,  634,  640,  645,  643,  708,  641,  642,  639,
      647,  640,  646,  649,  760,  528,  640,  528,  652,  642,
      647,  640,  649,  693,  652,  528,  645,  646,  667,  668,

     1378,  760, 1377,  647,  653,  653,  653,  653,  653,  653,
      653,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      761,  693,  669,  677,  667,  668,  669,  677,  687,  688,
      664,  697,  664,  761,  764,  664,  664,  667,  668,  664,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  689,
      764,  664, 1376,  689,  687,  688,  664,  763,  664,  697,
      682,  664,  682,  664,  770,  682,  682,  687,  688,  770,
      706,  706,  763,  664,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  695,  675,  699,  675,  701,  706,  675,  675,

      701,  695,  675,  713,  696,  767,  696,  713,  734,  696,
      696,  699,  734,  840,  675,  711,  711, 1375,  767,  675,
      840,  675,  699,  683,  675,  700,  675,  700,  696,  695,
      700,  700,  676,  709,  676,  696,  675,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  711,  700,  771,  709,  709,
      765,  704,  771,  696,  705,  684,  726,  684,  769,  704,
      684,  684,  705,  718,  684,  718,  700,  744,  718,  718,
      768,  769,  765,  707,  700,  707,  684,  704,  707,  707,
      705,  684,  730,  684,  726,  827,  684,  704,  684,  710,

      705,  710,  768,  744,  710,  710,  707,  707,  684,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  722,  782,
      730,  792,  710, 1374,  782,  827,  792,  732,  723,  724,
      723,  722,  707,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  724,  728,  732,  742,  742,  722,  710,  719,
      710,  729,  728,  729,  766,  732,  729,  729,  724,  737,
      733,  738,  733,  772,  773,  733,  733,  737,  745,  738,
      784,  780,  742,  723,  766,  729,  776,  774, 1363,  773,
      728,  772,  729,  784,  743,  737,  743,  738,  774,  743,
      743,  733,  780,  745,  745,  737,  776,  738,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  743,  743, 1362,
      729,  733,  746,  777,  746,  778,  785,  746,  746,  733,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  781,
      778,  777,  779,  743,  786,  746,  783,  787,  781,  740,
      788,  740,  791,  786,  740,  740,  789,  783,  740,  790,
      800,  779,  785,  803,  807,  789,  818,  788,  790,  787,
      740,  746,  803,  746,  791,  740,  804,  740,  818, 1361,
      740,  807,  740,  808,  799,  804,  810,  800,  741,  799,
      741,  811,  740,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  799,  812,  810,  808,  811,  813,  815,  816,

      817,  819,  826,  821,  822,  823,  813,  815,  812,  821,
      823,  826,  828,  825,  832,  833,  819,  817,  825,  822,
      834,  816,  835,  832,  836,  841,  842,  846,  843,  880,
      828, 1360, 1357,  880,  853,  835,  844,  833,  845,  821,
      843,  836,  834,  842,  844,  849,  845,  841,  850,  851,
      846,  853,  854,  855,  849,  856,  850,  854,  857,  851,
      858,  860,  871,  878,  856,  879,  855,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  857,  858,  889,  898,
      895,  903,  889,  860,  895,  903,  911,  940,  871,  878,
      911,  879,  922,  942,  940, 1054,  922, 1356,  942, 1054,

      885,  871,  878,  892,  879,  898,  893,  870,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  885,  875,  899,  875,
      901,  892,  875,  875,  893,  902,  875,  914,  915,  885,
      946,  918,  925,  941,  939,  926,  944,  945,  875,  939,
      949,  956,  941,  875,  899,  875,  901,  884,  875,  944,
      875,  902,  939,  946,  945,  914,  915,  918,  925,  901,
      875,  926,  949,  956,  902,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  917,  917,  917,  917,  917,  917,  917,

      917,  917,  943,  908,  943,  908,  947,  943,  908,  908,
      948,  952,  908,  947,  919,  957,  919,  950,  948,  919,
      919,  951,  953,  955,  908,  953,  955,  954,  952,  908,
      957,  908,  966,  917,  908,  950,  908,  919,  943,  951,
      954,  966,  909,  959,  909,  958,  908,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  920,  960,  920,  962,
      959,  961,  920,  919,  961,  920,  963,  958,  964,  967,
      965,  969,  970,  968,  967,  979,  962,  980,  981,  960,
      985,  995,  920,  964,  920,  986,  982,  980,  988,  920,
      965,  968,  987,  992,  970,  982,  979,  981,  986,  920,

      989,  963,  987,  985,  994,  996,  992,  969,  995,  989,
      988,  997,  999, 1000, 1003, 1007, 1004, 1005, 1011, 1013,
     1015, 1011, 1007, 1015,  994, 1017, 1005, 1013, 1016,  999,
     1021, 1018, 1025, 1026, 1003, 1000, 1004, 1016, 1022, 1021,
      996, 1018, 1023, 1039, 1046, 1080, 1071, 1017,  997, 1074,
     1080, 1082, 1025, 1022, 1082, 1026, 1355, 1023, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1071, 1072, 1039,
     1046, 1059, 1092, 1059, 1077, 1074, 1059, 1059, 1072, 1075,
     1076, 1092, 1039, 1046, 1076, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1075, 1087, 1081, 1085, 1038, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1083, 1077,
     1079, 1083, 1085, 1087, 1090, 1076, 1081, 1079, 1050, 1084,
     1050, 1086, 1084, 1050, 1050, 1060, 1086, 1050, 1089, 1091,
     1093, 1094, 1095, 1093, 1089, 1098, 1090, 1096, 1095, 1050,
     1096, 1097, 1091, 1100, 1050, 1099, 1050, 1101, 1099, 1050,
     1097, 1050, 1094, 1084, 1102, 1101, 1100, 1103, 1104, 1105,
     1116, 1050, 1102, 1117, 1118, 1098, 1119, 1103, 1095, 1116,
     1123, 1124, 1105, 1118, 1126, 1133, 1132, 1129, 1137, 1140,
     1134, 1142, 1354, 1119, 1117, 1134, 1136, 1140, 1123, 1124,
     1142, 1151, 1144, 1104, 1124, 1129, 1132, 1133, 1152, 1137,

     1172, 1136, 1170, 1173, 1126, 1144, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1153, 1169, 1151, 1169, 1153,
     1175, 1169, 1176, 1177, 1152, 1179, 1172, 1178, 1177, 1173,
     1151, 1180, 1170, 1181, 1182, 1183, 1181, 1152, 1184, 1176,
     1175, 1185, 1178, 1187, 1188, 1183, 1149, 1188, 1186, 1189,
     1190, 1191, 1169, 1200, 1193, 1194, 1182, 1193, 1194, 1209,
     1179, 1184, 1189, 1195, 1180, 1186, 1195, 1196, 1185, 1187,
     1197, 1201, 1199, 1197, 1196, 1199, 1210, 1209, 1212, 1213,
     1214, 1217, 1221, 1200, 1220, 1190, 1201, 1212, 1191, 1222,
     1230, 1225, 1240, 1241, 1243, 1246, 1213, 1242, 1248, 1210,

     1221, 1217, 1252, 1214, 1255, 1220, 1225, 1249, 1250, 1251,
     1253, 1254, 1222, 1253, 1254, 1257, 1230, 1256, 1257, 1248,
     1243, 1260, 1246, 1261, 1252, 1249, 1255, 1240, 1241, 1230,
     1242, 1294, 1264, 1266, 1250, 1251, 1256, 1258, 1263, 1260,
     1258, 1263, 1267, 1268, 1253, 1267, 1268, 1269, 1270, 1275,
     1269, 1276, 1279, 1261, 1264, 1266, 1281, 1270, 1282, 1275,
     1283, 1294, 1299, 1279, 1300, 1282, 1301, 1276, 1302, 1304,
     1306, 1300, 1305, 1306, 1309, 1307, 1283, 1281, 1308, 1310,
     1311, 1397, 1310, 1299, 1307, 1315, 1318, 1308, 1315, 1325,
     1319, 1324, 1309, 1319, 1397, 1353, 1358, 1311, 1309, 1301,

     1324, 1325, 1326, 1302, 1304, 1305, 1328, 1327, 1318, 1336,
     1338, 1326, 1327, 1338, 1337, 1328, 1358, 1339, 1336, 1337,
     1339, 1340, 1341, 1343, 1340, 1341, 1343, 1345, 1346, 1348,
     1359, 1349, 1348, 1346, 1349, 1351, 1364, 1345, 1351, 1365,
     1366, 1367, 1368, 1369, 1370, 1359, 1372, 1370, 1371, 1372,
     1373, 1379, 1382, 1373, 1365, 1389, 1364, 1396, 1371, 1395,
     1398, 1399, 1366, 1367, 1368, 1369, 1390, 1400, 1395, 1401,
     1403, 1390, 1399, 1379, 1382, 1404, 1389, 1396, 1352, 1350,
     1347, 1390, 1398, 1344, 1342, 1404, 1335, 1401, 1400, 1334,
     1333, 1332, 1403, 1408, 1408, 1408, 1408, 1408, 1408, 1408,

     1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412, 1331, 1330,
     1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1414, 1329, 1414, 1414,
     1323, 1414, 1414, 1414, 1414, 1322, 1414, 1415, 1321, 1320,
     1415, 1415, 1415, 1415, 1415, 1415, 1317, 1415, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1417,
     1417, 1417, 1316, 1314, 1417, 1418, 1313, 1312, 1303, 1418,

     1418, 1418, 1418, 1419, 1419, 1298, 1297, 1419, 1420, 1420,
     1296, 1295, 1420, 1421, 1293, 1292, 1291, 1421, 1421, 1421,
     1421, 1422, 1422, 1290, 1289, 1422, 1423, 1423, 1288, 1287,
     1423, 1424, 1424, 1286, 1285, 1424, 1425, 1425, 1284, 1280,
     1425, 1426, 1426, 1278, 1277, 1426, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1428, 1428, 1429,
     1429, 1429, 1430, 1274, 1273, 1430, 1430, 1430, 1430, 1430,
     1431, 1431, 1272, 1265, 1431, 1432, 1432, 1433, 1433, 1262,
     1259, 1433, 1434, 1434, 1435, 1247, 1245, 1435, 1435, 1435,
     1435, 1435, 1436, 1244, 1239, 1436, 1436, 1436, 1436, 1436,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1439, 1439, 1238, 1237, 1439, 1440, 1440, 1441,
     1441, 1236, 1233, 1441, 1442, 1442, 1443, 1443, 1232, 1231,
     1443, 1444, 1444, 1445, 1445, 1229, 1228, 1445, 1446, 1446,
     1447, 1447, 1227, 1226, 1447, 1448, 1448, 1449, 1449, 1449,
     1224, 1449, 1450, 1450, 1450, 1223, 1450, 1451, 1219, 1218,
     1451, 1451, 1451, 1451, 1451, 1452, 1452, 1216, 1215, 1452,
     1453, 1453, 1211, 1208, 1453, 1454, 1454, 1207, 1205, 1454,
     1455, 1455, 1456, 1456, 1204, 1203, 1456, 1457, 1457, 1458,

     1202, 1198, 1458, 1458, 1458, 1458, 1458, 1459, 1192, 1174,
     1459, 1459, 1459, 1459, 1459, 1460, 1460, 1171, 1168, 1460,
     1461, 1461, 1167, 1166, 1461, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1463, 1463, 1165, 1164,
     1463, 1464, 1464, 1465, 1465, 1163, 1162, 1465, 1466, 1466,
     1467, 1467, 1160, 1159, 1467, 1468, 1468, 1158, 1157, 1468,
     1469, 1469, 1470, 1470, 1156, 1155, 1470, 1471, 1471, 1472,
     1472, 1472, 1154, 1472, 1473, 1473, 1150, 1148, 1473, 1474,
     1474, 1147, 1146, 1474, 1475, 1475, 1145, 1143, 1475, 1476,
     1476, 1141, 1139, 1476, 1477, 1477, 1478, 1478, 1138, 1135,

     1478, 1479, 1479, 1480, 1480, 1131, 1130, 1480, 1481, 1481,
     1482, 1482, 1128, 1127, 1482, 1483, 1483, 1484, 1125, 1122,
     1484, 1484, 1484, 1484, 1484, 1485, 1485, 1121, 1120, 1485,
     1486, 1486, 1115, 1114, 1486, 1487, 1487, 1112, 1110, 1487,
     1488, 1488, 1489, 1489, 1108, 1106, 1489, 1490, 1490, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1492, 1492, 1088, 1073, 1492, 1493, 1493, 1494, 1494, 1070,
     1068, 1494, 1495, 1495, 1496, 1496, 1066, 1064, 1496, 1497,
     1497, 1498, 1498, 1062, 1061, 1498, 1499, 1499, 1500, 1500,
     1057, 1056, 1500, 1501, 1501, 1055, 1052, 1501, 1502, 1502,

     1503, 1503, 1051, 1049, 1503, 1504, 1504, 1505, 1505, 1048,
     1047, 1505, 1506, 1506, 1507, 1507, 1045, 1044, 1507, 1508,
     1508, 1509, 1509, 1510, 1510, 1511, 1043, 1042, 1511, 1511,
     1511, 1511, 1511, 1512, 1512, 1513, 1513, 1041, 1040, 1513,
     1514, 1514, 1515, 1515, 1037, 1028, 1515, 1516, 1516, 1517,
     1517, 1027, 1024, 1517, 1518, 1518, 1519, 1519, 1020, 1019,
     1519, 1520, 1520, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1521, 1522, 1522, 1523, 1523, 1524, 1524,
     1525, 1525, 1526, 1526, 1527, 1527, 1528, 1528, 1014, 1012,
     1528, 1529, 1529, 1530, 1530, 1010, 1009, 1530, 1531, 1531,

     1532, 1532, 1008, 1006, 1532, 1533, 1533, 1534, 1534, 1002,
     1001, 1534, 1535, 1535, 1536, 1536,  998,  993, 1536, 1537,
     1537,  991,  990, 1537, 1538, 1538, 1539, 1539,  984,  983,
     1539, 1540, 1540, 1541, 1541,  977,  975, 1541, 1542, 1542,
     1543, 1543,  973,  971, 1543, 1544, 1544, 1545, 1545,  937,
      933, 1545, 1546, 1546,  931,  929, 1546, 1547, 1547,  927,
      924, 1547, 1548, 1548,  923,  921, 1548, 1549, 1549, 1550,
     1550,  916,  913, 1550, 1551, 1551,  912,  910, 1551, 1552,
     1552,  906,  905, 1552, 1553, 1553, 1554, 1554,  904,  900,
     1554, 1555, 1555,  897,  896, 1555, 1556, 1556, 1557, 1557,

     1558, 1558,  894,  891, 1558, 1559, 1559,  890,  888, 1559,
     1560, 1560, 1561, 1561,  887,  886, 1561, 1562, 1562,  883,
      882, 1562, 1563, 1563,  881,  877, 1563, 1564, 1564,  876,
      874, 1564, 1565, 1565,  873,  872, 1565, 1566, 1566,  868,
      866, 1566, 1567, 1567,  864,  862, 1567, 1568, 1568,  861,
      859, 1568, 1569, 1569,  852,  848, 1569, 1570, 1570,  847,
      837, 1570, 1571, 1571,  831,  830, 1571,  829,  824,  820,
      814,  809,  806,  805,  801,  797,  795,  794,  793,  762,
      758,  756,  754,  752,  751,  750,  749,  748,  747,  736,
      735,  721,  720,  716,  715,  714,  703,  702,  692,  691,

      690,  686,  685,  680,  679,  678,  672,  671,  670,  666,
      665,  662,  660,  659,  658,  656,  654,  650,  648,  644,
      618,  615,  604,  602,  589,  587,  584,  582,  581,  579,
      546,  544,  543,  542,  540,  537,  536,  534,  531,  530,
      513,  512,  510,  507,  506,  504,  496,  485,  484,  483,
      477,  467,  466,  465,  458,  456,  455,  451,  449,  447,
      445,  426,  374,  373,  370,  344,  342,  340,  338,  337,
      332,  321,  320,  309,  299,  298,  272,  271,  261,  260,
      256,  248,  245,  243,  242,  241,  231,  204,  198,  174,
      162,  160,  159,  151,  150,  147,  139,  136,  135,  131,

      101,   98,   97,   94,   93,   91,   84,   71,   45,   35,
       32,   18,   11,    4,    3, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[245] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Mon Sep 23 22:45:33 2024
 * Update Count     : 792
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.hpp"                          // for DeclarationNode
#include "ExpressionNode.hpp"                           // for LabelNode
#include "InitializerNode.hpp"                          // for InitializerNode
#include "ParseNode.hpp"
#include "ParserTypes.hpp"                              // for Token
#include "StatementNode.hpp"                            // for CondCtrl, ForCtrl
#include "TypedefTable.hpp"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 2023 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// ' stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}




#line 2040 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define BKQUOTE 2
#define QUOTE 3
#define STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 180 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 2265 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1408 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4216 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 182 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 204 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 207 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 208 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 209 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 212 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 217 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }
	YY_BREAK
/* keywords */
case 10:
YY_RULE_SETUP
#line 220 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 221 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 224 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 225 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SVBOOL); }				// gcc (ARM)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CORUN); }				// CFA
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COFOR); }				// CFA
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT80); }			// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT16); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32X); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64X); }					// GCC
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128); }					// GCC
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT128X); }					// GCC
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT32X4); }					// GCC (ARM)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(FLOAT64X2); }					// GCC (ARM)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(SVFLOAT32); }					// GCC (ARM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(SVFLOAT64); }					// GCC (ARM)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 113:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COUNTOF); }			// GCC
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 362 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 363 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 364 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 367 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 157:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* numeric constants */
case 159:
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 378 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 379 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 380 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 381 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 384 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value */
case 167:
YY_RULE_SETUP
#line 387 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant */
case 170:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 173:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 176:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 408 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 409 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 413 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 414 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATTR); }				// CFA, attribute shorthand
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 190:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 194:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 430 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 436 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 452 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 457 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 463 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 465 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 466 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUp); }			// CFA
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 467 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 468 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 469 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 470 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 237:
YY_RULE_SETUP
#line 473 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 474 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 475 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 476 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 481 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 242:
YY_RULE_SETUP
#line 508 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 243:
YY_RULE_SETUP
#line 520 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 522 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 3640 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BKQUOTE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1408 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1408 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1407);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 522 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

