
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 230
#define YY_END_OF_BUFFER 231
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1349] =
    {   0,
        0,    0,    0,    0,    0,    0,  157,  157,  160,  160,
      231,  229,    7,    9,    8,  182,  159,  146,  188,  191,
      156,  169,  170,  185,  183,  173,  184,  176,  187,  149,
      150,  174,  175,  193,  195,  194,  196,  165,  146,  167,
      186,  168,  189,  146,  166,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  171,  192,  172,  190,    7,  229,    4,
        4,  230,  157,  158,  164,  160,  161,    7,    9,    0,
        8,  200,  223,  146,    0,  213,  181,  205,  214,  211,
      197,  208,  198,  209,  207,  221,    0,  153,    3,    0,

      212,  152,  149,    0,    0,    0,  149,  149,  149,  149,
      149,  149,    0,    0,  149,  149,  150,  150,  150,  150,
      150,  150,  150,    0,  150,  150,  179,  180,  178,  201,
      203,  199,  204,  202,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  219,  159,  156,  146,  210,    0,    0,  216,    0,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,    0,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,   45,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,   77,  146,  146,  146,  146,

      146,   95,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  215,  206,  220,    7,    0,    0,    0,
        2,    0,    5,  157,    0,  163,  162,  162,    0,    0,
        0,  160,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  222,
      177,  153,  153,    0,  153,  153,  153,  153,    0,    6,
      154,  152,    0,  152,  152,  152,  152,  149,    0,    0,
      148,    0,    0,  154,    0,  149,  149,  149,  149,  149,
      149,  149,  149,    0,    0,    0,  149,  149,  149,  149,

      149,  149,  149,    0,  151,    0,    0,  150,  150,  150,
      150,  150,  150,  150,  150,    0,    0,    0,  150,  150,
      150,  150,  150,  150,  150,    0,  217,  218,    0,  227,
      224,    0,    0,    0,  226,    0,    0,    0,    0,    0,
        0,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  147,    0,   14,   15,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,   70,  146,  146,  146,  146,   84,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  122,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,    0,    0,  162,    0,    0,    0,    0,
        0,  162,    0,    0,  228,    0,    0,    0,    0,    0,
        0,    0,  153,    0,  153,    0,    0,    0,    0,    0,
      153,  153,    0,  154,  154,    0,  154,  154,  154,  154,
      152,    0,  152,    0,    0,    0,    0,    0,  152,  152,
        0,  148,  148,  148,  148,  148,  148,  148,    0,  148,
      148,  154,  154,  154,  154,  154,  154,    0,    0,    0,

      149,  149,    0,    0,    0,    0,  149,  149,    0,    0,
      151,  151,  151,  151,  151,  151,  151,  151,    0,  151,
      151,    0,    0,    0,  150,  150,    0,    0,    0,    0,
      150,  150,  226,    0,    0,    0,    0,    0,    0,    0,
      225,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      147,    0,    0,    0,   21,  146,  146,   26,  146,   29,
      146,  146,  146,  146,  146,  146,  146,  146,  146,   48,
      146,   50,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  146,   76,  146,  146,   89,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  135,  146,  146,  146,  142,  146,  144,  146,    0,
        0,    0,    0,    0,    0,  162,    0,    0,    0,    0,
        0,  153,  153,    0,  153,  153,    0,    0,    0,    0,
      154,    0,  154,    0,    0,    0,    0,    0,  154,  154,
        0,  152,  152,    0,  152,  152,    0,    0,    0,    0,
      148,  148,  148,  148,  148,  148,  148,  148,    0,    0,
        0,  148,  148,  148,  148,  148,  148,  148,    0,  154,

        0,    0,    0,    0,  154,  154,    0,    0,    0,    0,
        0,    0,    0,  151,  151,  151,  151,  151,  151,  151,
      151,    0,    0,    0,  151,  151,    0,  155,    0,  151,
      151,  151,  151,  151,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  146,  146,   24,
      146,  146,  146,  146,  146,  146,  146,  146,  146,   16,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,    0,    0,
        0,    0,    0,    0,  146,   25,   27,  146,  146,   35,
      146,  146,  146,  146,  146,   47,  146,  146,  146,  146,

      146,   57,   58,  146,  146,   73,  146,  146,  146,  146,
       91,   94,   96,  146,  146,  146,  146,  146,  104,  146,
      146,  146,  146,  146,  146,  146,  118,  146,  121,  123,
      146,  146,  146,  129,  146,  146,  146,  146,  146,  146,
      143,  146,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  153,    0,  153,  153,  154,  154,    0,  154,
      154,    0,    0,    0,    0,    0,  152,    0,  152,  152,
        0,    0,    0,  148,  148,    0,    0,    0,    0,  148,
      148,    0,  154,  154,    0,    0,    0,    0,    0,  155,
        0,    0,    0,    0,    0,  151,  151,    0,  155,  155,

      155,  155,  155,    0,    0,    0,  151,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  146,    0,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,   79,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
        0,    0,    0,    0,    0,    0,    0,    0,  146,  146,
       30,   31,  146,  146,  146,  146,   46,   49,  146,   53,
      146,  146,  146,  146,   71,  146,  146,   81,   85,  146,
      146,  146,   99,  146,  103,  105,  108,  109,  112,  146,
      114,  115,  146,  146,  146,  128,  125,  146,  146,  146,

      139,  146,  146,  145,    0,    1,    0,    0,  162,    0,
        0,    0,    0,  153,    0,  154,    0,  154,  154,  152,
        0,    0,  154,    0,  154,  154,  155,  155,    0,  155,
        0,    0,    0,    0,  155,  155,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  146,  146,   18,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,   17,  146,  146,  146,  146,   36,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
        0,    0,    0,    0,    0,    0,    0,    0,  146,  146,
      146,  146,   43,   44,  146,  146,   56,  146,   60,   72,

      146,   90,   97,  146,  146,  113,  146,  120,  124,  146,
      134,  146,  140,  146,    0,    0,  154,  154,    0,    0,
      155,  155,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   10,   11,   32,  146,  146,
       63,   64,   66,   75,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,   80,   82,   86,
      146,  146,  106,  116,  126,  146,  146,  146,    0,    0,
        0,    0,    0,    0,    0,  146,  146,   38,  146,  146,
      146,   55,   62,  146,   98,  100,  146,  131,  136,  146,
        0,    0,    0,    0,  155,    0,  155,  155,    0,    0,

        0,    0,    0,    0,  146,  146,  146,   68,   65,   67,
      146,   92,  146,  146,   12,  146,  146,  146,   33,   37,
      146,  146,   59,  146,  146,   88,  146,  146,  146,  146,
      146,  146,    0,    0,    0,    0,  146,  146,   39,   51,
      146,   74,  146,  141,    0,    0,    0,    0,  155,    0,
        0,    0,    0,  146,   40,   41,   69,   78,  146,  146,
      146,  146,  146,  146,  146,  146,   61,   83,   87,  101,
      107,  127,  146,  137,  146,    0,    0,    0,   23,  146,
      146,  146,    0,    0,    0,    0,    0,    0,   42,  146,
      146,   13,   19,   22,  146,  146,   34,  146,  146,  130,

      146,  146,    0,    0,    0,    0,   28,   54,  119,    0,
        0,    0,  146,  146,  146,  146,  146,  146,  102,  138,
      146,    0,    0,    0,    0,  146,  117,   20,  146,  146,
       52,  146,    0,  110,  146,  146,  146,  111,  146,  146,
      146,  146,  132,  146,  146,  133,   93,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   11,   51,   56,   11,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   11,   73,   74,   75,   76,
       77,   78,   51,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[92] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    4,    4,    4,    4,    4,    9,
        4,    4,    4,    4,    4,    4,    4,    1,   10,    1,
        1,   11,    1,    8,    8,    8,    8,    8,    8,    4,
        4,    4,    4,    4,    4,    4,    4,    9,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1

    } ;

static const flex_int16_t yy_base[1513] =
    {   0,
        0,   90, 4082, 4081,    0,    0,   90,   91,   92,   93,
     4097, 4100,  104, 4100,  110,   83, 4100, 4037,   63,   90,
     4100, 4100, 4100,   84,  104, 4100,  107,  105,  123,  178,
      245, 4059, 4100,  125, 4059,   88,  325, 4058,  152, 4100,
      112, 4100,  111,  130, 4029,  105,  109,  180,  164,  106,
      237,  154,  117,   79,  138,  183,   94,  282,  218,  296,
      253,  280,   95, 4100,  194, 4100,  182,  371,  392, 4100,
     4069, 4100,    0, 4100,  422,    0, 4100,  398, 4100,  404,
      435, 4100,  500, 4031,  198, 4100, 4100, 4100, 4100, 4100,
     4052, 4100, 4051, 4100, 4100, 4052, 4065,  567, 4100, 4082,

     4100,  629,  444,  517,  224,  544,  310,  633,  620,  315,
     4100,  386,  134,  454,  531,  640,    0,  406,  662,  694,
      442, 4100,  479,  216,  561,  701, 4100, 4100, 4100, 4049,
     4100, 4100, 4100, 4048, 4047,  244,  247, 4065,  250,  285,
      311,  271,  334,  354,  391, 4043,  361,  419, 4020, 3988,
      428, 4100, 4100, 4100,  371, 4100, 4015, 4014, 4100, 3987,
      421,  153,  290,  199,  276,  256,  141,  405,  331,  119,
      713,  385, 4015,  269,  417,  415,  452,  462,  507,  540,
      569,  424,  472,  179,  490,  474,  518,  546,  506,  562,
      504,  420,  497,  525,  561, 4014,  604,  548,  564,  602,

      563, 4013,  603,  673,  657,  670,  686,  606,  634,  478,
      615,  635,  660,  669,  696,  708,  705,  727,  566,  702,
      730,  678,  711, 4100, 4100, 4100,  801,  807, 4068,  816,
     4100,  846, 4100,    0,  810, 4100, 4100,  833, 4008, 4007,
     4006,    0, 4032,  725,  734, 4050,  785,  845,  830,  789,
      817,  790,  848, 4028,  829,  844,  851, 4002, 4001, 4100,
     4100,  873,  864,  935,  899,  925,  744, 4000, 4058, 4100,
      987,  933, 1049,  961, 1039,  821, 1050,  998,  857, 1102,
     1148,  805, 1016, 1213, 1123,  832, 4100,  867, 1131,  836,
     4100,  855, 1151,  865, 4035, 4032,  896,  981, 1019, 1221,

      858,  932, 1241,    0, 1295, 4037, 1278,  852, 4100,  938,
     1303,  872, 4100,  901, 1346,  919, 4032, 4029, 1111, 1118,
     1038, 1357,  923, 1017, 1364, 1416, 4100, 4100, 4018, 4100,
     4100,  915,  951, 3994, 3994,  919, 3990,    0, 3989,    0,
     3960,  978,  738,  993,  625,  560, 1009,  676,  704,  830,
      998, 1023, 1172, 1053, 1037,  947, 1041, 1045, 1078,  930,
     1044, 1103, 1097, 1108, 1080, 3990, 1054, 3989, 3988, 1125,
     1100, 1123, 1133,  873, 1129, 1132, 1148, 1197, 1140, 1152,
     1159, 1040, 1156, 1153, 1207, 1173, 1190, 1215, 1104, 1217,
     1204, 1220, 1230, 1214, 1231, 1237, 1258, 1288, 1295, 1296,

     1232,  989, 1319, 1251, 1320, 1272, 1315, 1321, 1330, 1332,
     1339, 1325, 1336, 1341, 1340, 1354, 1355, 1343, 3987, 1357,
     1358,  320, 1353, 1365, 1351, 1289, 1389, 1368, 1375, 1390,
     1155,  384, 1391, 1452, 1448, 1446, 1456, 3983,    0, 3982,
        0, 3981,    0, 4005, 4100, 1103, 1423, 3981, 3978,    0,
     3977,    0, 4100, 1463, 1486, 1548, 1438, 4013, 4010, 4013,
     4100, 1471, 1495, 1557, 1548, 1619, 1517, 1609, 1405, 3973,
     4100, 1638, 1671, 1733, 1473, 4009, 4006, 4009, 4100, 1583,
     1661, 1742, 1551, 1724, 1754, 1480, 4100, 1658, 3969, 1556,
     1793, 1853, 1702, 1781, 1790, 1457, 3968, 1474, 4004, 4001,

     1450, 1481, 3997, 1513, 4001, 3998, 1459, 1493, 1489, 1552,
     1917, 1665, 1814, 1968, 1670, 1982, 1845, 4100, 1529, 1784,
     1996, 1520, 3999, 3996, 1539, 1577, 3992, 1611, 3996, 3993,
     1497, 1546, 3960, 1597, 3956, 3955, 3954,    0, 3953,    0,
     4100, 1406, 1595, 1597, 1557, 1644, 1495, 1614, 1437, 1667,
     1596, 1668, 1649, 1599, 1650, 1722, 1669, 1718, 1727, 1708,
     1497, 1756, 1689,  741, 1774, 1766, 1709, 1776, 1665, 1762,
     3955, 1772, 3951, 3950, 3952, 1787,  923, 3951, 1036, 3950,
     1716, 1287, 1790, 1814, 1788, 1828, 1840, 1839, 1783, 3949,
     1844, 3948, 1830, 1847, 1791, 1850, 1852, 1848, 1875, 1853,

     1855, 1872, 3947, 1874, 1203, 3946, 1894, 1843, 1895, 1903,
     1551, 1893, 1876, 1911, 1942, 1937, 1909, 1910, 1955, 1958,
     1960, 1970, 1616, 1919, 1971, 1972, 1973, 1975, 1978, 1976,
     1974, 3945, 1979, 1990, 1998, 3944, 2003, 3943, 1236, 2036,
     2058, 3939,    0, 3938,    0, 3937, 3936, 3935,    0, 3934,
        0, 2065, 3933, 3964, 2025, 2026, 1685, 3968, 3965, 3968,
     4100, 2094, 2127, 2189, 2030, 3965, 3962, 3965, 4100, 2075,
     2117, 2198, 3925, 3956, 2030, 2088, 2036, 3960, 3957, 3960,
     2021, 4100, 2083, 2206, 2024, 4100, 2106, 2176, 2101, 3957,
     3954, 2115, 2121, 2028, 2227, 2061, 2112, 2247, 2224, 4100,

     2138, 3955, 3952, 3955, 4100, 2156, 2277, 3947, 3946, 2202,
     2300, 2219, 1126, 2109, 4100, 2126, 2261, 2155, 4100, 2184,
     2308, 2209, 3950, 3947, 2286, 2289, 2322, 2368, 2349, 2268,
     2357, 2196, 2212, 2377, 3911, 3942, 3941, 3908, 3907, 3906,
        0, 3905,    0, 3904,    0, 3903,    0, 2055, 2220, 3905,
     2204, 2236, 2254, 2263, 2298, 2307, 2330, 1999, 2174, 1799,
     2305, 2341, 2349, 2234, 2182, 2136, 2295, 2350, 2354, 2387,
     2230, 2355, 2358, 2297, 2363, 2362, 2296, 2366, 3901, 3900,
     3899,    0, 3898,    0, 2368, 3900, 2258, 2373, 2380, 3899,
     2369, 2374, 2385, 2388, 2397, 3897, 2398, 2391, 2394, 2402,

     2401, 3896, 2434, 2404, 2410, 3892, 2412, 2409, 2437, 2420,
     3891, 3887, 3886, 2421, 2422, 2423, 2426, 2424, 3882, 2069,
     2425, 2429, 2427, 2431, 2428, 2131, 2450, 2432, 3881, 3877,
     2433, 2446, 2447, 3876, 2451, 2453, 2452, 2460, 2456, 2459,
     3872, 2461, 3927, 3864,    0, 3863,    0, 3859,    0, 3858,
        0, 2520, 2482, 3886, 3830, 3826, 2560, 3848, 3876, 2483,
     2484, 2496, 3880, 3872, 3875, 2534, 2494, 3864, 3808, 3800,
     2497, 3859, 3853, 2498, 2515, 3849, 2507, 3848, 3845, 2505,
     2526, 3838, 2527, 2528, 2509, 3842, 3836, 3839, 2612, 2622,
     2684, 3794, 2547, 3830, 3824, 2523, 2537, 3820, 2631, 2534,

     2648, 2674, 3784, 2585, 3820, 3814, 2546, 2548, 3778,    0,
     3772,    0, 3771,    0, 3765,    0,    0,    0, 3767,    0,
     2604, 2535, 2556, 2557, 2674, 2558, 2464, 2544, 2616, 2564,
     2612, 1877, 2608, 2007, 2606, 2627, 2624, 2658, 2638, 2566,
     2662, 2512, 2665, 2620, 2617, 2664, 2667, 2668, 2670, 2671,
     3758,    0, 3757,    0, 3751,    0, 3750,    0, 2672, 2677,
     3749, 3748, 2673, 2681, 2676, 2688, 3742, 3741, 2687, 3735,
     2683, 2690, 2727, 2731, 3734, 2701, 2702, 3728, 3727, 2705,
     2706, 2704, 3721, 2707, 3720, 3691, 3690, 3684, 3683, 2708,
     3677, 3676, 2710, 2711, 2712, 3670, 3669, 2720, 2715, 2721,

     3659, 2723, 2728, 3658, 3705, 4100,    0,    0, 4100,    0,
        0,    0,    0, 3622, 2787, 2721, 3671, 3615, 3609, 3608,
     3657, 3656, 2747, 3652, 3596, 3590, 2827, 3612, 3638, 4100,
     2771, 3642, 3634, 3637, 4100, 2775, 2797, 3624, 3591,    0,
     3574,    0, 3573,    0, 3567,    0, 3566, 2749, 2738, 3565,
     2107, 2771, 2806, 2778, 2807, 2732, 2774, 2781, 2777, 2782,
     2784, 3564, 2783, 2787, 2804, 2805, 2808, 2803, 2855, 2818,
     2813, 2854, 2828, 2823, 2833, 2838, 2829, 2861, 2832, 2844,
     3557,    0, 3556,    0, 3548,    0, 3547,    0, 2834, 2848,
     2849, 2850, 3545, 3544, 2853, 2856, 3538, 2880, 3537, 3531,

     2857, 3530, 3524, 2862, 2859, 3523, 2863, 3519, 3518, 2860,
     3514, 2864, 3513, 2865, 3506, 3505, 3478, 3471, 2921, 3525,
     2882, 2884, 2928, 3524, 3521, 3521, 3481, 3475, 3474, 3468,
        0, 3467, 3452, 3451, 3447, 3449, 3441, 3440, 2934, 2905,
     3433, 2877, 2883, 3432, 2896, 2900, 2902, 2906, 2912, 2913,
     2911, 2914, 2915, 2920, 2919, 2952, 2961, 3427, 2926, 2927,
     2937, 2928, 2939, 3426, 2943, 2962, 2944, 2945, 3417, 3416,
     3412, 3411,    0, 3407, 3406, 2947, 2948, 3401, 2949, 2951,
     2953, 3400, 3397, 2954, 3392, 3385, 2955, 3384, 3378, 2957,
     3374, 3368, 3367, 3361, 2968, 3392, 3331, 3330,    0,    0,

     3323, 3322, 3315, 3314, 2997, 2998, 2992, 2967, 3312, 3311,
     2969, 3305, 2966, 2970, 2977, 2973, 2982, 2983, 2999, 3304,
     2985, 3004, 3296, 3005, 2984, 3295, 2989, 3007, 3009, 3013,
     2991, 3014,    0, 3273, 3272, 3268, 3015, 3017, 3270, 3266,
     2979, 3265, 3018, 3261, 3257, 3253, 3252, 3245, 3221, 3243,
     3240, 3239, 3235, 3048, 3237, 3230, 3229, 3228, 3020, 3021,
     3023, 3022, 3027, 3029, 3037, 3032, 3225, 3224, 3208, 3039,
     3201, 3200, 3024, 3051, 3038, 3194, 3189, 3186, 3171, 3043,
     3044, 3055, 3167, 3120, 3119, 3118, 3117, 3114, 3112, 3057,
     3045, 3111, 3058, 3105, 3060, 3062, 3103, 3065, 3069, 3030,

     3071, 3073, 2863, 2785, 2628, 2571, 2550, 2480, 2326, 2234,
     1918, 1750, 3063, 3075, 3076, 3077, 3078, 3085, 1723, 1613,
     3080, 1402, 1400, 1363, 1197, 3084,  999,  833, 3086, 3089,
      667, 3091,  461,  426, 3092, 3095, 3096,  334, 3097, 3099,
     3093, 3098,  239, 3102, 3108,  196,  136, 4100, 3183, 3194,
     3205, 3216, 3224, 3235, 3246, 3257, 3268, 3274, 3282, 3287,
     3292, 3300, 3305, 3310, 3315, 3320, 3325, 3336, 3341, 3344,
     3349, 3354, 3359, 3361, 3366, 3371, 3379, 3390, 3401, 3406,
     3411, 3413, 3418, 3420, 3425, 3427, 3432, 3434, 3439, 3441,
     3446, 3454, 3459, 3464, 3469, 3474, 3476, 3481, 3486, 3494,

     3499, 3504, 3515, 3520, 3525, 3527, 3532, 3534, 3539, 3544,
     3546, 3551, 3553, 3558, 3563, 3568, 3573, 3578, 3580, 3585,
     3587, 3592, 3594, 3599, 3604, 3609, 3614, 3619, 3624, 3626,
     3631, 3639, 3644, 3649, 3651, 3656, 3658, 3663, 3665, 3670,
     3672, 3677, 3682, 3684, 3689, 3691, 3696, 3698, 3703, 3705,
     3707, 3712, 3717, 3719, 3724, 3726, 3731, 3733, 3738, 3740,
     3745, 3753, 3758, 3760, 3762, 3764, 3766, 3768, 3770, 3775,
     3777, 3782, 3784, 3789, 3791, 3796, 3798, 3803, 3808, 3810,
     3815, 3817, 3822, 3824, 3829, 3831, 3836, 3841, 3846, 3851,
     3853, 3858, 3863, 3868, 3870, 3875, 3880, 3882, 3884, 3889,

     3894, 3896, 3901, 3906, 3911, 3916, 3921, 3926, 3931, 3936,
     3941, 3946
    } ;

static const flex_int16_t yy_def[1513] =
    {   0,
     1348,    1, 1349, 1349, 1350, 1350, 1351, 1351, 1352, 1352,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1353, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1353, 1348,
     1348, 1348, 1348, 1353, 1348, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1348, 1348, 1348, 1348, 1348, 1354, 1348,
     1348, 1348, 1355, 1348, 1348, 1356, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1353, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1357,

     1348, 1348,   30, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1358,   30, 1348, 1348,   31, 1348, 1348, 1348,
     1348, 1348, 1348,   31, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1359, 1348,
     1348, 1348, 1348, 1348, 1353, 1348, 1360, 1361, 1348, 1348,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1362, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1348, 1348, 1348, 1348, 1354, 1354, 1354,
     1348, 1354, 1348, 1355, 1348, 1348, 1348, 1348, 1363, 1364,
     1365, 1356, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1366, 1367, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348,  262, 1368, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348,  114,  278, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1369, 1348, 1370, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1371, 1348, 1372, 1373, 1374, 1375,
     1348, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1377, 1348, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,

     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1378, 1379, 1348, 1348, 1380, 1381, 1382,
     1383, 1384, 1385, 1348, 1348, 1348, 1348, 1348, 1386, 1387,
     1388, 1389, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,  464,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,  482, 1348,
     1348, 1348, 1348, 1348, 1348, 1348,  492, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1390, 1391,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,  511, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1392, 1348, 1393, 1394, 1395, 1396, 1397, 1398,
     1348, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1400, 1348, 1401, 1402, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,

     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1403,
     1348, 1404, 1405, 1406, 1407, 1408, 1408, 1409, 1410, 1411,
     1412, 1348,  652, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348,  672, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1413,
     1348, 1413, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1414, 1348, 1348, 1415, 1416, 1417,
     1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426, 1427,
     1428, 1429, 1430, 1431, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,

     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
     1440, 1348, 1348, 1348, 1348, 1348, 1348,  857, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1441, 1348, 1348, 1348, 1348, 1348, 1348,  890, 1348,

     1348, 1348,  899, 1348, 1348, 1348, 1348, 1348, 1442, 1443,
     1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,

     1452, 1452, 1452, 1452, 1462, 1348, 1463, 1464, 1348, 1465,
     1466, 1467, 1468, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1027, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1469, 1470,
     1471, 1472, 1473, 1474, 1475, 1476, 1477, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,

     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1486, 1487, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1488, 1469, 1489, 1471,
     1490, 1473, 1475, 1491, 1477, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1492, 1478,
     1493, 1480, 1494, 1482, 1484, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1495, 1486, 1496, 1487, 1348, 1348, 1348, 1348, 1497, 1498,

     1489, 1499, 1500, 1491, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1501, 1492, 1493, 1502, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1503, 1495, 1504, 1496, 1348, 1505,
     1506, 1499, 1500, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1507, 1508, 1502, 1452, 1452,
     1452, 1452, 1503, 1504, 1509, 1505, 1510, 1506, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,

     1452, 1452, 1511, 1507, 1512, 1508, 1452, 1452, 1452, 1489,
     1509, 1510, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1493, 1511, 1512, 1489, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1493, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452,    0, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348
    } ;

static const flex_int16_t yy_nxt[4192] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   31,   31,   31,   31,   31,
       31,   32,   33,   34,   35,   36,   37,   38,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   39,   18,   18,
       18,   18,   18,   18,   39,   18,   18,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       18,   53,   18,   54,   55,   18,   56,   18,   57,   58,
       59,   60,   61,   62,   18,   18,   63,   64,   65,   66,
       67,   68,   74,   74,   77,   77,   68,   86,   87,   69,

       77,   77,   88,   74,   74,   78,   79,   80,   80,   80,
       78,   80,   79,   81,   81,   81,   80,   82,   90,   83,
       83,   91,  133,  134,   89,   97,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  128,   85,   92,   99,
       83,   94,   95,   83,  100,  159,  156,  160,   75,   75,
       75,   75,   85,   85,  304,  198,  129,  101,  130,  131,
      153,  204,  223,   85,   85,  154,  157,   85,  161,  162,
      163,  164,  177,  165,  166,   85,  167,   85,  168,  186,
      174,  187,  169,  170,  175,  196,  176,  178,   85,  352,
      188,  171,  197,  158,   85,  306,   85,   96,  102,   85,

      103,  103,  103,  103,  103,  103,  103,  104,  104,  172,
       85,   85,   85,  155,  199,  349,  226,  105,   83,  200,
      106,  194,   85,  107,  108,  109,  110,  111,  224,  344,
      195,  182,  112,  113,  111,  183, 1348,   85,   85,  114,
      184,   85,  105,  179,  185,  106,  281,  281,  115,  108,
      180,  116,  258,  110,   85,  111,  181,   85,  201,  112,
      382,  202,  113,  203,  111,  102,  346,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   85,  326,  329,  259,
      330,  329,  225,  330,  329,  282,  330,  106,  210,  211,
      118,  119,  120,  121,  122,   85,  212,   85,  213,  123,

      189,  122,  331,  214,  153,  329,  124,  330,  190,  154,
      191,   85,  106,  192,   85,  125,  119,  193,  126,  329,
      121,  330,  122,  348,  217,  215,  123,   85,  153,  218,
      331,  122,  135,  219,   85,  368,  136,  137,   85,  138,
       85,  139,  140,  220,  141,  329,  142,  330,   85,  347,
      221,  222,  205,  206,   85,  110,  286,  155,  143,  144,
      145,  286,  207,  208,  287,  209,  345,  332,  329,  287,
      330,  216,  227,   79,   80,   80,   80,  227,   85,  153,
      228,  286,  146,  147,  154,  148,  286,  149,  329,   85,
      330,  287,   85,  230,  231,  329,  287,  330,  230,   78,

       79,   80,   80,   80,   78,   80,   79,   80,   80,   80,
       80,  351,  150,  151,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  235,  236,  329,  333,  330,  235,   85,
      237,  299,  287,  300,  301,  237,   80,   79,   81,   81,
       81,   80,   85,   85,  238,  238,  238,  238,  238,  238,
      238,  121,  308,  329,  638,  330,  302,  287,  237,  303,
      309,  301,  329,   85,  330,  365,  278,  278,  278,  278,
      278,  278,  278,   85, 1348,   85,  239,  308,   85,   85,
      237,  350,   85, 1348,   85,  237,  237,  309,  308,  237,
      237,  369,  380, 1348,  342,  370,  309,  237,  393, 1348,

      237,  343,  237,  240,  237,  279,  241,  243, 1348, 1348,
       85,  244,  245,  308,  246,  307,  247,  248, 1348,  249,
       85,  250, 1348,  309,  321,  309,  322,  323, 1348,  372,
       85,  371,   85,  251,  252,  253,   85,  102, 1348,  104,
      104,  104,  104,  104,  104,  104,  104,  104,   85,  324,
      309,  381,  325,  384,  323,   85,  416,  254,  255,  106,
      256,  283,   85,  283,   85,   85,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  383,   85,  286,  280,  389,
      392,  385,  394,   85,  106,  287,  373,  374,  257,  262,
      262,  262,  262,  262,  262,  262,  262,  262,   85,  386,

      395,  110,  286,  375,   85,  285,   85,  308,  263,  264,
      265,  387,  287,  266,  267,  309,  376,  267,   85,   85,
       85,   85,   85,  399,   85,  546,  388,   85,  268,  428,
      402,  121,  308,  263,  264,  265,  377,  390,  266,  400,
      267,  396,  309,  294,  378,  295,  391,  379,  296,  297,
      267,  271,  271,  271,  271,  271,  271,  271,  271,  271,
       85,   85,   85,  294,   85,  295,  286,  298,  296,  297,
      272,  273,  274,   85,  287,  275,  276,  397,  288,  276,
      289,  290,  401,   85,  398,  414,  286,  291,  403,  417,
      277,  286,   85,   85,  287,  272,  273,  274,  418,  545,

      275,  287,  276,  292,  153,  415,  293,  310,  290,  311,
      312,  286,  276,  298,  291,   85,  313,  316,   85,  317,
      419,  287,  318,  319,  316,   85,  317,   85,   85,  318,
      319,   85,  314,  409,   85,  315,   85,  312,  404,  410,
      308,  320,  405,  313,   85,  420,  421,  308,  309,  412,
      406,  548,  407,  408,   85,  309,  411,  422,  432,  444,
       85,  445,   85,   85,  413,  308,   85,  549,  444,   85,
      445,   85,  308,  429,  320,  309,  353,  354,  355,  423,
      356,  357,  309,  425,  358,   85,  359,  424,   85,  433,
      453,  360,  361,  362,  363,  364,   85,  430,  426,   85,

      427,  431,  227,   79,   80,   80,   80,  227,  230,  231,
      228,  235,  236,  230,  543,  453,  235,  230,  231,  444,
      772,  445,  230,  444,  444,  445,  445,  281,  281,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  434,  231,  445,
      446,  444,  434,  445,  435,  436,  436,  436,  436,  436,
      436,  436,  445,  444,  444,  445,  445,  471,  232,  232,
      232,  232,  232,  232,  232,  232,  232, 1348,  444,  444,
      445,  445,  444,  447,  445,  444,  287,  445,   85,  503,
      291,   85,  471,  297,  437,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  111,  453,  309,  453,  550,  291,
      453,  453,  290,  287,  263,  264,  265,  291,  481,  266,
      267,  291,  457,  267,  458,  290,  313,  459,  460,  111,
      453,   85,  453,  309,  268,  453,  291,  453,  579,  263,
      264,  265,  286,  527,  266,  453,  267,  319,  291,  329,
      287,  330,  454,  313,  454,  313,  267,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  461,  286,  462,  122,
      453,  312,  461,  535,  471,  461,  471,  287,  111,  471,
      471,   85,  313,  312,  475,  329,  476,  330,   85,  477,
      478,  461,  313,  462,  122,  786,  456,  564,  461,  471,

      536,  471,  301,  111,  471,   85,  471,  471,  461,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  102,  313,
      278,  278,  278,  278,  278,  278,  278,  286,  465,  466,
      467,  559,  471,  468,  469,  287,   85,  469,  284,  284,
      284,  284,  284,  284,  284,  284,  284,   85,  470,  542,
      609,   85,  286,  465,  466,  467,   85,   85,  468,  279,
      469,  551,  287,  122,  301,  111,  472,   85,  472,  544,
      469,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      479,   85,  480,  323,  122,  547,  479,  323,  122,  479,
      111,  272,  273,  274,   85,   85,  275,  276,   85,   85,

      276,  552,   85,   85,  588,  479,  787,  480,  573,  122,
      474,   85,  479,  558,  560,  565,  272,  273,  274,  561,
      562,  275,  479,  276,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  276,  557,  574,   85,  444,   85,  445,
      283,  563,  283,  570,  106,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  498,   85,  499,  308,   85,  500,
      501,   85,   85,  307,  308,  309,   85,  576,  568,  106,
      482,  482,  309,  566,  498,  711,  499,  595,  502,  500,
      501,   85,  308,   85,  569,  291,  577,   85,  567,  308,
       85,   85,  309,  483,  484,  485,  486,  487,   85,  309,

      578,  575,  488,  711,  487,  291,   85,  580,  581,  489,
       85,   85,  291,   85,   85,  586,  585,   85,  490,  484,
      590,  491,  587,  486,  502,  487,  582,  809,  637,  488,
       85,   85,  291,  589,  487,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  504,  553,  505,  592,   85,  506,
      507,  554,  555,  556,  493,   85,  494,  593, 1348,  495,
      496,   85,   85,  496,  504,   85,  505,  111,  508,  506,
      507,  591,   85,   85,  497,   85,  583,  584,   85,  493,
      596,  494,  594,  598,  495,  597,  496,  111,   85,   85,
       85,  601,  111,  599,   85,   85,  496,  842,  602,  608,

      104,  104,  104,  104,  104,  104,  104,  104,  104,   85,
      600,  605,  111,  603,  508,  510,   85,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  522,  611,  523,  604,
       85,  524,  525,  511,  511,  511,  511,  511,  511,  307,
      512,  513,  514,  515,  516,   85,   85,   85,  613,  517,
      526,  518,  789,   85,   85,  632,  519,  313,  511,  511,
      511,  511,  511,  511,  606,  520,  513,  607,  521,  522,
      515,  523,  516,   85,  524,  525,  517,   85,   85,   85,
      528,  518,  529,   85,  313,  530,  531,  528,   85,  529,
       85,  612,  530,  531,   85,  614,  610,   85,   85,   85,

      313,   85,  615,  122,  532,  619,  618,  617,  616,   85,
      122,   85,   85,   85,  626,   85,   85,  620,  621,  526,
      622,  623,  625,   85, 1348,  628,   85,  313,  122,  629,
      624,  631,  634,   85,  627,  122,  630,  532,  117,  117,
      117,  117,  117,  117,  117,  117,  117,   85,   85,   85,
      231,  661,  633,  434,  231,  635,  229,  444,  434,  445,
      435, 1348,  654, 1333,   85,  636,  267,  639,  237,  237,
      237,  237,  237,  237,  237,  748,  661,  326,  436,  436,
      436,  436,  436,  436,  436,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  657,   85,  658,  674,  708,  659,

      660,  276,  501,  700,  291,  111,  755,  641,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  681,  263,  700,  265,
      111,  291,  266,  267,  682,  291,  267,  709,  711,  111,
      665,  507,  666,  122,  736,  667,  668,  653,  525, 1348,
      712,  681,  263,   85,  265,   85,  463,  266,  753,  267,
      768,  682,  291,  661,  111,  454,  711,  454,  122,  267,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  661,  661,
      735,  661,  122,  313,  661,  661,  486,  681,  465,  466,

      467,  711,  681,  468,  469,  682,  677,  469,  678,   85,
      682,  679,  680,  713,  661,   85,  661,  122,  470,  661,
      313,  661,  681,  465,  466,  467,  486,  681,  468,  711,
      469,  313,  682,  814,  751,  737,  662,  682,  662,  531,
      469,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      669,  738,  670,   85,   85,   85,  669,   85,  313,  669,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  749,
      750,   85,   85,  760,   85,  669,  757,  670,  739,  826,
      664,  754,  669,  278,  278,  278,  278,  278,  278,  278,
      104,  104,  669,  672,  672,  672,  672,  672,  672,  672,

      672,  672,   85,  694,  682,  695,  696,   85,   85,  854,
      515,  714,  272,  461,  274,  752,  714,  275,  276,  715,
      759,  276,  481,   85,  715,   85,   85,   85,  697,  682,
      761,  698,  673,  696,  756,  758,  714,  272,  777,  274,
      763,  714,  275,  700,  276,  700,  715,   85,  700,  700,
      472,  715,  472,  771,  276,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  482,  482,   85,   85,  700,  683,
      700,  684,  685,  700,   85,  700,   85,  689,  686,  690,
       85,   85,  691,  692,  767,   85,  775,  483,  484,  485,
      486,  487,  764,  765,  687,  788,  488,  688,  487,  685,

      681,  693,  762,  489,  701,  686,  702,  766,  682,  703,
      704, 1348,  490,  484,   85,  491,  689,  486,  690,  487,
       85,  691,  692,  488,   85,  681,  779,  700,  487,  769,
      714,  705,   85,  706,   85,  682,  770,  705,  715,  681,
      705,   85,  778,  773,  774,   85,   85,  682,   85,   85,
      796,  776,  700,  780,  515,  714,  705,   85,  706,  716,
      932,  717,  718,  705,  681,  715,  693,  785,  719,  792,
      790,  800,   85,  705,  682,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  720,  791,   85,  721,   85,  718,
      730,  715,  731,  732,  493,  719,  494,   85,   85,  495,

      496,   85,   85,  496,  794,   85,   85,  798,   85,  793,
       85,   85,  795,   85,  497,  733,  715,  797,  734,  493,
      732,  494,  806,  801,  495,  799,  496,  811,  803,  802,
       85,  805,   85,   85,   85,   85,  496,  510, 1062,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  804,  808,
      807,   85,   85,   85,  816,  511,  511,  511,  511,  511,
      511,   85,  512,  513,  514,  515,  516,   85,   85,   85,
      813,  517,  815,  518,  810,  812,  820,   85,  519, 1348,
      511,  511,  511,  511,  511,  511,  821,  520,  513,  817,
      521,  722,  515,  723,  516,   85,  724,  725,  517,  727,

       85,  727,  827,  518,  728,  728,  728,  728,  728,  728,
      728,  728,  728,   85,  714,  726,   85,  819,   85,  722,
      818,  723,  715,  823,  724,  725,  822,  824,   85,   85,
       85,   85,   85,   85,   85,  825,   85,   85,  231,  714,
      830,  831,  714,  729,  843,  835,  832,  828,   85,  715,
      715,  833,  829,  834,  859,  836,   85,   85,  469,  837,
      868,   85,  930,  838,  479,   85,  839,  714, 1064,  726,
      841,  453,  453,  696,  487,  682,  471,  715,  686,  840,
      237,  237,  237,  237,  237,  237,  237,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  453,  453,  862,  487,

      863,  471,  682,  864,  865,  686,  263,  487,  265,  267,
      267,  266,  267,   85,  276,  267,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  876,  653,   85,  685,  692,
      921,  263,  487,  265,  471,  986,  266,  686,  267,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  267,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  487,  471,
      686,  681,  882,  715,  686,   85,  496,  681,  465,  682,
      467,  718,  276,  468,  469,  682,  685,  469,  671,  885,
      719,  886,  696,  487,  887,  888,  681,  686,  858,   85,
      715, 1138,  681,  465,   85,  467,  682,  992,  468,  871,

      469,  872,  682,  938,  873,  874,  662,  719,  662,  719,
      469,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  871,
      686,  872,   85,  898,  873,  874,  719,  725,  719,  272,
       85,  274,  518,  931,  275,  276,  482,  482,  276,  875,
      877,  711,  878,  875,  718,  879,  880,  686,  518,  673,
      686,  937,   85,  712,  272,  719,  274,  518,  711,  275,
      877,  276,  878,  487,  881,  879,  880,  923,   85,  711,
      892,  276,  732,  518,  893,  699,  894,  686,   85,  895,
      896,  922,   85,  487,   85, 1325,  711,  943,  487,  492,

      492,  492,  492,  492,  492,  492,  492,  492,  897,  960,
      924,  936,   85,  732,  518,  719,   85,  889,  487,  889,
      881,   85,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  893,  714,  894,  925,  714,  895,  896,  707,  518,
      715,  926,  719,  715,  728,  728,  728,  728,  728,  728,
      728,  728,  728,   85,   85,   85,   85,  714,  939,  949,
      714,  891,  719,   85,  946,   85,  727,  715,  727,  927,
      715,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      904,  897,  905,  933,   85,  906,  907,  928,   85,  719,
      899,  899,  899,  899,  899,  899,  899,  899,  899,   85,

      904,  929,  905,  518,  908,  906,  907,   85,   85,  900,
      942,  901,   85,   85,  902,  900,   85,  934,  900,  940,
       85,   85,  935,  518,   85,  941,   85,   85,  518,  903,
      947,   85,   85,  945,  900,  944,  901,  950,   85,  902,
      961,  900,  948,   85,  963,   85,   85,  962,  518,   85,
      908,  900,   85,  959,  964,   85,   85,  973,  965,   85,
       85,  966,   85,  974,  967,  968,  979,   85,   85,  970,
       85,  969,  971,  976,  972,  977,  978,  975,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,  981,   85,
       85,   85,   85,  987,  988,   85,  980,  984,  991,  985,

      995,  993,  982,  983,   85,   85,  990,  989,   85,   85,
       85,   85,  996,  994,   85,  997,  999,   85,   85,   85,
     1017, 1021,   85, 1000,  669,  874,  998, 1001,  453,  661,
      661, 1022, 1002, 1024, 1003,  880, 1072,  705,   85, 1057,
      471, 1004,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  487,  686,  453,  661,  661,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  471,  267,  469,  469,  686,
       85, 1029,  487,  700,  700,  896,  487,  719,  276,  686,
     1030,  852,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  719,  518,   85,  518,  866,  686,  487,  700,  700,

     1050,  465,   85,  467,  719, 1030,  468,  469,   85, 1038,
      469,  496,  496,  907,   85,   85,   85,  518,  719,  518,
     1052,  858,   85, 1051,   85, 1058,  465, 1070,  467, 1056,
     1060,  468, 1348,  469,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  469, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027,  899,  899,  899,  899,  899,  899,  899,
      899,  899,   85,  900,   85,  901,   85, 1048,  902,  900,
       85, 1031,  900, 1032,   85,   85, 1033, 1034,   85, 1063,
     1049, 1059,   85, 1028, 1075,   85, 1065, 1061,  900, 1324,
      901, 1078,  903,  902, 1030,  900,   85, 1053, 1074, 1054,

     1066,  889, 1055,  889, 1067,  900,  890,  890,  890,  890,
      890,  890,  890,  890,  890, 1035,   85, 1036, 1069, 1030,
       85, 1035,   85,   85, 1035,   85,   85, 1076,   85,   85,
       85,   85,   85, 1068,   85,   85, 1080, 1071, 1073,   85,
     1035,   85, 1036, 1077, 1090,   85,   85, 1035,   85, 1089,
     1079, 1098, 1092, 1099, 1091, 1094, 1093, 1035, 1095,   85,
       85, 1096,   85,   85,   85,   85,   85,  661,   85,   85,
       85, 1104, 1105,   85, 1106, 1097, 1100, 1107,   85,   85,
     1109,   85, 1101, 1102, 1103,   85,   85, 1110, 1111,   85,
       85, 1108,  661,  700, 1112, 1120,   85, 1144, 1123,  900,

     1124, 1113, 1142, 1125, 1126,  469, 1137,   85, 1114,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  700,  899,
      899,  899,  899,  899,  899,  899,  899,  899, 1136,   85,
     1140,  496,   85, 1143, 1141,   85,   85, 1145, 1147,   85,
       85,   85,   85, 1148, 1139,   85, 1348, 1150, 1015, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1037, 1146,
     1149,   85,   85,   85,   85,   85,   85, 1151,  900, 1154,
      901,   85, 1153,  902,  900, 1152,   85,  900, 1156, 1158,
     1159,   85, 1155, 1160, 1157, 1166,   85,   85, 1028, 1161,
       85,   85,   85,  900, 1162,  901,   85, 1165,  902, 1163,

      900, 1176,   85, 1167, 1164, 1168,   85,   85,   85, 1183,
      900,   85,   85,   85,   85,   85, 1178,   85,   85,   85,
       85,   85,   85,   85, 1323, 1179, 1188, 1177, 1030, 1180,
     1030, 1189, 1181, 1184, 1208,   85, 1190, 1182,   85, 1186,
     1185,   85, 1187, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1196, 1030,   85, 1030, 1035, 1205,   85, 1206,
       85, 1209, 1207,   85,   85, 1213,  900, 1210,  900,   85,
       85,   85,   85,   85, 1211, 1212, 1222,   85,   85, 1214,
     1215, 1220, 1119, 1223,   85,   85,   85, 1224, 1225, 1218,
     1221, 1230,   85, 1227, 1216,   85, 1217,   85, 1226, 1219,

     1228,   85,   85,   85, 1229,   85,   85,   85, 1232,   85,
       85,   85,   85,   85, 1030,   85, 1239, 1231, 1256,   85,
       85, 1254, 1255, 1237,   85,   85, 1240,   85,   85, 1238,
     1244,   85, 1242, 1267, 1241,   85, 1243,   85, 1261, 1030,
       85,   85,   85,   85, 1264, 1259, 1260,   85, 1281,   85,
       85, 1257,  900, 1262, 1258,   85,   85,   85, 1274, 1263,
     1265, 1266,   85,   85, 1269,   85, 1268,   85, 1271, 1270,
     1272,   85,   85,   85, 1273,   85,   85, 1289,   85,   85,
       85,   85,   85, 1279, 1292,   85, 1291,   85,   85, 1293,
       85, 1280, 1282, 1275, 1294,   85,   85,   85, 1297, 1290,

     1299,   85,   85,   85, 1300, 1295,   85, 1298, 1314,   85,
     1307, 1296, 1301,   85, 1308,   85,   85, 1302,   85, 1315,
       85,   85, 1309,   85, 1313, 1317, 1318,   85, 1316,   85,
     1319,   85, 1320,   85,   85,   85,   85, 1328,   85, 1330,
     1321, 1326,   85,   85,   85, 1329, 1331,   85, 1327,   85,
       85,   85, 1336,   85,   85,   85,   85,   85, 1332, 1339,
       85,   85, 1337,   85, 1334, 1335,   85, 1341, 1343,   85,
       85, 1338, 1344, 1340, 1345, 1348, 1347, 1342, 1312, 1348,
     1311, 1348, 1346,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   84, 1348,   85,
       84,   84,   84,   84,   84,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  234, 1348,  234,  234,
     1306,  234,  234,  234,  234, 1304,  234,  242,   85,   85,
      242,  242,  242,  242,  242,  242,   85,  242,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  305,
      305,  305,   85,   85,  305,  335,   85,   85,   85,  335,
      335,  335,  335,  337,  337,   85, 1348,  337,  339,  339,

     1348, 1288,  339,  366, 1286, 1035, 1348,  366,  366,  366,
      366,  438,  438, 1284, 1348,  438,  440,  440, 1283,   85,
      440,  442,  442,   85,   85,  442,  449,  449,   85, 1278,
      449,  451,  451, 1348, 1348,  451,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  509,  509,  305,
      305,  305,  533,   85,   85,  533,  533,  533,  533,  533,
      537,  537,   85,   85,  537,  337,  337,  539,  539,   85,
       85,  539,  339,  339,   84, 1348, 1253,   84,   84,   84,
       84,   84,  571, 1252, 1348,  571,  571,  571,  571,  571,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      229,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  642,  642, 1035, 1035,  642,  438,  438,  644,
      644, 1249, 1348,  644,  440,  440,  646,  646, 1248, 1348,
      646,  442,  442,  648,  648, 1246,   85,  648,  449,  449,
      650,  650,   85,   85,  650,  451,  451,  710,  710,  710,
       85,  710,  509,  509,  509,   85,  509,  533,   85,   85,
      533,  533,  533,  533,  533,  740,  740, 1348, 1348,  740,
      742,  742, 1348, 1235,  742,  744,  744, 1348, 1234,  744,
      537,  537,  746,  746,   85,   85,  746,  539,  539,   84,
       85,   85,   84,   84,   84,   84,   84,  571,   85,   85,

      571,  571,  571,  571,  571,  781,  781,   85, 1348,  781,
      783,  783, 1204, 1348,  783,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  844,  844, 1348, 1348,
      844,  642,  642,  846,  846, 1201, 1348,  846,  644,  644,
      646,  646, 1200, 1035,  646,  848,  848, 1198, 1197,  848,
      648,  648,  850,  850, 1195,  705,  850,  650,  650,  710,
      710,  710,  669,  710,  511,  511, 1194, 1192,  511,  909,
      909,   85,   85,  909,  911,  911,   85,   85,  911,  913,
      913,   85,   85,  913,  740,  740,  915,  915,   85,   85,
      915,  742,  742,  917,  917,   85,   85,  917,  744,  744,

      919,  919,   85,   85,  919,  746,  746,   84, 1175, 1174,
       84,   84,   84,   84,   84,  951,  951, 1172, 1170,  951,
      953,  953,   85,   85,  953,  955,  955, 1135, 1133,  955,
      781,  781,  957,  957, 1132, 1130,  957,  783,  783, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1007, 1007, 1128,  907, 1007,  844,  844, 1009, 1009,  900,
     1122, 1009,  846,  846, 1011, 1011, 1121,  896, 1011,  848,
      848,   84,   84, 1119,  705,   84,  850,  850,  710,  710,
      705, 1118,  710, 1039, 1039,  880,  874, 1039,  909,  909,
     1041, 1041,  479,  669, 1041,  911,  911, 1043, 1043,  669,

     1117, 1043,  913,  913, 1045, 1045,  461, 1006, 1045,  915,
      915, 1047, 1047,  917,  917,   84,   85,   85,   84,   84,
       84,   84,   84,  919,  919, 1081, 1081,   85,   85, 1081,
      951,  951, 1083, 1083,   85,   85, 1083,  953,  953, 1085,
     1085,   85,   85, 1085,  955,  955, 1087, 1087,   85,   85,
     1087,  957,  957, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1115, 1115, 1007, 1007, 1009, 1009,
     1116, 1116, 1011, 1011,   84,   84, 1127, 1127,   85,   85,
     1127, 1039, 1039, 1129, 1129,   85,   85, 1129, 1041, 1041,
     1131, 1131,   85,   85, 1131, 1043, 1043,  335,  335,   85,

       85,  335, 1045, 1045, 1134, 1134,   85,   85, 1134, 1169,
     1169, 1088, 1086, 1169, 1081, 1081, 1171, 1171, 1084, 1082,
     1171, 1083, 1083, 1173, 1173,   85, 1046, 1173, 1085, 1085,
      366,  366, 1044, 1042,  366, 1087, 1087, 1191, 1191, 1040,
      907, 1191, 1193, 1193,  907, 1037, 1193, 1199, 1199,  725,
      896, 1199,  533,  533,  896,  892,  533, 1202, 1202, 1203,
     1203,  705, 1026, 1203, 1233, 1233, 1025, 1023, 1233,  571,
      571,  880,  880,  571, 1236, 1236, 1245, 1245,  692,  874,
     1245, 1247, 1247,  874,  479, 1247, 1250, 1250, 1199, 1199,
     1251, 1251,  479, 1020, 1251,  919,  919,  669, 1019,  919,

     1276, 1276, 1277, 1277, 1018, 1016, 1277, 1009, 1009, 1015,
      461, 1009,   84,   84,  461, 1014,   84, 1285, 1285, 1013,
     1012, 1285, 1287, 1287, 1010, 1008, 1287, 1303, 1303, 1006,
       85, 1303, 1305, 1305,   85,   85, 1305, 1310, 1310,   85,
       85, 1310,  335,  335,   85,   85,  335, 1322, 1322,   85,
       85, 1322,  366,  366,   85,   85,  366,   85,   85,  958,
      956,  954,  952,   85,  920,  918,  916,  914,  912,  910,
      531,  525,  735,  725,  725,  507,  501,  496,  884,  883,
      692,  692,  479,  870,  869,  867,  866,  469,  861,  860,
      461,  856,  855,  853,  852,  851,  849,  647,  647,  847,

      845,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,  784,  782,  572,  747,  745,  743,  741,  534,  531,
      531,  319,  525,  525,  507,  507,  297,  501,  501,  707,
      699,  276,  676,  675,  671,  267,  656,  655,  651,  649,
      445,  445,  647,  645,  643,   85,   85,   85,  572,  541,
      540,  538,  534,  331,  330,  319,  319,  304,  297,  297,
      270,  463,  452,  450,  448,  445,  444,  443,  441,  439,
      231,   85,   85,  367,  341,  340,  338,  331,  336,  334,
      331,  329,  328,  327,  270,  261,  260,   83,   83,   85,
      233,  173,  152,  132,  127,   85, 1348,   71,   71,   11,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348

    } ;

static const flex_int16_t yy_chk[4192] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    8,    9,   10,    2,   19,   19,    2,

        9,   10,   20,    7,    8,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   16,   24,   16,
       24,   25,   36,   36,   20,   28,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   34,   54,   25,   29,
       25,   27,   27,   27,   29,   43,   41,   43,    7,    8,
        9,   10,   57,   63,  113,   54,   34,   29,   34,   34,
       39,   57,   63,   46,   50,   39,   41,   47,   44,   44,
       44,   44,   47,   44,   44,   53,   44,  170,   44,   50,
       46,   50,   44,   44,   46,   53,   46,   47,   44,  170,
       50,   44,   53,   41, 1347,  113,   55,   27,   30,  167,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   44,
       39,  162,   52,   39,   55,  167,   67,   30,   67,   55,
       30,   52,   49,   30,   30,   30,   30,   30,   65,  162,
       52,   49,   30,   30,   30,   49,  124,  184,   48,   30,
       49,   56,   30,   48,   49,   30,  105,  105,   30,   30,
       48,   30,   85,   30, 1346,   30,   48,  164,   56,   30,
      184,   56,   30,   56,   30,   31,  164,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   59,  124,  136,   85,
      136,  137,   65,  137,  139,  105,  139,   31,   59,   59,
       31,   31,   31,   31,   31,   51,   59, 1343,   59,   31,

       51,   31,  140,   59,   60,  142,   31,  142,   51,   60,
       51,   61,   31,   51,  166,   31,   31,   51,   31,  140,
       31,  140,   31,  166,   61,   60,   31,  174,  422,   61,
      141,   31,   37,   61,  165,  174,   37,   37,   62,   37,
       58,   37,   37,   62,   37,  141,   37,  141,  163,  165,
       62,   62,   58,   58,   60,  107,  107,   60,   37,   37,
       37,  110,   58,   58,  107,   58,  163,  143,  143,  110,
      143,   60,   68,   68,   68,   68,   68,   68,  422,  155,
       68,  107,   37,   37,  155,   37,  110,   37,  144,  169,
      144,  107, 1338,   69,   69,  147,  110,  147,   69,   78,

       78,   78,   78,   78,   78,   80,   80,   80,   80,   80,
       80,  169,   37,   37,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   75,   75,  145,  145,  145,   75,  155,
       75,  112,  112,  112,  112,   75,   81,   81,   81,   81,
       81,   81,  432,  172,   75,   75,   75,   75,   75,   75,
       75,  118,  118,  148,  432,  148,  112,  112,   75,  112,
      118,  112,  151,  168,  151,  172,  103,  103,  103,  103,
      103,  103,  103,  176,  114,  175,   75,  118,  192,  161,
       75,  168,  182,  103, 1334,   75,   75,  118,  121,   75,
       75,  175,  182,  114,  161,  176,  121,   75,  192,  103,

       75,  161,   75,   75,   75,  103,   75,   83,  103,  114,
      177,   83,   83,  121,   83,  114,   83,   83,  114,   83,
      178,   83, 1333,  121,  123,  123,  123,  123,  103,  178,
      183,  177,  186,   83,   83,   83,  210,  104,  114,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  185,  123,
      123,  183,  123,  186,  123,  193,  210,   83,   83,  104,
       83,  106,  191,  106,  189,  179,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  185,  187,  115,  104,  189,
      191,  187,  193,  194,  104,  115,  179,  179,   83,   98,
       98,   98,   98,   98,   98,   98,   98,   98,  180,  187,

      194,  115,  115,  180,  188,  106,  198,  125,   98,   98,
       98,  188,  115,   98,   98,  125,  180,   98,  346,  195,
      190,  201,  199,  198,  219,  346,  188,  181,   98,  219,
      201,  125,  125,   98,   98,   98,  181,  190,   98,  199,
       98,  195,  125,  109,  181,  109,  190,  181,  109,  109,
       98,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      200,  203,  197,  116,  208,  116,  109,  109,  116,  116,
      102,  102,  102,  211,  109,  102,  102,  197,  108,  102,
      108,  108,  200,  345,  197,  208,  116,  108,  203,  211,
      102,  109,  209,  212,  116,  102,  102,  102,  212,  345,

      102,  109,  102,  108,  215,  209,  108,  119,  108,  119,
      119,  116,  102,  116,  108,  205,  119,  120,  213,  120,
      212,  116,  120,  120,  126, 1331,  126,  214,  206,  126,
      126,  204,  119,  205,  348,  119,  222,  119,  204,  206,
      120,  120,  204,  119,  207,  213,  214,  126,  120,  207,
      204,  348,  204,  204,  215,  126,  206,  215,  222,  244,
      220,  244,  349,  217,  207,  120,  216,  349,  245,  223,
      245,  171,  126,  220,  126,  120,  171,  171,  171,  216,
      171,  171,  126,  217,  171,  218,  171,  216,  221,  223,
      267,  171,  171,  171,  171,  171,  343,  221,  218,  564,

      218,  221,  227,  227,  227,  227,  227,  227,  228,  228,
      227,  235,  235,  228,  343,  267,  235,  230,  230,  247,
      564,  247,  230,  250,  252,  250,  252,  282,  282,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  232,  232,  249,
      251,  251,  232,  251,  232,  238,  238,  238,  238,  238,
      238,  238,  248,  255,  249,  255,  249,  276,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  279,  256,  248,
      256,  248,  253,  253,  253,  257,  286,  257,  350,  294,
      290, 1328,  276,  294,  238,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  301,  263,  308,  263,  350,  292,
      263,  263,  288,  286,  262,  262,  262,  290,  279,  262,
      262,  288,  265,  262,  265,  292,  312,  265,  265,  301,
      263,  374,  263,  308,  262,  263,  292,  263,  374,  262,
      262,  262,  297,  316,  262,  265,  262,  316,  288,  332,
      297,  332,  264,  312,  264,  314,  262,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  266,  297,  266,  323,
      265,  314,  266,  336,  272,  266,  272,  297,  302,  272,
      272,  577,  314,  310,  274,  333,  274,  333,  360,  274,
      274,  266,  310,  266,  323,  577,  264,  360,  266,  272,

      336,  272,  302,  302,  272,  356,  272,  274,  266,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  278,  310,
      278,  278,  278,  278,  278,  278,  278,  298,  271,  271,
      271,  356,  274,  271,  271,  298,  342,  271,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  402,  271,  342,
      402,  344,  298,  271,  271,  271,  351, 1327,  271,  278,
      271,  351,  298,  324,  299,  299,  273,  347,  273,  344,
      271,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      275,  352,  275,  321,  321,  347,  275,  324,  324,  275,
      299,  277,  277,  277,  579,  355,  277,  277,  382,  357,

      277,  352,  361,  358,  382,  275,  579,  275,  367,  321,
      273,  354,  275,  355,  357,  361,  277,  277,  277,  358,
      358,  277,  275,  277,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  277,  354,  367,  359,  446,  365,  446,
      285,  359,  285,  365,  280,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  289,  363,  289,  319,  371,  289,
      289,  362,  389,  280,  320,  319,  364,  371,  363,  280,
      281,  281,  320,  362,  293,  713,  293,  389,  289,  293,
      293,  372,  319,  370,  364,  289,  372,  375,  362,  320,
      376,  373,  319,  281,  281,  281,  281,  281,  379,  320,

      373,  370,  281,  713,  281,  293,  377,  375,  376,  281,
      380,  384,  289,  431,  383,  380,  379,  381,  281,  281,
      384,  281,  381,  281,  293,  281,  377,  605,  431,  281,
      353,  386,  293,  383,  281,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  300,  353,  300,  386,  387,  300,
      300,  353,  353,  353,  284,  378,  284,  387, 1325,  284,
      284,  605,  391,  284,  303,  385,  303,  300,  300,  303,
      303,  385,  394,  388,  284,  390,  378,  378,  392,  284,
      390,  284,  388,  392,  284,  391,  284,  303,  393,  395,
      401,  394,  300,  393,  639,  396,  284,  639,  395,  401,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  404,
      393,  398,  303,  396,  303,  305,  397,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  311,  404,  311,  397,
      406,  311,  311,  305,  305,  305,  305,  305,  305,  307,
      305,  305,  305,  305,  305,  582,  398,  426,  406,  305,
      311,  305,  582,  399,  400,  426,  305,  311,  305,  305,
      305,  305,  305,  305,  399,  305,  305,  400,  305,  315,
      305,  315,  305,  407,  315,  315,  305,  403,  405,  408,
      322,  305,  322,  412,  311,  322,  322,  325,  409,  325,
      410,  405,  325,  325,  413,  407,  403,  411,  415,  414,

      315,  418,  408,  322,  322,  412,  411,  410,  409,  425,
      325,  423,  416,  417,  418,  420,  421,  413,  414,  315,
      415,  416,  417,  424, 1324,  421,  428,  315,  322,  423,
      416,  425,  428,  429,  420,  325,  424,  325,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  427,  430,  433,
      435,  469,  427,  434,  434,  429,  435,  447,  434,  447,
      434, 1323,  457, 1322,  542,  430,  457,  433,  436,  436,
      436,  436,  436,  436,  436,  542,  469,  326,  437,  437,
      437,  437,  437,  437,  437,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  462,  549,  462,  475,  498,  462,

      462,  475,  498,  496,  501,  507,  549,  436,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  486,  455,  496,  455,
      507,  501,  455,  455,  486,  502,  455,  504,  509,  508,
      467,  504,  467,  531,  522,  467,  467,  455,  522,  519,
      509,  486,  455,  547,  455,  561,  463,  455,  547,  455,
      561,  486,  502,  467,  508,  456,  509,  456,  531,  455,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  467,  465,
      519,  465,  532,  525,  465,  465,  483,  483,  464,  464,

      464,  510,  490,  464,  464,  483,  480,  464,  480,  611,
      490,  480,  480,  510,  465,  545,  465,  532,  464,  465,
      525,  465,  483,  464,  464,  464,  490,  490,  464,  510,
      464,  526,  483,  611,  545,  528,  466,  490,  466,  528,
      464,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      468,  534,  468,  543,  551,  544,  468,  554,  526,  468,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  543,
      544, 1320,  548,  554,  623,  468,  551,  468,  534,  623,
      466,  548,  468,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  468,  473,  473,  473,  473,  473,  473,  473,

      473,  473,  546,  488,  488,  488,  488,  553,  555,  657,
      512,  512,  473,  657,  473,  546,  515,  473,  473,  512,
      553,  473,  481,  569,  515,  550,  552,  557,  488,  488,
      555,  488,  473,  488,  550,  552,  512,  473,  569,  473,
      557,  515,  473,  493,  473,  493,  512,  563,  493,  493,
      474,  515,  474,  563,  473,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  482,  482,  560,  567,  493,  484,
      493,  484,  484,  493,  581,  493,  558,  485,  484,  485,
      556, 1319,  485,  485,  560,  559,  567,  482,  482,  482,
      482,  482,  558,  558,  484,  581,  482,  484,  482,  484,

      485,  485,  556,  482,  494,  484,  494,  559,  485,  494,
      494, 1312,  482,  482,  562,  482,  491,  482,  491,  482,
      570,  491,  491,  482,  566,  485,  572,  494,  482,  562,
      520,  495,  565,  495,  568,  485,  562,  495,  520,  491,
      495,  589,  570,  565,  566,  576,  585,  491,  583,  595,
      589,  568,  494,  572,  520,  520,  495,  760,  495,  513,
      760,  513,  513,  495,  491,  520,  491,  576,  513,  585,
      583,  595,  584,  495,  491,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  513,  584,  586,  513,  593,  513,
      517,  517,  517,  517,  492,  513,  492,  588,  587,  492,

      492,  608,  591,  492,  587,  594,  598,  593,  596,  586,
      597,  600,  588,  601,  492,  517,  517,  591,  517,  492,
      517,  492,  601,  596,  492,  594,  492,  608,  598,  597,
      602,  600,  604,  599,  613,  932,  492,  511,  932,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  599,  604,
      602,  612,  607,  609,  613,  511,  511,  511,  511,  511,
      511,  610,  511,  511,  511,  511,  511,  617,  618,  614,
      610,  511,  612,  511,  607,  609,  617,  624,  511, 1311,
      511,  511,  511,  511,  511,  511,  618,  511,  511,  614,
      511,  514,  511,  514,  511,  616,  514,  514,  511,  516,

      615,  516,  624,  511,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  619,  514,  514,  620,  616,  621,  521,
      615,  521,  514,  620,  521,  521,  619,  621,  622,  625,
      626,  627,  631,  628,  630,  622,  629,  633,  640,  514,
      627,  628,  521,  516,  640,  630,  628,  625,  634,  514,
      521,  628,  626,  629,  665,  631,  635,  758,  665,  633,
      677,  637,  758,  634,  677,  934,  635,  521,  934,  521,
      637,  655,  656,  694,  694,  681,  675,  521,  685,  635,
      641,  641,  641,  641,  641,  641,  641,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  655,  656,  670,  694,

      670,  675,  681,  670,  670,  685,  652,  696,  652,  655,
      656,  652,  652,  748,  675,  652,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  689,  652,  820,  683,  689,
      748,  652,  696,  652,  676,  820,  652,  683,  652,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  652,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  697,  676,
      687,  692,  701,  714,  683, 1051,  701,  693,  663,  692,
      663,  716,  676,  663,  663,  693,  687,  663,  671,  706,
      716,  706,  697,  697,  706,  706,  692,  687,  663,  826,
      714, 1051,  693,  663,  766,  663,  692,  826,  663,  688,

      663,  688,  693,  766,  688,  688,  664,  716,  664,  718,
      663,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  684,
      688,  684,  759,  722,  684,  684,  718,  722,  720,  672,
      765,  672,  732,  759,  672,  672,  699,  699,  672,  688,
      695,  710,  695,  684,  720,  695,  695,  688,  733,  672,
      684,  765,  751,  710,  672,  720,  672,  732,  712,  672,
      698,  672,  698,  695,  695,  698,  698,  751,  749,  710,
      712,  672,  733,  733,  717,  699,  717,  684,  771,  717,
      717,  749,  764,  698,  752, 1310,  712,  771,  695,  707,

      707,  707,  707,  707,  707,  707,  707,  707,  717,  787,
      752,  764,  753,  730,  730,  717,  787,  711,  698,  711,
      698,  754,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  721,  725,  721,  753,  726,  721,  721,  707,  730,
      725,  754,  717,  726,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  767,  777,  774,  755,  725,  767,  777,
      726,  711,  721,  761,  774,  756,  729,  725,  729,  755,
      726,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      731,  721,  731,  761, 1309,  731,  731,  756,  757,  721,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  762,

      734,  757,  734,  731,  731,  734,  734,  763,  768,  728,
      770,  728,  769,  772,  728,  728,  773,  762,  728,  768,
      776,  775,  763,  734,  778,  769,  785,  791,  731,  728,
      775,  788,  792,  773,  728,  772,  728,  778,  789,  728,
      788,  728,  776,  793,  791,  770,  794,  789,  734,  798,
      734,  728,  799,  785,  792,  795,  797,  803,  793,  801,
      800,  794,  804,  803,  795,  797,  809,  808,  805,  799,
      807,  798,  800,  805,  801,  807,  808,  804,  810,  814,
      815,  816,  818,  821,  817,  823,  825,  822,  814,  824,
      828,  831,  803,  821,  822,  809,  810,  817,  825,  818,

      831,  827,  815,  816,  832,  833,  824,  823,  827,  835,
      837,  836,  832,  828,  839,  833,  836,  840,  838,  842,
      862,  871,  927,  837,  862,  871,  835,  838,  853,  860,
      861,  877,  839,  885,  840,  877,  942,  885, 1308,  927,
      867,  842,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  880,  874,  853,  860,  861,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  867,  853,  860,  861,  875,
      942,  893,  881,  883,  884,  893,  880,  896,  867,  874,
      900,  852,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  897,  907,  922,  908,  866,  875,  881,  883,  884,

      922,  857,  928,  857,  896,  900,  857,  857, 1307,  904,
      857,  883,  884,  904,  923,  924,  926,  907,  897,  908,
      924,  857,  930,  923,  940,  928,  857,  940,  857,  926,
      930,  857, 1306,  857,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  857,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  921,  890,  935,  890,  933,  921,  890,  890,
      931,  901,  890,  901,  929,  945,  901,  901,  944,  933,
      921,  929,  937,  890,  945,  936,  935,  931,  890, 1305,
      890,  948,  899,  890,  901,  890,  939,  925,  944,  925,

      936,  891,  925,  891,  937,  890,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  902,  938,  902,  939,  901,
      941,  902,  946,  943,  902,  947,  948,  946,  949,  950,
      959,  963,  925,  938,  965,  960,  950,  941,  943,  964,
      902,  971,  902,  947,  960,  969,  966,  902,  972,  959,
      949,  973,  964,  974,  963,  966,  965,  902,  969,  976,
      977,  971,  982,  980,  981,  984,  990, 1016,  993,  994,
      995,  982,  984,  999,  990,  972,  976,  993,  998, 1000,
      995, 1002,  977,  980,  981,  973, 1003,  998,  999,  974,
     1056,  994, 1016, 1023, 1000, 1031, 1049, 1056, 1036, 1031,

     1036, 1002, 1054, 1036, 1036, 1016, 1049, 1048, 1003, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1023, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1048, 1052,
     1053, 1023, 1057, 1055, 1053, 1059, 1054, 1057, 1059, 1058,
     1060, 1063, 1061, 1060, 1052, 1064, 1304, 1063, 1015, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1037, 1058,
     1061, 1068, 1065, 1066, 1053, 1055, 1067, 1064, 1027, 1067,
     1027, 1071, 1066, 1027, 1027, 1065, 1070, 1027, 1069, 1070,
     1071, 1074, 1068, 1072, 1069, 1078, 1073, 1077, 1027, 1073,
     1079, 1075, 1089, 1027, 1074, 1027, 1076, 1077, 1027, 1075,

     1027, 1089, 1080, 1079, 1076, 1080, 1090, 1091, 1092, 1098,
     1027, 1095, 1072, 1069, 1096, 1101, 1091, 1105, 1110, 1078,
     1104, 1107, 1112, 1114, 1303, 1092, 1110, 1090, 1121, 1095,
     1122, 1112, 1096, 1101, 1140, 1142, 1114, 1096, 1098, 1105,
     1104, 1143, 1107, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1123, 1121, 1145, 1122, 1123, 1139, 1146, 1139,
     1147, 1142, 1139, 1140, 1148, 1147, 1121, 1143, 1122, 1151,
     1149, 1150, 1152, 1153, 1145, 1146, 1156, 1155, 1154, 1148,
     1149, 1154, 1119, 1157, 1159, 1160, 1162, 1159, 1160, 1152,
     1155, 1166, 1139, 1162, 1150, 1161, 1151, 1163, 1161, 1153,

     1163, 1165, 1167, 1168, 1165, 1176, 1177, 1179, 1168, 1180,
     1156, 1181, 1184, 1187, 1195, 1190, 1179, 1167, 1207, 1157,
     1166, 1205, 1206, 1176, 1213, 1208, 1180, 1211, 1214, 1177,
     1190, 1216, 1184, 1222, 1181, 1215, 1187, 1241, 1215, 1195,
     1217, 1218, 1225, 1221, 1218, 1213, 1214, 1227, 1241, 1231,
     1207, 1208, 1195, 1216, 1211, 1205, 1206, 1219, 1231, 1217,
     1219, 1221, 1222, 1224, 1225, 1228, 1224, 1229, 1228, 1227,
     1229, 1230, 1232, 1237, 1230, 1238, 1243, 1254, 1259, 1260,
     1262, 1261, 1273, 1237, 1261, 1263, 1260, 1264, 1300, 1262,
     1266, 1238, 1243, 1232, 1263, 1265, 1275, 1270, 1265, 1259,

     1270, 1280, 1281, 1291, 1273, 1264, 1254, 1266, 1291, 1274,
     1280, 1264, 1274, 1282, 1281, 1290, 1293, 1275, 1295, 1293,
     1296, 1313, 1282, 1298, 1290, 1296, 1298, 1299, 1295, 1301,
     1299, 1302, 1301, 1314, 1315, 1316, 1317, 1315, 1321, 1317,
     1302, 1313, 1326, 1318, 1329, 1316, 1318, 1330, 1314, 1332,
     1335, 1341, 1330, 1336, 1337, 1339, 1342, 1340, 1321, 1335,
     1344, 1297, 1330, 1294, 1326, 1329, 1345, 1337, 1340, 1292,
     1289, 1332, 1341, 1336, 1342, 1288, 1345, 1339, 1287, 1286,
     1285, 1284, 1344, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1353, 1283, 1279,
     1353, 1353, 1353, 1353, 1353, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1355, 1278, 1355, 1355,
     1277, 1355, 1355, 1355, 1355, 1276, 1355, 1356, 1272, 1271,
     1356, 1356, 1356, 1356, 1356, 1356, 1269, 1356, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1358,
     1358, 1358, 1268, 1267, 1358, 1359, 1258, 1257, 1256, 1359,
     1359, 1359, 1359, 1360, 1360, 1255, 1253, 1360, 1361, 1361,

     1252, 1251, 1361, 1362, 1250, 1249, 1248, 1362, 1362, 1362,
     1362, 1363, 1363, 1247, 1246, 1363, 1364, 1364, 1245, 1244,
     1364, 1365, 1365, 1242, 1240, 1365, 1366, 1366, 1239, 1236,
     1366, 1367, 1367, 1235, 1234, 1367, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1370,
     1370, 1370, 1371, 1226, 1223, 1371, 1371, 1371, 1371, 1371,
     1372, 1372, 1220, 1212, 1372, 1373, 1373, 1374, 1374, 1210,
     1209, 1374, 1375, 1375, 1376, 1204, 1203, 1376, 1376, 1376,
     1376, 1376, 1377, 1202, 1201, 1377, 1377, 1377, 1377, 1377,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,

     1378, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1380, 1380, 1198, 1197, 1380, 1381, 1381, 1382,
     1382, 1196, 1194, 1382, 1383, 1383, 1384, 1384, 1193, 1192,
     1384, 1385, 1385, 1386, 1386, 1191, 1189, 1386, 1387, 1387,
     1388, 1388, 1188, 1186, 1388, 1389, 1389, 1390, 1390, 1390,
     1185, 1390, 1391, 1391, 1391, 1183, 1391, 1392, 1182, 1178,
     1392, 1392, 1392, 1392, 1392, 1393, 1393, 1175, 1174, 1393,
     1394, 1394, 1172, 1171, 1394, 1395, 1395, 1170, 1169, 1395,
     1396, 1396, 1397, 1397, 1164, 1158, 1397, 1398, 1398, 1399,
     1144, 1141, 1399, 1399, 1399, 1399, 1399, 1400, 1138, 1137,

     1400, 1400, 1400, 1400, 1400, 1401, 1401, 1136, 1135, 1401,
     1402, 1402, 1134, 1133, 1402, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1404, 1404, 1132, 1130,
     1404, 1405, 1405, 1406, 1406, 1129, 1128, 1406, 1407, 1407,
     1408, 1408, 1127, 1126, 1408, 1409, 1409, 1125, 1124, 1409,
     1410, 1410, 1411, 1411, 1120, 1118, 1411, 1412, 1412, 1413,
     1413, 1413, 1117, 1413, 1414, 1414, 1116, 1115, 1414, 1415,
     1415, 1113, 1111, 1415, 1416, 1416, 1109, 1108, 1416, 1417,
     1417, 1106, 1103, 1417, 1418, 1418, 1419, 1419, 1102, 1100,
     1419, 1420, 1420, 1421, 1421, 1099, 1097, 1421, 1422, 1422,

     1423, 1423, 1094, 1093, 1423, 1424, 1424, 1425, 1087, 1085,
     1425, 1425, 1425, 1425, 1425, 1426, 1426, 1083, 1081, 1426,
     1427, 1427, 1062, 1050, 1427, 1428, 1428, 1047, 1045, 1428,
     1429, 1429, 1430, 1430, 1043, 1041, 1430, 1431, 1431, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1433, 1433, 1039, 1038, 1433, 1434, 1434, 1435, 1435, 1034,
     1033, 1435, 1436, 1436, 1437, 1437, 1032, 1029, 1437, 1438,
     1438, 1439, 1439, 1028, 1026, 1439, 1440, 1440, 1441, 1441,
     1025, 1024, 1441, 1442, 1442, 1022, 1021, 1442, 1443, 1443,
     1444, 1444, 1020, 1019, 1444, 1445, 1445, 1446, 1446, 1018,

     1017, 1446, 1447, 1447, 1448, 1448, 1014, 1005, 1448, 1449,
     1449, 1450, 1450, 1451, 1451, 1452, 1004, 1001, 1452, 1452,
     1452, 1452, 1452, 1453, 1453, 1454, 1454,  997,  996, 1454,
     1455, 1455, 1456, 1456,  992,  991, 1456, 1457, 1457, 1458,
     1458,  989,  988, 1458, 1459, 1459, 1460, 1460,  987,  986,
     1460, 1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1463, 1463, 1464, 1464, 1465, 1465,
     1466, 1466, 1467, 1467, 1468, 1468, 1469, 1469,  985,  983,
     1469, 1470, 1470, 1471, 1471,  979,  978, 1471, 1472, 1472,
     1473, 1473,  975,  970, 1473, 1474, 1474, 1475, 1475,  968,

      967, 1475, 1476, 1476, 1477, 1477,  962,  961, 1477, 1478,
     1478,  957,  955, 1478, 1479, 1479, 1480, 1480,  953,  951,
     1480, 1481, 1481, 1482, 1482,  919,  915, 1482, 1483, 1483,
     1484, 1484,  913,  911, 1484, 1485, 1485, 1486, 1486,  909,
      906, 1486, 1487, 1487,  905,  903, 1487, 1488, 1488,  898,
      895, 1488, 1489, 1489,  894,  892, 1489, 1490, 1490, 1491,
     1491,  888,  887, 1491, 1492, 1492,  886,  882, 1492, 1493,
     1493,  879,  878, 1493, 1494, 1494, 1495, 1495,  876,  873,
     1495, 1496, 1496,  872,  870, 1496, 1497, 1497, 1498, 1498,
     1499, 1499,  869,  868, 1499, 1500, 1500,  865,  864, 1500,

     1501, 1501, 1502, 1502,  863,  859, 1502, 1503, 1503,  858,
      856, 1503, 1504, 1504,  855,  854, 1504, 1505, 1505,  850,
      848, 1505, 1506, 1506,  846,  844, 1506, 1507, 1507,  843,
      841, 1507, 1508, 1508,  834,  830, 1508, 1509, 1509,  829,
      819, 1509, 1510, 1510,  813,  812, 1510, 1511, 1511,  811,
      806, 1511, 1512, 1512,  802,  796, 1512,  790,  786,  783,
      781,  780,  779,  750,  746,  744,  742,  740,  739,  738,
      737,  736,  735,  724,  723,  709,  708,  704,  703,  702,
      691,  690,  680,  679,  678,  674,  673,  668,  667,  666,
      660,  659,  658,  654,  653,  650,  648,  647,  646,  644,

      642,  638,  636,  632,  606,  603,  592,  590,  580,  578,
      575,  574,  573,  571,  539,  537,  536,  535,  533,  530,
      529,  527,  524,  523,  506,  505,  503,  500,  499,  497,
      489,  478,  477,  476,  470,  460,  459,  458,  451,  449,
      448,  444,  442,  440,  438,  419,  369,  368,  366,  341,
      339,  337,  335,  334,  329,  318,  317,  306,  296,  295,
      269,  268,  259,  258,  254,  246,  243,  241,  240,  239,
      229,  202,  196,  173,  160,  158,  157,  150,  149,  146,
      138,  135,  134,  130,  100,   97,   96,   93,   91,   84,
       71,   45,   38,   35,   32,   18,   11,    4,    3, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348

    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[231] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Fri Jun  9 10:04:00 2023
 * Update Count     : 770
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.h"                            // for DeclarationNode
#include "ExpressionNode.h"                             // for LabelNode
#include "InitializerNode.h"                            // for InitializerNode
#include "ParseNode.h"
#include "ParserTypes.h"                                // for Token
#include "StatementNode.h"                              // for CondCtl, ForCtrl
#include "TypedefTable.h"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 1979 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// ' stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}




#line 1996 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define BKQUOTE 2
#define QUOTE 3
#define STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 180 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 2221 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1349 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4100 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 182 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 204 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 207 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 208 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 209 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 212 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 217 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }
	YY_BREAK
/* keywords */
case 10:
YY_RULE_SETUP
#line 220 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 221 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 224 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 225 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT16); }					// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32); }					// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32X); }					// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64); }					// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64X); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 104:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 146:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* numeric constants */
case 148:
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 367 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 368 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 369 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 373 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value */
case 156:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 378 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant */
case 159:
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 384 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 162:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 390 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 165:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 396 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 397 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 398 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 402 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 403 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 178:
YY_RULE_SETUP
#line 408 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 409 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 182:
YY_RULE_SETUP
#line 414 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 430 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 436 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 223:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 467 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 228:
YY_RULE_SETUP
#line 494 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 229:
YY_RULE_SETUP
#line 506 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 508 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 3526 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BKQUOTE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1349 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1349 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1348);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 508 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

