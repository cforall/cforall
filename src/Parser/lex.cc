
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 222
#define YY_END_OF_BUFFER 223
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1307] =
    {   0,
        0,    0,    0,    0,    0,    0,  149,  149,  152,  152,
      223,  221,    7,    9,    8,  174,  151,  138,  180,  183,
      148,  161,  162,  177,  175,  165,  176,  168,  179,  141,
      142,  166,  167,  185,  187,  186,  188,  157,  138,  159,
      178,  160,  181,  138,  158,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  163,  184,  164,  182,    7,  221,    4,
        4,  222,  149,  150,  156,  152,  153,    7,    9,    0,
        8,  192,  215,  138,    0,  205,  173,  197,  206,  203,
      189,  200,  190,  201,  199,  213,    0,  145,    3,    0,

      204,  144,  141,    0,    0,    0,  141,  141,  141,  141,
      141,  141,    0,    0,  141,  141,  142,  142,  142,  142,
      142,  142,  142,    0,  142,  142,  171,  172,  170,  193,
      195,  191,  196,  194,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  211,  151,  148,  138,  202,    0,    0,  208,    0,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
        0,  138,  138,  138,  138,  138,  138,  138,  138,  138,
       41,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   73,  138,  138,  138,  138,  138,   91,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      207,  198,  212,    7,    0,    0,    0,    2,    0,    5,
      149,    0,  155,  154,  154,    0,    0,    0,  152,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  214,  169,  145,  145,
        0,  145,  145,  145,  145,    0,    6,  146,  144,    0,
      144,  144,  144,  144,  141,    0,    0,  140,    0,    0,
      146,    0,  141,  141,  141,  141,  141,  141,  141,  141,
        0,    0,    0,  141,  141,  141,  141,  141,  141,  141,

        0,  143,    0,    0,  142,  142,  142,  142,  142,  142,
      142,  142,    0,    0,    0,  142,  142,  142,  142,  142,
      142,  142,    0,  209,  210,    0,  219,  216,    0,    0,
        0,  218,    0,    0,    0,    0,    0,    0,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      139,    0,   14,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,   66,  138,  138,  138,
      138,   80,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  116,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,    0,    0,  154,
        0,    0,    0,    0,    0,  154,    0,    0,  220,    0,
        0,    0,    0,    0,    0,    0,  145,    0,  145,    0,
        0,    0,    0,    0,  145,  145,    0,  146,  146,    0,
      146,  146,  146,  146,  144,    0,  144,    0,    0,    0,
        0,    0,  144,  144,    0,  140,  140,  140,  140,  140,
      140,  140,    0,  140,  140,  146,  146,  146,  146,  146,
      146,    0,    0,    0,  141,  141,    0,    0,    0,    0,

      141,  141,    0,    0,  143,  143,  143,  143,  143,  143,
      143,  143,    0,  143,  143,    0,    0,    0,  142,  142,
        0,    0,    0,    0,  142,  142,  218,    0,    0,    0,
        0,    0,    0,    0,  217,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  139,    0,    0,    0,   20,  138,  138,   25,  138,
       28,  138,  138,  138,  138,  138,  138,  138,  138,  138,
       44,  138,   46,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,   72,  138,  138,   85,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  128,  138,  138,  138,  134,  138,  136,  138,
        0,    0,    0,    0,    0,    0,  154,    0,    0,    0,
        0,    0,  145,  145,    0,  145,  145,    0,    0,    0,
        0,  146,    0,  146,    0,    0,    0,    0,    0,  146,
      146,    0,  144,  144,    0,  144,  144,    0,    0,    0,
        0,  140,  140,  140,  140,  140,  140,  140,  140,    0,
        0,    0,  140,  140,  140,  140,  140,  140,  140,    0,
      146,    0,    0,    0,    0,  146,  146,    0,    0,    0,

        0,    0,    0,    0,  143,  143,  143,  143,  143,  143,
      143,  143,    0,    0,    0,  143,  143,    0,  147,    0,
      143,  143,  143,  143,  143,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  138,  138,
       23,  138,  138,  138,  138,  138,  138,  138,  138,   15,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,    0,    0,    0,    0,
        0,    0,  138,   24,   26,  138,  138,   34,  138,  138,
      138,  138,  138,   43,  138,  138,  138,  138,  138,   53,
       54,  138,  138,   69,  138,  138,  138,  138,   87,   90,

       92,  138,  138,  138,  138,  138,  100,  138,  138,  138,
      138,  138,  138,  138,  112,  138,  115,  117,  138,  138,
      138,  123,  138,  138,  138,  138,  138,  135,  138,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  145,
        0,  145,  145,  146,  146,    0,  146,  146,    0,    0,
        0,    0,    0,  144,    0,  144,  144,    0,    0,    0,
      140,  140,    0,    0,    0,    0,  140,  140,    0,  146,
      146,    0,    0,    0,    0,    0,  147,    0,    0,    0,
        0,    0,  143,  143,    0,  147,  147,  147,  147,  147,
        0,    0,    0,  143,  143,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  138,    0,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   75,  138,  138,  138,  138,
      138,  138,  138,  138,    0,    0,    0,    0,    0,    0,
        0,    0,  138,  138,   29,   30,  138,  138,  138,  138,
       42,   45,  138,   49,  138,  138,  138,  138,   67,  138,
      138,   77,   81,  138,  138,  138,   95,  138,   99,  101,
      104,  105,  107,  138,  109,  110,  138,  138,  138,  122,
      119,  138,  138,  138,  132,  138,  137,    0,    1,    0,
        0,  154,    0,    0,    0,    0,  145,    0,  146,    0,

      146,  146,  144,    0,    0,  146,    0,  146,  146,  147,
      147,    0,  147,    0,    0,    0,    0,  147,  147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      138,  138,   17,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,   16,  138,  138,  138,  138,   35,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
        0,    0,    0,    0,    0,    0,    0,    0,  138,  138,
      138,  138,   39,   40,  138,  138,   52,  138,   56,   68,
      138,   86,   93,  138,  138,  108,  138,  114,  118,  138,
      127,  138,  133,    0,    0,  146,  146,    0,    0,  147,

      147,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   10,   11,   31,  138,   59,   60,
       62,   71,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   76,   78,   82,  138,  138,
      102,  120,  138,  138,    0,    0,    0,    0,    0,    0,
        0,  138,  138,   37,  138,  138,  138,   51,   58,  138,
       94,   96,  138,  125,  129,    0,    0,    0,    0,  147,
        0,  147,  147,    0,    0,    0,    0,    0,    0,   64,
       61,   63,  138,   88,  138,  138,   12,  138,  138,  138,
       32,   36,  138,  138,   55,  138,  138,   84,  138,  138,

      138,  138,  138,    0,    0,    0,    0,  138,  138,   38,
       48,  138,   70,  138,    0,    0,    0,    0,  147,    0,
        0,    0,    0,   65,   74,  138,  138,  138,  138,  138,
      138,  138,  138,   57,   79,   83,   97,  103,  121,  138,
      130,    0,    0,    0,   22,  138,  138,  138,    0,    0,
        0,    0,    0,    0,  138,  138,   13,   18,   21,  138,
      138,   33,  138,  138,  124,  138,    0,    0,    0,    0,
       27,   50,  113,    0,    0,    0,  138,  138,  138,  138,
      138,  138,   98,  131,    0,    0,    0,    0,  138,  111,
       19,  138,  138,   47,    0,  106,  138,  138,  138,  138,

      138,  138,  138,  126,   89,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   11,   51,   56,   11,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   11,   73,   74,   75,   76,
       77,   78,   51,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[92] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    4,    4,    4,    4,    4,    9,
        4,    4,    4,    4,    4,    4,    4,    1,   10,    1,
        1,   11,    1,    8,    8,    8,    8,    8,    8,    4,
        4,    4,    4,    4,    4,    4,    4,    9,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1

    } ;

static const flex_int16_t yy_base[1471] =
    {   0,
        0,   90, 3978, 3977,    0,    0,   90,   91,   92,   93,
     3993, 3996,  104, 3996,  110,   83, 3996, 3933,   63,   90,
     3996, 3996, 3996,   84,  104, 3996,  107,  105,  123,  178,
      245, 3955, 3996,  125, 3955,   88,  325, 3954,  152, 3996,
      112, 3996,  111,  124, 3925,   94,  111,  120,  164,  163,
      237,  161,  113,   79,  103,  134,  128,  282,  218,  253,
      267,  298,  183, 3996,  195, 3996,  182,  369,  375, 3996,
     3965, 3996,    0, 3996,  413,    0, 3996,  387, 3996,  405,
      426, 3996,  491, 3927,   99, 3996, 3996, 3996, 3996, 3996,
     3948, 3996, 3947, 3996, 3996, 3948, 3961,  558, 3996, 3978,

     3996,  620,  435,  508,  258,  535,  371,  624,  611,  397,
     3996,  469,  191,  266,  402,  549,    0,  475,  653,  683,
      552, 3996,  668,  195,  614,  696, 3996, 3996, 3996, 3945,
     3996, 3996, 3996, 3944, 3943,  224,  243, 3961,  268,  350,
      315,  273,  321,  299,  360, 3939,  330,  384, 3916, 3884,
      388, 3996, 3996, 3996,  442, 3996, 3911, 3910, 3996, 3883,
      205,  388,  389,  396,  386,  172,  408,  265,  129,  707,
     3911,  412,  365,  427,  434,  487,  446,  535,  421,  489,
      460,  199,  497,  531,  594,  534,  553,  495,  465,  239,
      515,  558, 3910,  660,  539,  557,  593,  551, 3909,  569,

      725,  559,  662,  669,  512,  606,  597,  453,  659,  595,
      271,  688,  631,  598,  687,  424,  695,  724,  677,  678,
     3996, 3996, 3996,  805,  795, 3964,  825, 3996,  834, 3996,
        0,  797, 3996, 3996,  843, 3904, 3903, 3902,    0, 3928,
      725,  745, 3946,  779,  855,  809,  796,  805,  810,  839,
     3924,  842,  843,  846, 3898, 3897, 3996, 3996,  883,  705,
      871,  891,  895,  633, 3896, 3954, 3996,  957,  856, 1019,
      918, 1009,  722, 1020,  947,  414, 1072, 1118,  357,  987,
     1183, 1093,  719, 3996,  877, 1004,  867, 3996,  983, 1102,
      788, 3931, 3928, 1078, 1080,  889, 1169,  846,  869, 1209,

        0, 1263, 3933, 1235,  874, 3996, 1024, 1194,  911, 3996,
     1003, 1293,  805, 3928, 3925, 1089, 1100,  931, 1314,  948,
      950, 1323, 1353, 3996, 3996, 3914, 3996, 3996,  847,  850,
     3890, 3890,  941, 3886,    0, 3885,    0, 3856,  930,  996,
     1007,  932, 1013, 1032,  860,  977,  894, 1050, 1277, 1023,
     1053,  625, 1079, 1110,  968, 1078, 1084, 1021, 1086, 1100,
     3886, 1096, 3885, 1104, 1080,  976, 1111,  697, 1095, 1124,
     1143, 1156, 1144, 1184, 1187,  895, 1169, 1129,  933, 1002,
     1185, 1209, 1145, 1210, 1213, 1211, 1304, 1195, 1212, 1219,
     1226, 1051,  185, 1242, 1240,  133, 1287, 1223, 1283, 1256,

     1307, 1305, 1295, 1297, 1301, 1312, 1330, 1313, 1333, 1331,
     1335, 1337, 3884, 1339, 1342,  776, 1341, 1347, 1343, 1173,
     1257, 1346, 1345, 1354, 1348,  935, 1357, 1418, 1420, 1412,
     1419, 3880,    0, 3879,    0, 3878,    0, 3902, 3996,  851,
     1289, 3878, 3875,    0, 3874,    0, 3996, 1426, 1452, 1440,
     1162, 3910, 3907, 3910, 3996, 1460, 1481, 1521, 1425, 1583,
     1508, 1573, 1415, 3870, 3996, 1602, 1635, 1697, 1403, 3906,
     3903, 3906, 3996, 1499, 1625, 1706, 1484, 1688, 1718, 1512,
     3996, 1528, 3866, 1515, 1757, 1817, 1444, 1644, 1627, 1441,
     3865, 1473, 3901, 3898, 1438, 1440, 3894, 1528, 3898, 3895,

     1468, 1470, 1622, 1630, 1881, 1659, 1743, 1808, 1663, 1946,
     1823, 3996, 1520, 1703, 1932, 1529, 3896, 3893, 1478, 1516,
     3889, 1556, 3893, 3890, 1544, 1571, 3857, 1537, 3853, 3852,
     3851,    0, 3850,    0, 3996, 1564, 1426, 1561, 1563, 1514,
     1459, 1629, 1578, 1608, 1617, 1631, 1674, 1679, 1698, 1735,
     1740, 1737, 1502, 1580, 1746, 1681, 1692, 1736, 1634, 1622,
     1749, 3852, 1721, 3848, 3847, 3849, 1743, 1738, 3848, 1742,
     3847, 1750, 1673, 1769, 1763, 1751, 1767, 1792, 1762, 1794,
     3846, 1793, 3845, 1795, 1799, 1801, 1807, 1815, 1817, 1818,
     1824, 1828, 1854, 3844, 1841, 1860, 3843, 1856, 1374, 1859,

     1867, 1882, 1880, 1855, 1919, 1921, 1873, 1883, 1636, 1816,
     1922, 1923, 1924, 1925, 1908, 1926, 1934, 1927, 1935, 1937,
     1940, 1938, 3842, 1942, 1950, 1952, 3841, 1957, 3840, 1167,
     2019, 2006, 3836,    0, 3835,    0, 3834, 3833, 3832,    0,
     3831,    0, 2013, 3830, 3861, 1980, 1998, 1742, 3865, 3862,
     3865, 3996, 2065, 2075, 2137, 2021, 3862, 3859, 3862, 3996,
     2042, 2084, 2146, 3822, 3853, 2001, 2069, 2022, 3857, 3854,
     3857, 1971, 3996, 2074, 2154, 1994, 3996, 2063, 2174, 2029,
     3854, 3851, 2134, 2140, 2078, 2195, 2009, 2080, 2181, 2203,
     3996, 2034, 3852, 3849, 3852, 3996, 2106, 2245, 3844, 3843,

     2173, 2259, 2182, 1866, 2066, 3996, 2199, 2267, 2076, 3996,
     2176, 2274, 2049, 3847, 3844, 2254, 2255, 2315, 2334, 2396,
     2145, 2343, 2081, 2167, 2363, 3808, 3839, 3838, 3805, 3804,
     3802,    0, 3801,    0, 3797,    0, 3796,    0, 2003, 1946,
     3795, 2010, 2120, 2178, 2127, 2181, 2174, 2074, 2126, 2081,
     2182, 2175, 2190, 2200, 2233, 2240, 2247, 2235, 2191, 1090,
     2255, 2236, 2257, 2260, 2253, 2261, 3791, 3787, 3786,    0,
     3782,    0, 2265, 3784, 2295, 2307, 2309, 3780, 2259, 2271,
     2296, 2312, 2315, 3779, 2320, 2272, 2321, 2336, 2325, 3775,
     2370, 2339, 2345, 3774, 2353, 2343,  734, 2273, 3770, 3769,

     3765, 2371, 2369, 2372, 2373, 2375, 3764, 2374, 2008, 2377,
     2379, 2381, 2383, 2385, 2396, 2387, 3760, 3759, 2388, 2399,
     2390, 3755, 2402, 2403, 2404, 2405, 2406, 3754, 2409, 3804,
     3744,    0, 3740,    0, 3739,    0, 3731,    0, 2468, 2428,
     3762, 3703, 3702, 2508, 3719, 3750, 2430, 2432, 2445, 3751,
     3748, 3748, 2495, 2442, 3740, 3679, 3678, 2455, 3734, 3731,
     2426, 2427, 3724, 2476, 3728, 3722, 2438, 2439, 3718, 2456,
     2482, 2487, 3717, 3714, 3712, 2560, 2570, 2632, 3672, 2515,
     3703, 3700, 2487, 2490, 3691, 2579, 2496, 2596, 2622, 3658,
     2522, 3691, 3688, 2499, 2501, 3647,    0, 3646,    0, 3640,

        0, 3639,    0,    0,    0, 3636,    0, 2499, 2494, 2506,
     2587, 2490, 2412, 2556, 2564, 2560, 2502, 2569, 2507, 2574,
     2570, 2413, 2586, 2505, 2588, 2612, 2589, 2624, 2613, 2616,
     2617, 2576, 2653, 2619, 3632,    0, 3626,    0, 3625,    0,
     3596,    0, 2620, 2622, 3598, 3592, 2621, 2625, 2623, 2633,
     3591, 3585, 2627, 3584, 2629, 2634, 2669, 2679, 3578, 2646,
     2648, 3577, 3567, 2651, 2652, 2650, 3566, 2655, 3557, 3556,
     3550, 3549, 3543, 2656, 3542, 3536, 2657, 2654, 2565, 3535,
     3531, 2658, 2660, 2665, 3530, 2668, 3524, 3579, 3996,    0,
        0, 3996,    0,    0,    0,    0, 3491, 2725, 2685, 3545,

     3484, 3483, 3477, 3531, 3514, 2686, 3513, 3452, 3451, 2765,
     3470, 3501, 3996, 2711, 3502, 3499, 3495, 3996, 2735, 2749,
     3487, 3450,    0, 3449,    0, 3443,    0, 3442,    0, 3436,
     2682, 2739, 3438, 2678, 2756, 2741, 2740, 2738, 2742, 2723,
     2683, 2684, 2709, 3432, 2755, 2724, 2751, 2701, 2759, 2744,
     2795, 2767, 2763, 2787, 2771, 2769, 2776, 2779, 2811, 2781,
     3428,    0, 3424,    0, 3423,    0, 3419,    0, 2783, 2785,
     2788, 2786, 3421, 3417, 2791, 2796, 3416, 2822, 3412, 3405,
     2798, 3404, 3398, 2800, 2799, 3397, 2802, 3393, 3392, 2804,
     3386, 2801, 3385, 3376, 3375, 3337, 3336, 2860, 3387, 2820,

     2825, 2869, 3391, 3381, 3384, 3338, 3337, 3332, 3331,    0,
     3325, 3324, 3320, 3319, 3318, 3317, 3309, 2834, 3308, 2815,
     2817, 3305, 2836, 2837, 2840, 2842, 2848, 2844, 2847, 2849,
     2850, 2852, 2859, 2887, 2896, 3300, 2861, 2862, 2868, 2870,
     2875, 2879, 2898, 2873, 3290, 3289, 3283, 3282,    0, 3276,
     3275, 2881, 2880, 3272, 2883, 2884, 2885, 3271, 3265, 2886,
     3264, 3234, 2889, 3233, 3226, 3222, 3217, 3216, 3210, 2902,
     3241, 3178, 3177,    0,    0, 3181, 3180, 3176, 3175, 2891,
     3174, 3173, 2893, 3169, 2895, 2900, 2894, 2902, 2904, 2907,
     2911, 3168, 2909, 2934, 3164, 2919, 2913, 3163, 2921, 2926,

     2930, 2936, 2931,    0, 3153, 3152, 3151, 2932, 2925, 3151,
     3150, 2807, 3146, 2937, 3142, 3135, 3134, 3133, 3107, 3129,
     3113, 3106, 3105, 3105, 3100, 2938, 2944, 2945, 2946, 2947,
     2949, 2954, 2952, 3097, 3079, 3078, 2958, 3031, 3030, 2950,
     2960, 3026, 3022, 3021, 3023, 2962, 2964, 2965, 3016, 3015,
     3012, 3011, 3010, 2965, 2966, 2977, 2725, 2978, 2685, 2970,
     2979, 2581, 2983, 2985, 2448, 2987, 2444, 2343, 2218, 2204,
     2123, 2080, 1960, 1955, 1707, 1576, 2989, 2991, 2992, 2993,
     2994, 2996, 1577, 1537, 1473, 1399, 1369, 1217, 2998, 1010,
      779, 3000, 3001,  632,  560,  455, 3002, 3004, 3005, 3007,

     3008, 3010, 3012,  375,   96, 3996, 3091, 3102, 3113, 3124,
     3132, 3143, 3154, 3165, 3176, 3182, 3190, 3195, 3200, 3208,
     3213, 3218, 3223, 3228, 3233, 3244, 3249, 3252, 3257, 3262,
     3267, 3269, 3274, 3279, 3287, 3298, 3309, 3314, 3319, 3321,
     3326, 3328, 3333, 3335, 3340, 3342, 3347, 3349, 3354, 3362,
     3367, 3372, 3377, 3382, 3384, 3389, 3394, 3402, 3407, 3412,
     3423, 3428, 3433, 3435, 3440, 3442, 3447, 3452, 3454, 3459,
     3461, 3466, 3471, 3476, 3481, 3486, 3488, 3493, 3495, 3500,
     3502, 3507, 3512, 3517, 3522, 3527, 3532, 3534, 3539, 3547,
     3552, 3557, 3559, 3564, 3566, 3571, 3573, 3578, 3580, 3585,

     3590, 3592, 3597, 3599, 3604, 3606, 3611, 3613, 3615, 3620,
     3625, 3627, 3632, 3634, 3639, 3641, 3646, 3648, 3653, 3661,
     3666, 3668, 3670, 3672, 3674, 3676, 3678, 3683, 3685, 3690,
     3692, 3697, 3699, 3704, 3706, 3711, 3716, 3718, 3723, 3725,
     3730, 3732, 3737, 3739, 3744, 3749, 3754, 3759, 3761, 3766,
     3771, 3776, 3778, 3783, 3788, 3790, 3792, 3797, 3802, 3804,
     3809, 3814, 3819, 3824, 3829, 3834, 3839, 3844, 3849, 3854
    } ;

static const flex_int16_t yy_def[1471] =
    {   0,
     1306,    1, 1307, 1307, 1308, 1308, 1309, 1309, 1310, 1310,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1311, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1311, 1306,
     1306, 1306, 1306, 1311, 1306, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1306, 1306, 1306, 1306, 1306, 1312, 1306,
     1306, 1306, 1313, 1306, 1306, 1314, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1311, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1315,

     1306, 1306,   30, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1316,   30, 1306, 1306,   31, 1306, 1306, 1306,
     1306, 1306, 1306,   31, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1317, 1306,
     1306, 1306, 1306, 1306, 1311, 1306, 1318, 1319, 1306, 1306,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1320, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,

     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1306, 1306, 1306, 1306, 1312, 1312, 1312, 1306, 1312, 1306,
     1313, 1306, 1306, 1306, 1306, 1321, 1322, 1323, 1314, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1324, 1325, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306,  259, 1326, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306,  114,  275, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,

     1327, 1306, 1328, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1329, 1306, 1330, 1331, 1332, 1333, 1306, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1335, 1306, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1336, 1337, 1306,
     1306, 1338, 1339, 1340, 1341, 1342, 1343, 1306, 1306, 1306,
     1306, 1306, 1344, 1345, 1346, 1347, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306,  458, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306,  476, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
      486, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1348, 1349, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306,  505, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1350, 1306, 1351, 1352,
     1353, 1354, 1355, 1356, 1306, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1358, 1306, 1359, 1360, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,

     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1361, 1306, 1362, 1363, 1364, 1365, 1366, 1366, 1367, 1368,
     1369, 1370, 1306,  643, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306,  663, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,

     1371, 1306, 1371, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1372, 1306, 1306, 1373, 1374,
     1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1384, 1385, 1386, 1387,
     1388, 1389, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,

     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1390,
     1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1306, 1306,
     1306, 1306, 1306, 1306,  844, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1399, 1306,
     1306, 1306, 1306, 1306, 1306,  877, 1306, 1306, 1306,  886,
     1306, 1306, 1306, 1306, 1306, 1400, 1401, 1402, 1403, 1404,

     1405, 1406, 1407, 1408, 1409, 1410, 1411, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1412, 1413, 1414, 1415, 1416, 1417,
     1418, 1419, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1420, 1306, 1421,
     1422, 1306, 1423, 1424, 1425, 1426, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1010, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1444, 1445, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1306, 1306, 1446, 1427, 1447, 1429, 1448,
     1431, 1433, 1449, 1435, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1450, 1436, 1451, 1438, 1452, 1440,
     1442, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1453, 1444, 1454, 1445, 1306,
     1306, 1306, 1306, 1455, 1456, 1447, 1457, 1458, 1449, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,

     1410, 1410, 1410, 1459, 1450, 1451, 1460, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1461, 1453, 1462, 1454, 1306, 1463,
     1464, 1457, 1458, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1465, 1466, 1460, 1410, 1410, 1410, 1410, 1461, 1462,
     1467, 1463, 1468, 1464, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1469, 1465, 1470, 1466,
     1410, 1410, 1410, 1447, 1467, 1468, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1451, 1469, 1470, 1447, 1410, 1410,
     1410, 1410, 1410, 1410, 1451, 1410, 1410, 1410, 1410, 1410,

     1410, 1410, 1410, 1410, 1410,    0, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306
    } ;

static const flex_int16_t yy_nxt[4088] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   31,   31,   31,   31,   31,
       31,   32,   33,   34,   35,   36,   37,   38,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   39,   18,   18,
       18,   18,   18,   18,   39,   18,   18,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       18,   53,   18,   54,   55,   18,   56,   18,   57,   58,
       59,   60,   61,   62,   18,   18,   63,   64,   65,   66,
       67,   68,   74,   74,   77,   77,   68,   86,   87,   69,

       77,   77,   88,   74,   74,   78,   79,   80,   80,   80,
       78,   80,   79,   81,   81,   81,   80,   82,   90,   83,
       83,   91,  133,  134,   89,   97,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  128,   85,   92,   99,
       83,   94,   95,   83,  100,  159,  156,  160,   75,   75,
       75,   75,   85,  255,   85,  195,  129,  101,  130,  131,
      153,   85,  161,  162,  163,  154,  157,  164,  165,   85,
      166,   85,  167,  172,  174,  173,  168,  169,   85,  196,
      256,  193,   85,  176,  197,  170,   85,   85,  194,  175,
      177,   85,   85,  158,  600,  201,  178,   96,  102,  348,

      103,  103,  103,  103,  103,  103,  103,  104,  104,  198,
       85,  301,  199,  155,  200, 1306,  223,  105,   83,   85,
      106,   85,   85,  107,  108,  109,  110,  111,  191,  221,
       85,  179,  112,  113,  111,  180,  183,  192,  184,  114,
      181,   85,  105,   85,  182,  106,  345,  185,  115,  108,
      220,  116,  303,  110,  597,  111,  323,   85,  326,  112,
      327,  153,  113,   85,  111,  102,  154,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   85,  326,  339,  327,
      278,  278,  212,  222,  377,  340, 1306,  106,  207,  208,
      118,  119,  120,  121,  122,   85,  209,   85,  210,  123,

      186,  122,  326,  211,  327, 1306,  124,  326,  187,  327,
      188,   85,  106,  189,  155,  125,  119,  190,  126,  279,
      121, 1306,  122,   85,  388,   85,  123,  304,  213,   85,
     1306,  122,  135,  326,  328,  327,  136,  137,  214,  138,
       85,  139,  140,  215,  141,  347,  142,  216,  415,  326,
     1306,  327,  202,  203,  329,  326,   85,  327,  143,  144,
      145,  217,  204,  205,  326,  206,  327,  328,  218,  219,
      224,   79,   80,   80,   80,  224,  227,  228,  225,  278,
      278,  227,  146,  147,  326,  148,  327,  149,   78,   79,
       80,   80,   80,   78,  326,  330,  327,  229,  229,  229,

      229,  229,  229,  229,  229,  229,   80,   79,   80,   80,
       80,   80,  150,  151,  232,  233,  110,  283,  326,  232,
      327,  234,  326,   85,  327,  284,  234,   80,   79,   81,
       81,   81,   80,   85, 1306,  235,  235,  235,  235,  235,
      235,  235,  283,  283,   85,  364,   85,   85,  283,  234,
      153,  284,  284,  344,   85,  154,  284,  275,  275,  275,
      275,  275,  275,  275,  341,  342,   85,  236,  283,  343,
       85,  234,  110,  283, 1306,  475,  234,  234,  284,   85,
      234,  234,   85,  284,  346,   85,  363,  422,  234,  374,
     1306,  234,   85,  234,  237,  234,  276,  238,  240, 1306,

       85,  366,  241,  242,   85,  243,  365,  244,  245,  369,
      246,   85,  247,   85,  296,  284,  297,  298,   85, 1306,
      121,  305,  370,   85,  248,  249,  250,  411,  102,  306,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  299,
      284,  376,  300,  387,  298,   85,  305,   85,  251,  252,
      106,  253,  280,   85,  280,   85,  306,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  367,  368,  375,  277,
       85,  386,  291,   85,  292,  106,  378,  293,  294,  254,
      259,  259,  259,  259,  259,  259,  259,  259,  259,   85,
      389,  408,   85,   85,  379,  283,  282,   85,  305,  260,

      261,  262,  371,  284,  263,  264,  306,  383,  264,   85,
      372,   85,  380,  373,  393,   85,   85,   85,  396,  265,
      283, 1306,  295,  305,  264,  261,  262,   85,  384,  263,
      284,  264,  394,  306,  291,  403,  292,  385,  390,  293,
      294,  264,  268,  268,  268,  268,  268,  268,  268,  268,
      268,   85,   85,   85,  397,   85,   85,  283,  295,  381,
      305,  269,  270,  271,   85,  284,  272,  273,  306,  285,
      273,  286,  287,  395,  382,  410,  419,  409,  288,  447,
      414,  274,  283,   85,  121,  305,  273,  270,  271,   85,
       85,  272,  284,  273,  289,  306,  153,  290,  307,  287,

      308,  309,  417,  273,  447,  288,  313,  310,  314,  552,
      418,  315,  316,  318,  306,  319,  320,   85,   85,  313,
       85,  314,  412,  311,  315,  316,  312,   85,  309,  305,
      317,  404,  406,  391,  310,   85,   85,  306,  321,  306,
      392,  322,  305,  320,  413,   85,   85,  407,  405,  416,
      306,  447,  447,   85,  305,   85,  427,  426,  420,  438,
      421,  439,  570,  963,  306,   85,  423,  305,  465,  317,
      349,  350,  351,  284,  352,  353,  447,  306,  354,  438,
      355,  439,   85,   85,  153,  356,  357,  358,  359,  360,
      398,  424,   85,  465,  399,  425,  227,  228,  232,  233,

      284,  227,  400,  232,  401,  402,  224,   79,   80,   80,
       80,  224,  497,  438,  225,  439,  294,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  227,  228,  439,  521,
      438,  227,  439,  316,   85,  428,  228,   85,  440,  438,
      428,  439,  429,  438,  438,  439,  439,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  430,  430,  430,  430,  430,
      430,  430,  439,  438,  441,  439,  438,  438,  439,  439,
      438,  326,  439,  327,  326,  438,  327,  439,  448,  438,
      448,  439,  111,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  465,  465,  431,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  451,  111,  452,  111,   85,  453,
      454,  288,  287,  542,  260,  261,  262,  465,  306,  263,
      264,  288,  450,  264,  298,  111,  455,  447,  456,  298,
      111,  469,  455,  470,  265,  455,  471,  472,  288,  264,
      261,  262,   85,   85,  263,  306,  264,  544,  288,  579,
      111,  455,  447,  456,  465,  310,  264,  102,  455,  275,
      275,  275,  275,  275,  275,  275,  320,  122,  455,  458,
      458,  458,  458,  458,  458,  458,  458,  458,   85,  465,
       85,   85,  310,   85,  122,  529,  122,  582,  459,  460,

      461,  536,  122,  462,  463,  629,  539,  463,  276,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  464,  122,
      320,  122,  530,  463,  460,  461,   85,  492,  462,  493,
      463,  556,  494,  495,   85,   85,  466,  288,  466,  568,
      463,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      473,  496,  474,  287,   85,  543,  473,  310,  288,  473,
       85,  269,  270,  271,  288,   85,  272,  273,   85,  309,
      273,   85,  537,  309,  596,  473,  583,  474,  310,   85,
      468,   85,  473,  538,  310,  288,  273,  270,  271,  540,
       85,  272,  473,  273,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  273,  550,  310,  559,  541,   85,   85,
      280,   85,  280,  928,  106,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  283,  492,  283,  493,  545,  551,
      494,  495,  284,  304,  284,  305,   85,   85,   85,  106,
      476,  476,   85,  306,   85,  557,  305,  567,   85,  283,
      564,  283,  553,   85,  306,  558,  288,  560,   85,  284,
      305,  284,   85,  477,  478,  479,  480,  481,   85,   85,
      306,  305,  482,  571,  481,  496,  561,  565,  569,  483,
      566,  306,   85,  288,  554,  555,  645,   85,  484,  478,
      264,  485,  498,  480,  499,  481,  581,  500,  501,  482,

      572,   85,   85,   85,  481,  486,  486,  486,  486,  486,
      486,  486,  486,  486,   85,  111,  502,  516,  586,  517,
      576,  573,  518,  519,  487,   85,  488,   85,  829,  489,
      490,   85,  498,  490,  499,  574,  575,  500,  501,  623,
      111,  520,   85,   85,  491,   85,  580,  577,  310,  490,
      578,  488,  584,   85,  489,  111,  490,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  490,   85,   85,   85,
       85,   85,  592,  587,  589,  310,  585,   85, 1306,  593,
      111,   85,  502,  504,   85,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  588,  594,  304,  595,   85,  602,

       85,  505,  505,  505,  505,  505,  505,  599,  506,  507,
      508,  509,  510,  598,   85,   85,  516,  511,  517,  512,
      624,  518,  519,  438,  513,  439,  505,  505,  505,  505,
      505,  505,  604,  514,  507,   85,  515,  522,  509,  523,
      510,   85,  524,  525,  511,   85,  522,  310,  523,  512,
      546,  524,  525,   85,  603,   85,  547,  548,  549,   85,
      122,  526,   85,   85,  601,   85,  520,  590,  609,  122,
       85,   85,  608,  607,  310,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  591,  122,  606,  605,   85,   85,
      612,   85,  610,   85,  122,   85,  526,   85,  614,   85,

       85,   85,  616,   85,   85,   85,   85,  615,  617,  619,
      625,  611,   85,  613,  323,   85,  618,  620,  621,  428,
      228,  628,  228,  622,  428,  626,  429,  665,  226,  627,
     1306,  273,   85,  630,  234,  234,  234,  234,  234,  234,
      234,  430,  430,  430,  430,  430,  430,  430,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  448,  799,  448,
     1306,  652,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  652,  652,  632,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  648,   85,  649,  652,  691,  650,  651,
      691,  691,  288,  260,  288,  262,  652,  699,  263,  264,

      740,  495,  264,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  691,  644,  111,  691,  111,   85,  264,  288,
      262,  288,  668,  263,  669,  264,  744,  670,  671,  480,
      672,  656,  310,  657, 1295,  264,  658,  659,  673,  111,
     1306,  111,  457,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  700,  727,  652,  672,  501,  519,  672,  310,
       85,  672,  459,  460,  461,  673,  673,  462,  463,  673,
      310,  463,   85,  685,  673,  686,  687,  743,  757,  652,
      728,  726,  464,  672,  525,  480,  672,  463,  460,  461,
      122,  729,  462,  673,  463,   85,  673,  310,  688,  673,

      653,  689,  653,  687,  463,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  660,  122,  661,  122,  730,   85,
      660,   85,   85,  660,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  739,  741,   85,   85, 1306,   85,  660,
      742,  661,  122,  758,  655,  746,  660,  275,  275,  275,
      275,  275,  275,  275,  104,  104,  660,  663,  663,  663,
      663,  663,  663,  663,  663,  663,   85,  692,  696,  693,
      697,  702,  694,  695,  696,   85,  269,  696,  271,  702,
       85,  272,  273,  703,  748,  273,  475,   85,  747,   85,
      691,  704,   85,  696,   85,  697,  664,  765,  745,  702,

      696,  273,  749,  271,  509,  705,  272,  702,  273,  705,
      696,  764,  809,  706,  466,  691,  466,  706,  273,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  476,  476,
      705,   85,   85,  674,  705,  675,  676,   85,  777,   85,
      706,  680,  677,  681,  706,  761,  682,  683,  750,  705,
       85,  477,  478,  479,  480,  481,   85,  706,  678,  751,
      482,  679,  481,  676,  672,  684,  841,  483, 1306,  677,
      455,  762,  673,  509,  705,  767,  484,  478,  752,  485,
      680,  480,  681,  481,  706,  682,  683,  482,  707,  672,
      708,  709,  481,   85,   85,   85,   85,  710,   85,  673,

       85,   85,  768,  672,   85,  763,  753,   85,   85,   85,
      774,  673,  775,  711,  754,  755,  712,  756,  709,  759,
       85,   85,  766,  773,  710,   85,  760,   85,  672,  776,
      684,  713,  780,  714,  779,  783,  715,  716,  673,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  781,  778,
       85,   85,   85,   85,  705,  717,  782,   85,  487,   85,
      488,  784,  706,  489,  490,   85,  785,  490,  721,  706,
      722,  723,  786,   85,   85,   85,   85,  787,  491,  705,
      789,  788,   85,  490,  797,  488,   85,  810,  489,  706,
      490,  792,  790,  724,  706,  794,  725,  791,  723,   85,

      490,  504,  793,  505,  505,  505,  505,  505,  505,  505,
      505,  505,   85,   85,   85,  702,  796,   85,   85,  505,
      505,  505,  505,  505,  505,   85,  506,  507,  508,  509,
      510,   85,  795,  804,  801,  511,  798,  512,   85,  800,
       85,   85,  513,  702,  505,  505,  505,  505,  505,  505,
      808,  514,  507,  807,  515,  713,  509,  714,  510,  803,
      715,  716,  511,  718,  802,  718,   85,  512,  719,  719,
      719,  719,  719,  719,  719,  719,  719,   85,  705,   85,
       85,   85,   85,   85,   85,   85,  706,  811,  814,  813,
      812,  815,   85,   85,  818,   85,   85,  805,   85,  806,

       85,  819,  816,  705,   85,  717,  820,  720,   85,  823,
       85,  821,  822,  706,  817,   85, 1288,  909,   85,  824,
      827,  228,  825,  826,  828,  673,  447,  830,  234,  234,
      234,  234,  234,  234,  234,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  447,  846,  855,  465,  677,  463,
      473,  447,  673,  863,  260,  481,  262,  683,  869,  263,
      264,   85,  490,  264,  264,  849,   85,  850,   85,  447,
      851,  852,  465,  885,  644,  677,  971,  716,  908,  264,
      481,  262,  264,  910,  263,  273,  264,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  264,  844,  844,  844,

      844,  844,  844,  844,  844,  844,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  465,  459,  677,  461,  676,
      706,  462,  463,  687,  481,  463,  481,  512,  677,  872,
      710,  873,   85,  676,  874,  875,  845,  916,   85,   85,
      465,  463,  918,  461,  677,  662,  462,  706,  463,  481,
      687,  481,  512,  273,  653,  677,  653,  710,  463,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  858,   85,  859,
      672,   85,  860,  861,   85,   85,  672,  269,  673,  271,
      723,  512,  272,  273,  673,  917,  273,  858,  913,  859,

      911,  862,  860,  861,  864,  672,  865,  664,  677,  866,
      867,  672,  273,  512,  271,  673,  512,  272,  864,  273,
      865,  673,  702,  866,  867,  476,  476,  481,  677,  273,
      710,  702,   85,   85,  703,  677,   85,  723,  512,   85,
       85,  481,  868,  879,  709,  915,  709,  862,   85,   85,
      702,  920,  481,  710,  868,  677,  912,  710,   85,  702,
      919,  914,  927,  921,  690, 1306,  481,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  876,  922,  876, 1287,
      710,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      880,   85,  881,   85,   85,  882,  883,  880,   85,  881,

      705,  705,  882,  883,  926,   85,  698,  924,  706,  706,
      925,   85,  923,   85,  884,   85,  930,   85,   85,   85,
      878,  710,  929,   85,  934,  705,  705,  932,  710,   85,
       85,   85,  931,  933,  947,  706,  706,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  944,  884,  710,  964,
      943,  948,  953,   85,   85,  710,  886,  886,  886,  886,
      886,  886,  886,  886,  886,   85,  891,   85,  892,  949,
       85,  893,  894,   85,  945,  887,  946,  888,   85,   85,
      889,  887,  951,   85,  887,  950,  891,  952,  892,  512,
      895,  893,  894,  957,   85,  890,  954,   85,  956,  958,

      887,   85,  888,   85, 1306,  889,  955,  887,  960,  512,
      962,   85,  959,  718,  512,  718,  961,  887,  719,  719,
      719,  719,  719,  719,  719,  719,  719,   85,   85,   85,
       85,   85,   85,   85,  512,   85,  895,   85,  965,   85,
      970,   85,  972,   85,  968,   85,   85,  977,   85,  966,
      969,  976,  967,  975,   85,  979,  974,   85,  981,  973,
       85,   85,   85,   85,   85,  980,  983,   85,  978, 1000,
       85,   85,  985,  660,  447,  984,  652,  982,  652, 1004,
      677,  677,  986,  861,  481,  481, 1048, 1039,  465,  987,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  447,

     1005,  652,  691,  652,  867, 1286,   85,  677,  677,  481,
      481, 1007,  264,  465,  463,  696,  463,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  273,  691,  691,  839,
      844,  844,  844,  844,  844,  844,  844,  844,  844, 1012,
      490,  710, 1013,  883,  710,  512, 1021,  512,   85,  459,
      894,  461,   85,  691,  462,  463,  853,   85,  463, 1033,
       85, 1038, 1031,   85,   85,   85,  490, 1013,  710,  845,
      512,  710,  512, 1034,  463, 1032,  461, 1043, 1045,  462,
     1050,  463,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  463, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,

     1010,  886,  886,  886,  886,  886,  886,  886,  886,  886,
     1035,  887, 1036,  888,   85, 1037,  889,  887,   85, 1014,
      887, 1015,   85,   85, 1016, 1017, 1042,   85,   85, 1041,
     1044, 1011,   85, 1089,   85, 1046,  887, 1040,  888,   85,
      890,  889, 1013,  887,   85,   85,   85,   85, 1054,  876,
     1047,  876, 1058,  887,  877,  877,  877,  877,  877,  877,
      877,  877,  877, 1018, 1053, 1019, 1049, 1013, 1051, 1018,
       85,   85, 1018, 1052,   85,   85, 1059,   85,   85,   85,
       85,   85,   85,   85, 1057,   85, 1055,   85, 1018, 1070,
     1019,   85,   85, 1078, 1056, 1018, 1072, 1069, 1075, 1060,

     1074, 1079, 1071, 1073,   85, 1018,   85, 1076,   85,   85,
       85,   85,   85,   85,   85,   85,   85, 1084,   85, 1077,
     1085, 1080, 1086,   85, 1087, 1090,   85,   85, 1081, 1082,
     1083,  652,  691, 1091, 1088, 1099,   85,   85, 1092,  887,
       85,   85,   85,   85, 1125, 1126, 1093,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  652,  691, 1102,   85,
     1103, 1115, 1117, 1104, 1105, 1120, 1121,   85, 1131,  463,
      490,  886,  886,  886,  886,  886,  886,  886,  886,  886,
     1118,   85,   85,   85, 1119, 1127,  998, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010,   85,   85,   85,   85,

       85, 1124,   85, 1122, 1129, 1123,  887, 1116,  888,   85,
     1020,  889,  887,   85,   85,  887, 1138,   85, 1134, 1128,
     1132,   85, 1130, 1133, 1135,   85, 1011,   85, 1136,   85,
     1137,  887, 1139,  888,   85, 1143,  889,   85,  887,   85,
     1140,   85, 1141,   85,   85,   85,   85, 1142,  887,   85,
     1152, 1159, 1144,   85,   85, 1154,   85,   85,   85,   85,
       85, 1155,   85, 1180, 1153,   85, 1013, 1156, 1165,   85,
     1164, 1013, 1157,   85, 1160,   85, 1247, 1158, 1161, 1162,
       85, 1163, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1013,   85, 1171,   85,   85, 1013, 1018,   85, 1181,

       85, 1182,   85, 1185,  887,   85,   85,   85,   85,  887,
       85, 1194, 1184, 1192, 1183, 1186, 1187,   85, 1195,   85,
       85, 1098, 1196, 1197, 1190, 1188,   85, 1202,   85, 1198,
     1193,   85, 1189,   85, 1191, 1199, 1200,   85,   85,   85,
     1201,   85,   85,   85,   85,   85, 1203,   85, 1013,   85,
     1210,   85,   85,   85,   85, 1228,   85, 1208,   85, 1211,
       85, 1209,   85, 1234, 1213,   85, 1212,   85, 1231,   85,
     1214,   85, 1232, 1013, 1226, 1224, 1227,   85, 1225,   85,
     1235, 1230, 1229,   85,   85, 1233,  887, 1238,   85,   85,
       85, 1239,   85, 1236,   85,   85,   85, 1240, 1241, 1246,

     1245, 1237,   85,   85,   85,   85, 1257,   85,   85, 1256,
       85, 1248,   85, 1258, 1259, 1262,   85, 1255,   85, 1264,
       85, 1266,   85,   85,   85, 1260, 1306, 1263,   85, 1271,
     1265, 1261, 1273, 1277, 1272,   85,   85,   85, 1280, 1279,
     1278,   85, 1281,   85, 1282,   85, 1283,   85, 1284,   85,
       85,   85,   85, 1291,   85, 1293,   85, 1294,   85,   85,
       85, 1292,   85,   85, 1290,   85,   85, 1289,   85, 1299,
       85, 1276, 1306, 1275, 1298, 1300, 1306, 1306, 1296, 1297,
     1305,   85, 1306, 1270, 1303, 1301, 1302, 1268,   85,   85,
     1304,   70,   70,   70,   70,   70,   70,   70,   70,   70,

       70,   70,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   84,   85,   85,   84,   84,
       84,   84,   84,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  231,   85,  231,  231,   85,  231,
      231,  231,  231,   85,  231,  239, 1306, 1306,  239,  239,
      239,  239,  239,  239, 1254,  239,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  302,  302,  302,
     1252, 1018,  302,  332, 1306, 1250, 1306,  332,  332,  332,

      332,  334,  334, 1249,   85,  334,  336,  336,   85,   85,
      336,  361, 1244, 1306, 1306,  361,  361,  361,  361,  432,
      432,   85,   85,  432,  434,  434,   85,   85,  434,  436,
      436,   85,   85,  436,  443,  443, 1306, 1223,  443,  445,
      445, 1222, 1306,  445,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  503,  503,  302,  302,  302,
      527, 1018, 1018,  527,  527,  527,  527,  527,  531,  531,
     1219, 1306,  531,  334,  334,  533,  533, 1218, 1306,  533,
      336,  336,   84, 1216,   85,   84,   84,   84,   84,   84,
      562,   85,   85,  562,  562,  562,  562,  562,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      633,  633,   85,   85,  633,  432,  432,  635,  635,   85,
       85,  635,  434,  434,  637,  637, 1306, 1306,  637,  436,
      436,  639,  639, 1306, 1206,  639,  443,  443,  641,  641,
     1306, 1205,  641,  445,  445,  701,  701,  701,   85,  701,
      503,  503,  503,   85,  503,  527,   85,   85,  527,  527,
      527,  527,  527,  731,  731,   85,   85,  731,  733,  733,
     1306, 1179,  733,  735,  735, 1306, 1306,  735,  531,  531,
      737,  737, 1306, 1176,  737,  533,  533,   84, 1306, 1175,

       84,   84,   84,   84,   84,  562, 1018, 1173,  562,  562,
      562,  562,  562,  769,  769, 1172, 1170,  769,  771,  771,
      696,  660,  771,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  831,  831, 1169, 1167,  831,  633,
      633,  833,  833,   85,   85,  833,  635,  635,  637,  637,
       85,   85,  637,  835,  835,   85,   85,  835,  639,  639,
      837,  837,   85,   85,  837,  641,  641,  701,  701,  701,
       85,  701,  505,  505,   85,   85,  505,  896,  896,   85,
     1151,  896,  898,  898, 1150, 1148,  898,  900,  900, 1146,
       85,  900,  731,  731,  902,  902,   85, 1114,  902,  733,

      733,  904,  904, 1112, 1111,  904,  735,  735,  906,  906,
     1109, 1107,  906,  737,  737,   84,  894,  887,   84,   84,
       84,   84,   84,  935,  935, 1101, 1100,  935,  937,  937,
      883, 1098,  937,  939,  939,  696,  696,  939,  769,  769,
      941,  941, 1097,  867,  941,  771,  771,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  990,  990,
      861,  473,  990,  831,  831,  992,  992,  660,  660,  992,
      833,  833,  994,  994, 1096,  455,  994,  835,  835,   84,
       84,  989,   85,   84,  837,  837,  701,  701,   85,   85,
      701, 1022, 1022,   85,   85, 1022,  896,  896, 1024, 1024,

       85,   85, 1024,  898,  898, 1026, 1026,   85,   85, 1026,
      900,  900, 1028, 1028,   85,   85, 1028,  902,  902, 1030,
     1030,  904,  904,   84,   85,   85,   84,   84,   84,   84,
       84,  906,  906, 1061, 1061,   85,   85, 1061,  935,  935,
     1063, 1063,   85,   85, 1063,  937,  937, 1065, 1065,   85,
       85, 1065,  939,  939, 1067, 1067,   85, 1068, 1067,  941,
      941,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988, 1094, 1094,  990,  990,  992,  992, 1095, 1095,
      994,  994,   84,   84, 1106, 1106, 1066, 1064, 1106, 1022,
     1022, 1108, 1108, 1062,   85, 1108, 1024, 1024, 1110, 1110,

     1029, 1027, 1110, 1026, 1026,  332,  332, 1025, 1023,  332,
     1028, 1028, 1113, 1113,  894,  894, 1113, 1145, 1145, 1020,
      716, 1145, 1061, 1061, 1147, 1147,  883,  883, 1147, 1063,
     1063, 1149, 1149,  879,  696, 1149, 1065, 1065,  361,  361,
     1009, 1008,  361, 1067, 1067, 1166, 1166, 1006,  867, 1166,
     1168, 1168,  867,  683, 1168, 1174, 1174,  861,  861, 1174,
      527,  527,  473,  473,  527, 1177, 1177, 1178, 1178, 1003,
      660, 1178, 1204, 1204, 1002, 1001, 1204,  562,  562,  999,
      998,  562, 1207, 1207, 1215, 1215,  455,  455, 1215, 1217,
     1217,  997,  996, 1217, 1220, 1220, 1174, 1174, 1221, 1221,

      995,  993, 1221,  906,  906,  991,  989,  906, 1242, 1242,
     1243, 1243,   85,   85, 1243,  992,  992,   85,   85,  992,
       84,   84,   85,   85,   84, 1251, 1251,   85,   85, 1251,
     1253, 1253,   85,   85, 1253, 1267, 1267,   85,   85, 1267,
     1269, 1269,   85,  942, 1269, 1274, 1274,  940,  938, 1274,
      332,  332,  936,   85,  332, 1285, 1285,  907,  905, 1285,
      361,  361,  903,  901,  361,  899,  897,  525,  519,  726,
      716,  716,  501,  495,  490,  871,  870,  683,  683,  473,
      857,  856,  854,  853,  463,  848,  847,  455,  843,  842,
      840,  839,  838,  836,  638,  638,  834,  832,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,  772,  770,
      563,  738,  736,  734,  732,  528,  525,  525,  316,  519,
      519,  501,  501,  294,  495,  495,  698,  690,  273,  667,
      666,  662,  264,  647,  646,  642,  640,  439,  439,  638,
      636,  634,   85,   85,  563,  535,  534,  532,  528,  328,
      327,  316,  316,  301,  294,  294,  267,  457,  446,  444,
      442,  439,  438,  437,  435,  433,  228,   85,   85,  362,
      338,  337,  335,  328,  333,  331,  328,  326,  325,  324,
      267,  258,  257,   83,   83,   85,  230,  171,  152,  132,
      127,   85, 1306,   71,   71,   11, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306
    } ;

static const flex_int16_t yy_chk[4088] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    8,    9,   10,    2,   19,   19,    2,

        9,   10,   20,    7,    8,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   16,   24,   16,
       24,   25,   36,   36,   20,   28,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   34,   54,   25,   29,
       25,   27,   27,   27,   29,   43,   41,   43,    7,    8,
        9,   10,   46,   85, 1305,   54,   34,   29,   34,   34,
       39,   55,   44,   44,   44,   39,   41,   44,   44,   47,
       44,   53,   44,   46,   47,   46,   44,   44,   48,   55,
       85,   53,   44,   48,   55,   44,   57,  169,   53,   47,
       48,  396,   56,   41,  396,   57,   48,   27,   30,  169,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   56,
       39,  113,   56,   39,   56,  124,   67,   30,   67,   52,
       30,   50,   49,   30,   30,   30,   30,   30,   52,   65,
      166,   49,   30,   30,   30,   49,   50,   52,   50,   30,
       49,   63,   30,  393,   49,   30,  166,   50,   30,   30,
       63,   30,  113,   30,  393,   30,  124,  182,  136,   30,
      136,   60,   30,  161,   30,   31,   60,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   59,  137,  161,  137,
      105,  105,   60,   65,  182,  161,  114,   31,   59,   59,
       31,   31,   31,   31,   31,   51,   59,  190,   59,   31,

       51,   31,  139,   59,  139,  114,   31,  142,   51,  142,
       51,   60,   31,   51,   60,   31,   31,   51,   31,  105,
       31,  114,   31,  168,  190,   61,   31,  114,   60,  211,
      114,   31,   37,  144,  141,  144,   37,   37,   61,   37,
       58,   37,   37,   61,   37,  168,   37,   61,  211,  141,
      114,  141,   58,   58,  143,  143,   62,  143,   37,   37,
       37,   62,   58,   58,  147,   58,  147,  140,   62,   62,
       68,   68,   68,   68,   68,   68,   69,   69,   68,  279,
      279,   69,   37,   37,  140,   37,  140,   37,   78,   78,
       78,   78,   78,   78,  145,  145,  145,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   80,   80,   80,   80,
       80,   80,   37,   37,   75,   75,  107,  107,  148,   75,
      148,   75,  151,  173,  151,  107,   75,   81,   81,   81,
       81,   81,   81, 1304,  276,   75,   75,   75,   75,   75,
       75,   75,  107,  110,  165,  173,  162,  163,  115,   75,
      155,  110,  107,  165,  164,  155,  115,  103,  103,  103,
      103,  103,  103,  103,  162,  163,  167,   75,  110,  164,
      172,   75,  115,  115,  103,  276,   75,   75,  110,  179,
       75,   75,  216,  115,  167,  174,  172,  216,   75,  179,
      103,   75,  175,   75,   75,   75,  103,   75,   83,  103,

      155,  175,   83,   83,  177,   83,  174,   83,   83,  177,
       83,  208,   83, 1296,  112,  112,  112,  112,  181,  103,
      118,  118,  177,  189,   83,   83,   83,  208,  104,  118,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  112,
      112,  181,  112,  189,  112,  176,  118,  180,   83,   83,
      104,   83,  106,  188,  106,  183,  118,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  176,  176,  180,  104,
      205,  188,  116,  191,  116,  104,  183,  116,  116,   83,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  184,
      191,  205,  186,  178,  184,  116,  106,  195,  121,   98,

       98,   98,  178,  116,   98,   98,  121,  186,   98,  198,
      178,  187,  184,  178,  195,  196,  192,  202,  198,   98,
      116, 1295,  116,  121,   98,   98,   98,  200,  187,   98,
      116,   98,  196,  121,  109,  202,  109,  187,  192,  109,
      109,   98,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  197,  185,  210,  200,  207,  214,  109,  109,  185,
      125,  102,  102,  102,  206,  109,  102,  102,  125,  108,
      102,  108,  108,  197,  185,  207,  214,  206,  108,  264,
      210,  102,  109,  352,  125,  125,  102,  102,  102,  213,
     1294,  102,  109,  102,  108,  125,  212,  108,  119,  108,

      119,  119,  213,  102,  264,  108,  120,  119,  120,  352,
      213,  120,  120,  123,  123,  123,  123,  209,  194,  126,
      203,  126,  209,  119,  126,  126,  119,  204,  119,  120,
      120,  203,  204,  194,  119,  219,  220,  120,  123,  123,
      194,  123,  126,  123,  209,  215,  212,  204,  203,  212,
      126,  260,  260,  217,  120,  368,  220,  219,  215,  241,
      215,  241,  368,  797,  120,  170,  217,  126,  273,  126,
      170,  170,  170,  283,  170,  170,  260,  126,  170,  242,
      170,  242,  218,  201,  416,  170,  170,  170,  170,  170,
      201,  218,  797,  273,  201,  218,  225,  225,  232,  232,

      283,  225,  201,  232,  201,  201,  224,  224,  224,  224,
      224,  224,  291,  244,  224,  244,  291,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  227,  227,  246,  313,
      247,  227,  247,  313,  416,  229,  229, 1291,  248,  248,
      229,  248,  229,  246,  249,  246,  249,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  235,  235,  235,  235,  235,
      235,  235,  245,  250,  250,  250,  252,  253,  252,  253,
      254,  329,  254,  329,  330,  440,  330,  440,  261,  245,
      261,  245,  298,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  269,  269,  235,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  262,  299,  262,  298,  345,  262,
      262,  287,  285,  345,  259,  259,  259,  269,  305,  259,
      259,  285,  261,  259,  296,  296,  263,  262,  263,  299,
      299,  271,  263,  271,  259,  263,  271,  271,  287,  259,
      259,  259,  347,  376,  259,  305,  259,  347,  285,  376,
      296,  263,  262,  263,  271,  309,  259,  275,  263,  275,
      275,  275,  275,  275,  275,  275,  318,  318,  263,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  339,  271,
      342,  379,  309,  426,  320,  333,  321,  379,  268,  268,

      268,  339,  318,  268,  268,  426,  342,  268,  275,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  268,  320,
      321,  321,  333,  268,  268,  268,  355,  286,  268,  286,
      268,  355,  286,  286,  366,  346,  270,  289,  270,  366,
      268,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      272,  286,  272,  289,  340,  346,  272,  311,  286,  272,
      380,  274,  274,  274,  289,  341,  274,  274, 1290,  307,
      274,  343,  340,  311,  392,  272,  380,  272,  307,  358,
      270,  350,  272,  341,  311,  286,  274,  274,  274,  343,
      344,  274,  272,  274,  277,  277,  277,  277,  277,  277,

      277,  277,  277,  274,  350,  307,  358,  344,  348,  392,
      282,  351,  282,  760,  277,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  294,  290,  295,  290,  348,  351,
      290,  290,  294,  277,  295,  316,  356,  353,  365,  277,
      278,  278,  357,  316,  359,  356,  317,  365,  760,  294,
      362,  295,  353,  369,  317,  357,  290,  359,  360,  294,
      316,  295,  364,  278,  278,  278,  278,  278,  354,  367,
      316,  317,  278,  369,  278,  290,  360,  362,  367,  278,
      364,  317,  370,  290,  354,  354,  451,  378,  278,  278,
      451,  278,  297,  278,  297,  278,  378,  297,  297,  278,

      370,  371,  373,  383,  278,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  372,  297,  297,  308,  383,  308,
      373,  371,  308,  308,  281,  630,  281,  377,  630,  281,
      281,  420,  300,  281,  300,  372,  372,  300,  300,  420,
      297,  308,  374,  381,  281,  375,  377,  374,  308,  281,
      375,  281,  381,  388,  281,  300,  281,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  281,  382,  384,  386,
      389,  385,  388,  384,  386,  308,  382,  390, 1288,  389,
      300,  398,  300,  302,  391,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  385,  390,  304,  391,  395,  398,

      394,  302,  302,  302,  302,  302,  302,  395,  302,  302,
      302,  302,  302,  394,  400,  421,  312,  302,  312,  302,
      421,  312,  312,  441,  302,  441,  302,  302,  302,  302,
      302,  302,  400,  302,  302,  349,  302,  319,  302,  319,
      302,  399,  319,  319,  302,  397,  322,  312,  322,  302,
      349,  322,  322,  403,  399,  404,  349,  349,  349,  405,
      319,  319,  387,  402,  397,  401,  312,  387,  405,  322,
      406,  408,  404,  403,  312,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  387,  319,  402,  401,  407,  410,
      408,  409,  406,  411,  322,  412,  322,  414,  410,  417,

      415,  419,  411,  423,  422,  418,  425,  410,  412,  415,
      422,  407,  424,  409,  323,  427,  414,  417,  418,  428,
      428,  425,  429,  419,  428,  423,  428,  469,  429,  424,
     1287,  469,  599,  427,  430,  430,  430,  430,  430,  430,
      430,  431,  431,  431,  431,  431,  431,  431,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  450,  599,  450,
     1286,  463,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  459,  459,  430,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  456,  537,  456,  463,  490,  456,  456,
      487,  487,  495,  449,  496,  449,  459,  492,  449,  449,

      537,  492,  449,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  490,  449,  501,  487,  502,  541,  449,  495,
      449,  496,  474,  449,  474,  449,  541,  474,  474,  477,
      477,  461,  519,  461, 1285,  449,  461,  461,  477,  501,
      513,  502,  457,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  498,  516,  461,  477,  498,  516,  480,  519,
      553,  484,  458,  458,  458,  477,  480,  458,  458,  484,
      520,  458,  540,  482,  482,  482,  482,  540,  553,  461,
      522,  513,  458,  480,  522,  484,  484,  458,  458,  458,
      525,  528,  458,  480,  458, 1284,  484,  520,  482,  482,

      460,  482,  460,  482,  458,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  462,  525,  462,  526,  528,  538,
      462,  539,  536,  462,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  536,  538, 1283,  543, 1276,  554,  462,
      539,  462,  526,  554,  460,  543,  462,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  462,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  544,  488,  489,  488,
      489,  503,  488,  488,  489,  545,  467,  489,  467,  504,
      560,  467,  467,  503,  545,  467,  475,  542,  544,  546,
      488,  504,  559,  489,  609,  489,  467,  560,  542,  503,

      489,  467,  546,  467,  506,  506,  467,  504,  467,  509,
      489,  559,  609,  506,  468,  488,  468,  509,  467,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  476,  476,
      506,  573,  547,  478,  509,  478,  478,  548,  573,  556,
      506,  479,  478,  479,  509,  556,  479,  479,  547,  514,
      557,  476,  476,  476,  476,  476,  549,  514,  478,  548,
      476,  478,  476,  478,  479,  479,  648,  476, 1275,  478,
      648,  557,  479,  514,  514,  563,  476,  476,  549,  476,
      485,  476,  485,  476,  514,  485,  485,  476,  507,  479,
      507,  507,  476,  550,  558,  552,  568,  507,  551,  479,

      570,  567,  563,  485,  555,  558,  550,  561,  572,  576,
      568,  485,  570,  507,  551,  551,  507,  552,  507,  555,
      579,  575,  561,  567,  507,  577,  555,  574,  485,  572,
      485,  508,  576,  508,  575,  579,  508,  508,  485,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  577,  574,
      578,  582,  580,  584,  508,  508,  578,  585,  486,  586,
      486,  580,  508,  486,  486,  587,  582,  486,  511,  511,
      511,  511,  584,  588,  610,  589,  590,  585,  486,  508,
      587,  586,  591,  486,  596,  486,  592,  610,  486,  508,
      486,  590,  588,  511,  511,  592,  511,  589,  511,  595,

      486,  505,  591,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  593,  604,  598,  704,  595,  600,  596,  505,
      505,  505,  505,  505,  505,  601,  505,  505,  505,  505,
      505,  607,  593,  604,  601,  505,  598,  505,  603,  600,
      602,  608,  505,  704,  505,  505,  505,  505,  505,  505,
      608,  505,  505,  607,  505,  515,  505,  515,  505,  603,
      515,  515,  505,  510,  602,  510,  615,  505,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  605,  515,  606,
      611,  612,  613,  614,  616,  618,  515,  611,  614,  613,
      612,  615,  617,  619,  618,  620,  622,  605,  621,  606,

      624,  619,  616,  515,  740,  515,  619,  510,  625,  621,
      626,  619,  620,  515,  617,  628, 1274,  740, 1273,  622,
      626,  631,  624,  625,  628,  672,  646,  631,  632,  632,
      632,  632,  632,  632,  632,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  647,  656,  668,  666,  676,  656,
      668,  646,  672,  680,  643,  687,  643,  680,  692,  643,
      643,  739,  692,  643,  646,  661,  809,  661,  742,  647,
      661,  661,  666,  713,  643,  676,  809,  713,  739,  643,
      687,  643,  647,  742,  643,  666,  643,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  643,  654,  654,  654,

      654,  654,  654,  654,  654,  654,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  667,  654,  678,  654,  674,
      705,  654,  654,  685,  685,  654,  688,  723,  674,  697,
      709,  697,  748,  678,  697,  697,  654,  748, 1272,  750,
      667,  654,  750,  654,  678,  662,  654,  705,  654,  685,
      688,  688,  723,  667,  655,  674,  655,  709,  654,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  675,  743,  675,
      683, 1271,  675,  675,  749,  745,  684,  663,  683,  663,
      721,  721,  663,  663,  684,  749,  663,  679,  745,  679,

      743,  675,  679,  679,  689,  683,  689,  663,  675,  689,
      689,  684,  663,  724,  663,  683,  721,  663,  686,  663,
      686,  684,  701,  686,  686,  690,  690,  689,  679,  663,
      711,  703,  747,  752,  701,  675,  744,  724,  724,  746,
      751,  686,  686,  703,  707,  747,  711,  679,  753,  759,
      701,  752,  689,  707,  689,  679,  744,  711,  754,  703,
      751,  746,  759,  753,  690, 1270,  686,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  702,  754,  702, 1269,
      707,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      708,  755,  708,  758,  762,  708,  708,  712,  756,  712,

      716,  717,  712,  712,  758,  757,  698,  756,  716,  717,
      757,  765,  755,  761,  708,  763,  762,  779,  764,  766,
      702,  708,  761,  773,  766,  716,  717,  764,  712,  780,
      786,  798,  763,  765,  779,  716,  717,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  775,  712,  708,  798,
      773,  780,  786,  775,  781,  712,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  776,  722,  777,  722,  781,
      782,  722,  722,  783,  776,  719,  777,  719,  785,  787,
      719,  719,  783,  789,  719,  782,  725,  785,  725,  722,
      722,  725,  725,  791,  788,  719,  787,  792,  789,  791,

      719,  796,  719,  793, 1268,  719,  788,  719,  793,  725,
      796,  795,  792,  720,  722,  720,  795,  719,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  803,  791,  802,
      804,  805,  808,  806,  725,  810,  725,  811,  802,  812,
      808,  813,  810,  814,  805,  816,  819,  815,  821,  803,
      806,  814,  804,  813,  815,  819,  812,  820,  821,  811,
      823,  824,  825,  826,  827,  820,  824,  829,  816,  849,
      913,  922,  826,  849,  840,  825,  847,  823,  848,  858,
      861,  862,  827,  858,  867,  868,  922,  913,  854,  829,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  840,

      864,  847,  870,  848,  864, 1267, 1265,  861,  862,  867,
      868,  872,  840,  854,  847,  872,  848,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  854,  870,  871,  839,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  880,
      870,  883,  887,  880,  884,  894,  891,  895,  912,  844,
      891,  844,  909,  871,  844,  844,  853,  908,  844,  909,
      917,  912,  908,  924,  910,  919,  871,  887,  883,  844,
      894,  884,  895,  910,  844,  908,  844,  917,  919,  844,
      924,  844,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  844,  877,  877,  877,  877,  877,  877,  877,  877,

      877,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      911,  877,  911,  877,  914,  911,  877,  877,  916,  888,
      877,  888,  915,  979,  888,  888,  916,  918,  921,  915,
      918,  877,  920,  979,  932,  920,  877,  914,  877, 1262,
      886,  877,  888,  877,  923,  911,  925,  927,  928,  878,
      921,  878,  932,  877,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  889,  927,  889,  923,  888,  925,  889,
      926,  929,  889,  926,  930,  931,  933,  934,  943,  947,
      944,  949,  928,  948,  931,  953,  929,  955,  889,  944,
      889,  950,  956,  957,  930,  889,  948,  943,  953,  934,

      950,  958,  947,  949,  960,  889,  961,  955,  966,  964,
      965,  933,  978,  968,  974,  977,  982,  966,  983,  956,
      968,  960,  974,  984,  977,  982,  986,  957,  961,  964,
      965,  999, 1006,  983,  978, 1014, 1034,  958,  984, 1014,
     1031, 1041, 1042, 1259, 1041, 1042,  986,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  999, 1006, 1019, 1048,
     1019, 1031, 1034, 1019, 1019, 1036, 1037, 1043, 1048,  999,
     1006, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1035, 1040, 1046, 1257, 1035, 1043,  998, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1038, 1032, 1037, 1036,

     1039, 1040, 1050, 1038, 1046, 1039, 1010, 1032, 1010, 1047,
     1020, 1010, 1010, 1045, 1035, 1010, 1054, 1049, 1051, 1045,
     1049, 1053, 1047, 1050, 1051, 1052, 1010, 1056, 1052, 1055,
     1053, 1010, 1055, 1010, 1057, 1059, 1010, 1058, 1010, 1060,
     1056, 1069, 1057, 1070, 1072, 1054, 1071, 1058, 1010, 1075,
     1069, 1078, 1060, 1051, 1076, 1071, 1081, 1085, 1084, 1092,
     1087, 1072, 1090, 1118, 1070, 1212, 1100, 1075, 1092, 1059,
     1090, 1101, 1076, 1120, 1081, 1121, 1212, 1076, 1084, 1085,
     1078, 1087, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1100, 1118, 1102, 1123, 1124, 1101, 1102, 1125, 1120,

     1126, 1121, 1128, 1125, 1100, 1129, 1127, 1130, 1131, 1101,
     1132, 1134, 1124, 1132, 1123, 1126, 1127, 1133, 1135, 1137,
     1138, 1098, 1137, 1138, 1130, 1128, 1139, 1143, 1140, 1139,
     1133, 1144, 1129, 1141, 1131, 1140, 1141, 1142, 1153, 1152,
     1142, 1155, 1156, 1157, 1160, 1134, 1144, 1163, 1170, 1180,
     1155, 1183, 1187, 1185, 1135, 1187, 1143, 1152, 1186, 1156,
     1188, 1153, 1189, 1194, 1160, 1190, 1157, 1193, 1190, 1191,
     1163, 1197, 1191, 1170, 1185, 1180, 1186, 1196, 1183, 1199,
     1196, 1189, 1188, 1209, 1200, 1193, 1170, 1200, 1201, 1203,
     1208, 1201, 1194, 1197, 1202, 1214, 1226, 1202, 1203, 1209,

     1208, 1199, 1227, 1228, 1229, 1230, 1228, 1231, 1240, 1227,
     1233, 1214, 1232, 1229, 1230, 1232, 1237, 1226, 1241, 1237,
     1246, 1241, 1247, 1248, 1255, 1231, 1254, 1233, 1260, 1246,
     1240, 1231, 1248, 1255, 1247, 1256, 1258, 1261, 1260, 1258,
     1256, 1263, 1261, 1264, 1263, 1266, 1264, 1277, 1266, 1278,
     1279, 1280, 1281, 1279, 1282, 1281, 1289, 1282, 1292, 1293,
     1297, 1280, 1298, 1299, 1278, 1300, 1301, 1277, 1302, 1297,
     1303, 1253, 1252, 1251, 1293, 1298, 1250, 1249, 1289, 1292,
     1303, 1245, 1244, 1243, 1301, 1299, 1300, 1242, 1239, 1238,
     1302, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,

     1307, 1307, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1311, 1236, 1235, 1311, 1311,
     1311, 1311, 1311, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1313, 1234, 1313, 1313, 1225, 1313,
     1313, 1313, 1313, 1224, 1313, 1314, 1223, 1222, 1314, 1314,
     1314, 1314, 1314, 1314, 1221, 1314, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1316, 1316, 1316,
     1220, 1219, 1316, 1317, 1218, 1217, 1216, 1317, 1317, 1317,

     1317, 1318, 1318, 1215, 1213, 1318, 1319, 1319, 1211, 1210,
     1319, 1320, 1207, 1206, 1205, 1320, 1320, 1320, 1320, 1321,
     1321, 1198, 1195, 1321, 1322, 1322, 1192, 1184, 1322, 1323,
     1323, 1182, 1181, 1323, 1324, 1324, 1179, 1178, 1324, 1325,
     1325, 1177, 1176, 1325, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1327, 1327, 1328, 1328, 1328,
     1329, 1173, 1172, 1329, 1329, 1329, 1329, 1329, 1330, 1330,
     1171, 1169, 1330, 1331, 1331, 1332, 1332, 1168, 1167, 1332,
     1333, 1333, 1334, 1166, 1165, 1334, 1334, 1334, 1334, 1334,
     1335, 1164, 1162, 1335, 1335, 1335, 1335, 1335, 1336, 1336,

     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1338, 1338, 1161, 1159, 1338, 1339, 1339, 1340, 1340, 1158,
     1154, 1340, 1341, 1341, 1342, 1342, 1151, 1150, 1342, 1343,
     1343, 1344, 1344, 1148, 1147, 1344, 1345, 1345, 1346, 1346,
     1146, 1145, 1346, 1347, 1347, 1348, 1348, 1348, 1136, 1348,
     1349, 1349, 1349, 1122, 1349, 1350, 1119, 1117, 1350, 1350,
     1350, 1350, 1350, 1351, 1351, 1116, 1115, 1351, 1352, 1352,
     1114, 1113, 1352, 1353, 1353, 1112, 1111, 1353, 1354, 1354,
     1355, 1355, 1109, 1108, 1355, 1356, 1356, 1357, 1107, 1106,

     1357, 1357, 1357, 1357, 1357, 1358, 1105, 1104, 1358, 1358,
     1358, 1358, 1358, 1359, 1359, 1103, 1099, 1359, 1360, 1360,
     1097, 1096, 1360, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1362, 1362, 1095, 1094, 1362, 1363,
     1363, 1364, 1364, 1093, 1091, 1364, 1365, 1365, 1366, 1366,
     1089, 1088, 1366, 1367, 1367, 1086, 1083, 1367, 1368, 1368,
     1369, 1369, 1082, 1080, 1369, 1370, 1370, 1371, 1371, 1371,
     1079, 1371, 1372, 1372, 1077, 1074, 1372, 1373, 1373, 1073,
     1067, 1373, 1374, 1374, 1065, 1063, 1374, 1375, 1375, 1061,
     1044, 1375, 1376, 1376, 1377, 1377, 1033, 1030, 1377, 1378,

     1378, 1379, 1379, 1028, 1026, 1379, 1380, 1380, 1381, 1381,
     1024, 1022, 1381, 1382, 1382, 1383, 1021, 1017, 1383, 1383,
     1383, 1383, 1383, 1384, 1384, 1016, 1015, 1384, 1385, 1385,
     1012, 1011, 1385, 1386, 1386, 1009, 1008, 1386, 1387, 1387,
     1388, 1388, 1007, 1005, 1388, 1389, 1389, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391,
     1004, 1003, 1391, 1392, 1392, 1393, 1393, 1002, 1001, 1393,
     1394, 1394, 1395, 1395, 1000,  997, 1395, 1396, 1396, 1397,
     1397,  988,  987, 1397, 1398, 1398, 1399, 1399,  985,  981,
     1399, 1400, 1400,  980,  976, 1400, 1401, 1401, 1402, 1402,

      975,  973, 1402, 1403, 1403, 1404, 1404,  972,  971, 1404,
     1405, 1405, 1406, 1406,  970,  969, 1406, 1407, 1407, 1408,
     1408, 1409, 1409, 1410,  967,  963, 1410, 1410, 1410, 1410,
     1410, 1411, 1411, 1412, 1412,  962,  959, 1412, 1413, 1413,
     1414, 1414,  954,  952, 1414, 1415, 1415, 1416, 1416,  951,
      946, 1416, 1417, 1417, 1418, 1418,  945,  941, 1418, 1419,
     1419, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1421, 1421, 1422, 1422, 1423, 1423, 1424, 1424,
     1425, 1425, 1426, 1426, 1427, 1427,  939,  937, 1427, 1428,
     1428, 1429, 1429,  935,  906, 1429, 1430, 1430, 1431, 1431,

      902,  900, 1431, 1432, 1432, 1433, 1433,  898,  896, 1433,
     1434, 1434, 1435, 1435,  893,  892, 1435, 1436, 1436,  890,
      885, 1436, 1437, 1437, 1438, 1438,  882,  881, 1438, 1439,
     1439, 1440, 1440,  879,  875, 1440, 1441, 1441, 1442, 1442,
      874,  873, 1442, 1443, 1443, 1444, 1444,  869,  866, 1444,
     1445, 1445,  865,  863, 1445, 1446, 1446,  860,  859, 1446,
     1447, 1447,  857,  856, 1447, 1448, 1448, 1449, 1449,  855,
      852, 1449, 1450, 1450,  851,  850, 1450, 1451, 1451,  846,
      845, 1451, 1452, 1452, 1453, 1453,  843,  842, 1453, 1454,
     1454,  841,  837, 1454, 1455, 1455, 1456, 1456, 1457, 1457,

      835,  833, 1457, 1458, 1458,  831,  830, 1458, 1459, 1459,
     1460, 1460,  828,  822, 1460, 1461, 1461,  818,  817, 1461,
     1462, 1462,  807,  801, 1462, 1463, 1463,  800,  799, 1463,
     1464, 1464,  794,  790, 1464, 1465, 1465,  784,  778, 1465,
     1466, 1466,  774,  771, 1466, 1467, 1467,  769,  768, 1467,
     1468, 1468,  767,  741, 1468, 1469, 1469,  737,  735, 1469,
     1470, 1470,  733,  731, 1470,  730,  729,  728,  727,  726,
      715,  714,  700,  699,  695,  694,  693,  682,  681,  671,
      670,  669,  665,  664,  659,  658,  657,  651,  650,  649,
      645,  644,  641,  639,  638,  637,  635,  633,  629,  627,

      623,  597,  594,  583,  581,  571,  569,  566,  565,  564,
      562,  533,  531,  530,  529,  527,  524,  523,  521,  518,
      517,  500,  499,  497,  494,  493,  491,  483,  472,  471,
      470,  464,  454,  453,  452,  445,  443,  442,  438,  436,
      434,  432,  413,  363,  361,  338,  336,  334,  332,  331,
      326,  315,  314,  303,  293,  292,  266,  265,  256,  255,
      251,  243,  240,  238,  237,  236,  226,  199,  193,  171,
      160,  158,  157,  150,  149,  146,  138,  135,  134,  130,
      100,   97,   96,   93,   91,   84,   71,   45,   38,   35,
       32,   18,   11,    4,    3, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[223] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Thu Apr  1 13:22:31 2021
 * Update Count     : 754
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

//**************************** Includes and Defines ****************************

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "ParseNode.h"
#include "TypedefTable.h"

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 1926 "Parser/lex.cc"
#line 94 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: D (double) and iI (imaginary) suffixes, and DL (long double)
				// character escape sequence, GCC: \e => esc character
				// ' stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}




#line 1943 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define BKQUOTE 2
#define QUOTE 3
#define STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 168 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 2168 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1307 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3996 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 170 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 192 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 195 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 196 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 197 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 200 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 203 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 204 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 205 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }
	YY_BREAK
/* keywords */
case 10:
YY_RULE_SETUP
#line 208 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 209 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 210 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 211 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 212 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 213 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 214 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 217 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 218 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 219 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 220 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 221 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 224 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 225 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT16); }					// GCC
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32); }					// GCC
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32X); }					// GCC
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64); }					// GCC
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64X); }					// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 100:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCAL); }		// C11
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VALIST); }			// GCC
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 138:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* numeric constants */
case 140:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value */
case 148:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant */
case 151:
YY_RULE_SETUP
#line 362 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 363 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 364 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 154:
YY_RULE_SETUP
#line 368 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 369 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 157:
YY_RULE_SETUP
#line 373 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 374 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 375 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 378 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 379 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 380 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 381 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 384 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 385 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 170:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 390 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 391 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 174:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 396 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 397 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 398 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 402 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 403 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 408 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 413 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 414 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 430 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 436 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 215:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 220:
YY_RULE_SETUP
#line 474 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 221:
YY_RULE_SETUP
#line 486 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 488 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 3433 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BKQUOTE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1307 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1307 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1306);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 488 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " at token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

