
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 229
#define YY_END_OF_BUFFER 230
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1336] =
    {   0,
        0,    0,    0,    0,    0,    0,  156,  156,  159,  159,
      230,  228,    7,    9,    8,  181,  158,  145,  187,  190,
      155,  168,  169,  184,  182,  172,  183,  175,  186,  148,
      149,  173,  174,  192,  194,  193,  195,  164,  145,  166,
      185,  167,  188,  145,  165,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  170,  191,  171,  189,    7,  228,    4,
        4,  229,  156,  157,  163,  159,  160,    7,    9,    0,
        8,  199,  222,  145,    0,  212,  180,  204,  213,  210,
      196,  207,  197,  208,  206,  220,    0,  152,    3,    0,

      211,  151,  148,    0,    0,    0,  148,  148,  148,  148,
      148,  148,    0,    0,  148,  148,  149,  149,  149,  149,
      149,  149,  149,    0,  149,  149,  178,  179,  177,  200,
      202,  198,  203,  201,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  218,  158,  155,  145,  209,    0,    0,  215,    0,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,    0,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,   45,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,   77,  145,  145,  145,  145,  145,

       95,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  214,  205,  219,    7,    0,    0,    0,    2,
        0,    5,  156,    0,  162,  161,  161,    0,    0,    0,
      159,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  221,  176,
      152,  152,    0,  152,  152,  152,  152,    0,    6,  153,
      151,    0,  151,  151,  151,  151,  148,    0,    0,  147,
        0,    0,  153,    0,  148,  148,  148,  148,  148,  148,
      148,  148,    0,    0,    0,  148,  148,  148,  148,  148,

      148,  148,    0,  150,    0,    0,  149,  149,  149,  149,
      149,  149,  149,  149,    0,    0,    0,  149,  149,  149,
      149,  149,  149,  149,    0,  216,  217,    0,  226,  223,
        0,    0,    0,  225,    0,    0,    0,    0,    0,    0,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  146,    0,   14,   15,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
       70,  145,  145,  145,  145,   84,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  121,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,    0,    0,  161,    0,    0,    0,    0,    0,  161,
        0,    0,  227,    0,    0,    0,    0,    0,    0,    0,
      152,    0,  152,    0,    0,    0,    0,    0,  152,  152,
        0,  153,  153,    0,  153,  153,  153,  153,  151,    0,
      151,    0,    0,    0,    0,    0,  151,  151,    0,  147,
      147,  147,  147,  147,  147,  147,    0,  147,  147,  153,
      153,  153,  153,  153,  153,    0,    0,    0,  148,  148,

        0,    0,    0,    0,  148,  148,    0,    0,  150,  150,
      150,  150,  150,  150,  150,  150,    0,  150,  150,    0,
        0,    0,  149,  149,    0,    0,    0,    0,  149,  149,
      225,    0,    0,    0,    0,    0,    0,    0,  224,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  146,    0,    0,
        0,   21,  145,  145,   26,  145,   29,  145,  145,  145,
      145,  145,  145,  145,  145,  145,   48,  145,   50,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,   76,

      145,  145,   89,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  134,  145,
      145,  145,  141,  145,  143,  145,    0,    0,    0,    0,
        0,    0,  161,    0,    0,    0,    0,    0,  152,  152,
        0,  152,  152,    0,    0,    0,    0,  153,    0,  153,
        0,    0,    0,    0,    0,  153,  153,    0,  151,  151,
        0,  151,  151,    0,    0,    0,    0,  147,  147,  147,
      147,  147,  147,  147,  147,    0,    0,    0,  147,  147,
      147,  147,  147,  147,  147,    0,  153,    0,    0,    0,

        0,  153,  153,    0,    0,    0,    0,    0,    0,    0,
      150,  150,  150,  150,  150,  150,  150,  150,    0,    0,
        0,  150,  150,    0,  154,    0,  150,  150,  150,  150,
      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  145,  145,   24,  145,  145,  145,
      145,  145,  145,  145,  145,  145,   16,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,    0,    0,    0,    0,    0,    0,
      145,   25,   27,  145,  145,   35,  145,  145,  145,  145,
      145,   47,  145,  145,  145,  145,  145,   57,   58,  145,

      145,   73,  145,  145,  145,  145,   91,   94,   96,  145,
      145,  145,  145,  145,  104,  145,  145,  145,  145,  145,
      145,  145,  117,  145,  120,  122,  145,  145,  145,  128,
      145,  145,  145,  145,  145,  145,  142,  145,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  152,    0,
      152,  152,  153,  153,    0,  153,  153,    0,    0,    0,
        0,    0,  151,    0,  151,  151,    0,    0,    0,  147,
      147,    0,    0,    0,    0,  147,  147,    0,  153,  153,
        0,    0,    0,    0,    0,  154,    0,    0,    0,    0,
        0,  150,  150,    0,  154,  154,  154,  154,  154,    0,

        0,    0,  150,  150,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  145,    0,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,   79,  145,  145,  145,  145,
      145,  145,  145,  145,  145,    0,    0,    0,    0,    0,
        0,    0,    0,  145,  145,   30,   31,  145,  145,  145,
      145,   46,   49,  145,   53,  145,  145,  145,  145,   71,
      145,  145,   81,   85,  145,  145,  145,   99,  145,  103,
      105,  108,  109,  111,  145,  113,  114,  145,  145,  145,
      127,  124,  145,  145,  145,  138,  145,  145,  144,    0,

        1,    0,    0,  161,    0,    0,    0,    0,  152,    0,
      153,    0,  153,  153,  151,    0,    0,  153,    0,  153,
      153,  154,  154,    0,  154,    0,    0,    0,    0,  154,
      154,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  145,  145,   18,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,   17,  145,  145,  145,
      145,   36,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,    0,    0,    0,    0,    0,    0,
        0,    0,  145,  145,  145,  145,   43,   44,  145,  145,
       56,  145,   60,   72,  145,   90,   97,  145,  145,  112,

      145,  119,  123,  145,  133,  145,  139,  145,    0,    0,
      153,  153,    0,    0,  154,  154,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
       11,   32,  145,  145,   63,   64,   66,   75,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,   80,   82,   86,  145,  145,  106,  115,  125,  145,
      145,    0,    0,    0,    0,    0,    0,    0,  145,  145,
       38,  145,  145,  145,   55,   62,  145,   98,  100,  145,
      130,  135,  145,    0,    0,    0,    0,  154,    0,  154,
      154,    0,    0,    0,    0,    0,    0,  145,  145,  145,

       68,   65,   67,  145,   92,  145,  145,   12,  145,  145,
      145,   33,   37,  145,  145,   59,  145,  145,   88,  145,
      145,  145,  145,  145,    0,    0,    0,    0,  145,  145,
       39,   52,  145,   74,  145,  140,    0,    0,    0,    0,
      154,    0,    0,    0,    0,  145,   40,   41,   69,   78,
      145,  145,  145,  145,  145,  145,  145,  145,   61,   83,
       87,  101,  107,  126,  145,  136,    0,    0,    0,   23,
      145,  145,  145,    0,    0,    0,    0,    0,    0,   42,
      145,  145,   13,   19,   22,  145,  145,   34,  145,  145,
      129,  145,    0,    0,    0,    0,   28,   54,  118,    0,

        0,    0,  145,  145,  145,  145,  145,  145,  102,  137,
        0,    0,    0,    0,  145,  116,   20,  145,  145,   51,
        0,  110,  145,  145,  145,  145,  145,  145,  145,  131,
      145,  145,  132,   93,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   11,   51,   56,   11,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   11,   73,   74,   75,   76,
       77,   78,   51,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[92] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    4,    4,    4,    4,    4,    9,
        4,    4,    4,    4,    4,    4,    4,    1,   10,    1,
        1,   11,    1,    8,    8,    8,    8,    8,    8,    4,
        4,    4,    4,    4,    4,    4,    4,    9,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1

    } ;

static const flex_int16_t yy_base[1500] =
    {   0,
        0,   90, 4056, 4055,    0,    0,   90,   91,   92,   93,
     4071, 4074,  104, 4074,  110,   83, 4074, 4011,   63,   90,
     4074, 4074, 4074,   84,  104, 4074,  107,  105,  123,  178,
      245, 4033, 4074,  125, 4033,   88,  325, 4032,  152, 4074,
      112, 4074,  111,  129, 4003,  104,  113,  180,  164,   79,
      237,  154,  120,  116,  138,  183,   97,  282,  218,  296,
      253,  280,  122, 4074,  127, 4074,  150,  276,  366, 4074,
     4043, 4074,    0, 4074,  413,    0, 4074,  372, 4074,  396,
      402, 4074,  491, 4005,  155, 4074, 4074, 4074, 4074, 4074,
     4026, 4074, 4025, 4074, 4074, 4026, 4039,  558, 4074, 4056,

     4074,  620,  405,  491,  305,  429,  428,  484,  549,  482,
     4074,  496,  133,  572,  614,  629,    0,  626,  651,  683,
      623, 4074,  668,  191,  663,  717, 4074, 4074, 4074, 4023,
     4074, 4074, 4074, 4022, 4021,  182,  250, 4039,  271,  285,
      311,  345,  384,  350,  375, 4017,  388,  389, 3994, 3962,
      409, 4074, 4074, 4074,  434, 4074, 3989, 3988, 4074, 3961,
      276,  170,  171,  199,  297,  256,  290,  358,  392,  405,
      694, 3989,  303,  404,  403,  406,  412,  407,  464,  472,
      438,  476,  179,  477,  510,  512,  532,  487,  548,  488,
      426,  533,  498,  443, 3988,  536,  540,  559,  555,  570,

     3987,  580,  712,  563,  632,  544,  595,  593,  601,  615,
      662,  597,  673,  741,  677,  702,  695,  664,  665,  711,
      721,  725, 4074, 4074, 4074,  803,  794, 4042,  809, 4074,
      839, 4074,    0,  824, 4074, 4074,  826, 3982, 3981, 3980,
        0, 4006,  642,  750, 4024,  751,  810,  823,  822,  837,
      838,  841, 4002,  844,  845,  848, 3976, 3975, 4074, 4074,
      866,  857,  928,  892,  918,  814, 3974, 4032, 4074,  980,
      926, 1042,  954, 1032,  840, 1043,  991,  794, 1095, 1141,
      771, 1009, 1206, 1116,  638, 4074,  860, 1124,  674, 4074,
      829, 1144,  586, 4009, 4006,  889,  974,  873, 1214,  851,

      925, 1234,    0, 1288, 4011, 1271,  848, 4074,  931, 1296,
      894, 4074, 1006, 1339,  912, 4006, 4003, 1104, 1111, 1012,
     1350,  855, 1010, 1357, 1409, 4074, 4074, 3992, 4074, 4074,
      928,  944, 3968, 3968,  912, 3964,    0, 3963,    0, 3934,
      916,  848,  966,  739,  923,  986, 1016,  991, 1019, 1036,
     1030, 1165, 1020, 1037, 1044,  503, 1102, 1049, 1069, 1090,
     1096, 1097, 1125, 3964, 1050, 3963, 3962, 1133, 1112, 1071,
     1126,  985, 1116, 1145, 1122, 1161, 1148, 1141, 1150, 1162,
     1074, 1197, 1190, 1192, 1211, 1215,  770, 1152, 1200, 1207,
     1229, 1213, 1217, 1210, 1233, 1265,  873, 1289, 1281, 1245,

     1225, 1262, 1299, 1264, 1308, 1313, 1314, 1323, 1332, 1325,
     1326, 1318, 1329, 1343, 1333, 1331, 3961, 1346, 1348,  982,
     1350, 1353, 1360, 1356, 1283, 1383, 1369, 1367, 1371, 1385,
     1387, 1450, 1446, 1449, 1456, 3957,    0, 3956,    0, 3955,
        0, 3979, 4074, 1423, 1426, 3955, 3952,    0, 3951,    0,
     4074, 1463, 1489, 1477, 1068, 3987, 3984, 3987, 4074, 1497,
     1518, 1558, 1523, 1620, 1584, 1610, 1205, 3947, 4074, 1639,
     1672, 1734, 1389, 3983, 3980, 3983, 4074, 1548, 1662, 1743,
     1552, 1725, 1755, 1521, 4074, 1659, 3943, 1557, 1794, 1854,
     1703, 1782, 1791, 1452, 3942, 1422, 3978, 3975, 1414, 1443,

     3971, 1437, 3975, 3972, 1462, 1463, 1488, 1659, 1918, 1671,
     1815, 1969, 1785, 1983, 1846, 4074, 1507, 1853, 1997, 1528,
     3973, 3970, 1477, 1497, 3966, 1535, 3970, 3967, 1482, 1483,
     3934, 1536, 3930, 3929, 3928,    0, 3927,    0, 4074, 1138,
     1395, 1537, 1516, 1563, 1557, 1612, 1613, 1645, 1556, 1668,
     1564, 1558, 1560, 1594, 1601, 1653, 1600, 1663, 1651, 1723,
     1673, 1596, 1717, 1689, 1710, 1463, 1735, 3929, 1731, 3925,
     3924, 3926, 1757,  225, 3925, 1724, 3924, 1598, 1683, 1763,
     1775, 1696, 1769, 1787, 1797, 1777, 3923, 1800, 3922, 1772,
     1794, 1767, 1813, 1784, 1829, 1840, 1848, 1844, 1850, 3921,

     1854, 1881, 3920, 1852, 1878, 1872, 1910, 1048, 1810, 1873,
     1875, 1877, 1891, 1911, 1938, 1932, 1915, 1960, 1959, 1912,
     1918, 1961, 1972, 1971, 1970, 1973, 1845, 1974, 3919, 1976,
     1981, 1977, 3918, 1975, 3917, 1406, 2045, 2037, 3913,    0,
     3912,    0, 3911, 3910, 3909,    0, 3908,    0, 2057, 3907,
     3938, 2021, 2025, 1926, 3942, 3939, 3942, 4074, 2109, 2119,
     2181, 2045, 3939, 3936, 3939, 4074, 2065, 2128, 2190, 3899,
     3930, 2026, 2028, 2067, 3934, 3931, 3934, 1995, 4074, 2021,
     2147, 2035, 4074, 2107, 2168, 2087, 3931, 3928, 2181, 2184,
     2128, 2225, 2055, 2113, 2241, 2220, 4074, 2089, 3929, 3926,

     3929, 4074, 2251, 2275, 3921, 3920, 2118, 2294, 2183, 2180,
     2205, 4074, 2261, 2302, 2213, 4074, 2214, 2309, 2096, 3924,
     3921, 2287, 2289, 2349, 2369, 2431, 2237, 2378, 2175, 2239,
     2398, 3885, 3916, 3915, 3882, 3881, 3880,    0, 3879,    0,
     3878,    0, 3877,    0, 2106, 2048, 3879, 2056, 2165, 2167,
     1999, 2050, 2249, 2217, 2064, 2113, 2231, 2268, 2110, 2105,
     2168, 2282, 2281, 2287, 2293, 2219, 2270, 2286, 2289, 2306,
     2299, 2322, 2307, 2296, 3875, 3873, 3872,    0, 3868,    0,
     2326, 3870, 2351, 2346, 2347, 3866, 2342, 2328, 2294, 2360,
     2362, 3865, 2364, 2383, 2370, 2376, 2374, 3861, 2439, 2378,

     2380, 3860, 2407, 2406, 2437, 2409, 3856, 3855, 3851, 2414,
     2416, 2418, 2220, 2417, 3850, 2420, 2166, 2419, 2421, 2424,
     2430, 2425, 2429, 2431, 3846, 3845, 2435, 2445, 2436, 3841,
     2432, 2447, 2448, 2450, 2451, 2455, 3840, 2456, 3892, 3832,
        0, 3828,    0, 3827,    0, 3823,    0, 2515, 2475, 3854,
     3793, 3792, 2555, 3811, 3842, 2476, 2477, 2492, 3839, 3836,
     3836, 2527, 2487, 3828, 3767, 3766, 2500, 3822, 3819, 2481,
     2509, 3812, 2501, 3816, 3808, 2518, 2520, 3804, 2522, 2523,
     2546, 3805, 3802, 3802, 2607, 2617, 2679, 3762, 2571, 3795,
     3792, 2511, 2519, 3783, 2626, 2526, 2643, 2669, 3750, 2580,

     3781, 3778, 2540, 2541, 3737,    0, 3736,    0, 3730,    0,
     3729,    0,    0,    0, 3728,    0, 2551, 2545, 2555, 2468,
     2634, 2603, 2457, 2612, 2559, 2509, 2607, 2327, 2615, 2557,
     2611, 2621, 2617, 2653, 2619, 2623, 2655, 1963, 2622, 2660,
     2657, 2562, 2663, 2697, 2664, 3724,    0, 3718,    0, 3717,
        0, 3711,    0, 2659, 2665, 3713, 3707, 2667, 2669, 2671,
     2676, 3706, 3700, 2675, 3699, 2683, 2668, 2707, 2723, 3670,
     2689, 2691, 3669, 3663, 2692, 2696, 2699, 3662, 2698, 3656,
     3655, 3649, 3648, 3638, 2701, 3637, 3628, 2702, 2700, 2704,
     3627, 3621, 2710, 2715, 2717, 3620, 2718, 2720, 3614, 3669,

     4074,    0,    0, 4074,    0,    0,    0,    0, 3581, 2779,
     2739, 3635, 3576, 3575, 3569, 3623, 3617, 2740, 3616, 3555,
     3554, 2819, 3571, 3602, 4074, 2755, 3590, 3587, 3585, 4074,
     2764, 2790, 3577, 3541,    0, 3540,    0, 3536,    0, 3535,
        0, 3527, 2771, 2726, 3529, 2737, 2724, 2798, 2767,  442,
     2769, 2770, 2774, 2777, 2778, 2779, 3524, 2795, 2796, 2799,
     2800, 2803, 2805, 2845, 2814, 2815, 2842, 2820, 2825, 2828,
     2831, 2830, 2853, 2833, 3520,    0, 3514,    0, 3513,    0,
     3507,    0, 2841, 2835, 2843, 2837, 3509, 3503, 2847, 2848,
     3502, 2878, 3498, 3497, 2851, 3493, 3492, 2855, 2857, 3488,

     2859, 3487, 3483, 2860, 3476, 2858, 3475, 2861, 3466, 3465,
     3438, 3437, 2917, 3486, 2882, 2884, 2907, 3490, 3482, 3485,
     3431, 3430, 3426, 3425,    0, 3417, 3416, 3409, 3408, 3406,
     3405, 3399, 2926, 2892, 3398, 2864, 2876, 3394, 2894, 2898,
     2899, 2901, 2903, 2900, 2905, 2907, 2909, 2918, 2906, 2945,
     2948, 3393, 2922, 2927, 2928, 2929, 2934, 3389, 2938, 2946,
     2939, 3385, 3377, 3376, 3373,    0, 3368, 3361, 2933, 2940,
     3363, 2943, 2942, 2944, 3357, 3356, 2949, 3350, 3349, 2947,
     3343, 3342, 2950, 3333, 3332, 3302, 3301, 2965, 3326, 3270,
     3265,    0,    0, 3287, 3281, 3280, 3272, 2989, 2990, 2772,

     2957, 3274, 3255, 2958, 3254, 2960, 2961, 2968, 2962, 2973,
     2972, 2974, 3250, 2964, 2995, 3249, 2993, 2976, 3245, 2980,
     2994, 3000, 3001, 2999,    0, 3241, 3237, 3236, 3005, 2460,
     3235, 3234, 3006, 3227, 3007, 3226, 3222, 3219, 3218, 3214,
     3190, 3206, 3205, 3204, 3201, 3016, 3203, 3187, 3180, 3179,
     2988, 3011, 3010, 3012, 3019, 3014, 3022, 3020, 3176, 3171,
     3168, 3024, 3150, 3149, 3026, 3030, 3099, 3098, 3096, 3096,
     3031, 3029, 3034, 3092, 3091, 3090, 3087, 3083, 3080, 2986,
     3035, 3042, 2862, 3036, 2821, 3045, 3046, 2773, 3049, 3050,
     2741, 3054, 2615, 2558, 2378, 1857, 1796, 1666, 1652, 1612,

     1500, 1405, 3056, 3058, 3059, 3060, 3061, 3063, 1358, 1287,
     1098,  968,  937,  885, 3065,  771,  693, 3067, 3069,  582,
      476,  322, 3068, 3071, 3072, 3075, 3078, 3079, 3080,  277,
     3081, 3082,  196,  141, 4074, 3162, 3173, 3184, 3195, 3203,
     3214, 3225, 3236, 3247, 3253, 3261, 3266, 3271, 3279, 3284,
     3289, 3294, 3299, 3304, 3315, 3320, 3323, 3328, 3333, 3338,
     3340, 3345, 3350, 3358, 3369, 3380, 3385, 3390, 3392, 3397,
     3399, 3404, 3406, 3411, 3413, 3418, 3420, 3425, 3433, 3438,
     3443, 3448, 3453, 3455, 3460, 3465, 3473, 3478, 3483, 3494,
     3499, 3504, 3506, 3511, 3513, 3518, 3523, 3525, 3530, 3532,

     3537, 3542, 3547, 3552, 3557, 3559, 3564, 3566, 3571, 3573,
     3578, 3583, 3588, 3593, 3598, 3603, 3605, 3610, 3618, 3623,
     3628, 3630, 3635, 3637, 3642, 3644, 3649, 3651, 3656, 3661,
     3663, 3668, 3670, 3675, 3677, 3682, 3684, 3686, 3691, 3696,
     3698, 3703, 3705, 3710, 3712, 3717, 3719, 3724, 3732, 3737,
     3739, 3741, 3743, 3745, 3747, 3749, 3754, 3756, 3761, 3763,
     3768, 3770, 3775, 3777, 3782, 3787, 3789, 3794, 3796, 3801,
     3803, 3808, 3810, 3815, 3820, 3825, 3830, 3832, 3837, 3842,
     3847, 3849, 3854, 3859, 3861, 3863, 3868, 3873, 3875, 3880,
     3885, 3890, 3895, 3900, 3905, 3910, 3915, 3920, 3925

    } ;

static const flex_int16_t yy_def[1500] =
    {   0,
     1335,    1, 1336, 1336, 1337, 1337, 1338, 1338, 1339, 1339,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1340, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1340, 1335,
     1335, 1335, 1335, 1340, 1335, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1335, 1335, 1335, 1335, 1335, 1341, 1335,
     1335, 1335, 1342, 1335, 1335, 1343, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1340, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1344,

     1335, 1335,   30, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1345,   30, 1335, 1335,   31, 1335, 1335, 1335,
     1335, 1335, 1335,   31, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1346, 1335,
     1335, 1335, 1335, 1335, 1340, 1335, 1347, 1348, 1335, 1335,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1349, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,

     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1335, 1335, 1335, 1335, 1341, 1341, 1341, 1335,
     1341, 1335, 1342, 1335, 1335, 1335, 1335, 1350, 1351, 1352,
     1343, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1353, 1354, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335,  261, 1355, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335,  114,  277, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,

     1335, 1335, 1356, 1335, 1357, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1358, 1335, 1359, 1360, 1361, 1362, 1335,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1364, 1335, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,

     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1365, 1366, 1335, 1335, 1367, 1368, 1369, 1370, 1371,
     1372, 1335, 1335, 1335, 1335, 1335, 1373, 1374, 1375, 1376,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335,  462, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335,  480, 1335, 1335, 1335,
     1335, 1335, 1335, 1335,  490, 1335, 1335, 1335, 1335, 1335,

     1335, 1335, 1335, 1335, 1335, 1335, 1377, 1378, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335,  509, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1379, 1335, 1380, 1381, 1382, 1383, 1384, 1385, 1335, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387, 1335, 1388,
     1389, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,

     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1390, 1335, 1391, 1392,
     1393, 1394, 1395, 1395, 1396, 1397, 1398, 1399, 1335,  649,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,  669,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,

     1335, 1335, 1335, 1335, 1335, 1335, 1400, 1335, 1400, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1401, 1335, 1335, 1402, 1403, 1404, 1405, 1406, 1407,
     1408, 1409, 1410, 1411, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,

     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1419, 1420,
     1421, 1422, 1423, 1424, 1425, 1426, 1427, 1335, 1335, 1335,
     1335, 1335, 1335,  853, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1428, 1335, 1335,
     1335, 1335, 1335, 1335,  886, 1335, 1335, 1335,  895, 1335,

     1335, 1335, 1335, 1335, 1429, 1430, 1431, 1432, 1433, 1434,
     1435, 1436, 1437, 1438, 1439, 1440, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1441, 1442, 1443, 1444, 1445,
     1446, 1447, 1448, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1449,

     1335, 1450, 1451, 1335, 1452, 1453, 1454, 1455, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1022, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
     1463, 1464, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1465, 1466, 1467, 1468, 1469, 1470,
     1471, 1472, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,

     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1473, 1474,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1475, 1456, 1476, 1458, 1477, 1460, 1462, 1478, 1464, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1479, 1465, 1480, 1467, 1481, 1469, 1471, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1482, 1473, 1483, 1474, 1335, 1335, 1335,
     1335, 1484, 1485, 1476, 1486, 1487, 1478, 1439, 1439, 1439,

     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1488, 1479, 1480, 1489, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1490, 1482, 1491, 1483,
     1335, 1492, 1493, 1486, 1487, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1494, 1495, 1489, 1439,
     1439, 1439, 1439, 1490, 1491, 1496, 1492, 1497, 1493, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1498, 1494, 1499, 1495, 1439, 1439, 1439, 1476,

     1496, 1497, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1480, 1498, 1499, 1476, 1439, 1439, 1439, 1439, 1439, 1439,
     1480, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439,    0, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,

     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335

    } ;

static const flex_int16_t yy_nxt[4166] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   31,   31,   31,   31,   31,
       31,   32,   33,   34,   35,   36,   37,   38,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   39,   18,   18,
       18,   18,   18,   18,   39,   18,   18,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       18,   53,   18,   54,   55,   18,   56,   18,   57,   58,
       59,   60,   61,   62,   18,   18,   63,   64,   65,   66,
       67,   68,   74,   74,   77,   77,   68,   86,   87,   69,

       77,   77,   88,   74,   74,   78,   79,   80,   80,   80,
       78,   80,   79,   81,   81,   81,   80,   82,   90,   83,
       83,   91,  133,  134,   89,   97,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  128,   85,   92,   99,
       83,   94,   95,   83,  100,  159,  156,  160,   75,   75,
       75,   75,  185,  303,  186,   85,  129,  101,  130,  131,
      153,  223,   85,  187,  203,  154,  157,  161,  162,  163,
      164,   85,  165,  166,   85,  167,  176,  168,   85,  173,
       85,  169,  170,  174,  225,  175,   83,   85,  195,  222,
      171,  177,  197,  158,  305,  196,   85,   96,  102,   85,

      103,  103,  103,  103,  103,  103,  103,  104,  104,  257,
       85, 1335,   85,  155,  198,  224,  328,  105,  329,  199,
      106,  193,   85,  107,  108,  109,  110,  111,   85,   85,
      194,  181,  112,  113,  111,  182,  258,   85,   85,  114,
      183,   85,  105,  178,  184,  106,  343,  344,  115,  108,
      179,  116,  325,  110,   85,  111,  180,   85,  200,  112,
      380,  201,  113,  202,  111,  102,  345,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   85,  226,   79,   80,
       80,   80,  226,   85,  328,  227,  329,  106,  209,  210,
      118,  119,  120,  121,  122,   85,  211,  782,  212,  123,

      188,  122,  330,  213,  153,  328,  124,  329,  189,  154,
      190,   85,  106,  191,   85,  125,  119,  192,  126,  328,
      121,  329,  122,  347,  216,  214,  123,  280,  280,  217,
      330,  122,  135,  218,   85,   85,  136,  137,   85,  138,
       85,  139,  140,  219,  141,  328,  142,  329,   85,  341,
      220,  221,  204,  205,   85,   85,  342,  155,  143,  144,
      145,   85,  206,  207,  348,  208,  281,  229,  230,  366,
      346,  215,  229,   78,   79,   80,   80,   80,   78,  328,
       85,  329,  146,  147,  328,  148,  329,  149,  231,  231,
      231,  231,  231,  231,  231,  231,  231,   80,   79,   80,

       80,   80,   80,   80,   79,   81,   81,   81,   80,  328,
      332,  329,  150,  151,  234,  235,   85,  331,  328,  234,
      329,  236,  328,  328,  329,  329,  236,  277,  277,  277,
      277,  277,  277,  277,  349,  237,  237,  237,  237,  237,
      237,  237,  153,  328, 1335,  329,  282,  154,  282,  236,
       85,  283,  283,  283,  283,  283,  283,  283,  283,  283,
     1335,   85,   85,   85,   85,   85,  278,  238, 1137, 1335,
       85,  236,  350,  110,  285,  351,  236,  236,  367,  370,
      236,  236,  286,  368,   85,  369,  371,  372,  236, 1335,
      284,  236,   85,  236,  239,  236,   85,  240,  242,  285,

       85,   85,  243,  244,  391,  245,  378,  246,  247,  286,
      248,  102,  249,  104,  104,  104,  104,  104,  104,  104,
      104,  104,   85,  394,  250,  251,  252,  373,  285,  287,
       85,  288,  289,  106,   85,   85,  286, 1335,  290,  375,
      374,  298,  286,  299,  300,   85,   85,  376,  253,  254,
      377,  255,  279,  285,  291,  379,   85,  292,  106,  289,
      387,   85,  381,  286,  390,  290,  301,  286,   85,  302,
       85,  300,  293,  393,  294,  383,  558,  295,  296,  256,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  382,
       85,   85, 1335,  384,   85,  285,  297,  385,   85,  262,

      263,  264,   85,  286,  265,  266,   85,  410,  266,  395,
      501, 1335,  386,   85,  296,  397,  396,   85,  392,  267,
      285,   85,  411,  388,  262,  263,  264, 1335,   85,  265,
      286,  266,  389,  306,  398,  399, 1335,  400,   85,  407,
       85,  266,  270,  270,  270,  270,  270,  270,  270,  270,
      270,   85,  293,   85,  294,   85, 1335,  295,  296,   85,
      285,  271,  272,  273,  413,  401,  274,  275,  286,  307,
      275,  121,  307,   85,  412,  285,  442,  308,  443,  414,
      308,  276,  418,  286,  110,  285,  271,  272,  273,  415,
       85,  274,  286,  275,  307,  286,  309,  307,  310,  311,

      285,  408,  297,  275,  308,  312,  315,  308,  316,  307,
      286,  317,  318,  320,  308,  321,  322,  308,  409,  286,
       85,  313,   85,   85,  314,  416,  311,  426,  290,  307,
      319,   85,  312,  121,  307,   85,  427,  308,  323,  308,
      315,  324,  316,  322,  308,  317,  318,  417,  421,  153,
      419,   85,   85,   85,  307,  290,  422,  352,  353,  354,
       85,  355,  356,  307,  308,  357,  424,  358,  425,   85,
       85,  308,  359,  360,  361,  362,  363,  402,  428,   85,
      423,  403,  429,   85,  442,  442,  443,  443,  307,  404,
      319,  405,  406,  280,  280,  229,  230,   85,  308,   85,

      229,  430,  420,  431,  226,   79,   80,   80,   80,  226,
      229,  230,  227,  543, 1335,  229,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  234,  235,  443,   85,   85,
      234,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      432,  230,  443,  592,  442,  432,  443,  433,  434,  434,
      434,  434,  434,  434,  434,  479,  442,  442,  443,  443,
      451,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      444,  442,  442,  443,  443,  442,  445,  443,  442,  442,
      443,  443,  442,  290,  443,  451,  469,  435,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  111,  451,  289,

      451,  122,  308,  451,  451,  289,   85,  262,  263,  264,
      290,  469,  265,  266,  290,  455,  266,  456,  300,  111,
      457,  458,  111,  451,  541,  451,  122,  267,  451,  308,
      451,   85,  262,  263,  264,  285,  525,  265,  451,  266,
      318,  290,  603,  286,  111,  452, 1335,  452,  312,  266,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  459,
      285,  460,  328,  451,  329,  459,  533,  469,  459,  469,
      286,  111,  469,  469,   85,  312,  311,  473,  328,  474,
      329,   85,  475,  476,  459,  312,  460,  540,  544,  454,
      153,  459,  469,  534,  469,  300,  111,  469, 1335,  469,

      469,  459,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  102,  312,  277,  277,  277,  277,  277,  277,  277,
      285,  463,  464,  465,   85,  469,  466,  467,  286, 1335,
      467,  283,  283,  283,  283,  283,  283,  283,  283,  283,
       85,  468,  542,   85,   85,  285,  463,  464,  465,   85,
      576,  466,  278,  467,  547,  286,  122,  322,  122,  470,
      312,  470,  545,  467,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  477,   85,  478,  311,   85,   85,  477,
      322,  122,  477,  122,  271,  272,  273,  312,   85,  274,
      275,  546,  651,  275,   85,   85,  266,  548,  477,  549,

      478,  555,   85,  472,  570,  477,   85,   85,  550,  271,
      272,  273,  561,  556,  274,  477,  275,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  275,   85,  557,   85,
      810,  571,   85,  282,  574,  282,  562,  106,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  496,   85,  497,
      307,  586,  498,  499,   85,   85,  306,  307,  308, 1321,
       85,  563,  106,  480,  480,  308,  564,  496,  566,  497,
       85,  500,  498,  499,   85,  307,  559,  560,  290,  573,
       85,  565,  307,   85,   85,  308,  481,  482,  483,  484,
      485,   85,  308,  575,  577,  486,   85,  485,  290,   85,

      579,  567,  487,   85,  583,  290,   85,  745,   85,  572,
       85,  488,  482,  584,  489,  593,  484,  500,  485,   85,
       85,  578,  486,   85,  582,  290,  585,  485,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  502,  551,  503,
      580,  581,  504,  505,  552,  553,  554,  491,   85,  492,
       85,  658,  493,  494,  588,   85,  494,  502,   85,  503,
      111,  506,  504,  505,  587,   85,  589,  495,   85,   85,
      595,   85,  491,   85,  492,   85,  658,  493,  590,  494,
      111,  594,  591,   85,  599,  111,  600,   85,  602,  494,
      598,   85,  596,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  607,   85,  601,  111,  606,  506,  508,  597,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  520,
       85,  521,   85,   85,  522,  523,  509,  509,  509,  509,
      509,  509,  306,  510,  511,  512,  513,  514,  608,   85,
      610,   85,  515,  524,  516,   85,  630,   85,  605,  517,
      312,  509,  509,  509,  509,  509,  509,   85,  518,  511,
      604,  519,  520,  513,  521,  514,   85,  522,  523,  515,
      609,   85,   85,  526,  516,  527,   85,  312,  528,  529,
      526,   85,  527,   85,   85,  528,  529,   85,  611,   85,
       85,   85,  613,  312,  612,  618,  122,  530,  614,  615,

      622,   85,  623,  122,   85,  616,   85,  617,   85,  619,
      620,   85,  524,  671,   85,  625,   85,  275,   85,  621,
      312,  122,  629,  624,  627,   85,  626,   85,  122,   85,
      530,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      628,   85,  633,   85,  634,   85,  705,  631,  230,  632,
      499,  432,  230,   85,  228,  635,  432,  442,  433,  443,
      442,  706,  443,  636,   85,  505, 1335,  838,  290,  746,
      325,  236,  236,  236,  236,  236,  236,  236,  434,  434,
      434,  434,  434,  434,  434,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  452,  290,  452,  290,  697,  453,

      453,  453,  453,  453,  453,  453,  453,  453,  111,  111,
      638,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      654,   85,  655,  697,  290,  656,  657, 1335,  122,  122,
      262,  312,  264,  111,  111,  265,  266,  708,  773,  266,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  709,
      650,  312,  733,  122,  122,  262,  523,  264,  312,  734,
      265, 1335,  266,  529,  658,  708,  658,  678,  732,  658,
      658,  674,  266,  675,   85,  679,  676,  677,  312,  461,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  658,
      735,  658,  678,  748,  658,   85,  658,  484,  678,  463,

      464,  465,  679,  678,  466,  467,  679,  662,  467,  663,
      747,  679,  664,  665,   85,   85,   85,  736,   85,  468,
      750,   85,   85,  678,  463,  464,  465,  484,  678,  466,
      658,  467,  757,  679,  749,  756,  754,  659,  679,  659,
      758,  467,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  666,   85,  667,   85,  658,   85,  666,   85,   85,
      666,  471,  471,  471,  471,  471,  471,  471,  471,  471,
       85,   85,  760, 1314,  759,  769,  666,  784,  667,  751,
      763,  661,  752,  666,  277,  277,  277,  277,  277,  277,
      277,  104,  104,  666,  669,  669,  669,  669,  669,  669,

      669,  669,  669,   85,  691,  679,  692,  693,  708,   85,
       85,   85,  753,  271,  765,  273,  513,  711,  274,  275,
      710,   85,  275,  479,   85,  712,   85,  761,  762,  694,
      679,   85,  695,  670,  693,  755,  708,  768,  271,  764,
      273,   85,  711,  274,  697,  275,  697,   85,  785,  697,
      697,  470,  712,  470,   85,  275,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  480,  480,  771,   85,  697,
      680,  697,  681,  682,  697,   85,  697,  788,  686,  683,
      687,   85,   85,  688,  689,  775,  770,  772,  481,  482,
      483,  484,  485,   85,  783,  684,  766,  486,  685,  485,

      682,  678,  690,  767,  487,  698,  683,  699,  774,  679,
      700,  701,  776,  488,  482,   85,  489,  686,  484,  687,
      485,   85,  688,  689,  486,   85,  678,   85,  697,  485,
       85,  711,  702,   85,  703,   85,  679,  781,  702,  712,
      678,  702,   85,  786,  792,   85,  787,  796,  679,  794,
      789,  790,   85,  697,   85,   85,  711,  702,   85,  703,
      713,  798,  714,  715,  702,  678,  712,  690,   85,  716,
      791,   85,  795,  793,  702,  679,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  717,  797,   85,  718,  811,
      715,  727,  712,  728,  729,  491,  716,  492,   85,  711,

      493,  494,   85,   85,  494,  805,   85,  712,   85,  799,
       85,  802,   85,  800,  831,  495,  730,  712, 1335,  731,
      491,  729,  492,  513,  711,  493,  801,  494,  803,  804,
       85,   85,  806,   85,  712,   85,   85,  494,  508,   85,
      509,  509,  509,  509,  509,  509,  509,  509,  509,   85,
      850,  812,  808,  813,  459,  814,  509,  509,  509,  509,
      509,  509,  807,  510,  511,  512,  513,  514,   85,   85,
       85,  815,  515,   85,  516,  822,   85,  809,  816,  517,
      819,  509,  509,  509,  509,  509,  509, 1067,  518,  511,
       85,  519,  719,  513,  720,  514,   85,  721,  722,  515,

      724,  823,  724,  818,  516,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  817,  711,  723,   85,   85,   85,
      719,   85,  720,  712,  821,  721,  722,  820,   85,   85,
       85,   85,   85,   85,   85,   85,  827,  824,  826,   85,
      711,  828,  837,  711,  726,  835,  829,  230,  830,  679,
      712,  712,  825,  839,  834,  832,  833,   85,  836,  236,
      236,  236,  236,  236,  236,  236,  682,  451,  711,  855,
      723,  451,  469,  467,  469,  683,  679,  922,  712,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  858,  683,
      859,  864,  451,  860,  861,  477,  451,  469,  262,  469,

      264,  485,  683,  265,  266,  266,   85,  266,   85,  266,
      275,  872,  275,  878,   85,  689,  683,  494,  650,  918,
      894,  923,   85,  262,  722,  264,  485,  926,  265,  919,
      266,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      266,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  485,
      463,  683,  465,   85,   85,  466,  467,  708,   85,  467,
      867,   85,  868,  693,  485,  869,  870,  682,  931,  709,
      854,  917,  927,  693,  485,  463,  930,  465,  683,  668,
      466,  867,  467,  868,  871,  708,  869,  870,  659,  485,

      659,  683,  467,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  516,  683,   85,   85,   85,   85,  678,  683,  708,
      678,  271,  708,  273,  982,  679,  274,  275,  679,  920,
      275,  871,  480,  480,  888,  932,  516,  921,  873,  683,
      874,  670,  678,  875,  876,  678,  271,  708,  273,  712,
      708,  274,  679,  275,  873,  679,  874,  716,  716,  875,
      876,  485,  877,  275,  881,   85,  882,   85,   85,  883,
      884,  696,  729,  516,  715,  516,  712,  485,  925,   85,
      937,  979,  928,  938,  716,  716,  485,  490,  490,  490,

      490,  490,  490,  490,  490,  490,  715,   85,  516,  729,
      516,  885,  485,  885,  877,  716,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  889,   85,  890,   85,  924,
      891,  892,  889,  711,  890,  711,  704,  891,  892,   85,
       85,  712,  716,  712,   85,   85,  929,   85,  934,  893,
      935,   85,   85,  939,   85,  887,  716,   85,  711,  945,
      711,  933,  936,  716,   85,   85,  942,  960,  712,  940,
      712,  725,  725,  725,  725,  725,  725,  725,  725,  725,
       85,  941,  893,  716,   85,   85,   85,  944, 1057,  943,
      716,  895,  895,  895,  895,  895,  895,  895,  895,  895,

       85,  900,  955,  901,   85,   85,  902,  903,  959,   85,
      896,  954,  897,  956,  957,  898,  896,  958,   85,  896,
       85,  900,   85,  901,  516,  904,  902,  903,   85,  962,
      899,  963,   85,  961,   85,  896,   85,  897,   85, 1313,
      898,   85,  896,  971,  516,  965,  966,  967,  724,  516,
      724,  970,  896,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  968,  964,   85,   85,  974,   85,  969,  516,
      972,  904,   85,  973,   85,   85,   85,   85,   85,   85,
      988,  976,   85,   85,  983,  975,  981,   85,   85,   85,
       85,  987,  980,   85,   85,   85,  977,   85,  978,  985,

      986,  984,  990,   85,  992,   85,   85,  993,   85,   85,
      994,  991,  989,   85,   85,   85, 1012,  996,   85,  995,
      666,  451,  658,  658, 1016, 1017,   85,  997,  870,  876,
      998, 1047, 1052,  469, 1271,  683,  999,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  451,  658,  658,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  469,  266,
      467,  467,  683,  683,  485,  716,  485,   85,  697,  697,
     1019,  275, 1025,  716,  702, 1055,  848,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  516,  516,  862,  485,
      683,  485,  716,  697,  697, 1024,  463, 1025,  465,  892,

      716,  466,  467,   85, 1033,  467,  494,  494,  903,   85,
     1045,  516,  516,   85, 1043,   85,  854,   85, 1059, 1335,
       85,  463, 1046,  465, 1054, 1071,  466, 1044,  467,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  467, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,  895,  895,
      895,  895,  895,  895,  895,  895,  895, 1048,  896, 1049,
      897,   85, 1050,  898,  896,   85, 1026,  896, 1027,   85,
       85, 1028, 1029,   85, 1051,   85, 1312,   85, 1023,   85,
       85,   85, 1056,  896, 1065,  897, 1058,  899,  898, 1025,
      896, 1060,   85, 1053, 1061, 1068,  885, 1062,  885, 1064,

      896,  886,  886,  886,  886,  886,  886,  886,  886,  886,
     1030,   85, 1031,   85, 1025,   85, 1030,   85,   85, 1030,
     1073,   85,   85,   85, 1070,   85,   85,   85, 1063,   85,
     1066, 1092, 1084,   85,   85, 1030, 1083, 1031, 1069, 1072,
     1086,   85, 1030, 1088, 1074, 1093, 1089,   85, 1085,   85,
       85, 1087, 1030, 1091,   85,   85,   85,   85,   85,   85,
       85, 1090,   85, 1099, 1094,   85, 1098, 1100,   85, 1101,
     1096, 1095, 1103,   85, 1097,   85,   85, 1104,   85, 1114,
     1102,   85,   85,  896,   85,  658,  697, 1117, 1105, 1118,
     1106, 1136, 1119, 1120, 1131,   85, 1107, 1133, 1248,   85,

     1108,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      658,  697,  895,  895,  895,  895,  895,  895,  895,  895,
      895, 1132, 1134,  467,  494,   85, 1135,   85,   85,   85,
       85,   85,   85, 1139, 1138,   85,   85,   85, 1141, 1142,
     1010, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1130, 1032, 1140,   85,   85, 1143,   85,   85,   85, 1144,
      896,   85,  897,   85, 1148,  898,  896, 1147, 1150,  896,
     1146, 1154,   85,   85, 1151, 1152, 1145, 1160,   85,   85,
     1023, 1155, 1153,   85, 1149,  896,   85,  897,   85,   85,
      898,   85,  896,   85, 1157,   85, 1156, 1158, 1159,   85,

       85,   85,  896,   85, 1161,   85,   85, 1176, 1169,   85,
     1171,   85, 1172,   85, 1170,   85,   85,   85,   85,   85,
       85, 1201,   85, 1173, 1174, 1182, 1181, 1177, 1025, 1175,
     1025, 1189, 1183, 1178,   85, 1030,   85, 1179, 1180, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1202, 1198,
       85, 1199,   85, 1025, 1200, 1025,   85,   85,   85,   85,
     1203,   85, 1206,   85,   85,   85,  896,   85,  896, 1215,
     1216, 1208, 1204, 1205, 1207, 1223,   85, 1214, 1113, 1213,
       85, 1209, 1211, 1217,   85,   85,   85,   85, 1218, 1219,
     1210,   85,   85, 1212, 1220, 1221,   85,   85,   85, 1222,

       85,   85,   85,   85,   85,   85,   85,   85,   85, 1229,
     1231, 1025, 1224, 1246, 1247,   85,   85, 1232,   85,   85,
       85, 1230,   85, 1236, 1259, 1233,   85, 1234, 1235, 1253,
       85,   85,   85, 1256,   85, 1257, 1025, 1252,   85, 1251,
     1258, 1249, 1254, 1250,   85, 1280,   85,   85,   85,  896,
     1255,   85,   85,   85, 1260, 1263, 1261,   85,   85,   85,
     1262, 1264, 1265,   85,   85,   85, 1266, 1281,   85,   85,
       85, 1283,   85, 1270,   85, 1272, 1282,   85,   85, 1284,
       85, 1273,   85, 1288,   85, 1290, 1285,   85,   85,   85,
     1286, 1292,   85,   85,   85, 1289, 1287, 1305, 1297, 1298,

       85, 1299, 1303,   85,   85, 1304, 1291,   85,   85, 1307,
     1308, 1309,   85, 1306,   85, 1310,   85,   85,   85,   85,
     1317,   85, 1319,   85, 1320,   85,   85,   85, 1318,   85,
       85, 1316, 1324,   85, 1315, 1326,   85,   85,   85,   85,
       85, 1335, 1325, 1328, 1302, 1322, 1323, 1330, 1335, 1327,
     1334, 1301, 1335, 1335,   85, 1329, 1332, 1335, 1331, 1296,
     1294, 1333,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   84,   85,   85,   84,
       84,   84,   84,   84,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  233,   85,  233,  233,   85,
      233,  233,  233,  233,   85,  233,  241,   85,   85,  241,
      241,  241,  241,  241,  241,   85,  241,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  304,  304,
      304,   85, 1335,  304,  334, 1335, 1279, 1277,  334,  334,
      334,  334,  336,  336, 1030, 1335,  336,  338,  338, 1275,
     1335,  338,  364, 1274,   85,   85,  364,  364,  364,  364,
      436,  436,   85,   85,  436,  438,  438, 1269, 1335,  438,

      440,  440, 1335,   85,  440,  447,  447,   85,   85,  447,
      449,  449,   85,   85,  449,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  507,  507,  304,  304,
      304,  531,   85, 1335,  531,  531,  531,  531,  531,  535,
      535, 1245, 1244,  535,  336,  336,  537,  537, 1335, 1030,
      537,  338,  338,   84, 1030, 1241,   84,   84,   84,   84,
       84,  568, 1335, 1240,  568,  568,  568,  568,  568,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  639,  639, 1335, 1238,  639,  436,  436,  641,  641,

       85,   85,  641,  438,  438,  643,  643,   85,   85,  643,
      440,  440,  645,  645,   85,   85,  645,  447,  447,  647,
      647,   85, 1335,  647,  449,  449,  707,  707,  707, 1335,
      707,  507,  507,  507, 1335,  507,  531, 1227, 1335,  531,
      531,  531,  531,  531,  737,  737, 1226,   85,  737,  739,
      739,   85,   85,  739,  741,  741,   85,   85,  741,  535,
      535,  743,  743,   85,   85,  743,  537,  537,   84, 1335,
     1197,   84,   84,   84,   84,   84,  568, 1335, 1335,  568,
      568,  568,  568,  568,  777,  777, 1335, 1194,  777,  779,
      779, 1335, 1193,  779,  637,  637,  637,  637,  637,  637,

      637,  637,  637,  637,  637,  840,  840, 1030, 1191,  840,
      639,  639,  842,  842, 1190, 1188,  842,  641,  641,  643,
      643,  702,  666,  643,  844,  844, 1187, 1185,  844,  645,
      645,  846,  846,   85,   85,  846,  647,  647,  707,  707,
      707,   85,  707,  509,  509,   85,   85,  509,  905,  905,
       85,   85,  905,  907,  907,   85,   85,  907,  909,  909,
       85,   85,  909,  737,  737,  911,  911,   85, 1168,  911,
      739,  739,  913,  913, 1167, 1165,  913,  741,  741,  915,
      915, 1163,   85,  915,  743,  743,   84,   85, 1129,   84,
       84,   84,   84,   84,  946,  946, 1127, 1126,  946,  948,

      948, 1124, 1122,  948,  950,  950,  903,  896,  950,  777,
      777,  952,  952, 1116, 1115,  952,  779,  779, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1002,
     1002,  892, 1113, 1002,  840,  840, 1004, 1004,  702,  702,
     1004,  842,  842, 1006, 1006, 1112,  876, 1006,  844,  844,
       84,   84,  870,  477,   84,  846,  846,  707,  707,  666,
      666,  707, 1034, 1034, 1111,  459, 1034,  905,  905, 1036,
     1036, 1001,   85, 1036,  907,  907, 1038, 1038,   85,   85,
     1038,  909,  909, 1040, 1040,   85,   85, 1040,  911,  911,
     1042, 1042,  913,  913,   84,   85,   85,   84,   84,   84,

       84,   84,  915,  915, 1075, 1075,   85,   85, 1075,  946,
      946, 1077, 1077,   85,   85, 1077,  948,  948, 1079, 1079,
       85,   85, 1079,  950,  950, 1081, 1081,   85,   85, 1081,
      952,  952, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1109, 1109, 1002, 1002, 1004, 1004, 1110,
     1110, 1006, 1006,   84,   84, 1121, 1121,   85,   85, 1121,
     1034, 1034, 1123, 1123,   85,   85, 1123, 1036, 1036, 1125,
     1125,   85, 1082, 1125, 1038, 1038,  334,  334, 1080, 1078,
      334, 1040, 1040, 1128, 1128, 1076,   85, 1128, 1162, 1162,
     1041, 1039, 1162, 1075, 1075, 1164, 1164, 1037, 1035, 1164,

     1077, 1077, 1166, 1166,  903,  903, 1166, 1079, 1079,  364,
      364, 1032,  722,  364, 1081, 1081, 1184, 1184,  892,  892,
     1184, 1186, 1186,  888,  702, 1186, 1192, 1192, 1021, 1020,
     1192,  531,  531, 1018,  876,  531, 1195, 1195, 1196, 1196,
      876,  689, 1196, 1225, 1225,  870,  870, 1225,  568,  568,
      477,  477,  568, 1228, 1228, 1237, 1237, 1015,  666, 1237,
     1239, 1239, 1014, 1013, 1239, 1242, 1242, 1192, 1192, 1243,
     1243, 1011, 1010, 1243,  915,  915,  459,  459,  915, 1267,
     1267, 1268, 1268, 1009, 1008, 1268, 1004, 1004, 1007, 1005,
     1004,   84,   84, 1003, 1001,   84, 1276, 1276,   85,   85,

     1276, 1278, 1278,   85,   85, 1278, 1293, 1293,   85,   85,
     1293, 1295, 1295,   85,   85, 1295, 1300, 1300,   85,   85,
     1300,  334,  334,   85,   85,  334, 1311, 1311,   85,  953,
     1311,  364,  364,  951,  949,  364,  947,   85,  916,  914,
      912,  910,  908,  906,  529,  523,  732,  722,  722,  505,
      499,  494,  880,  879,  689,  689,  477,  866,  865,  863,
      862,  467,  857,  856,  459,  852,  851,  849,  848,  847,
      845,  644,  644,  843,  841,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,  780,  778,  569,  744,  742,
      740,  738,  532,  529,  529,  318,  523,  523,  505,  505,

      296,  499,  499,  704,  696,  275,  673,  672,  668,  266,
      653,  652,  648,  646,  443,  443,  644,  642,  640,   85,
       85,   85,  569,  539,  538,  536,  532,  330,  329,  318,
      318,  303,  296,  296,  269,  461,  450,  448,  446,  443,
      442,  441,  439,  437,  230,   85,   85,  365,  340,  339,
      337,  330,  335,  333,  330,  328,  327,  326,  269,  260,
      259,   83,   83,   85,  232,  172,  152,  132,  127,   85,
     1335,   71,   71,   11, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,

     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335
    } ;

static const flex_int16_t yy_chk[4166] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    8,    9,   10,    2,   19,   19,    2,

        9,   10,   20,    7,    8,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   16,   24,   16,
       24,   25,   36,   36,   20,   28,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   34,   50,   25,   29,
       25,   27,   27,   27,   29,   43,   41,   43,    7,    8,
        9,   10,   50,  113,   50,   57,   34,   29,   34,   34,
       39,   65,   46,   50,   57,   39,   41,   44,   44,   44,
       44,   47,   44,   44,   54,   44,   47,   44,   53,   46,
       63,   44,   44,   46,   67,   46,   67,   44,   53,   63,
       44,   47,   54,   41,  113,   53,   55,   27,   30, 1334,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   85,
       39,  124,   52,   39,   55,   65,  136,   30,  136,   55,
       30,   52,   49,   30,   30,   30,   30,   30,  162,  163,
       52,   49,   30,   30,   30,   49,   85,  183,   48,   30,
       49,   56,   30,   48,   49,   30,  162,  163,   30,   30,
       48,   30,  124,   30, 1333,   30,   48,  164,   56,   30,
      183,   56,   30,   56,   30,   31,  164,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   59,   68,   68,   68,
       68,   68,   68,  574,  137,   68,  137,   31,   59,   59,
       31,   31,   31,   31,   31,   51,   59,  574,   59,   31,

       51,   31,  140,   59,   60,  139,   31,  139,   51,   60,
       51,   61,   31,   51,  166,   31,   31,   51,   31,  140,
       31,  140,   31,  166,   61,   60,   31,  105,  105,   61,
      141,   31,   37,   61,  161, 1330,   37,   37,   62,   37,
       58,   37,   37,   62,   37,  141,   37,  141,  167,  161,
       62,   62,   58,   58,   60,  165,  161,   60,   37,   37,
       37,  173,   58,   58,  167,   58,  105,   69,   69,  173,
      165,   60,   69,   78,   78,   78,   78,   78,   78,  142,
     1322,  142,   37,   37,  144,   37,  144,   37,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   80,   80,   80,

       80,   80,   80,   81,   81,   81,   81,   81,   81,  145,
      145,  145,   37,   37,   75,   75,  168,  143,  143,   75,
      143,   75,  147,  148,  147,  148,   75,  103,  103,  103,
      103,  103,  103,  103,  168,   75,   75,   75,   75,   75,
       75,   75,  155,  151,  103,  151,  106,  155,  106,   75,
      169,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      103,  175,  174,  170,  176,  178,  103,   75, 1050,  103,
      177,   75,  169,  107,  107,  170,   75,   75,  174,  177,
       75,   75,  107,  175,  191,  176,  178,  178,   75,  103,
      106,   75,  155,   75,   75,   75,  181,   75,   83,  107,

     1050,  194,   83,   83,  191,   83,  181,   83,   83,  107,
       83,  104,   83,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  179,  194,   83,   83,   83,  179,  110,  108,
      180,  108,  108,  104,  182,  184,  110, 1321,  108,  180,
      179,  112,  112,  112,  112,  188,  190,  180,   83,   83,
      180,   83,  104,  110,  108,  182,  193,  108,  104,  108,
      188,  356,  184,  110,  190,  108,  112,  112,  185,  112,
      186,  112,  109,  193,  109,  186,  356,  109,  109,   83,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  185,
      187,  192,  114,  186,  196,  109,  109,  187,  197,   98,

       98,   98,  206,  109,   98,   98,  189,  206,   98,  196,
      293,  114,  187,  199,  293,  197,  196,  198,  192,   98,
      109,  204,  206,  189,   98,   98,   98,  114,  200,   98,
      109,   98,  189,  114,  198,  199,  114,  200,  202,  204,
     1320,   98,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  208,  116,  207,  116,  212,  114,  116,  116,  209,
      115,  102,  102,  102,  208,  202,  102,  102,  115,  121,
      102,  118,  118,  210,  207,  116,  243,  121,  243,  209,
      118,  102,  212,  116,  115,  115,  102,  102,  102,  210,
      205,  102,  285,  102,  121,  115,  119,  118,  119,  119,

      116,  205,  116,  102,  121,  119,  120,  118,  120,  125,
      116,  120,  120,  123,  123,  123,  123,  125,  205,  285,
      211,  119,  218,  219,  119,  211,  119,  218,  289,  120,
      120,  213,  119,  125,  125,  215,  219,  120,  123,  123,
      126,  123,  126,  123,  125,  126,  126,  211,  215,  214,
      213, 1317,  171,  217,  120,  289,  215,  171,  171,  171,
      216,  171,  171,  126,  120,  171,  217,  171,  217,  220,
      203,  126,  171,  171,  171,  171,  171,  203,  220,  221,
      216,  203,  220,  222,  244,  246,  244,  246,  126,  203,
      126,  203,  203,  281,  281,  227,  227,  344,  126,  214,

      227,  221,  214,  222,  226,  226,  226,  226,  226,  226,
      229,  229,  226,  344,  278,  229,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  234,  234,  247,  387, 1316,
      234,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      231,  231,  248,  387,  247,  231,  247,  231,  237,  237,
      237,  237,  237,  237,  237,  278,  249,  248,  249,  248,
      266,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      250,  250,  251,  250,  251,  252,  252,  252,  254,  255,
      254,  255,  256,  291,  256,  266,  275,  237,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  300,  262,  291,

      262,  322,  307,  262,  262,  287,  342,  261,  261,  261,
      291,  275,  261,  261,  287,  264,  261,  264,  298,  298,
      264,  264,  300,  262,  342,  262,  322,  261,  262,  307,
      262,  397,  261,  261,  261,  296,  315,  261,  264,  261,
      315,  287,  397,  296,  298,  263, 1314,  263,  311,  261,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  265,
      296,  265,  331,  264,  331,  265,  335,  271,  265,  271,
      296,  301,  271,  271,  341,  311,  309,  273,  332,  273,
      332,  345,  273,  273,  265,  309,  265,  341,  345,  263,
      420,  265,  271,  335,  271,  301,  301,  271, 1313,  271,

      273,  265,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  277,  309,  277,  277,  277,  277,  277,  277,  277,
      297,  270,  270,  270,  343,  273,  270,  270,  297, 1312,
      270,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      420,  270,  343,  372,  346,  297,  270,  270,  270,  348,
      372,  270,  277,  270,  348,  297,  323,  320,  320,  272,
      313,  272,  346,  270,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  274,  347,  274,  313,  349,  353,  274,
      323,  323,  274,  320,  276,  276,  276,  313,  351,  276,
      276,  347,  455,  276,  350,  354,  455,  349,  274,  350,

      274,  353,  355,  272,  365,  274,  608,  358,  351,  276,
      276,  276,  358,  354,  276,  274,  276,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  276,  359,  355,  370,
      608,  365,  381,  284,  370,  284,  359,  279,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  288,  360,  288,
      318,  381,  288,  288,  361,  362,  279,  319,  318, 1311,
      357,  360,  279,  280,  280,  319,  361,  292,  362,  292,
      369,  288,  292,  292,  373,  318,  357,  357,  288,  369,
      375,  361,  319,  363,  371,  318,  280,  280,  280,  280,
      280,  368,  319,  371,  373,  280,  540,  280,  292,  378,

      375,  363,  280,  374,  378,  288,  377,  540,  379,  368,
      388,  280,  280,  379,  280,  388,  280,  292,  280,  376,
      380,  374,  280,  352,  377,  292,  380,  280,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  299,  352,  299,
      376,  376,  299,  299,  352,  352,  352,  283,  383,  283,
      384,  467,  283,  283,  383,  382,  283,  302,  389,  302,
      299,  299,  302,  302,  382,  390,  384,  283,  394,  385,
      390,  392,  283,  386,  283,  393,  467,  283,  385,  283,
      302,  389,  386,  401,  393,  299,  394,  391,  396,  283,
      392,  395,  391,  306,  306,  306,  306,  306,  306,  306,

      306,  306,  401,  400,  395,  302,  400,  302,  304,  391,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  310,
      402,  310,  404,  396,  310,  310,  304,  304,  304,  304,
      304,  304,  306,  304,  304,  304,  304,  304,  402,  399,
      404,  425,  304,  310,  304, 1310,  425,  398,  399,  304,
      310,  304,  304,  304,  304,  304,  304,  403,  304,  304,
      398,  304,  314,  304,  314,  304,  405,  314,  314,  304,
      403,  406,  407,  321,  304,  321,  412,  310,  321,  321,
      324,  408,  324,  410,  411,  324,  324,  413,  405,  416,
      409,  415,  407,  314,  406,  412,  321,  321,  408,  409,

      415,  414,  416,  324,  418,  410,  419,  411,  421,  413,
      414,  422,  314,  473,  424,  419, 1309,  473,  423,  414,
      314,  321,  424,  418,  422,  428,  421,  427,  324,  429,
      324,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      423,  426,  428,  430,  429,  431,  496,  426,  433,  427,
      496,  432,  432,  541,  433,  430,  432,  444,  432,  444,
      445,  502,  445,  431,  636,  502, 1302,  636,  499,  541,
      325,  434,  434,  434,  434,  434,  434,  434,  435,  435,
      435,  435,  435,  435,  435,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  454,  499,  454,  500,  494,  454,

      454,  454,  454,  454,  454,  454,  454,  454,  505,  506,
      434,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      460,  566,  460,  494,  500,  460,  460,  517,  529,  530,
      453,  523,  453,  505,  506,  453,  453,  507,  566,  453,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  507,
      453,  524,  520,  529,  530,  453,  520,  453,  523,  526,
      453, 1301,  453,  526,  463,  507,  463,  484,  517,  463,
      463,  478,  453,  478,  543,  484,  478,  478,  524,  461,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  463,
      532,  463,  484,  543,  463,  542,  463,  481,  481,  462,

      462,  462,  484,  488,  462,  462,  481,  465,  462,  465,
      542,  488,  465,  465,  549,  545,  552,  532,  553,  462,
      545,  544,  551,  481,  462,  462,  462,  488,  488,  462,
      465,  462,  552,  481,  544,  551,  549,  464,  488,  464,
      553,  462,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  466,  554,  466,  562,  465,  578,  466,  557,  555,
      466,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      546,  547,  555, 1300,  554,  562,  466,  578,  466,  546,
      557,  464,  547,  466,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  466,  471,  471,  471,  471,  471,  471,

      471,  471,  471,  548,  486,  486,  486,  486,  508,  559,
     1299,  556,  548,  471,  559,  471,  510,  510,  471,  471,
      508,  558,  471,  479, 1298,  510,  550,  556,  556,  486,
      486,  561,  486,  471,  486,  550,  508,  561,  471,  558,
      471,  579,  510,  471,  491,  471,  491,  564,  579,  491,
      491,  472,  510,  472,  582,  471,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  480,  480,  564,  565,  491,
      482,  491,  482,  482,  491,  563,  491,  582,  483,  482,
      483,  560,  576,  483,  483,  569,  563,  565,  480,  480,
      480,  480,  480,  567,  576,  482,  560,  480,  482,  480,

      482,  483,  483,  560,  480,  492,  482,  492,  567,  483,
      492,  492,  569,  480,  480,  573,  480,  489,  480,  489,
      480,  580,  489,  489,  480,  592,  483,  583,  492,  480,
      590,  513,  493,  581,  493,  586,  483,  573,  493,  513,
      489,  493,  594,  580,  586,  584,  581,  592,  489,  590,
      583,  584,  591,  492, 1297,  585,  513,  493,  588,  493,
      511,  594,  511,  511,  493,  489,  513,  489,  609,  511,
      585,  593,  591,  588,  493,  489,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  511,  593,  595,  511,  609,
      511,  515,  515,  515,  515,  490,  511,  490,  596,  518,

      490,  490,  598,  627,  490,  602,  597,  518,  599,  595,
      604,  598,  601,  596,  627,  490,  515,  515, 1296,  515,
      490,  515,  490,  518,  518,  490,  597,  490,  599,  601,
      606,  610,  604,  611,  518,  612,  605,  490,  509,  602,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  613,
      654,  610,  606,  611,  654,  612,  509,  509,  509,  509,
      509,  509,  605,  509,  509,  509,  509,  509,  607,  614,
      620,  613,  509,  617,  509,  620,  621,  607,  614,  509,
      617,  509,  509,  509,  509,  509,  509,  938,  509,  509,
      616,  509,  512,  509,  512,  509,  615,  512,  512,  509,

      514,  621,  514,  616,  509,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  615,  512,  512,  619,  618,  622,
      519,  938,  519,  512,  619,  519,  519,  618,  625,  624,
      623,  626,  628,  634,  630,  632,  625,  622,  624,  631,
      512,  625,  634,  519,  514,  632,  625,  637,  626,  678,
      512,  519,  623,  637,  631,  628,  630,  751,  632,  638,
      638,  638,  638,  638,  638,  638,  680,  652,  519,  662,
      519,  653,  672,  662,  673,  680,  678,  751,  519,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  667,  682,
      667,  674,  652,  667,  667,  674,  653,  672,  649,  673,

      649,  693,  680,  649,  649,  652,  746,  649,  752,  653,
      672,  686,  673,  698,  748,  686,  682,  698,  649,  746,
      719,  752,  755,  649,  719,  649,  693,  755,  649,  748,
      649,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      649,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  694,
      660,  684,  660,  760,  745,  660,  660,  707,  759,  660,
      681,  756,  681,  691,  691,  681,  681,  684,  760,  707,
      660,  745,  756,  694,  694,  660,  759,  660,  684,  668,
      660,  685,  660,  685,  681,  707,  685,  685,  661,  691,

      661,  681,  660,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  729,  685,  749,  817,  750,  761,  689,  681,  710,
      690,  669,  709,  669,  817,  689,  669,  669,  690,  749,
      669,  685,  696,  696,  709,  761,  729,  750,  692,  685,
      692,  669,  689,  692,  692,  690,  669,  710,  669,  711,
      709,  669,  689,  669,  695,  690,  695,  715,  717,  695,
      695,  692,  692,  669,  703,  754,  703,  766,  813,  703,
      703,  696,  727,  727,  717,  730,  711,  695,  754,  757,
      766,  813,  757,  767,  715,  717,  692,  704,  704,  704,

      704,  704,  704,  704,  704,  704,  713,  753,  727,  730,
      730,  708,  695,  708,  695,  713,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  714,  758,  714,  767,  753,
      714,  714,  718,  722,  718,  723,  704,  718,  718,  763,
      762,  722,  713,  723,  768,  764,  758,  769,  763,  714,
      764,  765,  789,  768,  774,  708,  714,  771,  722,  774,
      723,  762,  765,  718,  770,  773,  771,  789,  722,  769,
      723,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      772,  770,  718,  714,  781,  928,  788,  773,  928,  772,
      718,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      787,  728,  783,  728,  784,  785,  728,  728,  788,  783,
      725,  781,  725,  784,  785,  725,  725,  787,  790,  725,
      791,  731,  793,  731,  728,  728,  731,  731,  795,  791,
      725,  793,  797,  790,  796,  725,  800,  725,  801, 1295,
      725,  794,  725,  801,  731,  795,  796,  797,  726,  728,
      726,  800,  725,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  799,  794,  804,  803,  805,  806,  799,  731,
      803,  731,  810,  804,  811,  814,  812,  818,  816,  819,
      823,  810,  820,  822,  818,  806,  816,  823,  821,  824,
      831,  822,  814,  827,  829,  805,  811,  799,  812,  820,

      821,  819,  827,  828,  829,  832,  833,  831,  834,  835,
      832,  828,  824,  836,  838,  923,  858,  834, 1230,  833,
      858,  849,  856,  857,  867,  873,  920,  835,  867,  873,
      836,  920,  923,  863, 1230,  870,  838,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  849,  856,  857,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  863,  849,
      856,  857,  870,  871,  876,  892,  877,  926,  879,  880,
      881,  863,  896,  893,  881,  926,  848,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  903,  904,  862,  876,
      871,  877,  892,  879,  880,  889,  853,  896,  853,  889,

      893,  853,  853,  918,  900,  853,  879,  880,  900,  917,
      918,  903,  904,  919,  917,  930,  853,  925,  930, 1294,
      942,  853,  919,  853,  925,  942,  853,  917,  853,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  853,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  921,  886,  921,
      886,  922,  921,  886,  886,  927,  897,  886,  897,  931,
      924,  897,  897,  929,  922,  933, 1293,  935,  886,  932,
      939,  936,  927,  886,  936,  886,  929,  895,  886,  897,
      886,  931,  921,  924,  932,  939,  887,  933,  887,  935,

      886,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      898,  934,  898,  937,  897,  941,  898,  954,  940,  898,
      944,  943,  945,  955,  941,  958,  967,  959,  934,  960,
      937,  968,  955,  964,  961,  898,  954,  898,  940,  943,
      959,  966,  898,  961,  945,  969,  964,  971,  958,  972,
      975,  960,  898,  967,  976,  944,  979,  977,  989,  985,
      988,  966,  990,  979,  971,  968,  977,  985,  993,  988,
      975,  972,  990,  994,  976,  995,  997,  993,  998, 1026,
      989,  969, 1047, 1026, 1044, 1011, 1018, 1031,  994, 1031,
      995, 1049, 1031, 1031, 1044, 1046,  997, 1047, 1200, 1291,

      998, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1011, 1018, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1046, 1048, 1011, 1018, 1049, 1048, 1051, 1052, 1043,
     1200, 1288, 1053, 1052, 1051, 1054, 1055, 1056, 1054, 1055,
     1010, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1043, 1032, 1053, 1058, 1059, 1056, 1048, 1060, 1061, 1058,
     1022, 1062, 1022, 1063, 1062, 1022, 1022, 1061, 1064, 1022,
     1060, 1067, 1065, 1066, 1064, 1065, 1059, 1073, 1068, 1285,
     1022, 1068, 1066, 1069, 1063, 1022, 1070, 1022, 1072, 1071,
     1022, 1074, 1022, 1084, 1070, 1086, 1069, 1071, 1072, 1083,

     1067, 1085, 1022, 1064, 1074, 1089, 1090, 1092, 1083, 1095,
     1085, 1073, 1086, 1098, 1084, 1099, 1106, 1101, 1104, 1108,
     1283, 1134, 1136, 1089, 1090, 1106, 1104, 1095, 1115, 1090,
     1116, 1117, 1108, 1098, 1137, 1117, 1092, 1099, 1101, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1136, 1133,
     1134, 1133, 1139, 1115, 1133, 1116, 1140, 1141, 1144, 1142,
     1137, 1143, 1141, 1145, 1149, 1146, 1115, 1147, 1116, 1150,
     1151, 1143, 1139, 1140, 1142, 1160, 1148, 1149, 1113, 1148,
     1153, 1144, 1146, 1153, 1133, 1154, 1155, 1156, 1154, 1155,
     1145, 1169, 1157, 1147, 1156, 1157, 1159, 1161, 1170, 1159,

     1173, 1172, 1174, 1150, 1160, 1180, 1151, 1177, 1183, 1169,
     1172, 1188, 1161, 1198, 1199, 1201, 1204, 1173, 1206, 1207,
     1209, 1170, 1214, 1183, 1215, 1174, 1208, 1177, 1180, 1208,
     1211, 1210, 1212, 1211, 1218, 1212, 1188, 1207, 1220, 1206,
     1214, 1201, 1209, 1204, 1280, 1246, 1251, 1198, 1199, 1188,
     1210, 1217, 1221, 1215, 1217, 1221, 1218, 1224, 1222, 1223,
     1220, 1222, 1223, 1229, 1233, 1235, 1224, 1251, 1253, 1252,
     1254, 1253, 1256, 1229, 1246, 1233, 1252, 1255, 1258, 1254,
     1257, 1235, 1262, 1257, 1265, 1262, 1255, 1272, 1266, 1271,
     1256, 1266, 1273, 1281, 1284, 1258, 1256, 1284, 1271, 1272,

     1282, 1273, 1281, 1286, 1287, 1282, 1265, 1289, 1290, 1287,
     1289, 1290, 1292, 1286, 1303, 1292, 1304, 1305, 1306, 1307,
     1305, 1308, 1307, 1315, 1308, 1318, 1323, 1319, 1306, 1324,
     1325, 1304, 1319, 1326, 1303, 1323, 1327, 1328, 1329, 1331,
     1332, 1279, 1319, 1325, 1278, 1315, 1318, 1327, 1277, 1324,
     1332, 1276, 1275, 1274, 1270, 1326, 1329, 1269, 1328, 1268,
     1267, 1331, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1339, 1339, 1339, 1339, 1339,

     1339, 1339, 1339, 1339, 1339, 1339, 1340, 1264, 1263, 1340,
     1340, 1340, 1340, 1340, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1342, 1261, 1342, 1342, 1260,
     1342, 1342, 1342, 1342, 1259, 1342, 1343, 1250, 1249, 1343,
     1343, 1343, 1343, 1343, 1343, 1248, 1343, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345,
     1345, 1247, 1245, 1345, 1346, 1244, 1243, 1242, 1346, 1346,
     1346, 1346, 1347, 1347, 1241, 1240, 1347, 1348, 1348, 1239,
     1238, 1348, 1349, 1237, 1236, 1234, 1349, 1349, 1349, 1349,
     1350, 1350, 1232, 1231, 1350, 1351, 1351, 1228, 1227, 1351,

     1352, 1352, 1226, 1219, 1352, 1353, 1353, 1216, 1213, 1353,
     1354, 1354, 1205, 1203, 1354, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356, 1357, 1357,
     1357, 1358, 1202, 1197, 1358, 1358, 1358, 1358, 1358, 1359,
     1359, 1196, 1195, 1359, 1360, 1360, 1361, 1361, 1194, 1191,
     1361, 1362, 1362, 1363, 1190, 1189, 1363, 1363, 1363, 1363,
     1363, 1364, 1187, 1186, 1364, 1364, 1364, 1364, 1364, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1367, 1367, 1185, 1184, 1367, 1368, 1368, 1369, 1369,

     1182, 1181, 1369, 1370, 1370, 1371, 1371, 1179, 1178, 1371,
     1372, 1372, 1373, 1373, 1176, 1175, 1373, 1374, 1374, 1375,
     1375, 1171, 1168, 1375, 1376, 1376, 1377, 1377, 1377, 1167,
     1377, 1378, 1378, 1378, 1165, 1378, 1379, 1164, 1163, 1379,
     1379, 1379, 1379, 1379, 1380, 1380, 1162, 1158, 1380, 1381,
     1381, 1152, 1138, 1381, 1382, 1382, 1135, 1132, 1382, 1383,
     1383, 1384, 1384, 1131, 1130, 1384, 1385, 1385, 1386, 1129,
     1128, 1386, 1386, 1386, 1386, 1386, 1387, 1127, 1126, 1387,
     1387, 1387, 1387, 1387, 1388, 1388, 1124, 1123, 1388, 1389,
     1389, 1122, 1121, 1389, 1390, 1390, 1390, 1390, 1390, 1390,

     1390, 1390, 1390, 1390, 1390, 1391, 1391, 1120, 1119, 1391,
     1392, 1392, 1393, 1393, 1118, 1114, 1393, 1394, 1394, 1395,
     1395, 1112, 1111, 1395, 1396, 1396, 1110, 1109, 1396, 1397,
     1397, 1398, 1398, 1107, 1105, 1398, 1399, 1399, 1400, 1400,
     1400, 1103, 1400, 1401, 1401, 1102, 1100, 1401, 1402, 1402,
     1097, 1096, 1402, 1403, 1403, 1094, 1093, 1403, 1404, 1404,
     1091, 1088, 1404, 1405, 1405, 1406, 1406, 1087, 1081, 1406,
     1407, 1407, 1408, 1408, 1079, 1077, 1408, 1409, 1409, 1410,
     1410, 1075, 1057, 1410, 1411, 1411, 1412, 1045, 1042, 1412,
     1412, 1412, 1412, 1412, 1413, 1413, 1040, 1038, 1413, 1414,

     1414, 1036, 1034, 1414, 1415, 1415, 1033, 1029, 1415, 1416,
     1416, 1417, 1417, 1028, 1027, 1417, 1418, 1418, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1420,
     1420, 1024, 1023, 1420, 1421, 1421, 1422, 1422, 1021, 1020,
     1422, 1423, 1423, 1424, 1424, 1019, 1017, 1424, 1425, 1425,
     1426, 1426, 1016, 1015, 1426, 1427, 1427, 1428, 1428, 1014,
     1013, 1428, 1429, 1429, 1012, 1009, 1429, 1430, 1430, 1431,
     1431, 1000,  999, 1431, 1432, 1432, 1433, 1433,  996,  992,
     1433, 1434, 1434, 1435, 1435,  991,  987, 1435, 1436, 1436,
     1437, 1437, 1438, 1438, 1439,  986,  984, 1439, 1439, 1439,

     1439, 1439, 1440, 1440, 1441, 1441,  983,  982, 1441, 1442,
     1442, 1443, 1443,  981,  980, 1443, 1444, 1444, 1445, 1445,
      978,  974, 1445, 1446, 1446, 1447, 1447,  973,  970, 1447,
     1448, 1448, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1450, 1450, 1451, 1451, 1452, 1452, 1453,
     1453, 1454, 1454, 1455, 1455, 1456, 1456,  965,  963, 1456,
     1457, 1457, 1458, 1458,  962,  957, 1458, 1459, 1459, 1460,
     1460,  956,  952, 1460, 1461, 1461, 1462, 1462,  950,  948,
     1462, 1463, 1463, 1464, 1464,  946,  915, 1464, 1465, 1465,
      911,  909, 1465, 1466, 1466, 1467, 1467,  907,  905, 1467,

     1468, 1468, 1469, 1469,  902,  901, 1469, 1470, 1470, 1471,
     1471,  899,  894, 1471, 1472, 1472, 1473, 1473,  891,  890,
     1473, 1474, 1474,  888,  884, 1474, 1475, 1475,  883,  882,
     1475, 1476, 1476,  878,  875, 1476, 1477, 1477, 1478, 1478,
      874,  872, 1478, 1479, 1479,  869,  868, 1479, 1480, 1480,
      866,  865, 1480, 1481, 1481, 1482, 1482,  864,  861, 1482,
     1483, 1483,  860,  859, 1483, 1484, 1484, 1485, 1485, 1486,
     1486,  855,  854, 1486, 1487, 1487,  852,  851, 1487, 1488,
     1488, 1489, 1489,  850,  846, 1489, 1490, 1490,  844,  842,
     1490, 1491, 1491,  840,  839, 1491, 1492, 1492,  837,  830,

     1492, 1493, 1493,  826,  825, 1493, 1494, 1494,  815,  809,
     1494, 1495, 1495,  808,  807, 1495, 1496, 1496,  802,  798,
     1496, 1497, 1497,  792,  786, 1497, 1498, 1498,  782,  779,
     1498, 1499, 1499,  777,  776, 1499,  775,  747,  743,  741,
      739,  737,  736,  735,  734,  733,  732,  721,  720,  706,
      705,  701,  700,  699,  688,  687,  677,  676,  675,  671,
      670,  665,  664,  663,  657,  656,  655,  651,  650,  647,
      645,  644,  643,  641,  639,  635,  633,  629,  603,  600,
      589,  587,  577,  575,  572,  571,  570,  568,  537,  535,
      534,  533,  531,  528,  527,  525,  522,  521,  504,  503,

      501,  498,  497,  495,  487,  476,  475,  474,  468,  458,
      457,  456,  449,  447,  446,  442,  440,  438,  436,  417,
      367,  366,  364,  340,  338,  336,  334,  333,  328,  317,
      316,  305,  295,  294,  268,  267,  258,  257,  253,  245,
      242,  240,  239,  238,  228,  201,  195,  172,  160,  158,
      157,  150,  149,  146,  138,  135,  134,  130,  100,   97,
       96,   93,   91,   84,   71,   45,   38,   35,   32,   18,
       11,    4,    3, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,

     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[230] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Sat Mar 25 08:09:03 2023
 * Update Count     : 768
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.h"                            // for DeclarationNode
#include "ExpressionNode.h"                             // for LabelNode
#include "InitializerNode.h"                            // for InitializerNode
#include "ParseNode.h"
#include "ParserTypes.h"                                // for Token
#include "StatementNode.h"                              // for CondCtl, ForCtrl
#include "TypedefTable.h"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 1966 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// ' stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}




#line 1983 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define BKQUOTE 2
#define QUOTE 3
#define STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 180 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 2208 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1336 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4074 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 182 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 204 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 207 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 208 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 209 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 212 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 217 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }
	YY_BREAK
/* keywords */
case 10:
YY_RULE_SETUP
#line 220 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 221 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 224 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 225 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT16); }					// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32); }					// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32X); }					// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64); }					// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64X); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 104:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 145:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* numeric constants */
case 147:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 366 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 367 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 368 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 369 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value */
case 155:
YY_RULE_SETUP
#line 375 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant */
case 158:
YY_RULE_SETUP
#line 381 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 161:
YY_RULE_SETUP
#line 387 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 164:
YY_RULE_SETUP
#line 392 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 396 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 397 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 398 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 402 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 403 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 177:
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 408 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 409 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 181:
YY_RULE_SETUP
#line 413 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 414 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 430 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 436 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 452 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 222:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 466 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 227:
YY_RULE_SETUP
#line 493 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 228:
YY_RULE_SETUP
#line 505 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 507 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 3508 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BKQUOTE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1336 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1336 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1335);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 507 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

