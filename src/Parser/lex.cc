
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 235
#define YY_END_OF_BUFFER 236
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1362] =
    {   0,
        0,    0,    0,    0,    0,    0,  162,  162,  165,  165,
      236,  234,    7,    9,    8,  187,  164,  151,  193,  196,
      161,  174,  175,  190,  188,  178,  189,  181,  192,  154,
      155,  179,  180,  198,  200,  199,  201,  170,  151,  172,
      191,  173,  194,  151,  171,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  176,  197,  177,  195,    7,  234,    4,
        4,  235,  162,  163,  169,  165,  166,    7,    9,    0,
        8,  205,  228,  151,    0,  218,  186,  210,  219,  216,
      202,  213,  203,  214,  212,  226,    0,  158,    3,    0,

      217,  157,  154,    0,    0,    0,  154,  154,  154,  154,
      154,  154,    0,    0,  154,  154,  155,  155,  155,  155,
      155,  155,  155,    0,  155,  155,  184,  185,  183,  206,
      208,  204,  209,  207,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  224,  164,  161,  151,  215,    0,    0,  221,    0,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,    0,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,   49,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,   81,  151,  151,  151,  151,

      151,   99,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  220,  211,  225,    7,    0,    0,    0,
        2,    0,    5,  162,    0,  168,  167,  167,    0,    0,
        0,  165,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  227,
      182,  158,  158,    0,  158,  158,  158,  158,    0,    6,
      159,  157,    0,  157,  157,  157,  157,  154,    0,    0,
      153,    0,    0,  159,    0,  154,  154,  154,  154,  154,
      154,  154,  154,    0,    0,    0,  154,  154,  154,  154,

      154,  154,  154,    0,  156,    0,    0,  155,  155,  155,
      155,  155,  155,  155,  155,    0,    0,    0,  155,  155,
      155,  155,  155,  155,  155,    0,  222,  223,    0,  232,
      229,    0,    0,    0,  231,    0,    0,    0,    0,    0,
        0,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  152,    0,  151,   16,   17,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,   74,  151,  151,  151,  151,   88,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  127,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,    0,    0,  167,    0,    0,    0,
        0,    0,  167,    0,    0,  233,    0,    0,    0,    0,
        0,    0,    0,  158,    0,  158,    0,    0,    0,    0,
        0,  158,  158,    0,  159,  159,    0,  159,  159,  159,
      159,  157,    0,  157,    0,    0,    0,    0,    0,  157,
      157,    0,  153,  153,  153,  153,  153,  153,  153,    0,
      153,  153,  159,  159,  159,  159,  159,  159,    0,    0,

        0,  154,  154,    0,    0,    0,    0,  154,  154,    0,
        0,  156,  156,  156,  156,  156,  156,  156,  156,    0,
      156,  156,    0,    0,    0,  155,  155,    0,    0,    0,
        0,  155,  155,  231,    0,    0,    0,    0,    0,    0,
        0,  230,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      152,    0,    0,    0,  151,   23,  151,  151,   28,  151,
       31,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,   52,  151,   54,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,   80,  151,  151,   93,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  140,  151,  151,  151,  147,  151,
      149,  151,    0,    0,    0,    0,    0,    0,  167,    0,
        0,    0,    0,    0,  158,  158,    0,  158,  158,    0,
        0,    0,    0,  159,    0,  159,    0,    0,    0,    0,
        0,  159,  159,    0,  157,  157,    0,  157,  157,    0,
        0,    0,    0,  153,  153,  153,  153,  153,  153,  153,
      153,    0,    0,    0,  153,  153,  153,  153,  153,  153,

      153,    0,  159,    0,    0,    0,    0,  159,  159,    0,
        0,    0,    0,    0,    0,    0,  156,  156,  156,  156,
      156,  156,  156,  156,    0,    0,    0,  156,  156,    0,
      160,    0,  156,  156,  156,  156,  156,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      151,  151,   26,  151,  151,  151,  151,  151,  151,  151,
      151,  151,   18,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
        0,    0,    0,    0,    0,    0,  151,  151,   27,   29,
      151,  151,   35,   39,  151,  151,   34,  151,  151,  151,

       51,  151,  151,  151,  151,  151,   61,   62,  151,  151,
       77,  151,  151,  151,  151,   95,   98,  100,  151,  151,
      151,  151,  151,  108,  151,  151,  151,  151,  151,  151,
      151,  123,  151,  126,  128,  151,  151,  151,  134,  151,
      151,  151,  151,  151,  151,  148,  151,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  158,    0,  158,
      158,  159,  159,    0,  159,  159,    0,    0,    0,    0,
        0,  157,    0,  157,  157,    0,    0,    0,  153,  153,
        0,    0,    0,    0,  153,  153,    0,  159,  159,    0,
        0,    0,    0,    0,  160,    0,    0,    0,    0,    0,

      156,  156,    0,  160,  160,  160,  160,  160,    0,    0,
        0,  156,  156,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  151,    0,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   83,  151,  151,  151,  151,  151,
      151,  151,  151,  151,    0,    0,    0,    0,    0,    0,
        0,    0,  151,  151,  151,  151,   32,   33,  151,  151,
      151,  151,   50,   53,  151,   57,  151,  151,  151,  151,
       75,  151,  151,   85,   89,  151,  151,  151,  103,  151,
      107,  109,  112,  113,  116,  151,  118,  119,  151,  151,

      151,  133,  130,  151,  151,  151,  144,  151,  151,  150,
        0,    1,    0,    0,  167,    0,    0,    0,    0,  158,
        0,  159,    0,  159,  159,  157,    0,    0,  159,    0,
      159,  159,  160,  160,    0,  160,    0,    0,    0,    0,
      160,  160,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  151,  151,   20,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,   19,  151,  151,
      151,  151,   40,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,    0,    0,    0,    0,    0,
        0,    0,    0,   10,   12,  151,  151,  151,  151,   47,

       48,  151,  151,   60,  151,   64,   76,  151,   94,  101,
      151,  151,  151,  117,  151,  151,  125,  129,  151,  139,
      151,  145,  151,    0,    0,  159,  159,    0,    0,  160,
      160,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   11,   13,   36,  151,  151,   67,
       68,   70,   79,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,   84,   86,   90,  151,
      151,  110,  120,  131,  151,  151,    0,    0,    0,    0,
        0,    0,    0,  151,  151,   42,  151,  151,  151,   59,
       66,  151,  102,  104,  151,  151,  151,  136,  141,  151,

        0,    0,    0,    0,  160,    0,  160,  160,    0,    0,
        0,    0,    0,    0,  151,  151,  151,   72,   69,   71,
      151,   96,  151,  151,   14,  151,  151,  151,   37,   41,
      151,  151,   63,  151,  151,   92,  151,  151,  151,  151,
      151,    0,    0,    0,    0,  151,  151,   43,   55,  151,
       78,  151,  151,  151,  146,    0,    0,    0,    0,  160,
        0,    0,    0,    0,  151,   44,   45,   73,   82,  151,
      151,  151,  151,  151,  151,  151,  151,   65,   87,   91,
      105,  111,  132,  151,  142,    0,    0,    0,   25,  151,
      151,  151,  151,  151,    0,    0,    0,    0,    0,    0,

       46,  151,  151,   15,   21,   24,  151,  151,   38,  151,
      151,  135,  151,    0,    0,    0,    0,   30,   58,  151,
      151,  124,    0,    0,    0,  151,  151,  151,  151,  151,
      151,  106,  143,    0,    0,    0,  151,  122,    0,  151,
      121,   22,  151,  151,   56,    0,  115,  114,  151,  151,
      151,  151,  151,  151,  151,  137,  151,  151,  138,   97,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   11,   51,   56,   11,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   11,   73,   74,   75,   76,
       77,   78,   51,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[92] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    4,    4,    4,    4,    4,    9,
        4,    4,    4,    4,    4,    4,    4,    1,   10,    1,
        1,   11,    1,    8,    8,    8,    8,    8,    8,    4,
        4,    4,    4,    4,    4,    4,    4,    9,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1

    } ;

static const flex_int16_t yy_base[1526] =
    {   0,
        0,   90, 4108, 4107,    0,    0,   90,   91,   92,   93,
     4123, 4126,  104, 4126,  110,   83, 4126, 4063,   63,   90,
     4126, 4126, 4126,   84,  104, 4126,  107,  105,  123,  178,
      245, 4085, 4126,  125, 4085,   88,  325, 4084,  152, 4126,
      112, 4126,  111,  129, 4055,  105,  113,  180,  164,  179,
      237,  116,  121,   79,  160,  136,   94,  282,  218,  253,
      267,  298,   95, 4126,  195, 4126,  185,  369,  375, 4126,
     4095, 4126,    0, 4126,  413,    0, 4126,  387, 4126,  405,
      426, 4126,  491, 4057,  131, 4126, 4126, 4126, 4126, 4126,
     4078, 4126, 4077, 4126, 4126, 4078, 4091,  558, 4126, 4108,

     4126,  620,  435,  508,  224,  535,  371,  624,  611,  397,
     4126,  469,  134,  266,  402,  549,    0,  475,  653,  683,
      552, 4126,  668,  258,  614,  696, 4126, 4126, 4126, 4075,
     4126, 4126, 4126, 4074, 4073,  194,  224, 4091,  243,  350,
      315,  268,  321,  273,  360, 4069,  299,  330, 4046, 4014,
      384, 4126, 4126, 4126,  442, 4126, 4041, 4040, 4126, 4013,
      406,  389,  408,  366,  396,  386,  141,  446,  265,  364,
      707, 4041,  226,  443,  453,  365,  130,  509,  510,  534,
      560,  417,  434,  199,  460,  512,  551,  594,  544,  652,
      465,  495,  508,  412,  536, 4040,  660,  431,  579,  593,

      554, 4039,  595,  725,  644,  677,  690,  597,  606,  631,
      497,  659,  598,  271,  723,  687,  674,  689,  693,  721,
      724,  718,  715, 4126, 4126, 4126,  805,  795, 4094,  825,
     4126,  834, 4126,    0,  827, 4126, 4126,  843, 4034, 4033,
     4032,    0, 4058,  577,  721, 4076,  725,  796,  853,  803,
      810,  839,  842, 4054,  845,  846,  849, 4028, 4027, 4126,
     4126,  883,  849,  945,  909,  935,  633, 4026, 4084, 4126,
      997,  943, 1059,  917, 1049,  770, 1060,  971,  825, 1112,
     1158,  357, 1026, 1223, 1133,  820, 4126,  846, 1044,  840,
     4126,  877, 1142,  519, 4061, 4058,  906, 1118,  852, 1163,

      847,  958, 1231,    0, 1287, 4063, 1352,  860, 4126, 1012,
     1338,  862, 4126,  911, 1317,  775, 4058, 4055, 1130, 1184,
      857, 1251,  890,  964, 1366, 1377, 4126, 4126, 4044, 4126,
     4126,  923,  966, 4020, 4020,  961, 4016,    0, 4015,    0,
     3986,  877,  954,  955,  959, 1039,  983,  987, 1016,  841,
     1037, 1036, 1220,  757, 1047,  895,  617, 1055, 1053,  979,
     1050, 1108, 1111, 1119, 4016, 1064, 1002, 4015, 4014, 1132,
     1086, 1061, 1116, 1110, 1139, 1140, 1142, 1160, 1163, 1182,
     1088, 1164, 1168, 1136, 1204, 1203, 1003, 1214, 1225, 1129,
     1224, 1227, 1232, 1307, 1228, 1280, 1199, 1166, 1089, 1262,

     1266, 1326, 1260, 1311, 1338, 1301, 1339,  754, 1328, 1210,
     1281, 1350,  925, 1352, 1353, 1360, 1358, 1362, 1364, 4013,
     1365, 1369, 1413, 1368, 1370, 1366,  549, 1286, 1385, 1373,
     1387, 1374, 1390, 1392, 1450, 1453, 1450, 1457, 4009,    0,
     4008,    0, 4007,    0, 4031, 4126, 1423, 1429, 4007, 4004,
        0, 4003,    0, 4126, 1464, 1490, 1478,  860, 4039, 4036,
     4039, 4126, 1441, 1499, 1552, 1498, 1614, 1561, 1604, 1463,
     3999, 4126, 1633, 1666, 1728, 1295, 4035, 4032, 4035, 4126,
     1524, 1656, 1737, 1546, 1719, 1749, 1484, 4126, 1653, 3995,
     1660, 1788, 1848, 1697, 1776, 1785, 1464, 3994, 1518, 4030,

     4027, 1478, 1489, 4023, 1526, 4027, 4024, 1516, 1526, 1547,
     1573, 1912, 1665, 1809, 1963, 1779, 1977, 1840, 4126, 1548,
     1847, 1991, 1577, 4025, 4022, 1529, 1531, 4018, 1587, 4022,
     4019, 1557, 1558, 3986, 1567, 3982, 3981, 3980,    0, 3979,
        0, 4126, 1595, 1167, 1594, 1490, 1396, 1608, 1607, 1639,
     1662, 1588, 1675, 1644, 1556, 1645, 1717, 1647, 1713, 1722,
     1530, 1718, 1751, 1757, 1690, 1721, 1591, 1761, 1646, 1771,
     3981, 1681, 3977, 3976, 1787, 3978, 1769, 1783, 3977, 1778,
     3976, 1785, 1781, 1822, 1823, 1794, 1825, 1847, 1839, 1838,
     1834, 1841, 3975, 1854, 3974, 1846, 1866, 1867, 1872, 1871,

     1885, 1891, 1868, 1904, 1912, 3973, 1909, 1051, 3972, 1950,
     1782, 1953, 1905, 1939, 1916, 1954, 1957, 1964, 1960, 1969,
     1955, 1898, 1981, 1983, 1989, 1965, 1966, 1967, 1968, 1993,
     1995, 1994, 1998, 1997, 3971, 1999, 2000, 2007, 3970, 2001,
     3969, 1438, 2068, 2058, 3965,    0, 3964,    0, 3963, 3962,
     3961,    0, 3960,    0, 2067, 3959, 3990, 2028, 2031, 2076,
     3994, 3991, 3994, 4126, 2096, 2129, 2191, 2077, 3991, 3988,
     3991, 4126, 2114, 2138, 2200, 3951, 3982, 2060, 2061, 2106,
     3986, 3983, 3986, 2055, 4126, 2124, 2157, 2092, 4126, 2117,
     2178, 2153, 3983, 3980, 2191, 2194, 2103, 2235, 2070, 2163,

     2251, 2170, 4126, 2160, 3981, 3978, 3981, 4126, 2261, 2285,
     3973, 3972, 2193, 2304, 2208, 2190, 2223, 4126, 2271, 2312,
     2224, 4126, 2266, 2325, 2225, 3976, 3973, 2297, 2303, 2385,
     2394, 2456, 2246, 2357, 2247, 2292, 2420, 3937, 3968, 3967,
     3934, 3933, 3932,    0, 3931,    0, 3930,    0, 3929,    0,
     2177, 2040, 3931, 2229, 2029, 2281, 2069, 2125, 2284, 2230,
     2131, 2186, 1615, 2178, 2297, 2287, 2242, 2298, 2236, 2309,
     2300, 2312, 2367, 2329, 2317, 2313, 2333, 2334, 2347, 2318,
     3927, 3926, 3925,    0, 3923,    0, 2371, 2341, 3925, 2344,
     2372, 2375, 3921, 3920, 2378, 2374, 3916, 2373, 2398, 2392,

     3915, 2394, 2410, 2399, 2393, 2414, 3911, 2441, 2430, 2331,
     3910, 2431, 2434,  978, 2400, 3906, 3905, 3901, 2437, 2438,
     2439, 2440, 2442, 3900, 2444, 1558, 2447, 2448, 2449, 2450,
     2455, 2458, 2456, 3896, 3895, 2464, 2457, 2467, 3891, 2468,
     2469, 2471, 2472, 2475, 2478, 3890, 2476, 3942, 3882,    0,
     3878,    0, 3877,    0, 3873,    0, 2535, 2495, 3904, 3843,
     3842, 2575, 3861, 3892, 2498, 2499, 2271, 3889, 3886, 3886,
     2562, 2509, 3878, 3817, 3816, 2522, 3872, 3869, 2486, 2493,
     3862, 2524, 3866, 3858, 2535, 2548, 3854, 2549, 2561, 2544,
     3855, 3852, 3852, 2627, 2637, 2699, 3812, 2547, 3845, 3842,

     2495, 2554, 3833, 2646, 2563, 2663, 2689, 3800, 2549, 3831,
     3828, 2566, 2567, 3787,    0, 3786,    0, 3780,    0, 3779,
        0,    0,    0, 3778,    0, 2552, 2559, 2572, 2568, 2619,
     2556, 2621, 2623, 2624, 2627, 2636, 2639, 2641, 2656, 2655,
     2673, 2657, 2644, 2680, 2682, 2675, 2005, 2683, 2686, 2684,
     2632, 2553, 2722, 2689, 3774,    0, 3768,    0, 3767,    0,
     3761,    0, 2691, 2690, 2694, 2696, 3763, 3757, 2695, 2703,
     2701, 2708, 3756, 3750, 2707, 3749, 2709, 2710, 2749,  424,
     3720, 2719, 2721, 3719, 3713, 2724, 2725, 2726, 3712, 2727,
     3706, 3705, 3699, 2728, 3698, 2730, 3688, 2739, 2732, 2733,

     2740, 3687, 3678, 2747, 2746, 2748, 3677, 2751, 2752, 3671,
     3726, 4126,    0,    0, 4126,    0,    0,    0,    0, 3638,
     2811, 2771, 3692, 3631, 3630, 3626, 3680, 3674, 2772, 3673,
     3612, 3611, 2851, 3628, 3659, 4126, 2787, 3658, 3655, 3642,
     4126, 2797, 2822, 3634, 3596,    0, 3595,    0, 3591,    0,
     3590,    0, 3586, 2803, 2795, 3588, 2770, 2754, 2838, 2799,
     2832, 2766, 2643, 2806, 2807, 2809, 2811, 3580, 2827, 2813,
     2828, 2837, 2842, 2830, 2879, 2849, 2847, 2801, 2855, 2857,
     2860, 2863, 2862, 2865, 2867, 3576,    0, 3571,    0, 3570,
        0, 3564,    0, 3566, 3560, 2869, 2853, 2873, 2875, 3559,

     3553, 2877, 2881, 3552, 2912, 3548, 3547, 2884, 3543, 3542,
     2885, 2886, 2888, 3538, 2891, 2889, 3537, 3533, 2890, 3526,
     2887, 3525, 2894, 3516, 3515, 3488, 3487, 2949, 3536, 2909,
     2912, 2957, 3540, 3532, 3535, 3481, 3480, 3476, 3475,    0,
     3467, 3466, 3459, 3458, 3456, 3455, 3449, 2959, 2930, 3448,
     2911, 2928, 3444, 2931, 2932, 2934, 2933, 2936, 2940, 2941,
     2943, 2944, 2942, 2953, 2981, 1127, 3443, 2955, 2961, 2962,
     2950, 2969, 3439, 2971, 2985, 2967, 3435, 3427, 3426, 3423,
        0, 3418, 3411, 2973, 2975, 3413, 2977, 2976, 2978, 3407,
     3406, 2979, 3400, 3399, 2983, 2984, 2980, 3393, 3392, 2990,

     3383, 3382, 3352, 3351, 2999, 3376, 3320, 3315,    0,    0,
     3337, 3331, 3330, 3322, 3022, 3023, 3024, 2994, 3324, 3305,
     3000, 3304, 2995, 2996, 3006, 2997, 3007, 3008, 3010, 3300,
     3015, 3046, 3299, 3018, 3028, 3295, 3029, 3031, 3032, 3036,
     3038,    0, 3291, 3287, 3286, 3030, 2480, 3285, 3284, 3037,
     3277, 3041, 3042, 3043, 3276, 3272, 3269, 3268, 3264, 3240,
     3256, 3255, 3254, 3251, 3073, 3253, 3237, 3230, 3229, 3045,
     3053, 3052, 3054, 3056, 3057, 3058, 3067, 3226, 3221, 3218,
     3068, 3200, 3199, 3064, 3069, 3149, 3148, 3145, 3147, 3070,
     3076, 3074, 3077, 3078, 3141, 3139, 3137, 3130, 2906, 2900,

     2848, 3080, 3085, 2802, 3091, 2758, 3092, 3093, 2582, 3096,
     3097, 2520, 3101, 2408, 2377, 2283, 2237, 2238, 2133, 3095,
     3103, 2071, 1920, 1872, 1806, 3105, 3106, 3107, 3109, 3108,
     3113, 1779, 1748, 1700, 1661, 1496, 3112, 1440, 1322, 3114,
     1245, 1090, 3117, 3122,  881,  739,  691,  638, 3120, 3123,
     3126, 3124, 3130, 3128, 3132,  266, 3131, 3135,  223,  106,
     4126, 3212, 3223, 3234, 3245, 3253, 3264, 3275, 3286, 3297,
     3303, 3311, 3316, 3321, 3329, 3334, 3339, 3344, 3349, 3354,
     3365, 3370, 3373, 3378, 3383, 3388, 3390, 3395, 3400, 3408,
     3419, 3430, 3435, 3440, 3442, 3447, 3449, 3454, 3456, 3461,

     3463, 3468, 3470, 3475, 3483, 3488, 3493, 3498, 3503, 3505,
     3510, 3515, 3523, 3528, 3533, 3544, 3549, 3554, 3556, 3561,
     3563, 3568, 3573, 3575, 3580, 3582, 3587, 3592, 3597, 3602,
     3607, 3609, 3614, 3616, 3621, 3623, 3628, 3633, 3638, 3643,
     3648, 3653, 3655, 3660, 3668, 3673, 3678, 3680, 3685, 3687,
     3692, 3694, 3699, 3701, 3706, 3711, 3713, 3718, 3720, 3725,
     3727, 3732, 3734, 3736, 3741, 3746, 3748, 3753, 3755, 3760,
     3762, 3767, 3769, 3774, 3782, 3787, 3789, 3791, 3793, 3795,
     3797, 3799, 3804, 3806, 3811, 3813, 3818, 3820, 3825, 3827,
     3832, 3837, 3839, 3844, 3846, 3851, 3853, 3858, 3860, 3865,

     3870, 3875, 3880, 3882, 3887, 3892, 3897, 3899, 3904, 3909,
     3911, 3913, 3918, 3923, 3925, 3930, 3935, 3940, 3945, 3950,
     3955, 3960, 3965, 3970, 3975
    } ;

static const flex_int16_t yy_def[1526] =
    {   0,
     1361,    1, 1362, 1362, 1363, 1363, 1364, 1364, 1365, 1365,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1366, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1366, 1361,
     1361, 1361, 1361, 1366, 1361, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1361, 1361, 1361, 1361, 1361, 1367, 1361,
     1361, 1361, 1368, 1361, 1361, 1369, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1366, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1370,

     1361, 1361,   30, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1371,   30, 1361, 1361,   31, 1361, 1361, 1361,
     1361, 1361, 1361,   31, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1372, 1361,
     1361, 1361, 1361, 1361, 1366, 1361, 1373, 1374, 1361, 1361,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1375, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1361, 1361, 1361, 1361, 1367, 1367, 1367,
     1361, 1367, 1361, 1368, 1361, 1361, 1361, 1361, 1376, 1377,
     1378, 1369, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1379, 1380, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361,  262, 1381, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361,  114,  278, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1382, 1361, 1383, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1384, 1361, 1385, 1386, 1387, 1388,
     1361, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1390, 1361, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,

     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1391, 1392, 1361, 1361, 1393, 1394,
     1395, 1396, 1397, 1398, 1361, 1361, 1361, 1361, 1361, 1399,
     1400, 1401, 1402, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
      465, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,  483,
     1361, 1361, 1361, 1361, 1361, 1361, 1361,  493, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1403,
     1404, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,  512,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1405, 1361, 1406, 1407, 1408, 1409, 1410,
     1411, 1361, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1413, 1361, 1414, 1415, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,

     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1416, 1361, 1417, 1418, 1419, 1420, 1421, 1421,
     1422, 1423, 1424, 1425, 1361,  655, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361,  675, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1426, 1361, 1426, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1427, 1361, 1361,
     1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1439, 1440, 1441, 1442, 1443, 1444, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,

     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1445, 1446, 1447,
     1448, 1449, 1450, 1451, 1452, 1453, 1361, 1361, 1361, 1361,
     1361, 1361,  862, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1454, 1361, 1361, 1361,

     1361, 1361, 1361,  895, 1361, 1361, 1361,  904, 1361, 1361,
     1361, 1361, 1361, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
     1462, 1463, 1464, 1465, 1466, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1467, 1468, 1469, 1470, 1471, 1472,
     1473, 1474, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,

     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1475, 1361, 1476, 1477, 1361, 1478, 1479, 1480, 1481, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1033, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1482, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1490, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1491, 1492, 1493, 1494, 1495,
     1496, 1497, 1498, 1465, 1465, 1465, 1465, 1465, 1465, 1465,

     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1499, 1500, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1501, 1482, 1502, 1484, 1503,
     1486, 1488, 1504, 1490, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1505, 1491, 1506, 1493,
     1507, 1495, 1497, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,

     1508, 1499, 1509, 1500, 1361, 1361, 1361, 1361, 1510, 1511,
     1502, 1512, 1513, 1504, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1514, 1505, 1506, 1515, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1516, 1508, 1517, 1509, 1361,
     1518, 1519, 1512, 1513, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1520, 1521, 1515, 1465, 1465,
     1465, 1465, 1465, 1465, 1516, 1517, 1522, 1518, 1523, 1519,

     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1524, 1520, 1525, 1521, 1465, 1465, 1465,
     1465, 1465, 1502, 1522, 1523, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1506, 1524, 1525, 1465, 1465, 1502, 1465,
     1465, 1465, 1465, 1465, 1465, 1506, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
        0, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361
    } ;

static const flex_int16_t yy_nxt[4218] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   31,   31,   31,   31,   31,
       31,   32,   33,   34,   35,   36,   37,   38,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   39,   18,   18,
       18,   18,   18,   18,   39,   18,   18,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       18,   53,   18,   54,   55,   18,   56,   18,   57,   58,
       59,   60,   61,   62,   18,   18,   63,   64,   65,   66,
       67,   68,   74,   74,   77,   77,   68,   86,   87,   69,

       77,   77,   88,   74,   74,   78,   79,   80,   80,   80,
       78,   80,   79,   81,   81,   81,   80,   82,   90,   83,
       83,   91,  133,  134,   89,   97,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  128,   85,   92,   99,
       83,   94,   95,   83,  100,  159,  156,  160,   75,   75,
       75,   75,   85,   85,  304,  198,  129,  101,  130,  131,
      153,  204,  223,   85,   85,  154,  157,  161,  162,  163,
      164,   85,  165,  166,   85,  167,  177,  168,  173,   85,
      174,  169,  170,  194,  175,  258,  176,   85,   85,  196,
      171,  178,  195,  158,   85,  306,  197,   96,  102,   85,

      103,  103,  103,  103,  103,  103,  103,  104,  104,  371,
       85,  201,  259,  155,  202,  349,  203,  105,   85,  226,
      106,   83,   85,  107,  108,  109,  110,  111,  329,  224,
      330,  182,  112,  113,  111,  183,  199,   85,   85,  114,
      184,  200,  105,  179,  185,  106,  281,  281,  115,  108,
      180,  116,  186,  110,  187,  111,  181,   85,  329,  112,
      330,  153,  113,  188,  111,  102,  154,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   85,  329, 1361,  330,
      383,   85,  215,  225,   85,  282, 1361,  106,  210,  211,
      118,  119,  120,  121,  122,   85,  212,  367,  213,  123,

      189,  122,  329,  214,  330, 1361,  124,  329,  190,  330,
      191,   85,  106,  192,  155,  125,  119,  193,  126,  326,
      121, 1361,  122,   85,   85,   85,  123,  307,  216,   85,
     1361,  122,  135,  329,  331,  330,  136,  137,  217,  138,
       85,  139,  140,  218,  141,  351,  142,  219,  422,  329,
     1361,  330,  205,  206,  332,  329,   85,  330,  143,  144,
      145,  220,  207,  208,  329,  209,  330,  331,  221,  222,
      227,   79,   80,   80,   80,  227,  230,  231,  228,  281,
      281,  230,  146,  147,  329,  148,  330,  149,   78,   79,
       80,   80,   80,   78,  329,  333,  330,  232,  232,  232,

      232,  232,  232,  232,  232,  232,   80,   79,   80,   80,
       80,   80,  150,  151,  235,  236,  110,  286,  329,  235,
      330,  237,   85,   85,   85,  287,  237,   80,   79,   81,
       81,   81,   80,  346,  352,  238,  238,  238,  238,  238,
      238,  238,  286,  286,   85,  370, 1106,   85,  286,  237,
      153,  287,  287,  348,   85,  154,  287,  278,  278,  278,
      278,  278,  278,  278,   85,  344,   85,  239,  286,  347,
       85,  237,  110,  286, 1361,   85,  237,  237,  287,  342,
      237,  237,   85,  287,  345,  381,  343,  396,  237,   85,
     1361,  237,   85,  237,  240,  237,  279,  241,  243, 1361,

       85,   85,  244,  245,   85,  246,  400,  247,  248,  368,
      249,   85,  250,  382,  299,  287,  300,  301,   85, 1361,
      121,  308,  350,   85,  251,  252,  253,  369,  102,  309,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  302,
      287,  393,  303,  504,  301,  384,  308,  297,  254,  255,
      106,  256,  283,   85,  283,   85,  309,  284,  284,  284,
      284,  284,  284,  284,  284,  284,   85,   85,   85,  280,
       85,  418,  294,  394,  295,  106,  372,  296,  297,  257,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  373,
      374,  385,   85,  395,   85,  286,  285,  375,  308,  263,

      264,  265,   85,  287,  266,  267,  309,   85,  267,   85,
      376,  445,   85,  446,  386,  635,  397,  390,   85,  268,
      286,  403,  298,  308,  263,  264,  265,  377,  378,  266,
      287,  267,  387,  309,  294,  379,  295,   85,  380,  296,
      297,  267,  271,  271,  271,  271,  271,  271,  271,  271,
      271,   85,   85,   85,  401,   85,   85,  286,  298,  388,
      308,  272,  273,  274,   85,  287,  275,  276,  309,  288,
      276,  289,  290,  402,  389,   85,  415,  416,  291,  454,
      404,  277,  286,  421,  121,  308,  272,  273,  274,   85,
      561,  275,  287,  276,  292,  309,   85,  293,  310,  290,

      311,  312,   85,  276,  454,  291,  316,  313,  317,  417,
       85,  318,  319,  321,  309,  322,  323,   85,   85,  316,
      410,  317,  419,  314,  318,  319,  315,  391,  312,  308,
      320,  153,   85,  398,  313,   85,  392,  309,  324,  309,
      399,  325,  308,  323,  420,   85,  411,   85,   85,   85,
      309,   85,  426,  413,  308,  445,  429,  446,  424,  445,
      427,  446,  428,  412,  309,   85,  425,  308,  414,  320,
      353,  354,  355,   85,  356,  357,   85,  309,  358,   85,
      359,   85,   85,   85,  423,  360,  361,  362,  363,  364,
      405,  431,  430,  434,  406,  432,  230,  231,  433,  528,

     1361,  230,  407,  319,  408,  409,  227,   79,   80,   80,
       80,  227,   85,  446,  228,   85,  472,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  230,  231,  235,  236,
      445,  230,  446,  235,  617,  435,  231,  445,  558,  446,
      435,  472,  436,  447,  445, 1361,  446,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  437,  437,  437,  437,  437,
      437,  437,  446,  445,  287,  446,  445,  448,  446,  445,
      445,  446,  446,  445,  657,  446,  482,  445,  267,  446,
      454,  290,  454,  111,  291,  454,  454,  301,  111,   85,

      291,  287,  323,  122,  438,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  309,  454,  313,  454,  111,  551,
      454,  291,  454,  111,  263,  264,  265,  291,  122,  266,
      267,  291,  458,  267,  459,   85,  122,  460,  461,   85,
      476,  309,  477,  313,  268,  478,  479,  290,  543,  263,
      264,  265,  286,   85,  266,  454,  267,  329,  291,  330,
      287,  122,  455,  472,  455,  313,  267,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  462,  286,  463,  560,
      454,  312,  462,   85,  472,  462,  472,  287,  472,  472,
      472,  102,  313,  278,  278,  278,  278,  278,  278,  278,

      329,  462,  330,  463,  111,  622,  457,  985,  462,  472,
      122,  472,   85,   85,  472,  536,  472,   85,  462,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  301,  111,
      544,  545,  279,  546,  323,  122,   85,   85,  466,  467,
      468,   85,  537,  469,  470,   85,  565,  470,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  312,  471,  548,
       85,   85,  549,  466,  467,  468,  313,  499,  469,  500,
      470,  575,  501,  502,   85,  814,  473,  595,  473,  550,
      470,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      480,  503,  481,  313,   85,   85,  480,   85,  291,  480,

      552,  272,  273,  274,  547,   85,  275,  276,   85,   85,
      276,   85,  608,   85,  553,  480,  564,  481,  573,   85,
      475,  566,  480,  559,  578,  291,  272,  273,  274,  562,
      563,  275,  480,  276,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  276,   85,  574,   85,   85,   85, 1233,
      283,  589,  283,  577,  106,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  286,  499,   85,  500,   85,   85,
      501,  502,  287,  307,   85,  580,  308,   85,  567,  106,
      483,  483,  569,  579,  309,   85,  505,   85,  506,  286,
       85,  507,  508,  568,   85,  570,  291,   85,   85,  287,

       85,  308,  598,  484,  485,  486,  487,  488,  576,  111,
      509,  309,  489,  592,  488,  503,  582,  581,   85,  490,
      583,   85,   85,  291,   85,   85,   85,  590,  491,  485,
      308,  492,  591,  487,  111,  488,  584,  607,  309,  489,
       85,  752,  585,  586,  488,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  505,  308,  506,   85,  587,  507,
      508,   85,   85,  588,  494,  309,  495,  594,   85,  496,
      497,  593,   85,  497,  529,  606,  530,  111,   85,  531,
      532,  596,   85,   85,  498,   85,   85,  599,  619,  494,
       85,  495,  597,  554,  496,  601,  497,  122,  533,  555,

      556,  557,  111,   85,  509,  604,  497,  511,  600,  512,
      512,  512,  512,  512,  512,  512,  512,  512,   85,  677,
       85,  612,  122,  276,   85,  512,  512,  512,  512,  512,
      512,  609,  513,  514,  515,  516,  517,  610,   85,   85,
      523,  518,  524,  519,   85,  525,  526,  605,  520,  636,
      512,  512,  512,  512,  512,  512,  620,  521,  514,   85,
      522,  523,  516,  524,  517,   85,  525,  526,  518,   85,
      602,  313,  615,  519,  104,  104,  104,  104,  104,  104,
      104,  104,  104, 1361,   85,  527,   85,  603,  613,  529,
      527,  530,  313,  611,  531,  532,   85,   85,  313,  117,

      117,  117,  117,  117,  117,  117,  117,  117,   85,  618,
       85,   85,  122,  307,  614,  616,   85,  621,   85,  313,
       85,  153,   85,   85,   85,  626,   85,   85,   85,  628,
      624,   85,   85,  623,  627,  629,  631,  122,  326,  533,
      625,  633,  630,   85,  632,   85,  634,  640,   85,  637,
       85,  435,  231,  638,   85,  231,  435,  445,  436,  446,
      641,  229,  639,  445,  660,  446,  661,  755,  642,  662,
      663,   85,  237,  237,  237,  237,  237,  237,  237,  437,
      437,  437,  437,  437,  437,  437,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  455,   85,  455,   85,  847,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  664,
      703,  644,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      684,  263,  291,  265,  664,  703,  266,  267,  685,  664,
      267,  664,  711,  291,  664,  664,  502,  680,   85,  681,
      712,  656,  682,  683,  508,  684,  263, 1361,  265,  291,
      464,  266,  111,  267,  664,  685,  664,  754, 1361,  664,
      291,  664,  111,  267,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  313,  668,  313,  669,  111,   85,  670,
      671,  487,  684,  466,  467,  468,  714,  111,  469,  470,

      685,  739,  470,  122,  122,  526,  770,  664,  715,  738,
      313,  740,  313,  471,   85,  532,   85,  684,  466,  467,
      468,  741,  714,  469,  714,  470,  993,  685,  122,  122,
      763,  665,  664,  665,  716,  470,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  672,   85,  673,  742,   85,
      714,  672,   85,   85,  672,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  751,   85,   85,  753,  760,  777,
      672,  756,  673,   85,  757,  667,  937,  672,  278,  278,
      278,  278,  278,  278,  278,  104,  104,  672,  675,  675,
      675,  675,  675,  675,  675,  675,  675,   85,  697,  685,

      698,  699,   85,   85,   85,   85,  684,  272,  758,  274,
      516,  717,  275,  276,  685,  762,  276,  482,  766,  718,
       85,  779, 1361,  700,  685,  764,  701,  676,  699,  759,
      487,  684,  272,   85,  274,  781,  717,  275,  703,  276,
      703,  685,  761,  703,  703,  473,  718,  473,   85,  276,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  483,
      483, 1346,  782,  703,  686,  703,  687,  688,  703,  775,
      703,   85,  692,  689,  693,   85,   85,  694,  695,   85,
       85,  771,  484,  485,  486,  487,  488,  767,  768,  690,
      776,  489,  691,  488,  688,  684,  696,  765,  490,  704,

      689,  705,  769,  685,  706,  707,   85,  491,  485,   85,
      492,  692,  487,  693,  488,   85,  694,  695,  489,   85,
      684,  774,  703,  488,  772,  717,  708,   85,  709,   85,
      685,  773,  708,  718,  684,  708,   85,   85,  778,   85,
       85,   85,  685,   85,  780,   85,  792,  703,  790,  788,
      717,  708,   85,  709,  719,  789,  720,  721,  708,  684,
      718,  696,  787,  722,  791,  795,  816, 1361,  708,  685,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  723,
       85,   85,  724,   85,  721,  733,  718,  734,  735,  494,
      722,  495,   85,  717,  496,  497,   85,   85,  497,   85,

      793,  718,  799,  794,   85,   85,  796,  800,  801,  498,
      736,  718,   85,  737,  494,  735,  495,  516,  717,  496,
      798,  497,  797,  803,   85,   85,   85,  802,  718,   85,
       85,  497,  511, 1361,  512,  512,  512,  512,  512,  512,
      512,  512,  512,   85,  804,  806,  810,  805,  807,   85,
      512,  512,  512,  512,  512,  512,   85,  513,  514,  515,
      516,  517,   85,   85,  809,  808,  518,   85,  519,  827,
       85,  811,  818,  520,   85,  512,  512,  512,  512,  512,
      512, 1339,  521,  514,  813,  522,  725,  516,  726,  517,
      812,  727,  728,  518,  730,  820,  730,   85,  519,  731,

      731,  731,  731,  731,  731,  731,  731,  731,   85,  717,
      729,   85,   85,   85,  725,   85,  726,  718,   85,  727,
      728,  819,   85,   85,   85,   85,   85,   85,  831, 1078,
      815,  826,  821,  817,  717,  822,  825,  717,  732,   85,
      824,   85,  823,  833,  718,  718,  828,   85,  834,  832,
      829,   85,   85,   85,  830,   85,   85,   85,   85,   85,
      835,  836,  717,   85,  729,   85,  837,  840,  846,  839,
      231,  838,  718,  843,  454,  844,  848,  454,  841,  842,
      237,  237,  237,  237,  237,  237,  237,   85,  845,  655,
      655,  655,  655,  655,  655,  655,  655,  655,   85,  454,

      859,  864,  454,  929,  462,  470,  472,  472,  263,  685,
      265,  927,  267,  266,  267,  267,  488,  267,  666,  666,
      666,  666,  666,  666,  666,  666,  666,   85,  656,   85,
      873,  472,  472,  263,  480,  265,  685,  867,  266,  868,
      267,  488,  869,  870,  276,  276,  689,  931,  699,  488,
      267,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  688,
      466,  689,  468,  689,  488,  469,  470,  881,  689,  470,
      876,  695,  877,   85,  887,  878,  879,  688,  497,   85,
      863,   85,  483,  483,  935,  466,  932,  468,  689,  674,

      469,  876,  470,  877,  880,  689,  878,  879,  665,  488,
      665,  689,  470,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  702,  689,  699,  488,   85,   85,  684,  689,  714,
      684,  272,  714,  274,   85,  685,  275,  276,  685,  903,
      276,  880,  926,  728,  715,  936,  938,  714,  882,  689,
      883,  676,  684,  884,  885,  684,  272,  714,  274,  897,
      714,  275,  685,  276,  882,  685,  883,  718,  722,  884,
      885,  488,  886,  276,  890,  714,  891,   85,   85,  892,
      893,  735,  519,  519,   85, 1023,   85,  488, 1361,  672,

       85,  934,  928,  943,  718,  722,  488,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  721,  519,  519,  941,
      722,  894,  488,  894,  886,  722,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  898,  721,  899,  519,   85,
      900,  901,   85,  717, 1336,   85,  710,  722,  898,  717,
      899,  718,  722,  900,  901,   85,   85,  718,   85,  902,
      940,  930,  735,  519,  933,  896,  722,   85,  717,  945,
       85,   85,  944,  939,  717,   85,   85,  942,  718,  722,
      909,  954,  910,  946,  718,  911,  912,   85,  950,   85,
      947,   85,   85,  722,  982,  966,  948,  949,  902,   85,

      951,  952,   85,  519,  913,   85,  722,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  904,  904,  904,  904,
      904,  904,  904,  904,  904,   85,  965,  953,  519,   85,
       85,   85,   85,   85,  963,  905,   85,  906, 1361,  967,
      907,  905,  968,  909,  905,  910,  971,  964,  911,  912,
       85,   85,   85,  969,  970,  908,   85,   85,   85,  973,
      905,  974,  906,  977,  979,  907,  519,  905,   85, 1335,
      980,  972,   85,  730,  976,  730,  986,  905,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  978,   85,   85,
      975,  519,   85,  913,  983,   85,   85,   85,   85,   85,

       85,  984,   85,  981,  987,   85,   85,   85,   85,  999,
      992,  990,  994,   85,   85,   85,   85,  991,  988,  989,
      997,  998,   85, 1002,  996,   85,   85,   85,  995,   85,
       85, 1001, 1005,   85,   85, 1003,   85, 1000,   85, 1007,
      689,  454, 1006, 1004,  664,  664, 1027,  689, 1028,  722,
      879, 1008,  885, 1009, 1290,  472, 1010,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  454,  689, 1030,  664,
      664, 1035,  708, 1044,  689,  901,  722,  912,   85,  267,
      472,  488,  470,  470,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  276,  488,  703,  857,  862,  862,  862,

      862,  862,  862,  862,  862,  862,  488,  703,  722, 1036,
       85,   85,  519,  519,   85, 1054,  466,   85,  468,  488,
      703,  469,  470,  871, 1056,  470,   85, 1062, 1055, 1083,
       85, 1058,  703,  497, 1036,  722,  863,  519,  519, 1057,
       85,  466, 1059,  468, 1060,  497,  469, 1061,  470,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  470, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,  904,  904,
      904,  904,  904,  904,  904,  904,  904,   85,  905,   85,
      906,   85,   85,  907,  905,   85, 1037,  905, 1038, 1065,
       85, 1039, 1040, 1066,   85, 1082, 1063,   85, 1034,   85,

     1068,   85,   85,  905, 1064,  906, 1154,  908,  907, 1036,
      905, 1067, 1069,   85,   85,   85,  894, 1070,  894, 1074,
      905,  895,  895,  895,  895,  895,  895,  895,  895,  895,
     1041,   85, 1042,   85, 1036, 1071, 1041, 1073,   85, 1041,
       85,   85,   85, 1076,   85, 1084, 1072,   85,   85,   85,
     1077, 1081,   85,   85,   85, 1041, 1079, 1042, 1095,   85,
     1075,   85, 1041, 1097, 1080,   85,   85,   85,   85, 1085,
     1094, 1096, 1041, 1105, 1099, 1101, 1098,   85, 1102,   85,
       85, 1100,   85,   85,   85,   85,   85, 1103,   85, 1113,
       85,   85, 1112, 1111, 1107, 1104, 1114,   85,   85, 1116,

     1115, 1108, 1109, 1110,   85,   85,   85,   85, 1118,   85,
       85, 1129,   85, 1117, 1119,  905,   85,  664,  703, 1120,
     1132, 1121, 1133, 1151,   85, 1134, 1135, 1148,   85, 1122,
     1169, 1153, 1123,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  664,  703,  904,  904,  904,  904,  904,  904,
      904,  904,  904,   85, 1147,  470,  497,   85, 1152,   85,
       85,   85, 1149, 1146,   85,   85, 1150,   85, 1156,   85,
     1157,   85, 1021, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1145, 1043, 1155,   85,   85, 1158,   85, 1175,
       85, 1159,  905, 1160,  906,   85,   85,  907,  905, 1161,

       85,  905, 1165, 1163, 1162,   85,   85,   85, 1166, 1164,
     1167,   85, 1034,   85, 1168,   85, 1170,  905,   85,  906,
       85,   85,  907,   85,  905,   85, 1172,   85, 1171, 1173,
     1174,   85, 1185,   85,  905,   85, 1184,   85, 1176,   85,
     1186, 1191,   85,   85,   85,   85,   85,   85,   85,   85,
     1187, 1195,   85, 1188, 1199, 1036, 1198, 1189, 1036, 1218,
     1192, 1361, 1190, 1193, 1196, 1200, 1194, 1325, 1197,   85,
       85, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1036, 1206, 1215, 1036, 1216, 1041,   85, 1217,   85,   85,
       85,   85,   85,  905,   85, 1219,  905, 1223,   85,   85,

       85,   85,   85, 1230, 1225, 1232, 1224, 1222,   85, 1221,
     1128,   85, 1220,   85, 1240, 1237, 1234,   85, 1228,   85,
       85, 1226, 1235, 1236, 1231,   85, 1227,   85, 1229,   85,
     1238,   85, 1239,   85,   85,   85,   85,   85,   85,   85,
     1241,   85,   85,   85, 1248, 1036, 1265, 1266,   85, 1246,
     1267, 1249,   85,   85,   85,   85, 1247, 1251,   85, 1250,
     1253, 1254, 1252, 1255,   85,   85,   85, 1272,   85, 1275,
     1036, 1276, 1271,   85, 1270, 1278,   85, 1273, 1268, 1279,
       85,   85,   85,  905, 1274, 1269,   85,   85,   85,   85,
       85, 1277, 1282, 1283,   85,   85,   85, 1284, 1289,   85,

       85,   85, 1301,   85,   85, 1285, 1291, 1293, 1280, 1281,
       85,   85,   85, 1304,   85,   85,   85, 1294, 1303, 1309,
     1292, 1305,   85, 1306, 1302,   85,   85,   85,   85, 1311,
     1313,   85,   85, 1307,   85,   85,   85, 1318,   85, 1308,
     1321, 1320, 1310,   85, 1312, 1322, 1319, 1326, 1327,   85,
       85,   85, 1328,   85,   85,   85, 1330, 1331, 1332,   85,
     1329,   85, 1333,   85,   85,   85,   85,   85, 1342, 1344,
       85,   85,   85, 1337, 1345,   85, 1338, 1343,   85, 1341,
       85,   85,   85, 1340,   85, 1350,   85, 1352,   85,   85,
       85, 1361, 1347,   85, 1348, 1351, 1349, 1354, 1324, 1356,

     1361, 1353, 1361, 1360, 1355,   85, 1361, 1357, 1358, 1317,
     1315, 1359,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   84,   85,   85,   84,
       84,   84,   84,   84,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  234,   85,  234,  234,   85,
      234,  234,  234,  234,   85,  234,  242,   85,   85,  242,
      242,  242,  242,  242,  242,   85,  242,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  305,  305,
      305,   85, 1361,  305,  335, 1361, 1300, 1298,  335,  335,
      335,  335,  337,  337, 1041, 1361,  337,  339,  339, 1296,
     1361,  339,  365, 1295,   85,   85,  365,  365,  365,  365,
      439,  439,   85,   85,  439,  441,  441, 1288, 1361,  441,
      443,  443, 1361,   85,  443,  450,  450,   85,   85,  450,
      452,  452,   85,   85,  452,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  510,  510,  305,  305,
      305,  534,   85, 1361,  534,  534,  534,  534,  534,  538,
      538, 1264, 1263,  538,  337,  337,  540,  540, 1361, 1041,

      540,  339,  339,   84, 1041, 1260,   84,   84,   84,   84,
       84,  571, 1361, 1259,  571,  571,  571,  571,  571,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  645,  645, 1361, 1257,  645,  439,  439,  647,  647,
       85,   85,  647,  441,  441,  649,  649,   85,   85,  649,
      443,  443,  651,  651,   85,   85,  651,  450,  450,  653,
      653,   85, 1361,  653,  452,  452,  713,  713,  713, 1361,
      713,  510,  510,  510, 1361,  510,  534, 1244, 1361,  534,
      534,  534,  534,  534,  743,  743, 1243,   85,  743,  745,

      745,   85,   85,  745,  747,  747,   85,   85,  747,  538,
      538,  749,  749,   85,   85,  749,  540,  540,   84, 1361,
     1214,   84,   84,   84,   84,   84,  571, 1361, 1361,  571,
      571,  571,  571,  571,  783,  783, 1361, 1211,  783,  785,
      785, 1361, 1210,  785,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  849,  849, 1041, 1208,  849,
      645,  645,  851,  851, 1207, 1205,  851,  647,  647,  649,
      649,  708,  672,  649,  853,  853, 1204, 1202,  853,  651,
      651,  855,  855,   85,   85,  855,  653,  653,  713,  713,
      713,   85,  713,  512,  512,   85,   85,  512,  914,  914,

       85,   85,  914,  916,  916,   85,   85,  916,  918,  918,
       85,   85,  918,  743,  743,  920,  920,   85,   85,  920,
      745,  745,  922,  922,   85, 1183,  922,  747,  747,  924,
      924, 1182, 1180,  924,  749,  749,   84, 1178,   85,   84,
       84,   84,   84,   84,  955,  955,   85, 1144,  955,  957,
      957, 1142, 1141,  957,  959,  959, 1139, 1137,  959,  783,
      783,  961,  961,  912,  905,  961,  785,  785, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1013,
     1013, 1131, 1130, 1013,  849,  849, 1015, 1015,  901, 1128,
     1015,  851,  851, 1017, 1017,  708,  708, 1017,  853,  853,

       84,   84, 1127,  885,   84,  855,  855,  713,  713,  879,
      480,  713, 1045, 1045,  672,  672, 1045,  914,  914, 1047,
     1047, 1126,  462, 1047,  916,  916, 1049, 1049, 1012,   85,
     1049,  918,  918, 1051, 1051,   85,   85, 1051,  920,  920,
     1053, 1053,  922,  922,   84,   85,   85,   84,   84,   84,
       84,   84,  924,  924, 1086, 1086,   85,   85, 1086,  955,
      955, 1088, 1088,   85,   85, 1088,  957,  957, 1090, 1090,
       85,   85, 1090,  959,  959, 1092, 1092,   85,   85, 1092,
      961,  961, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1124, 1124, 1013, 1013, 1015, 1015, 1125,

     1125, 1017, 1017,   84,   84, 1136, 1136,   85,   85, 1136,
     1045, 1045, 1138, 1138,   85,   85, 1138, 1047, 1047, 1140,
     1140,   85, 1093, 1140, 1049, 1049,  335,  335, 1091, 1089,
      335, 1051, 1051, 1143, 1143, 1087,   85, 1143, 1177, 1177,
     1052, 1050, 1177, 1086, 1086, 1179, 1179, 1048, 1046, 1179,
     1088, 1088, 1181, 1181,  912,  912, 1181, 1090, 1090,  365,
      365, 1043,  728,  365, 1092, 1092, 1201, 1201,  901,  901,
     1201, 1203, 1203,  897,  708, 1203, 1209, 1209, 1032, 1031,
     1209,  534,  534, 1029,  885,  534, 1212, 1212, 1213, 1213,
      885,  695, 1213, 1242, 1242,  879,  879, 1242,  571,  571,

      480,  480,  571, 1245, 1245, 1256, 1256, 1026,  672, 1256,
     1258, 1258, 1025, 1024, 1258, 1261, 1261, 1209, 1209, 1262,
     1262, 1022, 1021, 1262,  924,  924,  462,  462,  924, 1286,
     1286, 1287, 1287, 1020, 1019, 1287, 1015, 1015, 1018, 1016,
     1015,   84,   84, 1014, 1012,   84, 1297, 1297,   85,   85,
     1297, 1299, 1299,   85,   85, 1299, 1314, 1314,   85,   85,
     1314, 1316, 1316,   85,   85, 1316, 1323, 1323,   85,   85,
     1323,  335,  335,   85,   85,  335, 1334, 1334,   85,   85,
     1334,  365,  365,   85,  962,  365,  960,  958,  956,   85,
      925,  923,  921,  919,  917,  915,  532,  526,  738,  728,

      728,  508,  502,  497,  889,  888,  695,  695,  480,  875,
      874,  872,  871,  470,  866,  865,  462,  861,  860,  858,
      857,  856,  854,  650,  650,  852,  850,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  786,  784,  572,
      750,  748,  746,  744,  535,  532,  532,  319,  526,  526,
      508,  508,  297,  502,  502,  710,  702,  276,  679,  678,
      674,  267,  659,  658,  654,  652,  446,  446,  650,  648,
      646,   85,   85,   85,  572,  542,  541,  539,  535,  331,
      330,  319,  319,  304,  297,  297,  270,  464,  453,  451,
      449,  446,  445,  444,  442,  440,  231,   85,   85,  366,

      341,  340,  338,  331,  336,  334,  331,  329,  328,  327,
      270,  261,  260,   83,   83,   85,  233,  172,  152,  132,
      127,   85, 1361,   71,   71,   11, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361
    } ;

static const flex_int16_t yy_chk[4218] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    8,    9,   10,    2,   19,   19,    2,

        9,   10,   20,    7,    8,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   16,   24,   16,
       24,   25,   36,   36,   20,   28,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   34,   54,   25,   29,
       25,   27,   27,   27,   29,   43,   41,   43,    7,    8,
        9,   10,   57,   63,  113,   54,   34,   29,   34,   34,
       39,   57,   63,   46, 1360,   39,   41,   44,   44,   44,
       44,   47,   44,   44,   52,   44,   47,   44,   46,   53,
       46,   44,   44,   52,   46,   85,   46,   44,  177,   53,
       44,   47,   52,   41,   56,  113,   53,   27,   30,  167,

       30,   30,   30,   30,   30,   30,   30,   30,   30,  177,
       39,   56,   85,   39,   56,  167,   56,   30,   55,   67,
       30,   67,   49,   30,   30,   30,   30,   30,  136,   65,
      136,   49,   30,   30,   30,   49,   55,   50,   48,   30,
       49,   55,   30,   48,   49,   30,  105,  105,   30,   30,
       48,   30,   50,   30,   50,   30,   48,  184,  137,   30,
      137,   60,   30,   50,   30,   31,   60,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   59,  139,  124,  139,
      184, 1359,   60,   65,  173,  105,  114,   31,   59,   59,
       31,   31,   31,   31,   31,   51,   59,  173,   59,   31,

       51,   31,  142,   59,  142,  114,   31,  144,   51,  144,
       51,   60,   31,   51,   60,   31,   31,   51,   31,  124,
       31,  114,   31,  169, 1356,   61,   31,  114,   60,  214,
      114,   31,   37,  147,  141,  147,   37,   37,   61,   37,
       58,   37,   37,   61,   37,  169,   37,   61,  214,  141,
      114,  141,   58,   58,  143,  143,   62,  143,   37,   37,
       37,   62,   58,   58,  148,   58,  148,  140,   62,   62,
       68,   68,   68,   68,   68,   68,   69,   69,   68,  282,
      282,   69,   37,   37,  140,   37,  140,   37,   78,   78,
       78,   78,   78,   78,  145,  145,  145,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   80,   80,   80,   80,
       80,   80,   37,   37,   75,   75,  107,  107,  151,   75,
      151,   75,  170,  176,  164,  107,   75,   81,   81,   81,
       81,   81,   81,  164,  170,   75,   75,   75,   75,   75,
       75,   75,  107,  110,  166,  176,  980,  162,  115,   75,
      155,  110,  107,  166,  165,  155,  115,  103,  103,  103,
      103,  103,  103,  103,  161,  162,  163,   75,  110,  165,
      194,   75,  115,  115,  103,  182,   75,   75,  110,  161,
       75,   75,  980,  115,  163,  182,  161,  194,   75,  198,
      103,   75,  183,   75,   75,   75,  103,   75,   83,  103,

      155,  174,   83,   83,  168,   83,  198,   83,   83,  174,
       83,  175,   83,  183,  112,  112,  112,  112,  185,  103,
      118,  118,  168,  191,   83,   83,   83,  175,  104,  118,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  112,
      112,  191,  112,  294,  112,  185,  118,  294,   83,   83,
      104,   83,  106,  192,  106,  211,  118,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  193,  178,  179,  104,
      186,  211,  116,  192,  116,  104,  178,  116,  116,   83,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  179,
      179,  186,  180,  193,  195,  116,  106,  180,  121,   98,

       98,   98,  189,  116,   98,   98,  121,  427,   98,  187,
      180,  244,  201,  244,  187,  427,  195,  189,  181,   98,
      116,  201,  116,  121,   98,   98,   98,  181,  181,   98,
      116,   98,  187,  121,  109,  181,  109,  199,  181,  109,
      109,   98,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  200,  188,  203,  199,  208,  213,  109,  109,  188,
      125,  102,  102,  102,  209,  109,  102,  102,  125,  108,
      102,  108,  108,  200,  188,  357,  208,  209,  108,  267,
      203,  102,  109,  213,  125,  125,  102,  102,  102,  210,
      357,  102,  109,  102,  108,  125, 1348,  108,  119,  108,

      119,  119,  205,  102,  267,  108,  120,  119,  120,  210,
      190,  120,  120,  123,  123,  123,  123,  212,  197,  126,
      205,  126,  212,  119,  126,  126,  119,  190,  119,  120,
      120,  215,  217,  197,  119,  206,  190,  120,  123,  123,
      197,  123,  126,  123,  212,  216,  206,  218,  207, 1347,
      126,  219,  217,  207,  120,  245,  219,  245,  216,  247,
      218,  247,  218,  206,  120,  171,  216,  126,  207,  126,
      171,  171,  171,  223,  171,  171,  222,  126,  171,  220,
      171,  215,  221,  204,  215,  171,  171,  171,  171,  171,
      204,  221,  220,  223,  204,  221,  228,  228,  222,  316,

     1346,  228,  204,  316,  204,  204,  227,  227,  227,  227,
      227,  227,  408,  248,  227,  354,  276,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  230,  230,  235,  235,
      248,  230,  248,  235,  408,  232,  232,  250,  354,  250,
      232,  276,  232,  251,  251,  279,  251,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  238,  238,  238,  238,  238,
      238,  238,  249,  252,  286,  252,  253,  253,  253,  255,
      256,  255,  256,  257,  458,  257,  279,  249,  458,  249,
      263,  288,  263,  301,  290,  263,  263,  299,  299,  350,

      288,  286,  321,  321,  238,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  308,  263,  312,  263,  301,  350,
      263,  290,  263,  299,  262,  262,  262,  288,  321,  262,
      262,  292,  265,  262,  265,  342,  323,  265,  265, 1345,
      274,  308,  274,  312,  262,  274,  274,  292,  342,  262,
      262,  262,  297,  356,  262,  265,  262,  332,  292,  332,
      297,  323,  264,  274,  264,  314,  262,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  266,  297,  266,  356,
      265,  314,  266,  413,  272,  266,  272,  297,  274,  272,
      272,  278,  314,  278,  278,  278,  278,  278,  278,  278,

      333,  266,  333,  266,  302,  413,  264,  814,  266,  272,
      324,  272,  343,  344,  272,  336,  272,  345,  266,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  302,  302,
      343,  344,  278,  345,  324,  324,  814,  360,  271,  271,
      271,  347,  336,  271,  271,  348,  360,  271,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  310,  271,  347,
      367,  387,  348,  271,  271,  271,  310,  289,  271,  289,
      271,  367,  289,  289,  349,  608,  273,  387,  273,  349,
      271,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      275,  289,  275,  310,  352,  351,  275,  346,  289,  275,

      351,  277,  277,  277,  346,  355,  277,  277,  361,  608,
      277,  359,  399,  358,  352,  275,  359,  275,  366,  372,
      273,  361,  275,  355,  372,  289,  277,  277,  277,  358,
      358,  277,  275,  277,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  277,  371,  366,  381,  399, 1342, 1166,
      285,  381,  285,  371,  280,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  298,  293,  362,  293,  374,  363,
      293,  293,  298,  280,  373,  374,  319,  364,  362,  280,
      281,  281,  363,  373,  319, 1166,  300,  390,  300,  298,
      370,  300,  300,  362,  384,  364,  293,  375,  376,  298,

      377,  319,  390,  281,  281,  281,  281,  281,  370,  300,
      300,  319,  281,  384,  281,  293,  376,  375,  378,  281,
      377,  379,  382,  293,  398,  544,  383,  382,  281,  281,
      320,  281,  383,  281,  300,  281,  378,  398,  320,  281,
      380,  544,  379,  379,  281,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  303,  320,  303,  397,  380,  303,
      303,  386,  385,  380,  284,  320,  284,  386,  410,  284,
      284,  385,  388,  284,  322,  397,  322,  303,  353,  322,
      322,  388,  391,  389,  284,  392,  395,  391,  410,  284,
      393,  284,  389,  353,  284,  393,  284,  322,  322,  353,

      353,  353,  303, 1341,  303,  395,  284,  305,  392,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  403,  476,
      400,  403,  322,  476,  401,  305,  305,  305,  305,  305,
      305,  400,  305,  305,  305,  305,  305,  401,  396,  411,
      315,  305,  315,  305,  428,  315,  315,  396,  305,  428,
      305,  305,  305,  305,  305,  305,  411,  305,  305,  406,
      305,  311,  305,  311,  305,  394,  311,  311,  305,  404,
      394,  315,  406,  305,  307,  307,  307,  307,  307,  307,
      307,  307,  307, 1339,  402,  311,  409,  394,  404,  325,
      315,  325,  311,  402,  325,  325,  405,  407,  315,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  412,  409,
      414,  415,  325,  307,  405,  407,  417,  412,  416,  311,
      418,  423,  419,  421,  426,  417,  424,  422,  425,  418,
      415,  430,  432,  414,  417,  419,  422,  325,  326,  325,
      416,  425,  421,  429,  424,  431,  426,  432,  433,  429,
      434,  435,  435,  430,  547,  436,  435,  447,  435,  447,
      433,  436,  431,  448,  463,  448,  463,  547,  434,  463,
      463,  423,  437,  437,  437,  437,  437,  437,  437,  438,
      438,  438,  438,  438,  438,  438,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  457,  642,  457, 1338,  642,

      457,  457,  457,  457,  457,  457,  457,  457,  457,  470,
      497,  437,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      487,  456,  502,  456,  470,  497,  456,  456,  487,  466,
      456,  466,  499,  503,  466,  466,  499,  481,  546,  481,
      505,  456,  481,  481,  505,  487,  456, 1336,  456,  502,
      464,  456,  508,  456,  466,  487,  466,  546,  520,  466,
      503,  466,  509,  456,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  526,  468,  527,  468,  508,  561,  468,
      468,  484,  484,  465,  465,  465,  510,  509,  465,  465,

      484,  523,  465,  532,  533,  523,  561,  468,  510,  520,
      526,  529,  527,  465,  555,  529,  826,  484,  465,  465,
      465,  535,  511,  465,  510,  465,  826,  484,  532,  533,
      555,  467,  468,  467,  511,  465,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  469,  552,  469,  535,  567,
      511,  469,  545,  543,  469,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  543,  549,  548,  545,  552,  567,
      469,  548,  469,  763,  549,  467,  763,  469,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  469,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  550,  489,  489,

      489,  489,  554,  556,  569,  558,  491,  474,  550,  474,
      513,  513,  474,  474,  491,  554,  474,  482,  558,  513,
      551,  569, 1335,  489,  489,  556,  489,  474,  489,  551,
      491,  491,  474,  553,  474,  572,  513,  474,  494,  474,
      494,  491,  553,  494,  494,  475,  513,  475,  565,  474,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  483,
      483, 1334,  572,  494,  485,  494,  485,  485,  494,  565,
      494,  559,  486,  485,  486,  557,  562,  486,  486,  566,
      560,  562,  483,  483,  483,  483,  483,  559,  559,  485,
      566,  483,  485,  483,  485,  486,  486,  557,  483,  495,

      485,  495,  560,  486,  495,  495, 1333,  483,  483,  563,
      483,  492,  483,  492,  483,  564,  492,  492,  483,  568,
      486,  564,  495,  483,  563,  516,  496,  577,  496,  570,
      486,  563,  496,  516,  492,  496,  580, 1332,  568,  583,
      611,  578,  492,  582,  570,  575,  583,  495,  580,  577,
      516,  496,  586,  496,  514,  578,  514,  514,  496,  492,
      516,  492,  575,  514,  582,  586,  611, 1325,  496,  492,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  514,
      584,  585,  514,  587,  514,  518,  518,  518,  518,  493,
      514,  493,  591,  521,  493,  493,  590,  589,  493,  592,

      584,  521,  590,  585,  596,  588,  587,  591,  592,  493,
      518,  518,  594,  518,  493,  518,  493,  521,  521,  493,
      589,  493,  588,  596,  597,  598,  603,  594,  521,  600,
      599,  493,  512, 1324,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  601,  597,  599,  603,  598,  600,  602,
      512,  512,  512,  512,  512,  512,  622,  512,  512,  512,
      512,  512,  604,  613,  602,  601,  512,  607,  512,  622,
      605,  604,  613,  512,  615,  512,  512,  512,  512,  512,
      512, 1323,  512,  512,  607,  512,  515,  512,  515,  512,
      605,  515,  515,  512,  517,  615,  517,  614,  512,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  610,  515,
      515,  612,  616,  621,  522,  617,  522,  515,  619,  522,
      522,  614,  618,  626,  627,  628,  629,  620,  626,  947,
      610,  621,  616,  612,  515,  617,  620,  522,  517,  623,
      619,  624,  618,  628,  515,  522,  623,  625,  629,  627,
      624,  630,  632,  631,  625,  634,  633,  636,  637,  640,
      630,  631,  522,  947,  522,  638,  631,  633,  640,  632,
      643,  631,  522,  637,  658,  638,  643,  659,  634,  636,
      644,  644,  644,  644,  644,  644,  644,  755,  638,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  752,  658,

      660,  668,  659,  755,  660,  668,  678,  679,  655,  684,
      655,  752,  658,  655,  655,  659,  699,  655,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  757,  655, 1322,
      680,  678,  679,  655,  680,  655,  684,  673,  655,  673,
      655,  699,  673,  673,  678,  679,  688,  757,  697,  697,
      655,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  686,
      666,  690,  666,  688,  697,  666,  666,  692,  686,  666,
      687,  692,  687,  758,  704,  687,  687,  690,  704,  761,
      666, 1319,  702,  702,  761,  666,  758,  666,  690,  674,

      666,  691,  666,  691,  687,  686,  691,  691,  667,  700,
      667,  687,  666,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  702,  691,  700,  700,  751,  764,  695,  687,  716,
      696,  675,  713,  675,  762,  695,  675,  675,  696,  725,
      675,  691,  751,  725,  713,  762,  764,  715,  698,  691,
      698,  675,  695,  698,  698,  696,  675,  716,  675,  715,
      713,  675,  695,  675,  701,  696,  701,  717,  721,  701,
      701,  698,  698,  675,  709,  715,  709,  754,  760,  709,
      709,  733,  733,  735,  769,  867, 1318,  701, 1317,  867,

      767,  760,  754,  769,  717,  721,  698,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  719,  733,  735,  767,
      723,  714,  701,  714,  701,  719,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  720,  723,  720,  736,  756,
      720,  720,  759,  728, 1316,  766,  710,  723,  724,  729,
      724,  728,  719,  724,  724,  765,  768,  729,  771,  720,
      766,  756,  736,  736,  759,  714,  720,  770,  728,  771,
      772,  776,  770,  765,  729,  775,  780,  768,  728,  724,
      734,  780,  734,  772,  729,  734,  734,  774,  776,  810,
      773,  777,  778,  720,  810,  790,  774,  775,  724,  788,

      777,  778,  790,  734,  734,  779,  724,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  773,  788,  779,  734,  787,
      791,  798,  796,  792,  787,  731,  795,  731, 1315,  791,
      731,  731,  792,  737,  731,  737,  798,  787,  737,  737,
      800,  805,  802,  795,  796,  731,  799,  804,  815,  800,
      731,  802,  731,  805,  808,  731,  737,  731,  803, 1314,
      808,  799,  806,  732,  804,  732,  815,  731,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  806,  809,  812,
      803,  737,  813,  737,  812,  819,  820,  821,  822,  808,

      823,  813,  825,  809,  819,  827,  828,  829,  830,  832,
      825,  822,  827,  831,  833,  837,  832,  823,  820,  821,
      830,  831,  836,  837,  829,  838,  840,  841,  828,  842,
      843,  836,  841,  844,  847,  838,  845,  833, 1247,  843,
      879,  858,  842,  840,  865,  866,  876,  880,  882,  901,
      876,  844,  882,  845, 1247,  872,  847,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  858,  879,  890,  865,
      866,  898,  890,  909,  880,  898,  901,  909, 1312,  858,
      872,  885,  865,  866,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  872,  886,  888,  857,  862,  862,  862,

      862,  862,  862,  862,  862,  862,  885,  889,  902,  905,
      926,  952,  912,  913,  931,  926,  862,  927,  862,  886,
      888,  862,  862,  871,  927,  862,  929,  931,  926,  952,
      928,  929,  889,  888,  905,  902,  862,  912,  913,  928,
     1309,  862,  930,  862,  930,  889,  862,  930,  862,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  862,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  930,  895,  932,
      895,  933,  934,  895,  895,  935,  906,  895,  906,  934,
      951,  906,  906,  935,  936,  951,  932,  937,  895,  938,

      937, 1063,  943,  895,  933,  895, 1063,  904,  895,  906,
      895,  936,  938,  940,  939,  942,  896,  939,  896,  943,
      895,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      907,  941,  907,  946,  906,  940,  907,  942,  944,  907,
      945,  948,  950,  945,  949,  953,  941,  954,  964,  963,
      946,  950,  965,  969,  966,  907,  948,  907,  964,  971,
      944,  970,  907,  966,  949,  975,  972,  977,  978,  954,
      963,  965,  907,  979,  970,  972,  969,  982,  975,  983,
      953,  971,  986,  987,  988,  990,  994,  977,  996,  994,
      999, 1000,  990,  988,  982,  978,  996,  998, 1001,  999,

      998,  983,  986,  987, 1005, 1004, 1006,  979, 1001, 1008,
     1009, 1037, 1058, 1000, 1004, 1037, 1306, 1022, 1029, 1005,
     1042, 1006, 1042, 1060, 1062, 1042, 1042, 1058, 1057, 1008,
     1078, 1062, 1009, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1022, 1029, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1055, 1057, 1022, 1029, 1060, 1061, 1078,
     1304, 1054, 1059, 1055, 1064, 1065, 1059, 1066, 1065, 1067,
     1066, 1070, 1021, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1054, 1043, 1064, 1069, 1071, 1067, 1074, 1084,
     1061, 1069, 1033, 1070, 1033, 1072, 1059, 1033, 1033, 1071,

     1073, 1033, 1075, 1073, 1072, 1077, 1301, 1076, 1075, 1074,
     1076, 1097, 1033, 1079, 1077, 1080, 1079, 1033, 1081, 1033,
     1083, 1082, 1033, 1084, 1033, 1085, 1081, 1096, 1080, 1082,
     1083, 1098, 1097, 1099, 1033, 1102, 1096, 1075, 1085, 1103,
     1098, 1105, 1108, 1111, 1112, 1121, 1113, 1116, 1119, 1115,
     1099, 1113, 1123, 1102, 1121, 1130, 1119, 1103, 1131, 1149,
     1108, 1300, 1103, 1111, 1115, 1123, 1112, 1299, 1116, 1151,
     1105, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1130, 1132, 1148, 1131, 1148, 1132, 1152, 1148, 1149, 1154,
     1155, 1157, 1156, 1130, 1158, 1151, 1131, 1156, 1159, 1160,

     1163, 1161, 1162, 1163, 1158, 1165, 1157, 1155, 1171, 1154,
     1128, 1164, 1152, 1168, 1175, 1171, 1168, 1148, 1161, 1169,
     1170, 1159, 1169, 1170, 1164, 1176, 1160, 1172, 1162, 1174,
     1172, 1184, 1174, 1185, 1188, 1187, 1189, 1192, 1197, 1165,
     1176, 1195, 1196, 1175, 1187, 1205, 1215, 1216, 1200, 1184,
     1217, 1188, 1218, 1223, 1224, 1226, 1185, 1192, 1221, 1189,
     1196, 1197, 1195, 1200, 1225, 1227, 1228, 1225, 1229, 1228,
     1205, 1229, 1224, 1231, 1223, 1232, 1234, 1226, 1218, 1234,
     1215, 1216, 1217, 1205, 1227, 1221, 1235, 1237, 1246, 1238,
     1239, 1231, 1238, 1239, 1240, 1250, 1241, 1240, 1246, 1252,

     1253, 1254, 1265, 1270, 1232, 1241, 1250, 1253, 1235, 1237,
     1272, 1271, 1273, 1272, 1274, 1275, 1276, 1254, 1271, 1276,
     1252, 1273, 1284, 1274, 1270, 1277, 1281, 1285, 1290, 1281,
     1285, 1265, 1292, 1275, 1291, 1293, 1294, 1290, 1302, 1275,
     1293, 1292, 1277, 1303, 1284, 1294, 1291, 1302, 1303, 1305,
     1307, 1308, 1305, 1320, 1310, 1311, 1308, 1310, 1311, 1313,
     1307, 1321, 1313, 1326, 1327, 1328, 1330, 1329, 1328, 1330,
     1337, 1331, 1340, 1320, 1331, 1343, 1321, 1329, 1349, 1327,
     1344, 1350, 1352, 1326, 1351, 1344, 1354, 1349, 1353, 1357,
     1355, 1298, 1337, 1358, 1340, 1344, 1343, 1351, 1297, 1353,

     1296, 1350, 1295, 1358, 1352, 1289, 1288, 1354, 1355, 1287,
     1286, 1357, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1366, 1283, 1282, 1366,
     1366, 1366, 1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1368, 1280, 1368, 1368, 1279,
     1368, 1368, 1368, 1368, 1278, 1368, 1369, 1269, 1268, 1369,
     1369, 1369, 1369, 1369, 1369, 1267, 1369, 1370, 1370, 1370,

     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1371, 1371,
     1371, 1266, 1264, 1371, 1372, 1263, 1262, 1261, 1372, 1372,
     1372, 1372, 1373, 1373, 1260, 1259, 1373, 1374, 1374, 1258,
     1257, 1374, 1375, 1256, 1255, 1251, 1375, 1375, 1375, 1375,
     1376, 1376, 1249, 1248, 1376, 1377, 1377, 1245, 1244, 1377,
     1378, 1378, 1243, 1236, 1378, 1379, 1379, 1233, 1230, 1379,
     1380, 1380, 1222, 1220, 1380, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1382, 1382, 1383, 1383,
     1383, 1384, 1219, 1214, 1384, 1384, 1384, 1384, 1384, 1385,
     1385, 1213, 1212, 1385, 1386, 1386, 1387, 1387, 1211, 1208,

     1387, 1388, 1388, 1389, 1207, 1206, 1389, 1389, 1389, 1389,
     1389, 1390, 1204, 1203, 1390, 1390, 1390, 1390, 1390, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1393, 1393, 1202, 1201, 1393, 1394, 1394, 1395, 1395,
     1199, 1198, 1395, 1396, 1396, 1397, 1397, 1194, 1193, 1397,
     1398, 1398, 1399, 1399, 1191, 1190, 1399, 1400, 1400, 1401,
     1401, 1186, 1183, 1401, 1402, 1402, 1403, 1403, 1403, 1182,
     1403, 1404, 1404, 1404, 1180, 1404, 1405, 1179, 1178, 1405,
     1405, 1405, 1405, 1405, 1406, 1406, 1177, 1173, 1406, 1407,

     1407, 1167, 1153, 1407, 1408, 1408, 1150, 1147, 1408, 1409,
     1409, 1410, 1410, 1146, 1145, 1410, 1411, 1411, 1412, 1144,
     1143, 1412, 1412, 1412, 1412, 1412, 1413, 1142, 1141, 1413,
     1413, 1413, 1413, 1413, 1414, 1414, 1139, 1138, 1414, 1415,
     1415, 1137, 1136, 1415, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1417, 1417, 1135, 1134, 1417,
     1418, 1418, 1419, 1419, 1133, 1129, 1419, 1420, 1420, 1421,
     1421, 1127, 1126, 1421, 1422, 1422, 1125, 1124, 1422, 1423,
     1423, 1424, 1424, 1122, 1120, 1424, 1425, 1425, 1426, 1426,
     1426, 1118, 1426, 1427, 1427, 1117, 1114, 1427, 1428, 1428,

     1110, 1109, 1428, 1429, 1429, 1107, 1106, 1429, 1430, 1430,
     1104, 1101, 1430, 1431, 1431, 1432, 1432, 1100, 1095, 1432,
     1433, 1433, 1434, 1434, 1094, 1092, 1434, 1435, 1435, 1436,
     1436, 1090, 1088, 1436, 1437, 1437, 1438, 1086, 1068, 1438,
     1438, 1438, 1438, 1438, 1439, 1439, 1056, 1053, 1439, 1440,
     1440, 1051, 1049, 1440, 1441, 1441, 1047, 1045, 1441, 1442,
     1442, 1443, 1443, 1044, 1040, 1443, 1444, 1444, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1446,
     1446, 1039, 1038, 1446, 1447, 1447, 1448, 1448, 1035, 1034,
     1448, 1449, 1449, 1450, 1450, 1032, 1031, 1450, 1451, 1451,

     1452, 1452, 1030, 1028, 1452, 1453, 1453, 1454, 1454, 1027,
     1026, 1454, 1455, 1455, 1025, 1024, 1455, 1456, 1456, 1457,
     1457, 1023, 1020, 1457, 1458, 1458, 1459, 1459, 1011, 1010,
     1459, 1460, 1460, 1461, 1461, 1007, 1003, 1461, 1462, 1462,
     1463, 1463, 1464, 1464, 1465, 1002,  997, 1465, 1465, 1465,
     1465, 1465, 1466, 1466, 1467, 1467,  995,  993, 1467, 1468,
     1468, 1469, 1469,  992,  991, 1469, 1470, 1470, 1471, 1471,
      989,  985, 1471, 1472, 1472, 1473, 1473,  984,  981, 1473,
     1474, 1474, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1476, 1476, 1477, 1477, 1478, 1478, 1479,

     1479, 1480, 1480, 1481, 1481, 1482, 1482,  976,  974, 1482,
     1483, 1483, 1484, 1484,  973,  968, 1484, 1485, 1485, 1486,
     1486,  967,  961, 1486, 1487, 1487, 1488, 1488,  959,  957,
     1488, 1489, 1489, 1490, 1490,  955,  924, 1490, 1491, 1491,
      920,  918, 1491, 1492, 1492, 1493, 1493,  916,  914, 1493,
     1494, 1494, 1495, 1495,  911,  910, 1495, 1496, 1496, 1497,
     1497,  908,  903, 1497, 1498, 1498, 1499, 1499,  900,  899,
     1499, 1500, 1500,  897,  893, 1500, 1501, 1501,  892,  891,
     1501, 1502, 1502,  887,  884, 1502, 1503, 1503, 1504, 1504,
      883,  881, 1504, 1505, 1505,  878,  877, 1505, 1506, 1506,

      875,  874, 1506, 1507, 1507, 1508, 1508,  873,  870, 1508,
     1509, 1509,  869,  868, 1509, 1510, 1510, 1511, 1511, 1512,
     1512,  864,  863, 1512, 1513, 1513,  861,  860, 1513, 1514,
     1514, 1515, 1515,  859,  855, 1515, 1516, 1516,  853,  851,
     1516, 1517, 1517,  849,  848, 1517, 1518, 1518,  846,  839,
     1518, 1519, 1519,  835,  834, 1519, 1520, 1520,  824,  818,
     1520, 1521, 1521,  817,  816, 1521, 1522, 1522,  811,  807,
     1522, 1523, 1523,  801,  797, 1523, 1524, 1524,  794,  793,
     1524, 1525, 1525,  789,  785, 1525,  783,  782,  781,  753,
      749,  747,  745,  743,  742,  741,  740,  739,  738,  727,

      726,  712,  711,  707,  706,  705,  694,  693,  683,  682,
      681,  677,  676,  671,  670,  669,  663,  662,  661,  657,
      656,  653,  651,  650,  649,  647,  645,  641,  639,  635,
      609,  606,  595,  593,  581,  579,  576,  574,  573,  571,
      540,  538,  537,  536,  534,  531,  530,  528,  525,  524,
      507,  506,  504,  501,  500,  498,  490,  479,  478,  477,
      471,  461,  460,  459,  452,  450,  449,  445,  443,  441,
      439,  420,  369,  368,  365,  341,  339,  337,  335,  334,
      329,  318,  317,  306,  296,  295,  269,  268,  259,  258,
      254,  246,  243,  241,  240,  239,  229,  202,  196,  172,

      160,  158,  157,  150,  149,  146,  138,  135,  134,  130,
      100,   97,   96,   93,   91,   84,   71,   45,   38,   35,
       32,   18,   11,    4,    3, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[236] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Tue Oct  3 17:10:57 2023
 * Update Count     : 773
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.h"                            // for DeclarationNode
#include "ExpressionNode.h"                             // for LabelNode
#include "InitializerNode.h"                            // for InitializerNode
#include "ParseNode.h"
#include "ParserTypes.h"                                // for Token
#include "StatementNode.h"                              // for CondCtl, ForCtrl
#include "TypedefTable.h"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 1987 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// ' stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}




#line 2004 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define BKQUOTE 2
#define QUOTE 3
#define STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 180 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 2229 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1362 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4126 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 182 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 204 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 207 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 208 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 209 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 212 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 217 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }
	YY_BREAK
/* keywords */
case 10:
YY_RULE_SETUP
#line 220 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 221 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 224 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 225 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CORUN); }				// CFA
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COFOR); }				// CFA
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT16); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32X); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64X); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 108:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 151:
YY_RULE_SETUP
#line 364 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* numeric constants */
case 153:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 373 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 374 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 375 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 378 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value */
case 161:
YY_RULE_SETUP
#line 381 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant */
case 164:
YY_RULE_SETUP
#line 387 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 167:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 170:
YY_RULE_SETUP
#line 398 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 402 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 403 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 408 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 409 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 183:
YY_RULE_SETUP
#line 413 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 414 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 187:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 430 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 436 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 452 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 228:
YY_RULE_SETUP
#line 464 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 465 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 466 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 467 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 472 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 233:
YY_RULE_SETUP
#line 499 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 234:
YY_RULE_SETUP
#line 511 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 513 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 3559 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BKQUOTE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1362 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1362 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1361);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 513 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

