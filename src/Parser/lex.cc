
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 233
#define YY_END_OF_BUFFER 234
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1357] =
    {   0,
        0,    0,    0,    0,    0,    0,  160,  160,  163,  163,
      234,  232,    7,    9,    8,  185,  162,  149,  191,  194,
      159,  172,  173,  188,  186,  176,  187,  179,  190,  152,
      153,  177,  178,  196,  198,  197,  199,  168,  149,  170,
      189,  171,  192,  149,  169,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  174,  195,  175,  193,    7,  232,    4,
        4,  233,  160,  161,  167,  163,  164,    7,    9,    0,
        8,  203,  226,  149,    0,  216,  184,  208,  217,  214,
      200,  211,  201,  212,  210,  224,    0,  156,    3,    0,

      215,  155,  152,    0,    0,    0,  152,  152,  152,  152,
      152,  152,    0,    0,  152,  152,  153,  153,  153,  153,
      153,  153,  153,    0,  153,  153,  182,  183,  181,  204,
      206,  202,  207,  205,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  222,  162,  159,  149,  213,    0,    0,  219,    0,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,    0,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,   47,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,   79,  149,  149,  149,  149,

      149,   97,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  218,  209,  223,    7,    0,    0,    0,
        2,    0,    5,  160,    0,  166,  165,  165,    0,    0,
        0,  163,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  225,
      180,  156,  156,    0,  156,  156,  156,  156,    0,    6,
      157,  155,    0,  155,  155,  155,  155,  152,    0,    0,
      151,    0,    0,  157,    0,  152,  152,  152,  152,  152,
      152,  152,  152,    0,    0,    0,  152,  152,  152,  152,

      152,  152,  152,    0,  154,    0,    0,  153,  153,  153,
      153,  153,  153,  153,  153,    0,    0,    0,  153,  153,
      153,  153,  153,  153,  153,    0,  220,  221,    0,  230,
      227,    0,    0,    0,  229,    0,    0,    0,    0,    0,
        0,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  150,    0,  149,   16,   17,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,   72,  149,  149,  149,  149,   86,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  125,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,    0,    0,  165,    0,    0,    0,    0,
        0,  165,    0,    0,  231,    0,    0,    0,    0,    0,
        0,    0,  156,    0,  156,    0,    0,    0,    0,    0,
      156,  156,    0,  157,  157,    0,  157,  157,  157,  157,
      155,    0,  155,    0,    0,    0,    0,    0,  155,  155,
        0,  151,  151,  151,  151,  151,  151,  151,    0,  151,
      151,  157,  157,  157,  157,  157,  157,    0,    0,    0,

      152,  152,    0,    0,    0,    0,  152,  152,    0,    0,
      154,  154,  154,  154,  154,  154,  154,  154,    0,  154,
      154,    0,    0,    0,  153,  153,    0,    0,    0,    0,
      153,  153,  229,    0,    0,    0,    0,    0,    0,    0,
      228,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  150,
        0,    0,    0,  149,   23,  149,  149,   28,  149,   31,
      149,  149,  149,  149,  149,  149,  149,  149,  149,   50,
      149,   52,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,   78,  149,  149,   91,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  138,  149,  149,  149,  145,  149,  147,  149,    0,
        0,    0,    0,    0,    0,  165,    0,    0,    0,    0,
        0,  156,  156,    0,  156,  156,    0,    0,    0,    0,
      157,    0,  157,    0,    0,    0,    0,    0,  157,  157,
        0,  155,  155,    0,  155,  155,    0,    0,    0,    0,
      151,  151,  151,  151,  151,  151,  151,  151,    0,    0,
        0,  151,  151,  151,  151,  151,  151,  151,    0,  157,

        0,    0,    0,    0,  157,  157,    0,    0,    0,    0,
        0,    0,    0,  154,  154,  154,  154,  154,  154,  154,
      154,    0,    0,    0,  154,  154,    0,  158,    0,  154,
      154,  154,  154,  154,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  149,  149,   26,
      149,  149,  149,  149,  149,  149,  149,  149,  149,   18,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,    0,    0,    0,
        0,    0,    0,  149,  149,   27,   29,  149,  149,   37,
      149,  149,  149,  149,  149,   49,  149,  149,  149,  149,

      149,   59,   60,  149,  149,   75,  149,  149,  149,  149,
       93,   96,   98,  149,  149,  149,  149,  149,  106,  149,
      149,  149,  149,  149,  149,  149,  121,  149,  124,  126,
      149,  149,  149,  132,  149,  149,  149,  149,  149,  149,
      146,  149,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  156,    0,  156,  156,  157,  157,    0,  157,
      157,    0,    0,    0,    0,    0,  155,    0,  155,  155,
        0,    0,    0,  151,  151,    0,    0,    0,    0,  151,
      151,    0,  157,  157,    0,    0,    0,    0,    0,  158,
        0,    0,    0,    0,    0,  154,  154,    0,  158,  158,

      158,  158,  158,    0,    0,    0,  154,  154,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  149,    0,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,   81,
      149,  149,  149,  149,  149,  149,  149,  149,  149,    0,
        0,    0,    0,    0,    0,    0,    0,  149,  149,  149,
      149,   32,   33,  149,  149,  149,  149,   48,   51,  149,
       55,  149,  149,  149,  149,   73,  149,  149,   83,   87,
      149,  149,  149,  101,  149,  105,  107,  110,  111,  114,
      149,  116,  117,  149,  149,  149,  131,  128,  149,  149,

      149,  142,  149,  149,  148,    0,    1,    0,    0,  165,
        0,    0,    0,    0,  156,    0,  157,    0,  157,  157,
      155,    0,    0,  157,    0,  157,  157,  158,  158,    0,
      158,    0,    0,    0,    0,  158,  158,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  149,  149,
       20,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,   19,  149,  149,  149,  149,   38,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
        0,    0,    0,    0,    0,    0,    0,    0,   10,   12,
      149,  149,  149,  149,   45,   46,  149,  149,   58,  149,

       62,   74,  149,   92,   99,  149,  149,  149,  115,  149,
      149,  123,  127,  149,  137,  149,  143,  149,    0,    0,
      157,  157,    0,    0,  158,  158,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   11,
       13,   34,  149,  149,   65,   66,   68,   77,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,   82,   84,   88,  149,  149,  108,  118,  129,  149,
      149,    0,    0,    0,    0,    0,    0,    0,  149,  149,
       40,  149,  149,  149,   57,   64,  149,  100,  102,  149,
      149,  149,  134,  139,  149,    0,    0,    0,    0,  158,

        0,  158,  158,    0,    0,    0,    0,    0,    0,  149,
      149,  149,   70,   67,   69,  149,   94,  149,  149,   14,
      149,  149,  149,   35,   39,  149,  149,   61,  149,  149,
       90,  149,  149,  149,  149,  149,    0,    0,    0,    0,
      149,  149,   41,   53,  149,   76,  149,  149,  149,  144,
        0,    0,    0,    0,  158,    0,    0,    0,    0,  149,
       42,   43,   71,   80,  149,  149,  149,  149,  149,  149,
      149,  149,   63,   85,   89,  103,  109,  130,  149,  140,
        0,    0,    0,   25,  149,  149,  149,  149,  149,    0,
        0,    0,    0,    0,    0,   44,  149,  149,   15,   21,

       24,  149,  149,   36,  149,  149,  133,  149,    0,    0,
        0,    0,   30,   56,  149,  149,  122,    0,    0,    0,
      149,  149,  149,  149,  149,  149,  104,  141,    0,    0,
        0,  149,  120,    0,  149,  119,   22,  149,  149,   54,
        0,  113,  112,  149,  149,  149,  149,  149,  149,  149,
      135,  149,  149,  136,   95,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   11,   51,   56,   11,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   11,   73,   74,   75,   76,
       77,   78,   51,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[92] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    4,    4,    4,    4,    4,    9,
        4,    4,    4,    4,    4,    4,    4,    1,   10,    1,
        1,   11,    1,    8,    8,    8,    8,    8,    8,    4,
        4,    4,    4,    4,    4,    4,    4,    9,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1

    } ;

static const flex_int16_t yy_base[1521] =
    {   0,
        0,   90, 4098, 4097,    0,    0,   90,   91,   92,   93,
     4113, 4116,  104, 4116,  110,   83, 4116, 4053,   63,   90,
     4116, 4116, 4116,   84,  104, 4116,  107,  105,  123,  178,
      245, 4075, 4116,  125, 4075,   88,  325, 4074,  152, 4116,
      112, 4116,  111,  129, 4045,  105,  113,  180,  164,  179,
      237,  116,  121,   79,  160,  136,   94,  282,  218,  253,
      267,  298,   95, 4116,  195, 4116,  185,  369,  375, 4116,
     4085, 4116,    0, 4116,  413,    0, 4116,  387, 4116,  405,
      426, 4116,  491, 4047,  131, 4116, 4116, 4116, 4116, 4116,
     4068, 4116, 4067, 4116, 4116, 4068, 4081,  558, 4116, 4098,

     4116,  620,  435,  508,  224,  535,  371,  624,  611,  397,
     4116,  469,  134,  266,  402,  549,    0,  475,  653,  683,
      552, 4116,  668,  258,  614,  696, 4116, 4116, 4116, 4065,
     4116, 4116, 4116, 4064, 4063,  194,  224, 4081,  243,  350,
      315,  268,  321,  273,  360, 4059,  299,  330, 4036, 4004,
      384, 4116, 4116, 4116,  442, 4116, 4031, 4030, 4116, 4003,
      406,  389,  408,  366,  396,  386,  141,  446,  265,  364,
      707, 4031,  226,  443,  453,  365,  130,  509,  510,  534,
      560,  417,  434,  199,  460,  512,  551,  594,  544,  553,
      465,  495,  508,  412,  536, 4030,  660,  431,  598,  595,

      554, 4029,  619,  725,  644,  677,  669,  597,  593,  631,
      497,  659,  625,  271,  723,  678,  690,  687,  693,  695,
      724,  718,  701, 4116, 4116, 4116,  805,  795, 4084,  825,
     4116,  834, 4116,    0,  827, 4116, 4116,  843, 4024, 4023,
     4022,    0, 4048,  579,  779, 4066,  796,  855,  854,  803,
      810,  840,  843, 4044,  846,  847,  850, 4018, 4017, 4116,
     4116,  883,  874,  945,  870,  935,  608, 4016, 4074, 4116,
      997,  943, 1059,  909, 1049,  770, 1060,  971,  732, 1112,
     1158,  357, 1026, 1223, 1133,  719, 4116,  842, 1044,  821,
     4116,  865, 1142,  519, 4051, 4048,  882,  906,  912, 1163,

      851,  942, 1149,    0, 1287, 4053, 1232,  846, 4116, 1012,
     1295,  911, 4116,  961, 1338,  775, 4048, 4045, 1130, 1217,
      959, 1349,  868,  964, 1356, 1408, 4116, 4116, 4034, 4116,
     4116,  858,  867, 4010, 4010,  948, 4006,    0, 4005,    0,
     3976,  860,  885,  970,  622,  697,  983,  942, 1016,  734,
     1037,  901, 1222,  979, 1036,  923, 1004, 1039, 1046,  978,
     1047, 1117, 1050, 1053, 4006, 1065,  776, 4005, 4004, 1072,
     1086, 1106, 1127, 1058, 1135, 1124, 1139, 1110, 1140, 1163,
     1167, 1087, 1089, 1141, 1160, 1169, 1174, 1207, 1209, 1179,
     1218, 1214, 1220, 1210, 1223, 1221, 1234, 1217, 1250, 1273,

     1279, 1298, 1227, 1263, 1311, 1264, 1307, 1289, 1313, 1322,
     1331, 1325, 1328, 1317, 1330, 1332, 1345, 1335, 4003, 1346,
     1349, 1228, 1342, 1343, 1359, 1355, 1382, 1364, 1366, 1367,
     1368, 1385, 1386, 1446, 1448, 1448, 1455, 3999,    0, 3998,
        0, 3997,    0, 4021, 4116, 1415, 1423, 3997, 3994,    0,
     3993,    0, 4116, 1462, 1488, 1476, 1047, 4029, 4026, 4029,
     4116, 1435, 1497, 1550, 1496, 1612, 1559, 1602, 1078, 3989,
     4116, 1631, 1664, 1726, 1437, 4025, 4022, 4025, 4116, 1522,
     1654, 1735, 1544, 1717, 1747, 1482, 4116, 1651, 3985, 1658,
     1786, 1846, 1695, 1774, 1783, 1461, 3984, 1516, 4020, 4017,

     1413, 1476, 4013, 1524, 4017, 4014, 1462, 1495, 1545, 1571,
     1910, 1663, 1807, 1961, 1514, 1975, 1838, 4116, 1563, 1777,
     1989, 1575, 4015, 4012, 1527, 1532, 4008, 1586, 4012, 4009,
     1555, 1556, 3976, 1565, 3972, 3971, 3970,    0, 3969,    0,
     4116, 1593, 1554, 1395, 1488, 1592, 1546, 1607, 1637, 1660,
     1586, 1673, 1642, 1645, 1589, 1643, 1662, 1711, 1715, 1701,
     1609, 1749, 1755, 1688, 1767, 1759, 1702, 1769, 1497, 3971,
     1781, 3967, 3966, 1785, 3968, 1720, 1644, 3967, 1776, 3966,
     1784, 1280, 1820, 1823, 1783, 1821, 1833, 1780, 1832, 3965,
     1792, 3964, 1843, 1837, 1845, 1848, 1846, 1847, 1858, 1840,

     1887, 1864, 3963, 1866, 1886, 3962, 1885, 1888, 1889, 1903,
     1924, 1909, 1935, 1951, 1952, 1953, 1958, 1961, 1963, 1606,
     1964, 1962, 1905, 1965, 1968, 1966, 1980, 1983, 1904, 1970,
     1982, 3961, 1987, 1992, 1993, 3960, 1997, 3959, 1995, 2050,
     2053, 3955,    0, 3954,    0, 3953, 3952, 3951,    0, 3950,
        0, 2060, 3949, 3980, 2020, 2025, 2044, 3984, 3981, 3984,
     4116, 2089, 2122, 2184, 2045, 3981, 3978, 3981, 4116, 2069,
     2112, 2193, 3941, 3972, 2083, 2086, 2071, 3976, 3973, 3976,
     2039, 4116, 2108, 2201, 2046, 4116, 2101, 2171, 2132, 3973,
     3970, 2187, 2191, 2113, 2228, 2059, 2115, 2242, 2224, 4116,

     2150, 3971, 3968, 3971, 4116, 2152, 2267, 3963, 3962, 2115,
     2281, 2253,  984, 2150, 4116, 2267, 2297, 2188, 4116, 2262,
     2306, 2163, 3966, 3963, 2287, 2291, 2366, 2375, 2437, 2278,
     2336, 2156, 2300, 2401, 3927, 3958, 3957, 3924, 3923, 3922,
        0, 3921,    0, 3920,    0, 3919,    0, 2050, 2108, 3921,
     2177, 1730, 2044, 2202, 2215, 2221, 2269, 2220, 2180, 2223,
     2260, 2278, 2294, 2289, 2295, 2317, 2292, 2311, 2305, 1937,
     2319, 2259, 2298, 2348, 2350, 2351, 2356, 3917, 3915, 3914,
        0, 3910,    0, 2369, 2327, 3912, 2362, 2370, 2375, 3908,
     2365, 2377, 2376, 2380, 2410, 3907, 2411, 2393, 2412, 2413,

     2417, 3903, 2421, 2418, 2422, 3902, 2423, 2426, 2352, 2424,
     3898, 3897, 3893, 2430, 2431, 2434, 2381, 2437, 3892, 2436,
     2219, 2438, 2440, 2441, 2443, 2449, 2459, 2446, 3888, 3887,
     2451, 2463, 2464, 3883, 2448, 2461, 2467, 2468, 2470, 2472,
     3882, 2473, 3934, 3874,    0, 3870,    0, 3869,    0, 3865,
        0, 2532, 2493, 3896, 3835, 3834, 2572, 3853, 3884, 2494,
     2495, 2204, 3881, 3878, 3878, 2545, 2505, 3870, 3809, 3808,
     2509, 3864, 3861, 2482, 2526, 3854, 2520, 3858, 3850, 2537,
     2538, 3846, 2539, 2540, 2521, 3847, 3844, 3844, 2624, 2634,
     2696, 3804, 2563, 3837, 3834, 2536, 2549, 3825, 2643, 2558,

     2660, 2686, 3792, 2564, 3823, 3820, 2566, 2568, 3779,    0,
     3778,    0, 3772,    0, 3771,    0,    0,    0, 3770,    0,
     2558, 2485, 2568, 2562, 2651, 2570, 2569, 2524, 2628, 2476,
     2624, 2447, 2620, 2629, 2634, 2638, 2636, 2670, 2650, 2640,
     2674, 2679, 2639, 2677, 2676, 2573, 2680, 2716, 2682, 3766,
        0, 3760,    0, 3759,    0, 3753,    0, 2684, 2574, 2683,
     2686, 3755, 3749, 2689, 2690, 2688, 2699, 3748, 3742, 2693,
     3741, 2700, 2692, 2741,  424, 3712, 2709, 2713, 3711, 3705,
     2714, 2717, 2715, 3704, 2718, 3698, 3697, 3691, 2727, 3690,
     2721, 3680, 2728, 2723, 2722, 2733, 3679, 3670, 2736, 2738,

     2739, 3669, 2740, 2742, 3663, 3718, 4116,    0,    0, 4116,
        0,    0,    0,    0, 3630, 2801, 2761, 3684, 3623, 3622,
     3618, 3672, 3666, 2762, 3665, 3604, 3603, 2841, 3620, 3651,
     4116, 2781, 3650, 3647, 3634, 4116, 2791, 2812, 3626, 3588,
        0, 3587,    0, 3583,    0, 3582,    0, 3578, 2793, 2785,
     3580, 2763, 2786, 2828, 2791, 2822, 2748, 2792, 2796, 2799,
     2800, 2817, 3572, 2746, 2818, 2819, 2825, 2820, 2821, 2872,
     2836, 2838, 2523, 2845, 2846, 2850, 2852, 2831, 2861, 2855,
     3568,    0, 3563,    0, 3562,    0, 3556,    0, 3558, 3552,
     2853, 2857, 2864, 2863, 3551, 3545, 2865, 2867, 3544, 2898,

     3540, 3539, 2870, 3535, 3534, 2871, 2874, 2876, 3530, 2877,
     2879, 3529, 3525, 2886, 3518, 2875, 3517, 2882, 3508, 3507,
     3480, 3479, 2937, 3528, 2899, 2901, 2927, 3532, 3524, 3527,
     3473, 3472, 3468, 3467,    0, 3459, 3458, 3451, 3450, 3448,
     3447, 3441, 2946, 2928, 3440, 2910, 2915, 3436, 2917, 2918,
     2919, 2923, 2920, 2921, 2922, 2926, 2929, 2931, 2932, 2967,
     2975, 3435, 2947, 2948, 2953, 2952, 2954, 3431, 2958, 2971,
     2962, 3427, 3419, 3418, 3415,    0, 3410, 3403, 2960, 2963,
     3405, 2964, 2965, 2966, 3399, 3398, 2968, 3392, 3391, 2969,
     2974, 2970, 3385, 3384, 2972, 3375, 3374, 3344, 3343, 2988,

     3368, 3312, 3307,    0,    0, 3329, 3323, 3322, 3314, 3013,
     3015, 3012, 2983, 3316, 3297, 2984, 3296, 2985, 2998, 2991,
     2995, 2999, 2997, 3002, 3292, 3003, 3025, 3291, 3004, 3008,
     3287, 3010, 3019, 3020, 3024, 3026,    0, 3283, 3279, 3278,
     3028, 3029, 3277, 3276, 3031, 3269, 3033, 3034, 3036, 3268,
     3264, 3261, 3260, 3256, 3232, 3248, 3247, 3246, 3243, 3066,
     3245, 3229, 3222, 3221, 3039, 3040, 3043, 3044, 3048, 3049,
     3055, 3051, 3218, 3213, 3210, 3056, 3192, 3191, 3050, 3061,
     3141, 3140, 3139, 3141, 3062, 3063, 3065, 3076, 3069, 3135,
     3133, 3132, 3124, 3122, 2756, 2652, 3070, 3077, 2397, 3080,

     2353, 3084, 3085, 2299, 3086, 3088, 2261, 3092, 2202, 2137,
     2136, 2062, 2064, 1999, 3087, 3093, 1870, 1865, 1778, 1713,
     3096, 3097, 3098, 3099, 3100, 3102, 1549, 1439, 1435, 1405,
     1354, 3104, 1180, 1122, 3106,  890,  827, 3110, 3114,  780,
      700,  632,  549, 3111, 3113, 3117, 3115, 3121, 3118, 3122,
      266, 3123, 3124,  223,  106, 4116, 3204, 3215, 3226, 3237,
     3245, 3256, 3267, 3278, 3289, 3295, 3303, 3308, 3313, 3321,
     3326, 3331, 3336, 3341, 3346, 3357, 3362, 3365, 3370, 3375,
     3380, 3382, 3387, 3392, 3400, 3411, 3422, 3427, 3432, 3434,
     3439, 3441, 3446, 3448, 3453, 3455, 3460, 3462, 3467, 3475,

     3480, 3485, 3490, 3495, 3497, 3502, 3507, 3515, 3520, 3525,
     3536, 3541, 3546, 3548, 3553, 3555, 3560, 3565, 3567, 3572,
     3574, 3579, 3584, 3589, 3594, 3599, 3601, 3606, 3608, 3613,
     3615, 3620, 3625, 3630, 3635, 3640, 3645, 3647, 3652, 3660,
     3665, 3670, 3672, 3677, 3679, 3684, 3686, 3691, 3693, 3698,
     3703, 3705, 3710, 3712, 3717, 3719, 3724, 3726, 3728, 3733,
     3738, 3740, 3745, 3747, 3752, 3754, 3759, 3761, 3766, 3774,
     3779, 3781, 3783, 3785, 3787, 3789, 3791, 3796, 3798, 3803,
     3805, 3810, 3812, 3817, 3819, 3824, 3829, 3831, 3836, 3838,
     3843, 3845, 3850, 3852, 3857, 3862, 3867, 3872, 3874, 3879,

     3884, 3889, 3891, 3896, 3901, 3903, 3905, 3910, 3915, 3917,
     3922, 3927, 3932, 3937, 3942, 3947, 3952, 3957, 3962, 3967
    } ;

static const flex_int16_t yy_def[1521] =
    {   0,
     1356,    1, 1357, 1357, 1358, 1358, 1359, 1359, 1360, 1360,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1361, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1361, 1356,
     1356, 1356, 1356, 1361, 1356, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1356, 1356, 1356, 1356, 1356, 1362, 1356,
     1356, 1356, 1363, 1356, 1356, 1364, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1361, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1365,

     1356, 1356,   30, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1366,   30, 1356, 1356,   31, 1356, 1356, 1356,
     1356, 1356, 1356,   31, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1367, 1356,
     1356, 1356, 1356, 1356, 1361, 1356, 1368, 1369, 1356, 1356,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1370, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1356, 1356, 1356, 1356, 1362, 1362, 1362,
     1356, 1362, 1356, 1363, 1356, 1356, 1356, 1356, 1371, 1372,
     1373, 1364, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1374, 1375, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356,  262, 1376, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356,  114,  278, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1377, 1356, 1378, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1379, 1356, 1380, 1381, 1382, 1383,
     1356, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1385, 1356, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,

     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1386, 1387, 1356, 1356, 1388, 1389, 1390,
     1391, 1392, 1393, 1356, 1356, 1356, 1356, 1356, 1394, 1395,
     1396, 1397, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,  464,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,  482, 1356,
     1356, 1356, 1356, 1356, 1356, 1356,  492, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1398, 1399,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,  511, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1400, 1356, 1401, 1402, 1403, 1404, 1405, 1406,
     1356, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1408,
     1356, 1409, 1410, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1411,
     1356, 1412, 1413, 1414, 1415, 1416, 1416, 1417, 1418, 1419,
     1420, 1356,  652, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356,  672, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1421,
     1356, 1421, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1422, 1356, 1356, 1423, 1424, 1425,
     1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1434, 1435, 1436,
     1437, 1438, 1439, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,

     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
     1448, 1356, 1356, 1356, 1356, 1356, 1356,  857, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1449, 1356, 1356, 1356, 1356, 1356, 1356,  890, 1356,

     1356, 1356,  899, 1356, 1356, 1356, 1356, 1356, 1450, 1451,
     1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1462,
     1463, 1464, 1465, 1466, 1467, 1468, 1469, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,

     1460, 1460, 1460, 1460, 1460, 1470, 1356, 1471, 1472, 1356,
     1473, 1474, 1475, 1476, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1028, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1477,
     1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,

     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1494, 1495,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1496, 1477, 1497, 1479, 1498, 1481, 1483, 1499, 1485, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1500, 1486, 1501, 1488, 1502, 1490, 1492, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1503, 1494, 1504, 1495, 1356,

     1356, 1356, 1356, 1505, 1506, 1497, 1507, 1508, 1499, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1509, 1500, 1501, 1510,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1511, 1503, 1512, 1504, 1356, 1513, 1514, 1507, 1508, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1515, 1516, 1510, 1460, 1460, 1460, 1460, 1460, 1460, 1511,
     1512, 1517, 1513, 1518, 1514, 1460, 1460, 1460, 1460, 1460,

     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1519, 1515,
     1520, 1516, 1460, 1460, 1460, 1460, 1460, 1497, 1517, 1518,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1501, 1519,
     1520, 1460, 1460, 1497, 1460, 1460, 1460, 1460, 1460, 1460,
     1501, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460,    0, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356
    } ;

static const flex_int16_t yy_nxt[4208] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   31,   31,   31,   31,   31,
       31,   32,   33,   34,   35,   36,   37,   38,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   39,   18,   18,
       18,   18,   18,   18,   39,   18,   18,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       18,   53,   18,   54,   55,   18,   56,   18,   57,   58,
       59,   60,   61,   62,   18,   18,   63,   64,   65,   66,
       67,   68,   74,   74,   77,   77,   68,   86,   87,   69,

       77,   77,   88,   74,   74,   78,   79,   80,   80,   80,
       78,   80,   79,   81,   81,   81,   80,   82,   90,   83,
       83,   91,  133,  134,   89,   97,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  128,   85,   92,   99,
       83,   94,   95,   83,  100,  159,  156,  160,   75,   75,
       75,   75,   85,   85,  304,  198,  129,  101,  130,  131,
      153,  204,  223,   85,   85,  154,  157,  161,  162,  163,
      164,   85,  165,  166,   85,  167,  177,  168,  173,   85,
      174,  169,  170,  194,  175,  258,  176,   85,   85,  196,
      171,  178,  195,  158,   85,  306,  197,   96,  102,   85,

      103,  103,  103,  103,  103,  103,  103,  104,  104,  371,
       85,  201,  259,  155,  202,  349,  203,  105,   85,  226,
      106,   83,   85,  107,  108,  109,  110,  111,  329,  224,
      330,  182,  112,  113,  111,  183,  199,   85,   85,  114,
      184,  200,  105,  179,  185,  106,  281,  281,  115,  108,
      180,  116,  186,  110,  187,  111,  181,   85,  329,  112,
      330,  153,  113,  188,  111,  102,  154,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   85,  329, 1356,  330,
      382,   85,  215,  225,   85,  282, 1356,  106,  210,  211,
      118,  119,  120,  121,  122,   85,  212,  367,  213,  123,

      189,  122,  329,  214,  330, 1356,  124,  329,  190,  330,
      191,   85,  106,  192,  155,  125,  119,  193,  126,  326,
      121, 1356,  122,   85,   85,   85,  123,  307,  216,   85,
     1356,  122,  135,  329,  331,  330,  136,  137,  217,  138,
       85,  139,  140,  218,  141,  351,  142,  219,  421,  329,
     1356,  330,  205,  206,  332,  329,   85,  330,  143,  144,
      145,  220,  207,  208,  329,  209,  330,  331,  221,  222,
      227,   79,   80,   80,   80,  227,  230,  231,  228,  281,
      281,  230,  146,  147,  329,  148,  330,  149,   78,   79,
       80,   80,   80,   78,  329,  333,  330,  232,  232,  232,

      232,  232,  232,  232,  232,  232,   80,   79,   80,   80,
       80,   80,  150,  151,  235,  236,  110,  286,  329,  235,
      330,  237,   85,   85,   85,  287,  237,   80,   79,   81,
       81,   81,   80,  346,  352,  238,  238,  238,  238,  238,
      238,  238,  286,  286,   85,  370, 1101,   85,  286,  237,
      153,  287,  287,  348,   85,  154,  287,  278,  278,  278,
      278,  278,  278,  278,   85,  344,   85,  239,  286,  347,
       85,  237,  110,  286, 1356,   85,  237,  237,  287,  342,
      237,  237,   85,  287,  345,  380,  343,  395,  237,   85,
     1356,  237,   85,  237,  240,  237,  279,  241,  243, 1356,

       85,   85,  244,  245,   85,  246,  399,  247,  248,  368,
      249,   85,  250,  381,  299,  287,  300,  301,   85, 1356,
      121,  308,  350,   85,  251,  252,  253,  369,  102,  309,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  302,
      287,  392,  303,  503,  301,  383,  308,  297,  254,  255,
      106,  256,  283,   85,  283,   85,  309,  284,  284,  284,
      284,  284,  284,  284,  284,  284,   85,   85,   85,  280,
       85,  417,  294,  393,  295,  106,  372,  296,  297,  257,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  373,
      374,  384,   85,  394,   85,  286,  285,  375,  308,  263,

      264,  265,   85,  287,  266,  267,  309,   85,  267,   85,
      376,   85,   85,  444,  385,  445,  396,  389,   85,  268,
      286,  402,  298,  308,  263,  264,  265,  377,  390,  266,
      287,  267,  386,  309,  294,  378,  295,  391,  379,  296,
      297,  267,  271,  271,  271,  271,  271,  271,  271,  271,
      271,   85,   85,   85,  453,   85,   85,  286,  298,  387,
      308,  272,  273,  274,  415,  287,  275,  276,  309,  288,
      276,  289,  290,  400,  388,  401,  414,   85,  291,  453,
       85,  277,  286,   85,  121,  308,  272,  273,  274,   85,
       85,  275,  287,  276,  292,  309,  545,  293,  310,  290,

      311,  312,   85,  276,  403,  291,  316,  313,  317,  416,
      420,  318,  319,  321,  309,  322,  323,   85,   85,  316,
      409,  317,  418,  314,  318,  319,  315,   85,  312,  308,
      320,  153,  412,  397,  313,   85,   85,  309,  324,  309,
      398,  325,  308,  323,  419,   85,  410,  413,   85,  423,
      309,   85, 1356,   85,  308,   85,  428,  424,  426,   85,
      427, 1356,  546,  411,  309,   85,  429,  308,  425,  320,
      353,  354,  355,  287,  356,  357,   85,  309,  358,  433,
      359,   85,   85,   85,  422,  360,  361,  362,  363,  364,
      404,  430,   85,  481,  405,  431,  230,  231,  432,  527,

      287,  230,  406,  319,  407,  408,  227,   79,   80,   80,
       80,  227,  550,  444,  228,  445,  471,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  230,  231,  235,  236,
      444,  230,  445,  235,   85,  434,  231,  444,   85,  445,
      434,  471,  435,  446,  444,  574,  445,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  436,  436,  436,  436,  436,
      436,  436,  445,  445,  444,  291,  445,  444,  447,  445,
      444,  444,  445,  445,  444,   85,  445,  290,  444,  444,
      445,  445,  329,  457,  330,  458,  291,  111,  459,  460,

      309,  329,  291,  330,  437,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  122,  453,  453,  453,   85,  291,
      453,  453,  111,  291,  263,  264,  265,  309,  286,  266,
      267,  542,  475,  267,  476,  290,  287,  477,  478,  122,
      453,  453,  453,   85,  268,  453,  291,  453,   85,  263,
      264,  265,  286,  286,  266,  471,  267,  301,  111,   85,
      287,  543,  454,  287,  454,  313,  267,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  461,  286,  462,  552,
      471,   85,  461,  111,  471,  461,  471,  287,  111,  471,
      471,  102,  313,  278,  278,  278,  278,  278,  278,  278,

       85,  461,  535,  462,  323,  122,  456,  559,  461,  471,
      122,  471,  301,  111,  471,  313,  471,  548,  461,  464,
      464,  464,  464,  464,  464,  464,  464,  464,   85,  536,
      122,  312,  279,  711,  323,  122,   85,   85,  465,  466,
      467,   85,  313,  468,  469,  564,  544,  469,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  312,  470,  547,
      557,  711,   85,  465,  466,  467,  313,  498,  468,  499,
      469,  654,  500,  501,   85,  267,  472,  560,  472,  549,
      469,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      479,  502,  480,  313,   85,   85,  479,   85,  291,  479,

      551,  272,  273,  274,   85,   85,  275,  276,   85,  563,
      276,   85,  558,  561,  562,  479,   85,  480,  565,  572,
      474,  568,  479,  579,  661,  291,  272,  273,  274,  569,
       85,  275,  479,  276,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  276,   85,   85,  573,   85,  575,  661,
      283,  588,  283,  576,  106,  284,  284,  284,  284,  284,
      284,  284,  284,  284,   85,  498,  589,  499,   85,  577,
      500,  501,  504,  307,  505,   85,  308,  506,  507,  106,
      482,  482,   85, 1356,  309,   85,  504,  566,  505,  583,
      584,  506,  507,   85,  578,  111,  291,   85,   85,   85,

      581,  308,  567,  483,  484,  485,  486,  487,  590,  111,
      508,  309,  488,  580,  487,  502,  585,  582,   85,  489,
      111,   85,  508,  291,  591,   85,  586,   85,  490,  484,
      587,  491,   85,  486,  111,  487,  153,   85,   85,  488,
      605,  593,  596,  592,  487,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  308,  493,   85,  494,   85,   85,  495,
      496,  309,   85,  496,  594,   85,   85,  598,   85,   85,
       85,   85,  595,  599,  497,   85,   85,  601,  308,  493,
      602,  494,   85,  307,  495,  553,  496,  603,  309,  597,

      600,  554,  555,  556,  610,  604,  496,  510,   85,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  522,  606,
      523,   85,   85,  524,  525,  511,  511,  511,  511,  511,
      511,   85,  512,  513,  514,  515,  516,   85,   85,  611,
      613,  517,  526,  518,  607,  789,  608,   85,  519,  313,
      511,  511,  511,  511,  511,  511,   85,  520,  513,  609,
      521,  522,  515,  523,  516,   85,  524,  525,  517,   85,
      615,   85,  528,  518,  529,   85,  313,  530,  531,  528,
       85,  529,  612,   85,  530,  531,   85,  614,   85,   85,
       85,  616,  313,   85,  621,  122,  532,  617,  618,  623,

       85,   85,  122,   85,   85,  619,  626,   85,  624,  620,
      622,  526,  625,   85,  630, 1356,  628,   85,  629,  313,
      122,  632,   85,  627,   85,   85,   85,  122,  634,  532,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  631,
       85,  637,  636,   85,   85,  633,  635,  434,  231,  444,
      231,  445,  434,   85,  435,  638,  229,  444,  657,  445,
      658,  674,  639,  659,  660,  276, 1356,  291,  750,  326,
      237,  237,  237,  237,  237,  237,  237,  436,  436,  436,
      436,  436,  436,  436,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  454,  291,  454, 1341,   85,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  700,  111,  641,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  681,  263,
      291,  265,  700,  111,  266,  267,  682,  661,  267,  661,
      708,  111,  661,  661,  501,  677,   85,  678,  709,  653,
      679,  680,  507,  681,  263,   85,  265,  291,  463,  266,
      714,  267,  661,  682,  661,  751,  111,  661,  715,  661,
      777,  267,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  313,  665, 1356,  666,  714,  313,  667,  668,  486,
      681,  465,  466,  467,  711,  715,  468,  469,  682,  736,

      469,  122,  122,  525,   85,  661,  712,   85,  313,  753,
      737,  470,   85,  313,  531,  681,  465,  466,  467,  738,
      711,  468,  711,  469,  735,  682,  122,  122,  749,  662,
      661,  662,  713,  469,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  669,   85,  670,  739,   85,  711,  669,
       85,   85,  669,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  748,  752,   85,   85,  757,   85,  669,  761,
      670,  823,  768,  664,  754,  669,  278,  278,  278,  278,
      278,  278,  278,  104,  104,  669,  672,  672,  672,  672,
      672,  672,  672,  672,  672,   85,  694,  682,  695,  696,

       85,   85,   85,   85,  681,  272,  755,  274,  515,  714,
      275,  276,  682,  759,  276,  481,  786,  715,   85,  760,
       85,  697,  682,  762,  698,  673,  696,  756,  486,  681,
      272,   85,  274,  763,  714,  275,  700,  276,  700,  682,
      758,  700,  700,  472,  715,  472,   85,  276,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  482,  482,   85,
       85,  700,  683,  700,  684,  685,  700,  772,  700,   85,
      689,  686,  690,   85, 1356,  691,  692,  767,   85,  775,
      483,  484,  485,  486,  487,  764,  765,  687,   85,  488,
      688,  487,  685,  681,  693,  766,  489,  701,  686,  702,

      785,  682,  703,  704,  924,  490,  484,   85,  491,  689,
      486,  690,  487,   85,  691,  692,  488,   85,  681,  771,
      700,  487,  769,  714,  705,   85,  706,   85,  682,  770,
      705,  715,  681,  705,   85,  778,  773,  774,   85, 1356,
      682,   85,   85,   85,  776,  700,  787,  515,  714,  705,
       85,  706,  716,  795,  717,  718,  705,  681,  715,  693,
      784,  719,  779,  788,  792,  797,  705,  682,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  720,   85,   85,
      721,   85,  718,  730,  715,  731,  732,  493,  719,  494,
       85,   85,  495,  496,  791,   85,  496,  794,   85,  796,

      790,   85,  793,   85,   85,   85,   85,  497,  733,  715,
      809,  734,  493,  732,  494,  799,   85,  495,  805,  496,
      798,  801,   85,  802,   85,  800, 1334,  803,   85,  496,
      510,  804,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  808,  807,   85,   85,   85,   85,   85,  511,  511,
      511,  511,  511,  511,  806,  512,  513,  514,  515,  516,
      942,   85,   85,   85,  517,  810,  518,   85,  826,  812,
      813,  519,  811,  511,  511,  511,  511,  511,  511,  834,
      520,  513,   85,  521,  722,  515,  723,  516,  815,  724,
      725,  517,  727,   85,  727,   85,  518,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  814,  714,  726,   85,
       85,   85,  722,  816,  723,  715,   85,  724,  725,   85,
       85,   85,   85,   85,   85,  820,   85,  825,   85,  817,
      818,  824,  714,  819,  822,  714,  729,  821,   85,  835,
       85,   85,  715,  715,  828,   85,  829,  830,  827,  831,
       85,   85,  231,   85,  832,   85,  842,   85,  843,  833,
      714,  839,  726,  836,  841,  838,  453,  837,  854,  859,
      715,  453,  461,  469,  840,  237,  237,  237,  237,  237,
      237,  237,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  453,  862,  682,  863,  868,  453,  864,  865,  479,

      686,  263,   85,  265,  267,  487,  266,  267,   85,  267,
      267,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      682,  653,   85, 1356,  925,  921,  263,  686,  265,  471,
      487,  266,  471,  267,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  267,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  685,  471,  686,  876,  471,  696,  487,
      692,  487,  686,  465,  711,  467,   85,  276,  468,  469,
      276,  685,  469,  671,  882,  885,  712,  886,  496,  922,
      887,  888,  686,  858,  487,  696,  487,  898,  465,  686,
      467,  725,  711,  468,  871,  469,  872, 1331, 1356,  873,

      874,  662,  518,  662,  715,  469,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  871,  686,  872,  518, 1018,  873,
      874,  715,  669,  681,  272,   85,  274,  681,   85,  275,
      276,  682,  719,  276,  875,  682,  482,  482,  875,  931,
      923,  877,  686,  878,  673,  686,  879,  880,  681,  272,
       85,  274,  681, 1330,  275,  877,  276,  878,  682,  719,
      879,  880,  682,   85,  487,  881,  276,   85,   85,   85,
      926,   85,  686,  930,  932,  699,  927,  988,  487,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  889,  487,

      889,  928,  711,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  718,  487,  892,  881,  719,   85,   85,   85,
      893,  719,  894,  732,  518,  895,  896,   85,  707,  893,
      711,  894,  718,  714,  895,  896,   85,  714,  933,  944,
      929,  715,  891,  719,  897,  715,  518,   85,  719,  518,
       85,  719,   85,   85,  934,  939,   85,   85,  714,  904,
      719,  905,  714,   85,  906,  907,  936,  935,  715,   85,
      732,  518,  715,  945,  937,   85,  941,   85,  719,  897,
      940,  980,  518,  908,  938,   85,  943,  719,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  899,  899,  899,

      899,  899,  899,  899,  899,  899,   85,  518,   85,   85,
       85,   85,  960,  961,   85,  946,  900,  947,  901,  949,
       85,  902,  900,   85,  904,  900,  905,   85,   85,  906,
      907,  948,  958,   85,   85,   85,  903,  962,   85,   85,
      964,  900,  963,  901,  974,  959,  902,  518,  900,  966,
      975,   85,  985,  967,  727,   85,  727,  965,  900,  728,
      728,  728,  728,  728,  728,  728,  728,  728,   85,   85,
       85,   85,  518,  970,  908,   85,   85,  968,  969,   85,
       85,   85,   85,  972,   85,  977,  978,  971,   85,   85,
      973,  976,   85,  979,   85,   85,   85,  982,   85,   85,

      981,   85,  987,  989,   85,   85,   85,   85, 1063,   85,
      994,  983,  986,  992,  984,  993,  991,   85,  996,   85,
      990,   85,   85,  999, 1000,   85,   85,  995,   85,  997,
       85,   85,  998, 1022,   85, 1002,  686,  874, 1001,  453,
      661,  661, 1061,   85, 1023, 1025, 1003, 1004,  880,  705,
     1051,  471, 1164, 1005,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  686,  453,  661,  661,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  471,  267,  469,  469,
      686,   85,   85,  487,  487,  700,  700, 1030, 1039,  276,
      719,  896,  907,  852,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  719, 1031, 1059,  866,  686,  487,  487,
      700,  700,  518,  465,  518,  467,   85,  719,  468,  469,
       85, 1049,  469,  496,  496, 1053,   85,   85,   85, 1031,
      719,   85,   85,  858, 1050, 1052, 1077,  518,  465,  518,
      467, 1057, 1090,  468, 1058,  469,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  469, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028,  899,  899,  899,  899,  899,
      899,  899,  899,  899, 1054,  900, 1055,  901,   85, 1056,
      902,  900,   85, 1032,  900, 1033,   85,   85, 1034, 1035,
     1065, 1064,   85, 1060,   85, 1029,   85,   85,   85, 1062,

      900, 1071,  901, 1073,  903,  902, 1031,  900,   85,   85,
       85, 1067, 1074,  889, 1066,  889, 1068,  900,  890,  890,
      890,  890,  890,  890,  890,  890,  890, 1036,   85, 1037,
     1070, 1031,   85, 1036,   85,   85, 1036,   85,   85, 1079,
       85,   85,   85, 1076,   85, 1069,   85,   85,   85, 1072,
       85,   85, 1036, 1092, 1037, 1075, 1078,   85,   85, 1036,
     1091, 1094, 1080, 1089, 1097, 1100, 1096,   85, 1095, 1036,
     1093,   85,   85,   85,   85,   85,   85, 1099, 1098,   85,
       85,   85, 1106, 1107, 1102,   85,   85, 1109, 1108, 1110,
     1111,   85, 1104, 1103,   85, 1105,   85,   85,   85,   85,

       85, 1113, 1112, 1114,   85, 1124,   85,  661,  700,  900,
     1154, 1115, 1116, 1148, 1127, 1146, 1128, 1356, 1117, 1129,
     1130,   85, 1118,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  661,  700,  899,  899,  899,  899,  899,  899,
      899,  899,  899,   85,   85,  469,  496, 1142, 1147,   85,
       85,   85, 1144, 1141,   85, 1149, 1145,   85,   85, 1143,
     1151, 1152, 1016, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1140, 1038, 1150,   85,   85,   85,   85,   85,
       85, 1158,  900,   85,  901, 1170,   85,  902,  900,   85,
     1156,  900, 1157, 1153,   85, 1160,   85, 1162, 1155, 1169,

     1159, 1161, 1029,   85,   85, 1163, 1165,  900,   85,  901,
       85,   85,  902,   85,  900,   85, 1167, 1166, 1168,   85,
     1179,   85,   85,   85,  900,   85, 1171, 1186,   85,   85,
       85, 1181,   85,   85,   85,   85, 1180,   85, 1182, 1190,
       85, 1183, 1194, 1184,   85, 1031, 1187, 1031, 1185, 1188,
     1191, 1201, 1193, 1195, 1189, 1036,   85, 1213, 1192, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,   85, 1210,
     1031, 1211, 1031,   85, 1212,   85,   85,   85,   85,   85,
       85,   85, 1218,  900,   85,  900,   85,   85, 1220,   85,
       85, 1227, 1225, 1217, 1214, 1216, 1219, 1228, 1123, 1215,

     1235, 1223, 1221, 1226,   85,   85,   85, 1222, 1229, 1230,
       85,   85,   85, 1224, 1231, 1233,   85, 1232,   85, 1234,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85, 1243,   85,   85, 1031, 1236, 1241, 1260, 1262, 1261,
     1244,   85,   85,   85, 1242, 1250, 1246, 1245, 1247,   85,
     1248, 1249, 1267,   85, 1273,   85,   85,   85, 1270, 1031,
       85,   85,   85, 1271, 1265, 1274,   85, 1263,   85, 1264,
       85,   85,  900,   85, 1266, 1268, 1269,   85,   85, 1272,
     1277, 1278,   85,   85,   85, 1279,   85,   85, 1275,   85,
     1276,   85,   85, 1280,   85, 1296, 1284,   85,   85, 1288,

     1286,   85,   85, 1285, 1299, 1298,   85,   85,   85,   85,
     1289, 1300, 1287,   85,   85, 1301, 1304, 1306, 1297,   85,
       85,   85, 1308,   85,   85, 1302, 1305,   85,   85, 1313,
     1307, 1303, 1315, 1314,   85,   85, 1317, 1321,   85, 1316,
     1322, 1323,   85,   85,   85,   85,   85, 1326, 1325, 1327,
       85,   85, 1324, 1328,   85,   85,   85,   85,   85, 1337,
       85, 1339,   85, 1340,   85, 1332, 1333, 1338,   85,   85,
     1336,   85,   85,   85, 1335,   85,   85, 1345, 1347,   85,
       85,   85,   85, 1320, 1342, 1356, 1343, 1346, 1349, 1344,
     1351, 1348, 1355, 1319, 1356, 1350, 1356, 1352, 1353,   85,

     1356, 1312, 1310, 1354,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   84,   85,
       85,   84,   84,   84,   84,   84,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  234,   85,  234,
      234,   85,  234,  234,  234,  234,   85,  234,  242,   85,
       85,  242,  242,  242,  242,  242,  242,   85,  242,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      305,  305,  305,   85, 1356,  305,  335, 1356, 1295, 1293,
      335,  335,  335,  335,  337,  337, 1036, 1356,  337,  339,
      339, 1291, 1356,  339,  365, 1290,   85,   85,  365,  365,
      365,  365,  438,  438,   85,   85,  438,  440,  440, 1283,
     1356,  440,  442,  442, 1356,   85,  442,  449,  449,   85,
       85,  449,  451,  451,   85,   85,  451,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  509,  509,
      305,  305,  305,  533,   85, 1356,  533,  533,  533,  533,
      533,  537,  537, 1259, 1258,  537,  337,  337,  539,  539,
     1356, 1036,  539,  339,  339,   84, 1036, 1255,   84,   84,

       84,   84,   84,  570, 1356, 1254,  570,  570,  570,  570,
      570,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  642,  642, 1356, 1252,  642,  438,  438,
      644,  644,   85,   85,  644,  440,  440,  646,  646,   85,
       85,  646,  442,  442,  648,  648,   85,   85,  648,  449,
      449,  650,  650,   85, 1356,  650,  451,  451,  710,  710,
      710, 1356,  710,  509,  509,  509, 1356,  509,  533, 1239,
     1356,  533,  533,  533,  533,  533,  740,  740, 1238,   85,
      740,  742,  742,   85,   85,  742,  744,  744,   85,   85,

      744,  537,  537,  746,  746,   85,   85,  746,  539,  539,
       84, 1356, 1209,   84,   84,   84,   84,   84,  570, 1356,
     1356,  570,  570,  570,  570,  570,  780,  780, 1356, 1206,
      780,  782,  782, 1356, 1205,  782,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  844,  844, 1036,
     1203,  844,  642,  642,  846,  846, 1202, 1200,  846,  644,
      644,  646,  646,  705,  669,  646,  848,  848, 1199, 1197,
      848,  648,  648,  850,  850,   85,   85,  850,  650,  650,
      710,  710,  710,   85,  710,  511,  511,   85,   85,  511,
      909,  909,   85,   85,  909,  911,  911,   85,   85,  911,

      913,  913,   85,   85,  913,  740,  740,  915,  915,   85,
       85,  915,  742,  742,  917,  917,   85, 1178,  917,  744,
      744,  919,  919, 1177, 1175,  919,  746,  746,   84, 1173,
       85,   84,   84,   84,   84,   84,  950,  950,   85, 1139,
      950,  952,  952, 1137, 1136,  952,  954,  954, 1134, 1132,
      954,  780,  780,  956,  956,  907,  900,  956,  782,  782,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1008, 1008, 1126, 1125, 1008,  844,  844, 1010, 1010,
      896, 1123, 1010,  846,  846, 1012, 1012,  705,  705, 1012,
      848,  848,   84,   84, 1122,  880,   84,  850,  850,  710,

      710,  874,  479,  710, 1040, 1040,  669,  669, 1040,  909,
      909, 1042, 1042, 1121,  461, 1042,  911,  911, 1044, 1044,
     1007,   85, 1044,  913,  913, 1046, 1046,   85,   85, 1046,
      915,  915, 1048, 1048,  917,  917,   84,   85,   85,   84,
       84,   84,   84,   84,  919,  919, 1081, 1081,   85,   85,
     1081,  950,  950, 1083, 1083,   85,   85, 1083,  952,  952,
     1085, 1085,   85,   85, 1085,  954,  954, 1087, 1087,   85,
       85, 1087,  956,  956, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1119, 1119, 1008, 1008, 1010,
     1010, 1120, 1120, 1012, 1012,   84,   84, 1131, 1131,   85,

       85, 1131, 1040, 1040, 1133, 1133,   85,   85, 1133, 1042,
     1042, 1135, 1135,   85, 1088, 1135, 1044, 1044,  335,  335,
     1086, 1084,  335, 1046, 1046, 1138, 1138, 1082,   85, 1138,
     1172, 1172, 1047, 1045, 1172, 1081, 1081, 1174, 1174, 1043,
     1041, 1174, 1083, 1083, 1176, 1176,  907,  907, 1176, 1085,
     1085,  365,  365, 1038,  725,  365, 1087, 1087, 1196, 1196,
      896,  896, 1196, 1198, 1198,  892,  705, 1198, 1204, 1204,
     1027, 1026, 1204,  533,  533, 1024,  880,  533, 1207, 1207,
     1208, 1208,  880,  692, 1208, 1237, 1237,  874,  874, 1237,
      570,  570,  479,  479,  570, 1240, 1240, 1251, 1251, 1021,

      669, 1251, 1253, 1253, 1020, 1019, 1253, 1256, 1256, 1204,
     1204, 1257, 1257, 1017, 1016, 1257,  919,  919,  461,  461,
      919, 1281, 1281, 1282, 1282, 1015, 1014, 1282, 1010, 1010,
     1013, 1011, 1010,   84,   84, 1009, 1007,   84, 1292, 1292,
       85,   85, 1292, 1294, 1294,   85,   85, 1294, 1309, 1309,
       85,   85, 1309, 1311, 1311,   85,   85, 1311, 1318, 1318,
       85,   85, 1318,  335,  335,   85,   85,  335, 1329, 1329,
       85,  957, 1329,  365,  365,  955,  953,  365,  951,   85,
      920,  918,  916,  914,  912,  910,  531,  525,  735,  725,
      725,  507,  501,  496,  884,  883,  692,  692,  479,  870,

      869,  867,  866,  469,  861,  860,  461,  856,  855,  853,
      852,  851,  849,  647,  647,  847,  845,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  783,  781,  571,
      747,  745,  743,  741,  534,  531,  531,  319,  525,  525,
      507,  507,  297,  501,  501,  707,  699,  276,  676,  675,
      671,  267,  656,  655,  651,  649,  445,  445,  647,  645,
      643,   85,   85,   85,  571,  541,  540,  538,  534,  331,
      330,  319,  319,  304,  297,  297,  270,  463,  452,  450,
      448,  445,  444,  443,  441,  439,  231,   85,   85,  366,
      341,  340,  338,  331,  336,  334,  331,  329,  328,  327,

      270,  261,  260,   83,   83,   85,  233,  172,  152,  132,
      127,   85, 1356,   71,   71,   11, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356
    } ;

static const flex_int16_t yy_chk[4208] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    8,    9,   10,    2,   19,   19,    2,

        9,   10,   20,    7,    8,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   16,   24,   16,
       24,   25,   36,   36,   20,   28,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   34,   54,   25,   29,
       25,   27,   27,   27,   29,   43,   41,   43,    7,    8,
        9,   10,   57,   63,  113,   54,   34,   29,   34,   34,
       39,   57,   63,   46, 1355,   39,   41,   44,   44,   44,
       44,   47,   44,   44,   52,   44,   47,   44,   46,   53,
       46,   44,   44,   52,   46,   85,   46,   44,  177,   53,
       44,   47,   52,   41,   56,  113,   53,   27,   30,  167,

       30,   30,   30,   30,   30,   30,   30,   30,   30,  177,
       39,   56,   85,   39,   56,  167,   56,   30,   55,   67,
       30,   67,   49,   30,   30,   30,   30,   30,  136,   65,
      136,   49,   30,   30,   30,   49,   55,   50,   48,   30,
       49,   55,   30,   48,   49,   30,  105,  105,   30,   30,
       48,   30,   50,   30,   50,   30,   48,  184,  137,   30,
      137,   60,   30,   50,   30,   31,   60,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   59,  139,  124,  139,
      184, 1354,   60,   65,  173,  105,  114,   31,   59,   59,
       31,   31,   31,   31,   31,   51,   59,  173,   59,   31,

       51,   31,  142,   59,  142,  114,   31,  144,   51,  144,
       51,   60,   31,   51,   60,   31,   31,   51,   31,  124,
       31,  114,   31,  169, 1351,   61,   31,  114,   60,  214,
      114,   31,   37,  147,  141,  147,   37,   37,   61,   37,
       58,   37,   37,   61,   37,  169,   37,   61,  214,  141,
      114,  141,   58,   58,  143,  143,   62,  143,   37,   37,
       37,   62,   58,   58,  148,   58,  148,  140,   62,   62,
       68,   68,   68,   68,   68,   68,   69,   69,   68,  282,
      282,   69,   37,   37,  140,   37,  140,   37,   78,   78,
       78,   78,   78,   78,  145,  145,  145,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   80,   80,   80,   80,
       80,   80,   37,   37,   75,   75,  107,  107,  151,   75,
      151,   75,  170,  176,  164,  107,   75,   81,   81,   81,
       81,   81,   81,  164,  170,   75,   75,   75,   75,   75,
       75,   75,  107,  110,  166,  176,  975,  162,  115,   75,
      155,  110,  107,  166,  165,  155,  115,  103,  103,  103,
      103,  103,  103,  103,  161,  162,  163,   75,  110,  165,
      194,   75,  115,  115,  103,  182,   75,   75,  110,  161,
       75,   75,  975,  115,  163,  182,  161,  194,   75,  198,
      103,   75,  183,   75,   75,   75,  103,   75,   83,  103,

      155,  174,   83,   83,  168,   83,  198,   83,   83,  174,
       83,  175,   83,  183,  112,  112,  112,  112,  185,  103,
      118,  118,  168,  191,   83,   83,   83,  175,  104,  118,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  112,
      112,  191,  112,  294,  112,  185,  118,  294,   83,   83,
      104,   83,  106,  192,  106,  211,  118,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  193,  178,  179,  104,
      186,  211,  116,  192,  116,  104,  178,  116,  116,   83,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  179,
      179,  186,  180,  193,  195,  116,  106,  180,  121,   98,

       98,   98,  189,  116,   98,   98,  121, 1343,   98,  187,
      180,  190,  201,  244,  187,  244,  195,  189,  181,   98,
      116,  201,  116,  121,   98,   98,   98,  181,  190,   98,
      116,   98,  187,  121,  109,  181,  109,  190,  181,  109,
      109,   98,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  209,  188,  200,  267,  208,  199,  109,  109,  188,
      125,  102,  102,  102,  209,  109,  102,  102,  125,  108,
      102,  108,  108,  199,  188,  200,  208,  203,  108,  267,
      345,  102,  109,  213,  125,  125,  102,  102,  102,  210,
     1342,  102,  109,  102,  108,  125,  345,  108,  119,  108,

      119,  119,  205,  102,  203,  108,  120,  119,  120,  210,
      213,  120,  120,  123,  123,  123,  123,  212,  197,  126,
      205,  126,  212,  119,  126,  126,  119,  207,  119,  120,
      120,  215,  207,  197,  119,  206,  216,  120,  123,  123,
      197,  123,  126,  123,  212,  218,  206,  207,  217,  216,
      126,  219,  279,  220,  120,  346,  219,  216,  218,  223,
      218, 1341,  346,  206,  120,  171,  220,  126,  217,  126,
      171,  171,  171,  286,  171,  171,  222,  126,  171,  223,
      171,  215,  221,  204,  215,  171,  171,  171,  171,  171,
      204,  221,  350,  279,  204,  221,  228,  228,  222,  316,

      286,  228,  204,  316,  204,  204,  227,  227,  227,  227,
      227,  227,  350,  245,  227,  245,  276,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  230,  230,  235,  235,
      247,  230,  247,  235,  367,  232,  232,  250, 1340,  250,
      232,  276,  232,  251,  251,  367,  251,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  238,  238,  238,  238,  238,
      238,  238,  248,  249,  252,  290,  252,  253,  253,  253,
      255,  256,  255,  256,  257, 1337,  257,  288,  249,  248,
      249,  248,  332,  265,  332,  265,  288,  301,  265,  265,

      308,  333,  290,  333,  238,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  323,  263,  265,  263,  342,  292,
      263,  263,  301,  288,  262,  262,  262,  308,  297,  262,
      262,  342,  274,  262,  274,  292,  297,  274,  274,  323,
      263,  265,  263,  343,  262,  263,  292,  263, 1336,  262,
      262,  262,  298,  297,  262,  274,  262,  299,  299,  352,
      298,  343,  264,  297,  264,  312,  262,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  266,  298,  266,  352,
      274,  356,  266,  299,  272,  266,  272,  298,  302,  272,
      272,  278,  312,  278,  278,  278,  278,  278,  278,  278,

      348,  266,  336,  266,  321,  321,  264,  356,  266,  272,
      324,  272,  302,  302,  272,  314,  272,  348,  266,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  344,  336,
      321,  314,  278,  713,  324,  324,  360,  354,  271,  271,
      271,  347,  314,  271,  271,  360,  344,  271,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  310,  271,  347,
      354,  713,  357,  271,  271,  271,  310,  289,  271,  289,
      271,  457,  289,  289,  349,  457,  273,  357,  273,  349,
      271,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      275,  289,  275,  310,  355,  351,  275,  358,  289,  275,

      351,  277,  277,  277,  359,  361,  277,  277,  363,  359,
      277,  364,  355,  358,  358,  275,  374,  275,  361,  366,
      273,  363,  275,  374,  469,  289,  277,  277,  277,  364,
      370,  277,  275,  277,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  277,  371,  382,  366,  383,  370,  469,
      285,  382,  285,  371,  280,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  372,  293,  383,  293,  378,  372,
      293,  293,  303,  280,  303,  362,  319,  303,  303,  280,
      281,  281,  376, 1334,  319,  373,  300,  362,  300,  378,
      378,  300,  300,  375,  373,  303,  293,  377,  379,  384,

      376,  319,  362,  281,  281,  281,  281,  281,  384,  300,
      300,  319,  281,  375,  281,  293,  379,  377,  385,  281,
      303,  380,  303,  293,  385,  381,  380,  386,  281,  281,
      381,  281,  387,  281,  300,  281,  422,  390, 1333,  281,
      398,  387,  390,  386,  281,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  320,  284,  388,  284,  389,  394,  284,
      284,  320,  392,  284,  388,  398,  391,  392,  393,  396,
      353,  395,  389,  393,  284,  403,  422,  394,  320,  284,
      395,  284,  397,  307,  284,  353,  284,  396,  320,  391,

      393,  353,  353,  353,  403,  397,  284,  305,  399,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  311,  399,
      311,  404,  406,  311,  311,  305,  305,  305,  305,  305,
      305,  400,  305,  305,  305,  305,  305,  401,  582,  404,
      406,  305,  311,  305,  400,  582,  401,  408,  305,  311,
      305,  305,  305,  305,  305,  305,  402,  305,  305,  402,
      305,  315,  305,  315,  305,  407,  315,  315,  305,  405,
      408,  409,  322,  305,  322,  414,  311,  322,  322,  325,
      410,  325,  405,  412,  325,  325,  413,  407,  415,  411,
      416,  409,  315,  418,  414,  322,  322,  410,  411,  416,

      423,  424,  325,  417,  420,  412,  418,  421,  416,  413,
      415,  315,  417,  426,  424, 1331,  421,  425,  423,  315,
      322,  426,  428,  420,  429,  430,  431,  325,  428,  325,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  425,
      427,  431,  430,  432,  433,  427,  429,  434,  434,  446,
      435,  446,  434,  544,  434,  432,  435,  447,  462,  447,
      462,  475,  433,  462,  462,  475, 1330,  501,  544,  326,
      436,  436,  436,  436,  436,  436,  436,  437,  437,  437,
      437,  437,  437,  437,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  456,  501,  456, 1329, 1328,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  496,  507,  436,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  486,  455,
      502,  455,  496,  507,  455,  455,  486,  465,  455,  465,
      498,  508,  465,  465,  498,  480,  545,  480,  504,  455,
      480,  480,  504,  486,  455,  569,  455,  502,  463,  455,
      515,  455,  465,  486,  465,  545,  508,  465,  515,  465,
      569,  455,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  525,  467,  519,  467,  515,  526,  467,  467,  483,
      483,  464,  464,  464,  509,  515,  464,  464,  483,  522,

      464,  531,  532,  522,  547,  467,  509, 1327,  525,  547,
      528,  464,  543,  526,  528,  483,  464,  464,  464,  534,
      510,  464,  509,  464,  519,  483,  531,  532,  543,  466,
      467,  466,  510,  464,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  468,  551,  468,  534,  555,  510,  468,
      546,  542,  468,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  542,  546,  620,  548,  551,  561,  468,  555,
      468,  620,  561,  466,  548,  468,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  468,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  549,  488,  488,  488,  488,

      553,  556,  577,  554,  490,  473,  549,  473,  512,  512,
      473,  473,  490,  553,  473,  481,  577,  512,  550,  554,
      557,  488,  488,  556,  488,  473,  488,  550,  490,  490,
      473,  552,  473,  557,  512,  473,  493,  473,  493,  490,
      552,  493,  493,  474,  512,  474,  564,  473,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  482,  482,  560,
      567,  493,  484,  493,  484,  484,  493,  564,  493,  558,
      485,  484,  485,  559, 1320,  485,  485,  560,  576,  567,
      482,  482,  482,  482,  482,  558,  558,  484,  752,  482,
      484,  482,  484,  485,  485,  559,  482,  494,  484,  494,

      576,  485,  494,  494,  752,  482,  482,  562,  482,  491,
      482,  491,  482,  563,  491,  491,  482,  566,  485,  563,
      494,  482,  562,  520,  495,  565,  495,  568,  485,  562,
      495,  520,  491,  495,  579,  571,  565,  566,  588, 1319,
      491,  585,  581,  574,  568,  494,  579,  520,  520,  495,
      591,  495,  513,  588,  513,  513,  495,  491,  520,  491,
      574,  513,  571,  581,  585,  591,  495,  491,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  513,  583,  586,
      513,  584,  513,  517,  517,  517,  517,  492,  513,  492,
      589,  587,  492,  492,  584,  594,  492,  587,  600,  589,

      583,  593,  586,  595,  597,  598,  596,  492,  517,  517,
      605,  517,  492,  517,  492,  594,  599,  492,  600,  492,
      593,  596,  602,  597,  604,  595, 1318,  598, 1317,  492,
      511,  599,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  604,  602,  607,  605,  601,  608,  609,  511,  511,
      511,  511,  511,  511,  601,  511,  511,  511,  511,  511,
      770,  610,  629,  623,  511,  607,  511,  612,  623,  609,
      610,  511,  608,  511,  511,  511,  511,  511,  511,  629,
      511,  511,  611,  511,  514,  511,  514,  511,  612,  514,
      514,  511,  516,  613,  516,  770,  511,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  611,  514,  514,  614,
      615,  616,  521,  613,  521,  514,  617,  521,  521,  618,
      622,  619,  621,  624,  626,  617,  625,  622,  630,  614,
      615,  621,  514,  616,  619,  521,  516,  618,  627,  630,
      631,  628,  514,  521,  625,  633,  626,  627,  624,  628,
      634,  635,  640,  639,  628,  637,  639, 1314,  640,  628,
      521,  635,  521,  631,  637,  634,  655,  633,  657,  665,
      521,  656,  657,  665,  635,  641,  641,  641,  641,  641,
      641,  641,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  655,  670,  681,  670,  677,  656,  670,  670,  677,

      685,  652,  753,  652,  655,  696,  652,  652,  748,  656,
      652,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      681,  652, 1313, 1312,  753,  748,  652,  685,  652,  675,
      696,  652,  676,  652,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  652,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  683,  675,  687,  689,  676,  694,  694,
      689,  697,  683,  663,  710,  663,  749,  675,  663,  663,
      676,  687,  663,  671,  701,  706,  710,  706,  701,  749,
      706,  706,  687,  663,  694,  697,  697,  722,  663,  683,
      663,  722,  710,  663,  688,  663,  688, 1311, 1310,  688,

      688,  664,  732,  664,  714,  663,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  684,  688,  684,  732,  862,  684,
      684,  714,  862,  692,  672,  751,  672,  693,  759,  672,
      672,  692,  718,  672,  688,  693,  699,  699,  684,  759,
      751,  695,  688,  695,  672,  684,  695,  695,  692,  672,
      754,  672,  693, 1309,  672,  698,  672,  698,  692,  718,
      698,  698,  693,  755,  695,  695,  672,  821,  758,  756,
      754,  760,  684,  758,  760,  699,  755,  821,  698,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  711,  695,

      711,  756,  712,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  716,  698,  712,  698,  720,  772,  761, 1307,
      717,  716,  717,  730,  730,  717,  717,  757,  707,  721,
      712,  721,  720,  725,  721,  721,  762,  726,  761,  772,
      757,  725,  711,  720,  717,  726,  733,  764,  716,  730,
      767,  717,  763,  765,  762,  767,  773, 1304,  725,  731,
      721,  731,  726,  769,  731,  731,  764,  763,  725,  768,
      733,  733,  726,  773,  765,  766,  769,  771,  717,  721,
      768,  809,  731,  731,  766,  785,  771,  721,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  774,  731,  775,  776,
      809, 1301,  785,  787,  777,  774,  728,  775,  728,  777,
      787,  728,  728,  791,  734,  728,  734,  784,  788,  734,
      734,  776,  784,  789,  793,  792,  728,  788,  794,  817,
      791,  728,  789,  728,  803,  784,  728,  734,  728,  793,
      803,  798,  817,  794,  729, 1299,  729,  792,  728,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  795,  797,
      799,  800,  734,  798,  734,  801,  804,  795,  797,  803,
      805,  807,  810,  800,  808,  805,  807,  799,  814,  815,
      801,  804,  816,  808,  820,  818,  822,  814,  823,  824,

      810,  825,  820,  822,  828,  932,  835,  826,  932,  831,
      827,  815,  818,  825,  816,  826,  824,  827,  831,  836,
      823,  832,  833,  835,  836,  837,  838,  828,  839,  832,
      840,  842,  833,  871,  930,  838,  874,  871,  837,  853,
      860,  861,  930,  922,  877,  885,  839,  840,  877,  885,
      922,  867, 1073,  842,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  874,  853,  860,  861,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  867,  853,  860,  861,
      875, 1073,  928,  880,  881,  883,  884,  893,  904,  867,
      896,  893,  904,  852,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  897,  900,  928,  866,  875,  880,  881,
      883,  884,  907,  857,  908,  857,  921,  896,  857,  857,
      924,  921,  857,  883,  884,  924,  923,  927,  926,  900,
      897,  946,  959,  857,  921,  923,  946,  907,  857,  908,
      857,  926,  959,  857,  927,  857,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  857,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  925,  890,  925,  890,  933,  925,
      890,  890,  931,  901,  890,  901,  929,  934,  901,  901,
      934,  933,  935,  929,  937,  890,  936,  943,  940,  931,

      890,  940,  890,  942,  899,  890,  901,  890,  939,  925,
     1296,  936,  943,  891,  935,  891,  937,  890,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  902,  938,  902,
      939,  901,  941,  902,  945,  944,  902,  942,  947,  948,
      949,  960,  958,  945,  961,  938,  966,  964,  965,  941,
      973,  970,  902,  961,  902,  944,  947,  967,  972,  902,
      960,  965,  949,  958,  970,  974,  967,  977,  966,  902,
      964,  978,  981,  983,  948,  982,  985,  973,  972,  991,
      995,  994,  983,  985,  977,  989,  993,  991,  989,  993,
      994,  996,  981,  978,  999,  982, 1000, 1001, 1003,  974,

     1004,  996,  995,  999, 1064, 1032, 1057, 1017, 1024, 1032,
     1064, 1000, 1001, 1057, 1037, 1055, 1037, 1295, 1003, 1037,
     1037, 1052, 1004, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1017, 1024, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1050, 1053, 1017, 1024, 1052, 1056, 1055,
     1058, 1049, 1054, 1050, 1059, 1058, 1054, 1060, 1061, 1053,
     1060, 1061, 1016, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1049, 1038, 1059, 1062, 1065, 1066, 1068, 1069,
     1056, 1068, 1028, 1067, 1028, 1079, 1054, 1028, 1028, 1078,
     1066, 1028, 1067, 1062, 1071, 1070, 1072, 1071, 1065, 1078,

     1069, 1070, 1028, 1074, 1075, 1072, 1074, 1028, 1076, 1028,
     1077, 1091, 1028, 1080, 1028, 1092, 1076, 1075, 1077, 1079,
     1091, 1094, 1093, 1097, 1028, 1098, 1080, 1100, 1103, 1106,
     1070, 1093, 1107, 1116, 1108, 1110, 1092, 1111, 1094, 1108,
     1118, 1097, 1116, 1098, 1114, 1125, 1103, 1126, 1098, 1106,
     1110, 1127, 1114, 1118, 1107, 1127, 1100, 1144, 1111, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1146, 1143,
     1125, 1143, 1126, 1147, 1143, 1149, 1150, 1151, 1153, 1154,
     1155, 1152, 1151, 1125, 1156, 1126, 1144, 1157, 1153, 1158,
     1159, 1160, 1158, 1150, 1146, 1149, 1152, 1161, 1123, 1147,

     1170, 1156, 1154, 1159, 1143, 1163, 1164, 1155, 1163, 1164,
     1166, 1165, 1167, 1157, 1165, 1167, 1169, 1166, 1179, 1169,
     1171, 1180, 1182, 1183, 1184, 1160, 1187, 1190, 1192, 1170,
     1195, 1182, 1191, 1161, 1200, 1171, 1179, 1210, 1212, 1211,
     1183, 1213, 1216, 1218, 1180, 1195, 1187, 1184, 1190, 1220,
     1191, 1192, 1220, 1221, 1227, 1223, 1219, 1222, 1223, 1200,
     1224, 1226, 1229, 1224, 1218, 1229, 1230, 1213, 1232, 1216,
     1212, 1210, 1200, 1211, 1219, 1221, 1222, 1233, 1234, 1226,
     1233, 1234, 1235, 1227, 1236, 1235, 1241, 1242, 1230, 1245,
     1232, 1247, 1248, 1236, 1249, 1260, 1241, 1265, 1266, 1248,

     1245, 1267, 1268, 1242, 1267, 1266, 1269, 1270, 1279, 1272,
     1249, 1268, 1247, 1271, 1276, 1269, 1271, 1276, 1265, 1280,
     1285, 1286, 1280, 1287, 1260, 1270, 1272, 1289, 1297, 1285,
     1279, 1270, 1287, 1286, 1288, 1298, 1289, 1297, 1300, 1288,
     1298, 1300, 1302, 1303, 1305, 1315, 1306, 1305, 1303, 1306,
     1308, 1316, 1302, 1308, 1321, 1322, 1323, 1324, 1325, 1323,
     1326, 1325, 1332, 1326, 1335, 1315, 1316, 1324, 1338, 1344,
     1322, 1345, 1339, 1347, 1321, 1346, 1349, 1339, 1344, 1348,
     1350, 1352, 1353, 1294, 1332, 1293, 1335, 1339, 1346, 1338,
     1348, 1345, 1353, 1292, 1291, 1347, 1290, 1349, 1350, 1284,

     1283, 1282, 1281, 1352, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1361, 1278,
     1277, 1361, 1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363, 1275, 1363,
     1363, 1274, 1363, 1363, 1363, 1363, 1273, 1363, 1364, 1264,
     1263, 1364, 1364, 1364, 1364, 1364, 1364, 1262, 1364, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,

     1366, 1366, 1366, 1261, 1259, 1366, 1367, 1258, 1257, 1256,
     1367, 1367, 1367, 1367, 1368, 1368, 1255, 1254, 1368, 1369,
     1369, 1253, 1252, 1369, 1370, 1251, 1250, 1246, 1370, 1370,
     1370, 1370, 1371, 1371, 1244, 1243, 1371, 1372, 1372, 1240,
     1239, 1372, 1373, 1373, 1238, 1231, 1373, 1374, 1374, 1228,
     1225, 1374, 1375, 1375, 1217, 1215, 1375, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377,
     1378, 1378, 1378, 1379, 1214, 1209, 1379, 1379, 1379, 1379,
     1379, 1380, 1380, 1208, 1207, 1380, 1381, 1381, 1382, 1382,
     1206, 1203, 1382, 1383, 1383, 1384, 1202, 1201, 1384, 1384,

     1384, 1384, 1384, 1385, 1199, 1198, 1385, 1385, 1385, 1385,
     1385, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1388, 1388, 1197, 1196, 1388, 1389, 1389,
     1390, 1390, 1194, 1193, 1390, 1391, 1391, 1392, 1392, 1189,
     1188, 1392, 1393, 1393, 1394, 1394, 1186, 1185, 1394, 1395,
     1395, 1396, 1396, 1181, 1178, 1396, 1397, 1397, 1398, 1398,
     1398, 1177, 1398, 1399, 1399, 1399, 1175, 1399, 1400, 1174,
     1173, 1400, 1400, 1400, 1400, 1400, 1401, 1401, 1172, 1168,
     1401, 1402, 1402, 1162, 1148, 1402, 1403, 1403, 1145, 1142,

     1403, 1404, 1404, 1405, 1405, 1141, 1140, 1405, 1406, 1406,
     1407, 1139, 1138, 1407, 1407, 1407, 1407, 1407, 1408, 1137,
     1136, 1408, 1408, 1408, 1408, 1408, 1409, 1409, 1134, 1133,
     1409, 1410, 1410, 1132, 1131, 1410, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412, 1130,
     1129, 1412, 1413, 1413, 1414, 1414, 1128, 1124, 1414, 1415,
     1415, 1416, 1416, 1122, 1121, 1416, 1417, 1417, 1120, 1119,
     1417, 1418, 1418, 1419, 1419, 1117, 1115, 1419, 1420, 1420,
     1421, 1421, 1421, 1113, 1421, 1422, 1422, 1112, 1109, 1422,
     1423, 1423, 1105, 1104, 1423, 1424, 1424, 1102, 1101, 1424,

     1425, 1425, 1099, 1096, 1425, 1426, 1426, 1427, 1427, 1095,
     1090, 1427, 1428, 1428, 1429, 1429, 1089, 1087, 1429, 1430,
     1430, 1431, 1431, 1085, 1083, 1431, 1432, 1432, 1433, 1081,
     1063, 1433, 1433, 1433, 1433, 1433, 1434, 1434, 1051, 1048,
     1434, 1435, 1435, 1046, 1044, 1435, 1436, 1436, 1042, 1040,
     1436, 1437, 1437, 1438, 1438, 1039, 1035, 1438, 1439, 1439,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1441, 1441, 1034, 1033, 1441, 1442, 1442, 1443, 1443,
     1030, 1029, 1443, 1444, 1444, 1445, 1445, 1027, 1026, 1445,
     1446, 1446, 1447, 1447, 1025, 1023, 1447, 1448, 1448, 1449,

     1449, 1022, 1021, 1449, 1450, 1450, 1020, 1019, 1450, 1451,
     1451, 1452, 1452, 1018, 1015, 1452, 1453, 1453, 1454, 1454,
     1006, 1005, 1454, 1455, 1455, 1456, 1456, 1002,  998, 1456,
     1457, 1457, 1458, 1458, 1459, 1459, 1460,  997,  992, 1460,
     1460, 1460, 1460, 1460, 1461, 1461, 1462, 1462,  990,  988,
     1462, 1463, 1463, 1464, 1464,  987,  986, 1464, 1465, 1465,
     1466, 1466,  984,  980, 1466, 1467, 1467, 1468, 1468,  979,
      976, 1468, 1469, 1469, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1471, 1471, 1472, 1472, 1473,
     1473, 1474, 1474, 1475, 1475, 1476, 1476, 1477, 1477,  971,

      969, 1477, 1478, 1478, 1479, 1479,  968,  963, 1479, 1480,
     1480, 1481, 1481,  962,  956, 1481, 1482, 1482, 1483, 1483,
      954,  952, 1483, 1484, 1484, 1485, 1485,  950,  919, 1485,
     1486, 1486,  915,  913, 1486, 1487, 1487, 1488, 1488,  911,
      909, 1488, 1489, 1489, 1490, 1490,  906,  905, 1490, 1491,
     1491, 1492, 1492,  903,  898, 1492, 1493, 1493, 1494, 1494,
      895,  894, 1494, 1495, 1495,  892,  888, 1495, 1496, 1496,
      887,  886, 1496, 1497, 1497,  882,  879, 1497, 1498, 1498,
     1499, 1499,  878,  876, 1499, 1500, 1500,  873,  872, 1500,
     1501, 1501,  870,  869, 1501, 1502, 1502, 1503, 1503,  868,

      865, 1503, 1504, 1504,  864,  863, 1504, 1505, 1505, 1506,
     1506, 1507, 1507,  859,  858, 1507, 1508, 1508,  856,  855,
     1508, 1509, 1509, 1510, 1510,  854,  850, 1510, 1511, 1511,
      848,  846, 1511, 1512, 1512,  844,  843, 1512, 1513, 1513,
      841,  834, 1513, 1514, 1514,  830,  829, 1514, 1515, 1515,
      819,  813, 1515, 1516, 1516,  812,  811, 1516, 1517, 1517,
      806,  802, 1517, 1518, 1518,  796,  790, 1518, 1519, 1519,
      786,  782, 1519, 1520, 1520,  780,  779, 1520,  778,  750,
      746,  744,  742,  740,  739,  738,  737,  736,  735,  724,
      723,  709,  708,  704,  703,  702,  691,  690,  680,  679,

      678,  674,  673,  668,  667,  666,  660,  659,  658,  654,
      653,  650,  648,  647,  646,  644,  642,  638,  636,  632,
      606,  603,  592,  590,  580,  578,  575,  573,  572,  570,
      539,  537,  536,  535,  533,  530,  529,  527,  524,  523,
      506,  505,  503,  500,  499,  497,  489,  478,  477,  476,
      470,  460,  459,  458,  451,  449,  448,  444,  442,  440,
      438,  419,  369,  368,  365,  341,  339,  337,  335,  334,
      329,  318,  317,  306,  296,  295,  269,  268,  259,  258,
      254,  246,  243,  241,  240,  239,  229,  202,  196,  172,
      160,  158,  157,  150,  149,  146,  138,  135,  134,  130,

      100,   97,   96,   93,   91,   84,   71,   45,   38,   35,
       32,   18,   11,    4,    3, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[234] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Mon Oct  2 17:15:11 2023
 * Update Count     : 772
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.h"                            // for DeclarationNode
#include "ExpressionNode.h"                             // for LabelNode
#include "InitializerNode.h"                            // for InitializerNode
#include "ParseNode.h"
#include "ParserTypes.h"                                // for Token
#include "StatementNode.h"                              // for CondCtl, ForCtrl
#include "TypedefTable.h"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 1982 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// ' stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}




#line 1999 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define BKQUOTE 2
#define QUOTE 3
#define STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 180 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 2224 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1357 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4116 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 182 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 204 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 207 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 208 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 209 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 212 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 217 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }
	YY_BREAK
/* keywords */
case 10:
YY_RULE_SETUP
#line 220 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 221 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 224 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 225 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT16); }					// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32); }					// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32X); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64X); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 106:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 318 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 149:
YY_RULE_SETUP
#line 362 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 363 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* numeric constants */
case 151:
YY_RULE_SETUP
#line 369 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 370 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 373 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 374 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 375 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value */
case 159:
YY_RULE_SETUP
#line 379 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 380 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 381 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant */
case 162:
YY_RULE_SETUP
#line 385 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 386 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 387 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 165:
YY_RULE_SETUP
#line 391 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 392 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 168:
YY_RULE_SETUP
#line 396 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 397 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 398 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 402 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 403 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 408 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 181:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 412 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 413 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 414 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 185:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 418 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 419 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 430 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 435 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 436 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 452 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 457 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 458 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 226:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 463 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 464 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 465 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 470 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 231:
YY_RULE_SETUP
#line 497 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 232:
YY_RULE_SETUP
#line 509 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 511 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 3544 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BKQUOTE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1357 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1357 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1356);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 511 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

