
#line 3 "Parser/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 236
#define YY_END_OF_BUFFER 237
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1363] =
    {   0,
        0,    0,    0,    0,    0,    0,  162,  162,  165,  165,
      237,  235,    7,    9,    8,  188,  164,  151,  194,  197,
      161,  174,  175,  191,  189,  178,  190,  181,  193,  154,
      155,  179,  180,  199,  201,  200,  202,  170,  151,  172,
      192,  173,  195,  151,  171,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  176,  198,  177,  196,    7,  235,    4,
        4,  236,  162,  163,  169,  165,  166,    7,    9,    0,
        8,  206,  229,  151,    0,  219,  187,  211,  220,  217,
      203,  214,  204,  215,  213,  227,    0,  158,    3,    0,

      218,  157,  154,    0,    0,    0,  154,  154,  154,  154,
      154,  154,    0,    0,  154,  154,  155,  155,  155,  155,
      155,  155,  155,    0,  155,  155,  185,  186,  184,  207,
      209,  205,  210,  208,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  225,  182,  164,  161,  151,  216,    0,    0,  222,
        0,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,    0,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   49,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,   81,  151,  151,  151,

      151,  151,   99,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  221,  212,  226,    7,    0,    0,
        0,    2,    0,    5,  162,    0,  168,  167,  167,    0,
        0,    0,  165,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      228,  183,  158,  158,    0,  158,  158,  158,  158,    0,
        6,  159,  157,    0,  157,  157,  157,  157,  154,    0,
        0,  153,    0,    0,  159,    0,  154,  154,  154,  154,
      154,  154,  154,  154,    0,    0,    0,  154,  154,  154,

      154,  154,  154,  154,    0,  156,    0,    0,  155,  155,
      155,  155,  155,  155,  155,  155,    0,    0,    0,  155,
      155,  155,  155,  155,  155,  155,    0,  223,  224,    0,
      233,  230,    0,    0,    0,  232,    0,    0,    0,    0,
        0,    0,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  152,    0,  151,   16,   17,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   74,  151,  151,  151,  151,   88,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      127,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,    0,    0,  167,    0,    0,
        0,    0,    0,  167,    0,    0,  234,    0,    0,    0,
        0,    0,    0,    0,  158,    0,  158,    0,    0,    0,
        0,    0,  158,  158,    0,  159,  159,    0,  159,  159,
      159,  159,  157,    0,  157,    0,    0,    0,    0,    0,
      157,  157,    0,  153,  153,  153,  153,  153,  153,  153,
        0,  153,  153,  159,  159,  159,  159,  159,  159,    0,

        0,    0,  154,  154,    0,    0,    0,    0,  154,  154,
        0,    0,  156,  156,  156,  156,  156,  156,  156,  156,
        0,  156,  156,    0,    0,    0,  155,  155,    0,    0,
        0,    0,  155,  155,  232,    0,    0,    0,    0,    0,
        0,    0,  231,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  152,    0,    0,    0,  151,   23,  151,  151,   28,
      151,   31,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,   52,  151,   54,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,   80,  151,  151,   93,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  140,  151,  151,  151,  147,
      151,  149,  151,    0,    0,    0,    0,    0,    0,  167,
        0,    0,    0,    0,    0,  158,  158,    0,  158,  158,
        0,    0,    0,    0,  159,    0,  159,    0,    0,    0,
        0,    0,  159,  159,    0,  157,  157,    0,  157,  157,
        0,    0,    0,    0,  153,  153,  153,  153,  153,  153,
      153,  153,    0,    0,    0,  153,  153,  153,  153,  153,

      153,  153,    0,  159,    0,    0,    0,    0,  159,  159,
        0,    0,    0,    0,    0,    0,    0,  156,  156,  156,
      156,  156,  156,  156,  156,    0,    0,    0,  156,  156,
        0,  160,    0,  156,  156,  156,  156,  156,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  151,  151,   26,  151,  151,  151,  151,  151,  151,
      151,  151,  151,   18,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,    0,    0,    0,    0,    0,    0,  151,  151,   27,
       29,  151,  151,   35,   39,  151,  151,   34,  151,  151,

      151,   51,  151,  151,  151,  151,  151,   61,   62,  151,
      151,   77,  151,  151,  151,  151,   95,   98,  100,  151,
      151,  151,  151,  151,  108,  151,  151,  151,  151,  151,
      151,  151,  123,  151,  126,  128,  151,  151,  151,  134,
      151,  151,  151,  151,  151,  151,  148,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  158,    0,
      158,  158,  159,  159,    0,  159,  159,    0,    0,    0,
        0,    0,  157,    0,  157,  157,    0,    0,    0,  153,
      153,    0,    0,    0,    0,  153,  153,    0,  159,  159,
        0,    0,    0,    0,    0,  160,    0,    0,    0,    0,

        0,  156,  156,    0,  160,  160,  160,  160,  160,    0,
        0,    0,  156,  156,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  151,    0,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,   83,  151,  151,  151,  151,
      151,  151,  151,  151,  151,    0,    0,    0,    0,    0,
        0,    0,    0,  151,  151,  151,  151,   32,   33,  151,
      151,  151,  151,   50,   53,  151,   57,  151,  151,  151,
      151,   75,  151,  151,   85,   89,  151,  151,  151,  103,
      151,  107,  109,  112,  113,  116,  151,  118,  119,  151,

      151,  151,  133,  130,  151,  151,  151,  144,  151,  151,
      150,    0,    1,    0,    0,  167,    0,    0,    0,    0,
      158,    0,  159,    0,  159,  159,  157,    0,    0,  159,
        0,  159,  159,  160,  160,    0,  160,    0,    0,    0,
        0,  160,  160,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  151,  151,   20,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,   19,  151,
      151,  151,  151,   40,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,    0,    0,    0,    0,
        0,    0,    0,    0,   10,   12,  151,  151,  151,  151,

       47,   48,  151,  151,   60,  151,   64,   76,  151,   94,
      101,  151,  151,  151,  117,  151,  151,  125,  129,  151,
      139,  151,  145,  151,    0,    0,  159,  159,    0,    0,
      160,  160,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   11,   13,   36,  151,  151,
       67,   68,   70,   79,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,   84,   86,   90,
      151,  151,  110,  120,  131,  151,  151,    0,    0,    0,
        0,    0,    0,    0,  151,  151,   42,  151,  151,  151,
       59,   66,  151,  102,  104,  151,  151,  151,  136,  141,

      151,    0,    0,    0,    0,  160,    0,  160,  160,    0,
        0,    0,    0,    0,    0,  151,  151,  151,   72,   69,
       71,  151,   96,  151,  151,   14,  151,  151,  151,   37,
       41,  151,  151,   63,  151,  151,   92,  151,  151,  151,
      151,  151,    0,    0,    0,    0,  151,  151,   43,   55,
      151,   78,  151,  151,  151,  146,    0,    0,    0,    0,
      160,    0,    0,    0,    0,  151,   44,   45,   73,   82,
      151,  151,  151,  151,  151,  151,  151,  151,   65,   87,
       91,  105,  111,  132,  151,  142,    0,    0,    0,   25,
      151,  151,  151,  151,  151,    0,    0,    0,    0,    0,

        0,   46,  151,  151,   15,   21,   24,  151,  151,   38,
      151,  151,  135,  151,    0,    0,    0,    0,   30,   58,
      151,  151,  124,    0,    0,    0,  151,  151,  151,  151,
      151,  151,  106,  143,    0,    0,    0,  151,  122,    0,
      151,  121,   22,  151,  151,   56,    0,  115,  114,  151,
      151,  151,  151,  151,  151,  151,  137,  151,  151,  138,
       97,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   11,   11,   48,   11,   49,   11,   50,
       51,   52,   53,   54,   55,   11,   51,   56,   11,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   11,   73,   74,   75,   76,
       77,   78,   51,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[92] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    4,    4,    4,    4,    4,    9,
        4,    4,    4,    4,    4,    4,    4,    1,   10,    1,
        1,   11,    1,    8,    8,    8,    8,    8,    8,    4,
        4,    4,    4,    4,    4,    4,    4,    9,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1

    } ;

static const flex_int16_t yy_base[1527] =
    {   0,
        0,   90, 4109, 4108,    0,    0,   90,   91,   92,   93,
     4124, 4127,  104, 4127,  110,   83, 4127, 4064,   63,   90,
     4127, 4127, 4127,   84,  104, 4127,  107,  105,  123,  178,
      245, 4086, 4127,  125, 4086,   88,  325,  118,  152, 4127,
      112, 4127,  111,  129, 4057,  105,  113,  180,  164,  179,
      237,  116,  121,  136,  160,  141,   95,  282,  218,  253,
      267,  298,  219, 4127,  127, 4127,  175,  369,  375, 4127,
     4097, 4127,    0, 4127,  413,    0, 4127,  387, 4127,  405,
      426, 4127,  491, 4059,   83, 4127, 4127, 4127, 4127, 4127,
     4080, 4127, 4079, 4127, 4127, 4080, 4093,  558, 4127, 4110,

     4127,  620,  435,  508,  224,  535,  371,  624,  611,  397,
     4127,  469,  134,  445,  402,  549,    0,  552,  653,  683,
      556, 4127,  668,  168,  614,  696, 4127, 4127, 4127, 4077,
     4127, 4127, 4127, 4076, 4075,  194,  224, 4093,  244,  285,
      314,  245,  271,  293,  360, 4071,  315,  321, 4048, 4016,
      330, 4127, 4127, 4127, 4127,  322, 4127, 4043, 4042, 4127,
     4015,  406,  411,  446,  287,  251,  366,  360,  465,  364,
      309,  707, 4043,  226,  387,  392,  412,  396,  388,  487,
      513,  677,  443,  489,  462,  362,  512,  551,  594,  534,
      580,  497,  535,  532,  536,  593, 4042,  660,  560,  621,

      595,  460, 4041,  598,  725,  644,  690,  669,  631,  557,
      673,  688,  710,  619,  632,  745,  678,  703,  726,  558,
      708,  740,  596,  734, 4127, 4127, 4127,  812,  818, 4096,
      827, 4127,  857, 4127,    0,  821, 4127, 4127,  844, 4036,
     4035, 4034,    0, 4060,  350,  722, 4078,  757,  856,  841,
      774,  798,  801,  859, 4056,  802,  828,  840, 4030, 4029,
     4127, 4127,  884,  875,  946,  873,  936,  475, 4028, 4086,
     4127,  998,  944, 1060,  910, 1050,  754, 1061,  972,  702,
     1113, 1159,  866, 1027, 1224, 1134,  728, 4127,  878, 1045,
      843, 4127,  866, 1143,  461, 4063, 4060,  883,  907,  960,

     1164,  755,  943, 1150,    0, 1288, 4065, 1233,  861, 4127,
     1013, 1296,  912, 4127,  962, 1339,  875, 4060, 4057, 1131,
     1218,  989, 1350,  965,  991, 1357, 1409, 4127, 4127, 4046,
     4127, 4127,  924,  946, 4022, 4022,  949, 4018,    0, 4017,
        0, 3988,  820,  971, 1020, 1040,  943, 1037,  842, 1017,
      960, 1043, 1047, 1223, 1064, 1054,  199, 1051, 1073, 1052,
      772,  891, 1118, 1005, 1091, 4018, 1065,  265, 4017, 4016,
     1094, 1128, 1136, 1133, 1125, 1140, 1143, 1159, 1151, 1164,
     1210, 1168, 1170, 1211, 1092, 1215, 1219, 1167, 1220, 1221,
     1247, 1235, 1242, 1243, 1308, 1107, 1274, 1208, 1251, 1323,

     1314, 1289, 1281,  495, 1280, 1318, 1329, 1326, 1312, 1332,
     1331, 1333, 1337, 1343, 1341, 1340, 1347, 1348, 1349, 1371,
     4015, 1367, 1352, 1403, 1382, 1383, 1368, 1385, 1282, 1388,
     1387, 1389, 1392,  870, 1395, 1454, 1455, 1450, 1457, 4011,
        0, 4010,    0, 4009,    0, 4033, 4127, 1432, 1452, 4009,
     4006,    0, 4005,    0, 4127, 1467, 1490, 1552, 1018, 4041,
     4038, 4041, 4127, 1475, 1499, 1561, 1552, 1623, 1521, 1613,
     1168, 4001, 4127, 1642, 1675, 1737, 1214, 4037, 4034, 4037,
     4127, 1587, 1665, 1746, 1555, 1728, 1758, 1484, 4127, 1662,
     3997, 1560, 1797, 1857, 1706, 1785, 1794, 1461, 3996, 1252,

     4032, 4029, 1454, 1485, 4025, 1390, 4029, 4026, 1463, 1497,
     1493, 1556, 1921, 1669, 1818, 1972, 1674, 1986, 1849, 4127,
     1449, 1788, 2000, 1477, 4027, 4024, 1491, 1540, 4020, 1478,
     4024, 4021, 1567, 1591, 3988, 1543, 3984, 3983, 3982,    0,
     3981,    0, 4127, 1483, 1490, 1489, 1581, 1603, 1615, 1618,
     1648, 1671, 1577, 1672, 1653, 1585, 1597, 1654, 1673, 1722,
     1726, 1712, 1617, 1760, 1495, 1699, 1778, 1693, 1753, 1770,
     1669, 3983, 1792, 3979, 3978, 1780, 3980, 1791, 1727, 3979,
     1429, 3978, 1795, 1792, 1831, 1796, 1790, 1538, 1817, 1832,
     1655, 1843, 1757, 3977, 1844, 3976, 1850, 1848, 1852, 1856,

     1854, 1853, 1863, 1857, 1898, 1876, 3975, 1880, 1096, 3974,
     1894, 1895, 1900, 1914, 1935, 1899, 1946, 1962, 1963, 1964,
     1932, 1969, 1977, 1918, 1972, 1973, 1879, 1974, 1975, 1976,
     1991, 1984, 1994, 2001, 2003, 3973, 2005, 2004, 2006, 3972,
     2008, 3971, 2007, 2070, 2066, 3967,    0, 3966,    0, 3965,
     3964, 3963,    0, 3962,    0, 2073, 3961, 3992, 2033, 2034,
     2058, 3996, 3993, 3996, 4127, 2102, 2135, 2197, 2082, 3993,
     3990, 3993, 4127, 2084, 2125, 2206, 3953, 3984, 2037, 2096,
     2087, 3988, 3985, 3988, 2089, 4127, 2091, 2214, 2112, 4127,
     2114, 2184, 2109, 3985, 3982, 2123, 2129, 2128, 2235, 2144,

     2199, 2255, 2232, 4127, 2163, 3983, 3980, 3983, 4127, 2262,
     2285, 3975, 3974, 2227, 2308, 2268, 2140, 2117, 4127, 2205,
     2269, 2190, 4127, 2192, 2319, 2164, 3978, 3975, 2295, 2297,
     2330, 2379, 2358, 2195, 2366, 2229, 2250, 2405, 3939, 3970,
     3969, 3936, 3935, 3934,    0, 3933,    0, 3932,    0, 3931,
        0, 2244, 2064, 3933, 2245, 2266, 2281, 2312, 2339, 2313,
     2340, 2139, 2305, 2190, 2321, 2338, 2358, 2359, 2360, 2009,
     2304, 2363, 2377, 1948, 2357, 2361, 2247, 2386, 2388, 2369,
     2380, 3929, 3928, 3927,    0, 3926,    0, 2396, 2384, 3928,
     2314, 2398, 2399, 3927, 3926, 2400, 2402, 3925, 2406, 2410,

     2403, 3924, 2413, 2405, 2409, 1794, 2415, 3922, 2458, 2416,
     2428, 3921, 2432, 2434,  156, 2435, 3917, 3916, 3912, 2436,
     2419, 2438, 2439, 2440, 3911, 2442, 1391, 2444, 2446, 2447,
     2449, 2448, 2462, 2454, 3907, 3906, 2463, 2459, 2465, 3902,
     2466, 2469, 2471, 2470, 2473, 2476, 3901, 2478, 3953, 3893,
        0, 3889,    0, 3888,    0, 3884,    0, 2537, 2497, 3915,
     3856, 3855, 2577, 3874, 3905, 2498, 2499, 2522, 3906, 3903,
     3901, 2549, 2509, 3893, 3834, 3833, 2524, 3885, 3882, 2503,
     2531, 3875, 2562, 3879, 3871, 2542, 2543, 3867, 2545, 2546,
     2587, 3868, 3865, 3865, 2629, 2639, 2701, 3825, 2597, 3856,

     3853, 2541, 2554, 3846, 2648, 2548, 2665, 2691, 3813, 2604,
     3846, 3843, 2563, 2633, 3804,    0, 3803,    0, 3797,    0,
     3796,    0,    0,    0, 3793,    0, 2568, 2482, 2529, 2578,
     2691, 2575, 2481, 2625, 2582, 2626, 2623, 2581, 2637, 2638,
     2633, 2480, 2657, 2675, 2659, 2682, 2677, 1881, 2629, 2643,
     2684, 2690, 2686, 2722, 2688, 3789,    0, 3783,    0, 3782,
        0, 3776,    0, 2696, 2697, 2689, 2700, 3778, 3774, 2698,
     2702, 2703, 2705, 3773, 3767, 2711, 3766, 2712, 2713, 2752,
      738, 3760, 2719, 2720, 3759, 3753, 2723, 2726, 2728, 3752,
     2727, 3746, 3745, 3716, 2730, 3715, 2731, 3709, 2735, 2741,

     2729, 2744, 3708, 3702, 2747, 2745, 2748, 3701, 2749, 2753,
     3695, 3750, 4127,    0,    0, 4127,    0,    0,    0,    0,
     3658, 2812, 2773, 3712, 3648, 3647, 3641, 3695, 3689, 2774,
     3688, 3627, 3626, 2852, 3645, 3676, 4127, 2789, 3675, 3672,
     3670, 4127, 2800, 2824, 3662, 3624,    0, 3623,    0, 3617,
        0, 3616,    0, 3599, 2764, 2758, 3601, 2121, 2757, 2831,
     2807, 2798, 2802, 2803, 2805, 2810, 2811, 2812, 3595, 2639,
     2804, 2829, 2834, 2833, 2828, 2874, 2847, 2848, 2861, 2851,
     2846, 2856, 2858, 2853, 2872, 2868, 3591,    0, 3587,    0,
     3586,    0, 3582,    0, 3584, 3576, 2869, 2852, 2870, 2871,

     3575, 3570, 2875, 2876, 3569, 2909, 3563, 3562, 2882, 3556,
     3555, 2883, 2884, 2885, 3549, 2886, 2887, 3548, 3544, 2889,
     3543, 2895, 3539, 2892, 3535, 3531, 3507, 3503, 2946, 3551,
     2908, 2910, 2954, 3555, 3547, 3550, 3507, 3506, 3500, 3499,
        0, 3493, 3492, 3477, 3476, 3475, 3474, 3466, 2960, 2931,
     3465, 2907, 2919, 3458, 2922, 2926, 2932, 2929, 2928, 2935,
     2939, 2940, 2941, 2947, 2946, 2982, 2987, 3457, 2952, 2953,
     2961, 2962, 2965, 3452, 2970, 2983, 2963, 3448, 3442, 3441,
     3437,    0, 3436, 3432, 2971, 2972, 3434, 2975, 2974, 2976,
     3426, 3425, 2977, 3422, 3417, 2979, 2980, 2981, 3410, 3409,

     2986, 3400, 3399, 3393, 3392, 2997, 3418, 3362, 3356,    0,
        0, 3378, 3348, 3347, 3340, 3022, 3024, 2806, 2992, 3342,
     3337, 2993, 3336, 2994, 2996, 3002, 3003, 3007, 3006, 3008,
     3330, 3012, 3042, 3329, 3016, 3017, 3321, 3021, 3028, 3029,
     3033, 3035,    0, 3317, 3298, 3297, 3027, 3034, 3296, 3295,
     3038, 3291, 3040, 3041, 3046, 3290, 3283, 3282, 3278, 3277,
     3247, 3269, 3268, 3265, 3264, 3074, 3263, 3262, 3255, 3254,
     3047, 3051, 3052, 3054, 3056, 3053, 3057, 3059, 3253, 3250,
     3249, 3064, 3233, 3226, 3066, 3069, 3222, 3219, 3214, 3214,
     3070, 2579, 3073, 3075, 3078, 3193, 3192, 3143, 3141, 3140,

     3139, 3140, 3081, 3084, 3134, 3083, 3131, 3085, 3091, 2891,
     3094, 3098, 2539, 3099, 2493, 2362, 2303, 2238, 2153, 2082,
     3092, 3093, 2080, 1976, 1975, 1912, 3100, 3103, 3104, 3105,
     3106, 3110, 1732, 1731, 1622, 1621, 1496, 3111, 1059, 1011,
     3114,  926,  846, 3116, 3117,  803,  656,  622,  554, 3119,
     3121, 3125, 3123, 3124, 3126, 3130,  455, 3127, 3129,  424,
      365, 4127, 3208, 3219, 3230, 3241, 3249, 3260, 3271, 3282,
     3293, 3299, 3307, 3312, 3317, 3325, 3330, 3335, 3340, 3345,
     3350, 3361, 3366, 3369, 3374, 3379, 3384, 3386, 3391, 3396,
     3404, 3415, 3426, 3431, 3436, 3438, 3443, 3445, 3450, 3452,

     3457, 3459, 3464, 3466, 3471, 3479, 3484, 3489, 3494, 3499,
     3501, 3506, 3511, 3519, 3524, 3529, 3540, 3545, 3550, 3552,
     3557, 3559, 3564, 3569, 3571, 3576, 3578, 3583, 3588, 3593,
     3598, 3603, 3605, 3610, 3612, 3617, 3619, 3624, 3629, 3634,
     3639, 3644, 3649, 3651, 3656, 3664, 3669, 3674, 3676, 3681,
     3683, 3688, 3690, 3695, 3697, 3702, 3707, 3709, 3714, 3716,
     3721, 3723, 3728, 3730, 3732, 3737, 3742, 3744, 3749, 3751,
     3756, 3758, 3763, 3765, 3770, 3778, 3783, 3785, 3787, 3789,
     3791, 3793, 3795, 3800, 3802, 3807, 3809, 3814, 3816, 3821,
     3823, 3828, 3833, 3835, 3840, 3842, 3847, 3849, 3854, 3856,

     3861, 3866, 3871, 3876, 3878, 3883, 3888, 3893, 3895, 3900,
     3905, 3907, 3909, 3914, 3919, 3921, 3926, 3931, 3936, 3941,
     3946, 3951, 3956, 3961, 3966, 3971
    } ;

static const flex_int16_t yy_def[1527] =
    {   0,
     1362,    1, 1363, 1363, 1364, 1364, 1365, 1365, 1366, 1366,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1367, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1367, 1362,
     1362, 1362, 1362, 1367, 1362, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1362, 1362, 1362, 1362, 1362, 1368, 1362,
     1362, 1362, 1369, 1362, 1362, 1370, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1367, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1371,

     1362, 1362,   30, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1372,   30, 1362, 1362,   31, 1362, 1362, 1362,
     1362, 1362, 1362,   31, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1373, 1362,
     1362, 1362, 1362, 1362, 1362, 1367, 1362, 1374, 1375, 1362,
     1362, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1376, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1362, 1362, 1362, 1362, 1368, 1368,
     1368, 1362, 1368, 1362, 1369, 1362, 1362, 1362, 1362, 1377,
     1378, 1379, 1370, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1380, 1381,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,  263, 1382,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,  114,  279,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,

     1362, 1362, 1362, 1362, 1383, 1362, 1384, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1385, 1362, 1386, 1387, 1388,
     1389, 1362, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1391, 1362, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,

     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1392, 1393, 1362, 1362, 1394,
     1395, 1396, 1397, 1398, 1399, 1362, 1362, 1362, 1362, 1362,
     1400, 1401, 1402, 1403, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362,  466, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
      484, 1362, 1362, 1362, 1362, 1362, 1362, 1362,  494, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1404, 1405, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
      513, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1406, 1362, 1407, 1408, 1409, 1410,
     1411, 1412, 1362, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1414, 1362, 1415, 1416, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,

     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1417, 1362, 1418, 1419, 1420, 1421, 1422,
     1422, 1423, 1424, 1425, 1426, 1362,  656, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362,  676, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1427, 1362, 1427, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1428, 1362,
     1362, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
     1438, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1440, 1441, 1442, 1443, 1444, 1445, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,

     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1446, 1447,
     1448, 1449, 1450, 1451, 1452, 1453, 1454, 1362, 1362, 1362,
     1362, 1362, 1362,  863, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1455, 1362, 1362,

     1362, 1362, 1362, 1362,  896, 1362, 1362, 1362,  905, 1362,
     1362, 1362, 1362, 1362, 1456, 1457, 1458, 1459, 1460, 1461,
     1462, 1463, 1464, 1465, 1466, 1467, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1468, 1469, 1470, 1471, 1472,
     1473, 1474, 1475, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,

     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1476, 1362, 1477, 1478, 1362, 1479, 1480, 1481, 1482,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1034, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1490, 1491, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1492, 1493, 1494, 1495,
     1496, 1497, 1498, 1499, 1466, 1466, 1466, 1466, 1466, 1466,

     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1500, 1501, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1502, 1483, 1503, 1485,
     1504, 1487, 1489, 1505, 1491, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1506, 1492, 1507,
     1494, 1508, 1496, 1498, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,

     1466, 1509, 1500, 1510, 1501, 1362, 1362, 1362, 1362, 1511,
     1512, 1503, 1513, 1514, 1505, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1515, 1506, 1507, 1516, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1517, 1509, 1518, 1510,
     1362, 1519, 1520, 1513, 1514, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1521, 1522, 1516, 1466,
     1466, 1466, 1466, 1466, 1466, 1517, 1518, 1523, 1519, 1524,

     1520, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1525, 1521, 1526, 1522, 1466, 1466,
     1466, 1466, 1466, 1503, 1523, 1524, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1507, 1525, 1526, 1466, 1466, 1503,
     1466, 1466, 1466, 1466, 1466, 1466, 1507, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466,    0, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362
    } ;

static const flex_int16_t yy_nxt[4219] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   31,   31,   31,   31,   31,
       31,   32,   33,   34,   35,   36,   37,   38,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   39,   18,   18,
       18,   18,   18,   18,   39,   18,   18,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       18,   53,   18,   54,   55,   18,   56,   18,   57,   58,
       59,   60,   61,   62,   18,   18,   63,   64,   65,   66,
       67,   68,   74,   74,   77,   77,   68,   86,   87,   69,

       77,   77,   88,   74,   74,   78,   79,   80,   80,   80,
       78,   80,   79,   81,   81,   81,   80,   82,   90,   83,
       83,   91,  133,  134,   89,   97,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  128,  259,   92,   99,
       83,   94,   95,   83,  100,  160,  157,  161,   75,   75,
       75,   75,  152,   85,  305,  153,  129,  101,  130,  131,
      154,  225,  205,   85,  260,  155,  158,  162,  163,  164,
      165,   85,  166,  167,   85,  168,  178,  169,  174,   85,
      175,  170,  171,  195,  176,  986,  177,   85, 1362,  197,
      172,  179,  196,  159,   85,  307,  198,   96,  102,   85,

      103,  103,  103,  103,  103,  103,  103,  104,  104,  227,
       85,   83,  199,  156,   85,  226,  202,  105,   85,  203,
      106,  204,   85,  107,  108,  109,  110,  111,  330,  327,
      331,  183,  112,  113,  111,  184,  200,   85,   85,  114,
      185,  201,  105,  180,  186,  106,  282,  282,  115,  108,
      181,  116,  187,  110,  188,  111,  182,   85,  330,  112,
      331,  154,  113,  189,  111,  102,  155,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   85,   85,  330,  330,
      331,  331,  216,  561,   85,  283,  224,  106,  211,  212,
      118,  119,  120,  121,  122,   85,  213,  368,  214,  123,

      190,  122,  332,  215,  333,  330,  124,  331,  191,   85,
      192,   85,  106,  193,  156,  125,  119,  194,  126,  330,
      121,  331,  122,   85,  348,   85,  123,  330,  217,  331,
      154,  122,  135,  332,  576,  155,  136,  137,  218,  138,
       85,  139,  140,  219,  141,   85,  142,  220,  330,  330,
      331,  331,  206,  207,  347,  330,   85,  331,  143,  144,
      145,  221,  208,  209,  330,  210,  331,   85,  222,  223,
      228,   79,   80,   80,   80,  228,  231,  232,  229,  353,
       85,  231,  146,  147,  446,  148,  447,  149,   78,   79,
       80,   80,   80,   78,  330,  334,  331,  233,  233,  233,

      233,  233,  233,  233,  233,  233,   80,   79,   80,   80,
       80,   80,  150,  151,  236,  237,  110,  287,   85,  236,
       85,  238,   85,   85,   85,  288,  238,   80,   79,   81,
       81,   81,   80,  349,  350,  239,  239,  239,  239,  239,
      239,  239,  287,  287,  352,   85,   85,  385,  287,  238,
       85,  288,  288,  369,   85,  373,  288,  279,  279,  279,
      279,  279,  279,  279,   85, 1362,  370,  240,  287,   85,
       85,  238,  110,  287, 1362,  372,  238,  238,  288,  343,
      238,  238,   85,  288, 1362,  505,  344,  345,  238,  298,
     1362,  238,  371,  238,  241,  238,  280,  242,  244, 1362,

     1362,   85,  245,  246,   85,  247,  308,  248,  249, 1362,
      250,  382,  251,   85,  300,  288,  301,  302,   85, 1362,
       85,  455,  346,   85,  252,  253,  254,  404,  102, 1362,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  303,
      288,  351,  304,  384,  302,   85,  455,   85,  255,  256,
      106,  257,  284,   85,  284,   85,  613,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  374,  375,  383,  281,
       85,   85,  295,  394,  296,  106,  376,  297,  298,  258,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  377,
       85,  386,   85,   85,   85,  287,  286,  121,  309,  264,

      265,  266,  309,  288,  267,  268,  310,  391,  268,   85,
      310,  397,   85,  395,  387,   85,   85,  396,   85,  269,
      287,  430,  299,  309,  264,  265,  266,  309,  417,  267,
      288,  268,  388,  310,  295,  401,  296,  310,   85,  297,
      298,  268,  272,  272,  272,  272,  272,  272,  272,  272,
      272,   85,   85,   85,   85,  392,   85,  287,  299,  389,
      309,  273,  274,  275,  393,  288,  276,  277,  310,  289,
      277,  290,  291,  398,  390,  403,  434,   85,  292,   85,
       85,  278,  287,  405,  121,  309,  273,  274,  275,   85,
       85,  276,  288,  277,  293,  310,  402,  294,  311,  291,

      312,  313,   85,  277,  422,  292,  317,  314,  318,  423,
      416,  319,  320,  322,  310,  323,  324, 1362,   85,  317,
      411,  318, 1362,  315,  319,  320,  316,   85,  313,  309,
      321,   85,  414,  399,  314,   85,   85,  310,  325,  310,
      400,  326,  309,  324,  378,  379,   85,  415,   85,  425,
      310,  418,  380,  154,  309,  381,  446,  426,  447,  412,
     1107,   85,  419,  483,  310,   85,   85,  309,   85,  321,
      354,  355,  356,  420,  357,  358,  413,  310,  359,  431,
      360,  427,  288,   85,   85,  361,  362,  363,  364,  365,
      406,  446,   85,  447,  407,  421,   85,  428,   85,  429,

      473,  111,  408,   85,  409,  410,  424,  432,  446,  288,
      447,  433,  435,  228,   79,   80,   80,   80,  228,  231,
      232,  229,  236,  237,  231,  473,  111,  236,  231,  232,
       85,  448,  446,  231,  447,  446,  446,  447,  447,  566,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  436,  232,
      447,   85,  446,  436,  447,  437,  438,  438,  438,  438,
      438,  438,  438,  447,  446,  446,  447,  447,   85,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  282,  282,
      446,  544,  447,  446,  449,  447,  459,  292,  460,  529,

       85,  461,  462,  320,   85,  439,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  310,  455,  550,  455,  455,
      292,  455,  455,  291,  292,  264,  265,  266,   85,  287,
      267,  268,  292,  477,  268,  478,  291,  288,  479,  480,
      642,  455,  310,  455,  455,  269,  455,  292,  455,   85,
      264,  265,  266,  287,  287,  267,  473,  268,  330,  292,
      331,  288,  567,  456,  288,  456,  314,  268,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  463,  287,  464,
      330,  473,  331,  463,   85,  473,  463,  473,  288,  111,
      473,  473,  102,  314,  279,  279,  279,  279,  279,  279,

      279,   85,  463,  537,  464,  302,  111,  458,  548,  463,
      473,  122,  473,  302,  111,  473,  314,  473,   85,  463,
      466,  466,  466,  466,  466,  466,  466,  466,  466,   85,
      538,  111,  313,  280,  324,  122,  122,  122,  552,  467,
      468,  469,  658,  314,  470,  471,  268,  545,  471,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  313,  472,
      122,  324,  122,   85,  467,  468,  469,  314,  500,  470,
      501,  471, 1362,  502,  503,   85,  570,  474,   85,  474,
      551,  471,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  481,  504,  482,  314,   85,  546,  481,   85,  292,

      481,   85,  273,  274,  275,   85,  553,  276,  277,   85,
       85,  277,   85,  549,  547,  565,  481,   85,  482,  574,
      815,  476,   85,  481,  562,  554,  292,  273,  274,  275,
      560,   85,  276,  481,  277,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  277,  559,  575,  563,  564,   85,
       85,  284,   85,  284,   85,  106,  285,  285,  285,  285,
      285,  285,  285,  285,  285,   85,  500,  571,  501,  593,
      577,  502,  503,  506,  308,  507,   85,  309,  508,  509,
      106,  484,  484,   85,  605,  310,   85,  506,  568,  507,
      581,   85,  508,  509,   85,  578,  111,  292,   85,  579,

      580,   85,  309,  569,  485,  486,  487,  488,  489,   85,
      111,  510,  310,  490,  665,  489,  504,   85,  582,  583,
      491,  111,   85,  510,  292,   85,   85,  585,   85,  492,
      486,  590,  493,  591,  488,  111,  489,  584,  678,  665,
      490,  596,  277,  586,  587,  489,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  309,  495,   85,  496,   85,   85,
      497,  498,  310,   85,  498,  592,  712,   85,   85,   85,
      503,   85,  594,  595,  607,  499,  588,  597,  598,  309,
      495,  589,  496,   85,  308,  497,  555,  498,  600,  310,

       85,   85,  556,  557,  558,   85,  602,  498,  512,   85,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  524,
      599,  525,  608,  601,  526,  527,  513,  513,  513,  513,
      513,  513,   85,  514,  515,  516,  517,  518,   85,   85,
       85,  606,  519,  528,  520,  637,  609,   85,  612,  521,
      314,  513,  513,  513,  513,  513,  513,  614,  522,  515,
      611,  523,  524,  517,  525,  518,   85,  526,  527,  519,
       85,  603,   85,  530,  520,  531,   85,  314,  532,  533,
      530,   85,  531,  610,   85,  532,  533,   85,  604,   85,
       85,   85,  618,  314,  615,   85,  122,  534,   85,   85,

      616,   85,  617,  122,  622,   85,   85,   85,  621,  620,
       85,  154,  528,  619,  713,  627,  629,  625,  509,  632,
      314,  122,  624,  623,  628,   85,   85,  626,  122,   85,
      534,  117,  117,  117,  117,  117,  117,  117,  117,  117,
       85,   85,  630,   85,  631,   85,   85,   85,  635,   85,
       85,  636,  638,   85,  634,  436,  232,  232,  633,  994,
      436,   85,  437,  230,  640,  641,  446,  639,  447, 1362,
      327,  643,  238,  238,  238,  238,  238,  238,  238,  438,
      438,  438,  438,  438,  438,  438,  446,   85,  447,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  661,  791,

      662,  740,  741,  663,  664,  527,  533,  704,  292,  111,
      739,  645,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      685,  264,  704,  266,  111,  292,  267,  268,  686,  292,
      268,   85,  715,  111,  669,  314,  670,   85,   85,  671,
      672,  657,  752,   85,  716,  685,  264, 1362,  266,  775,
      465,  267,  754,  268,  753,  686,  292,  665,  111,  456,
      715,  456,  314,  268,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  665,  665,  314,  665,   85,  742,  665,  665,

      488,  685,  467,  468,  469,  715,  685,  470,  471,  686,
      681,  471,  682,  122,  686,  683,  684,  717,  665,  797,
      665,  314,  472,  665,  743,  665,  685,  467,  468,  469,
      488,  685,  470,  715,  471,   85,  686,  122,  122,   85,
      666,  686,  666,   85,  471,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  673,   85,  674,  761,  755,  764,
      673,   85,  122,  673,  475,  475,  475,  475,  475,  475,
      475,  475,  475,   85,  756,   85,   85,  765,  757,  673,
      772,  674, 1362, 1347,  668,  758,  673,  279,  279,  279,
      279,  279,  279,  279,  104,  104,  673,  676,  676,  676,

      676,  676,  676,  676,  676,  676,   85,  698,  686,  699,
      700,   85,   85,   85,  517,  718,  273,  759,  275,  800,
      718,  276,  277,  719,  763,  277,  483,   85,  719,   85,
       85,   85,  701,  686,  766,  702,  677,  700,  760,  762,
      718,  273,  781,  275,  767,  718,  276,  704,  277,  704,
      719,   85,  704,  704,  474,  719,  474,   85,  277,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  484,  484,
       85,  778,  704,  687,  704,  688,  689,  704,  776,  704,
       85,  693,  690,  694,   85,   85,  695,  696,  771,   85,
       85,  485,  486,  487,  488,  489,  768,  769,  691,  790,

      490,  692,  489,  689,  685,  697,  770,  491,  705,  690,
      706,   85,  686,  707,  708,   85,  492,  486,   85,  493,
      693,  488,  694,  489,  802,  695,  696,  490,   85,  685,
      779,  704,  489,  773,  718,  709,   85,  710,   85,  686,
      774,  709,  719,  685,  709,  780,  782,  777,   85,   85,
       85,  686,   85,   85,   85,  788,  704,  793,  517,  718,
      709,  796,  710,  720,  978,  721,  722,  709,  685,  719,
      697,  789,  723,  783,  792,   85,  795,  709,  686,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  724,   85,
       85,  725,  798,  722,  734,  719,  735,  736,  495,  723,

      496,   85,   85,  497,  498, 1079,   85,  498,   85,  794,
       85,   85,   85,  799,   85,   85,  801,  803,  499,  737,
      719,   85,  738,  495,  736,  496,  805,  804,  497,  807,
      498,  808,  806,  809,   85,  811,  810,   85,   85,   85,
      498,  512,  832,  513,  513,  513,  513,  513,  513,  513,
      513,  513,   85,   85,  813,  814,   85,   85,   85,  513,
      513,  513,  513,  513,  513,  812,  514,  515,  516,  517,
      518,  948,   85, 1362,  816,  519,   85,  520,  821,  817,
      818,  819,  521,  829,  513,  513,  513,  513,  513,  513,
       85,  522,  515,   85,  523,  726,  517,  727,  518,  826,

      728,  729,  519,  731,   85,  731,   85,  520,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  820,  718,  730,
       85,   85,   85,  726,  822,  727,  719,   85,  728,  729,
       85,   85,   85,   85,   85,   85, 1362, 1340,  831,  830,
      823,  824,   85,  718,  825,  827,  718,  733,  828,   85,
      837,  834,   85,  719,  719,  838,  835,  833,  836,   85,
      839,   85,   85,   85,   85,   85,   85,   85,  848,  840,
      841,  718,  232,  730,  845,  847,  944,  844,  849,  455,
      455,  719,  860,  473,  842,  843,  463,  846,  238,  238,
      238,  238,  238,  238,  238,  656,  656,  656,  656,  656,

      656,  656,  656,  656,  455,  455,  865,  868,  473,  869,
      471,  874,  870,  871,  264,  481,  266,  268,  268,  267,
      268,  277,   85,  268,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  882,  657,  928,  689,  696,   85,  264,
       85,  266,  473,  686,  267,  690,  268,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  268,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  690,  473,  690,  685,
      686,  719,  690,  700,  489,  685,  467,  686,  469,   85,
      277,  470,  471,  686,  689,  471,  675,  888,  904,  715,
      489,  498,  729,  690,  685,  690,  864,   85,  719,  489,

      685,  467,  936,  469,  686, 1148,  470,  877,  471,  878,
      686,   85,  879,  880,  666,  489,  666,  715,  471,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  877,  690,  878,
      736,  520,  879,  880,  723,  489,  723,  273,   85,  275,
      722,  938,  276,  277,  484,  484,  277,  881,  883,  723,
      884,  881,  722,  885,  886,  690,  520,  677,  690,  700,
      489,  723,  273,  723,  275,  520,  715,  276,  883,  277,
      884,  489,  887,  885,  886,  891,  723,  892,  716,  277,
      893,  894,  899,  703,  900,  690,  520,  901,  902, 1362,

      520,  489,   85,   85,  715,   85,  489,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  903,  715,  929,  927,
      736,  520,  951,  723,   85,  895,  489,  895,  887,  898,
      896,  896,  896,  896,  896,  896,  896,  896,  896,   85,
      930,  718,  899,  718,  900,  715,  711,  901,  902,  719,
      723,  719,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  931,   85,   85, 1337,  967,  718,  945,  718,  897,
       85,   85,   85,  723,  937,  731,  719,  731,  719,   85,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  910,
      932,  911,  903,  934,  912,  913,   85,   85,   85,  939,

      723,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      933,  935,  520,  914,  940,   85,   85,   85,   85,   85,
      906,   85,  907, 1362,  949,  908,  906,   85,  910,  906,
      911,  941,  946,  912,  913,   85,  942,  520,   85,  943,
      909,  950,   85,  955,   85,  906,   85,  907,  947,  954,
      908,  520,  906,  952,   85,  953,   85,   85,   85,  964,
       85,   85,  906,   85,   85,  968,  969,   85,   85,  966,
      974,   85,  965,   85,   85,  970,  520,   85,  914,  972,
      975,  980,  971,  973,  977,  976,   85,  981,  979,  982,
       85,  983,   85,   85,   85,  984,   85,   85,   85,  989,

       85,  985,   85,  988,   85,   85,   85,   85,  993,  995,
      991,  987,   85, 1000,  999,  992,   85,   85,  990,  998,
       85,   85,  997,   85,   85, 1003,  996,   85,   85,   85,
     1002,   85, 1006, 1004,   85, 1001,   85, 1008,   85,   85,
       85, 1005, 1007,  455,  665,  665, 1024, 1057, 1028, 1009,
      673, 1010,  880, 1073, 1336,  473, 1064,  690, 1011,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  455,  665,
      665,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      473,  268,  471,  471,  690,  690, 1029,   85,  489,  489,
      886,  704,  704,  277, 1037,  723, 1058,   85,  858,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  723,  520,
      872, 1031,  690,  489,  489,  709,  704,  704,  467, 1037,
      469, 1036,  723,  470,  471,  902,   85,  471, 1045,  498,
      498, 1055,  913,   85,  520,  723,   85,   85,  864,   85,
       85, 1059, 1069,  467, 1056,  469, 1063, 1066,  470, 1320,
      471,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      471, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  520,
      906,   85,  907,   85,   85,  908,  906,   85, 1038,  906,
     1039,   85, 1067, 1040, 1041,   85,   85,   85, 1068, 1071,

     1035,   85, 1080, 1160,  520,  906, 1065,  907, 1070,  909,
      908, 1037,  906, 1072, 1060,   85, 1061,   85,  895, 1062,
      895, 1081,  906,  896,  896,  896,  896,  896,  896,  896,
      896,  896, 1042,   85, 1043,   85, 1037, 1074, 1042, 1076,
       85, 1042,   85, 1077,   85, 1085,   85,   85,   85,   85,
     1075, 1082, 1078, 1083,   85,   85,   85, 1042,   85, 1043,
       85,   85, 1084,   85, 1042, 1096, 1097, 1098, 1086,   85,
       85,   85, 1102, 1100, 1042, 1095, 1106,   85,   85, 1099,
       85,   85, 1103, 1101,   85,   85,   85,   85,   85,   85,
     1104, 1114, 1113,   85, 1108, 1112, 1116, 1115, 1105,   85,

     1109, 1110,   85,   85, 1111,   85,   85,   85, 1117, 1118,
       85,   85, 1119, 1130, 1120,   85,   85,  906, 1121,  665,
      704, 1122,   85, 1133, 1153, 1134, 1147, 1123, 1135, 1136,
     1149, 1152, 1268, 1124,  863,  863,  863,  863,  863,  863,
      863,  863,  863, 1146,  665,  704,  905,  905,  905,  905,
      905,  905,  905,  905,  905, 1150,   85,  471,  498, 1151,
       85,   85,   85,   85,   85,   85, 1155, 1154,   85,   85,
       85, 1157, 1158, 1022, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1156, 1161, 1044,   85,   85, 1159,   85,
     1170,   85,   85,  906, 1164,  907, 1176, 1166,  908,  906,

     1162, 1163,  906, 1167,   85,   85,   85, 1165, 1168,   85,
       85,   85, 1171, 1035,   85, 1169,   85, 1172,  906,   85,
      907, 1175, 1173,  908, 1174,  906,   85,   85,   85,   85,
       85, 1186,   85,   85,   85,  906, 1185, 1187, 1192, 1177,
       85,   85,   85,   85,   85,   85, 1188,   85, 1196,   85,
       85, 1189, 1190,   85, 1037, 1199, 1037, 1191, 1193, 1197,
     1219, 1194, 1200, 1201, 1195,   85, 1198,   85, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034,   85, 1207, 1037,
       85, 1037, 1042, 1216,   85, 1217,   85,   85, 1218,   85,
       85, 1220,  906,   85,  906, 1224, 1226,   85,   85,   85,

     1222, 1223, 1225, 1221,   85,   85, 1233, 1129, 1231, 1234,
       85,   85, 1241, 1235, 1236, 1229, 1227, 1232,   85,   85,
       85,   85, 1237,   85, 1228, 1230, 1239, 1238,   85,   85,
       85, 1240,   85,   85,   85,   85, 1242,   85,   85,   85,
       85,   85, 1249, 1037,   85,   85, 1266, 1247, 1267, 1250,
       85,   85,   85, 1248,   85, 1252, 1254, 1251, 1253, 1256,
       85,   85, 1255, 1273,   85,   85,   85, 1276, 1037, 1277,
       85, 1279, 1272, 1271,   85,   85, 1269, 1280, 1270,   85,
       85,  906,   85, 1274, 1275,   85,   85,   85, 1278, 1283,
     1284,   85,   85,   85, 1285, 1290,   85, 1281,   85,   85,

       85, 1282, 1286, 1302,   85,   85, 1294, 1292, 1291,   85,
       85,   85,   85, 1305,   85,   85, 1304,   85, 1310, 1293,
     1295, 1306,   85, 1307,   85, 1312, 1303,   85,   85, 1308,
     1314,   85,   85,   85, 1311, 1309,   85, 1319, 1322,   85,
     1321,   85,   85,   85, 1329, 1323, 1313, 1328, 1327,   85,
       85,   85,   85, 1330, 1331, 1332,   85,   85,   85, 1333,
     1334,   85,   85,   85,   85, 1343, 1339, 1345,   85,   85,
     1338, 1346,   85, 1344,   85,   85, 1342,   85, 1341,   85,
     1351,   85,   85,   85,   85,   85, 1353,   85,   85,   85,
     1352, 1348,   85, 1357, 1349, 1350, 1355, 1361,   85, 1354,

     1362, 1326, 1362, 1356, 1325, 1358, 1359, 1360,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   84, 1362, 1362,   84,   84,   84,   84,   84,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  235,   85,  235,  235, 1362,  235,  235,  235,  235,
     1318,  235,  243, 1316,   85,  243,  243,  243,  243,  243,
      243,   85,  243,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  306,  306,  306,   85,   85,  306,
      336,   85,   85,   85,  336,  336,  336,  336,  338,  338,
       85,   85,  338,  340,  340, 1362, 1362,  340,  366, 1301,
     1299, 1042,  366,  366,  366,  366,  440,  440, 1362, 1297,
      440,  442,  442, 1362, 1296,  442,  444,  444,   85,   85,
      444,  451,  451,   85,   85,  451,  453,  453, 1289, 1362,
      453,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  511,  511,  306,  306,  306,  535, 1362,   85,
      535,  535,  535,  535,  535,  539,  539,   85,   85,  539,
      338,  338,  541,  541,   85,   85,  541,  340,  340,   84,

       85, 1362,   84,   84,   84,   84,   84,  572, 1265, 1264,
      572,  572,  572,  572,  572,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  646,  646, 1362,
     1042,  646,  440,  440,  648,  648, 1042, 1261,  648,  442,
      442,  650,  650, 1362, 1260,  650,  444,  444,  652,  652,
     1362, 1258,  652,  451,  451,  654,  654,   85,   85,  654,
      453,  453,  714,  714,  714,   85,  714,  511,  511,  511,
       85,  511,  535,   85,   85,  535,  535,  535,  535,  535,
      744,  744,   85, 1362,  744,  746,  746, 1362, 1362,  746,

      748,  748, 1245, 1362,  748,  539,  539,  750,  750, 1244,
       85,  750,  541,  541,   84,   85,   85,   84,   84,   84,
       84,   84,  572,   85,   85,  572,  572,  572,  572,  572,
      784,  784,   85,   85,  784,  786,  786, 1362, 1215,  786,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  850,  850, 1362, 1362,  850,  646,  646,  852,  852,
     1362, 1212,  852,  648,  648,  650,  650, 1362, 1211,  650,
      854,  854, 1042, 1209,  854,  652,  652,  856,  856, 1208,
     1206,  856,  654,  654,  714,  714,  714,  709,  714,  513,
      513,  673, 1205,  513,  915,  915, 1203,   85,  915,  917,

      917,   85,   85,  917,  919,  919,   85,   85,  919,  744,
      744,  921,  921,   85,   85,  921,  746,  746,  923,  923,
       85,   85,  923,  748,  748,  925,  925,   85,   85,  925,
      750,  750,   84,   85,   85,   84,   84,   84,   84,   84,
      956,  956,   85, 1184,  956,  958,  958, 1183, 1181,  958,
      960,  960, 1179,   85,  960,  784,  784,  962,  962,   85,
     1145,  962,  786,  786, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1014, 1014, 1143, 1142, 1014,
      850,  850, 1016, 1016, 1140, 1138, 1016,  852,  852, 1018,
     1018,  913,  906, 1018,  854,  854,   84,   84, 1132, 1131,

       84,  856,  856,  714,  714,  902, 1129,  714, 1046, 1046,
      709,  709, 1046,  915,  915, 1048, 1048, 1128,  886, 1048,
      917,  917, 1050, 1050,  880,  481, 1050,  919,  919, 1052,
     1052,  673,  673, 1052,  921,  921, 1054, 1054,  923,  923,
       84, 1127,  463,   84,   84,   84,   84,   84,  925,  925,
     1087, 1087, 1013,   85, 1087,  956,  956, 1089, 1089,   85,
       85, 1089,  958,  958, 1091, 1091,   85,   85, 1091,  960,
      960, 1093, 1093,   85,   85, 1093,  962,  962, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1125,
     1125, 1014, 1014, 1016, 1016, 1126, 1126, 1018, 1018,   84,

       84, 1137, 1137,   85,   85, 1137, 1046, 1046, 1139, 1139,
       85,   85, 1139, 1048, 1048, 1141, 1141,   85,   85, 1141,
     1050, 1050,  336,  336,   85,   85,  336, 1052, 1052, 1144,
     1144,   85,   85, 1144, 1178, 1178,   85, 1094, 1178, 1087,
     1087, 1180, 1180, 1092, 1090, 1180, 1089, 1089, 1182, 1182,
     1088,   85, 1182, 1091, 1091,  366,  366, 1053, 1051,  366,
     1093, 1093, 1202, 1202, 1049, 1047, 1202, 1204, 1204,  913,
      913, 1204, 1210, 1210, 1044,  729, 1210,  535,  535,  902,
      902,  535, 1213, 1213, 1214, 1214,  898,  709, 1214, 1243,
     1243, 1033, 1032, 1243,  572,  572, 1030,  886,  572, 1246,

     1246, 1257, 1257,  886,  696, 1257, 1259, 1259,  880,  880,
     1259, 1262, 1262, 1210, 1210, 1263, 1263,  481,  481, 1263,
      925,  925, 1027,  673,  925, 1287, 1287, 1288, 1288, 1026,
     1025, 1288, 1016, 1016, 1023, 1022, 1016,   84,   84,  463,
      463,   84, 1298, 1298, 1021, 1020, 1298, 1300, 1300, 1019,
     1017, 1300, 1315, 1315, 1015, 1013, 1315, 1317, 1317,   85,
       85, 1317, 1324, 1324,   85,   85, 1324,  336,  336,   85,
       85,  336, 1335, 1335,   85,   85, 1335,  366,  366,   85,
       85,  366,   85,   85,   85,   85,   85,  963,  961,  959,
      957,   85,  926,  924,  922,  920,  918,  916,  533,  527,

      739,  729,  729,  509,  503,  498,  890,  889,  696,  696,
      481,  876,  875,  873,  872,  471,  867,  866,  463,  862,
      861,  859,  858,  857,  855,  651,  651,  853,  851,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,  787,
      785,  573,  751,  749,  747,  745,  536,  533,  533,  320,
      527,  527,  509,  509,  298,  503,  503,  711,  703,  277,
      680,  679,  675,  268,  660,  659,  655,  653,  447,  447,
      651,  649,  647,   85,   85,   85,  573,  543,  542,  540,
      536,  332,  331,  320,  320,  305,  298,  298,  271,  465,
      454,  452,  450,  447,  446,  445,  443,  441,  232,   85,

       85,  367,  342,  341,  339,  332,  337,  335,  332,  330,
      329,  328,  271,  262,  261,   83,   83,   85,  234,  173,
      132,  127,   85, 1362,   71,   71,   11, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362
    } ;

static const flex_int16_t yy_chk[4219] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    8,    9,   10,    2,   19,   19,    2,

        9,   10,   20,    7,    8,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   16,   24,   16,
       24,   25,   36,   36,   20,   28,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   34,   85,   25,   29,
       25,   27,   27,   27,   29,   43,   41,   43,    7,    8,
        9,   10,   38,   57,  113,   38,   34,   29,   34,   34,
       39,   65,   57,   46,   85,   39,   41,   44,   44,   44,
       44,   47,   44,   44,   52,   44,   47,   44,   46,   53,
       46,   44,   44,   52,   46,  815,   46,   44,  124,   53,
       44,   47,   52,   41,   54,  113,   53,   27,   30,   56,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   67,
       39,   67,   54,   39,  815,   65,   56,   30,   55,   56,
       30,   56,   49,   30,   30,   30,   30,   30,  136,  124,
      136,   49,   30,   30,   30,   49,   55,   50,   48,   30,
       49,   55,   30,   48,   49,   30,  105,  105,   30,   30,
       48,   30,   50,   30,   50,   30,   48,  357,  137,   30,
      137,   60,   30,   50,   30,   31,   60,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   59,   63,  139,  142,
      139,  142,   60,  357,  174,  105,   63,   31,   59,   59,
       31,   31,   31,   31,   31,   51,   59,  174,   59,   31,

       51,   31,  140,   59,  143,  143,   31,  143,   51,  166,
       51,   60,   31,   51,   60,   31,   31,   51,   31,  140,
       31,  140,   31,  368,  166,   61,   31,  144,   60,  144,
      156,   31,   37,  141,  368,  156,   37,   37,   61,   37,
       58,   37,   37,   61,   37,  165,   37,   61,  141,  147,
      141,  147,   58,   58,  165,  148,   62,  148,   37,   37,
       37,   62,   58,   58,  151,   58,  151,  171,   62,   62,
       68,   68,   68,   68,   68,   68,   69,   69,   68,  171,
      156,   69,   37,   37,  245,   37,  245,   37,   78,   78,
       78,   78,   78,   78,  145,  145,  145,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   80,   80,   80,   80,
       80,   80,   37,   37,   75,   75,  107,  107,  168,   75,
      186,   75,  170, 1361,  167,  107,   75,   81,   81,   81,
       81,   81,   81,  167,  168,   75,   75,   75,   75,   75,
       75,   75,  107,  110,  170,  175,  179,  186,  115,   75,
      176,  110,  107,  175,  178,  179,  115,  103,  103,  103,
      103,  103,  103,  103,  162,  114,  176,   75,  110,  163,
      177,   75,  115,  115,  103,  178,   75,   75,  110,  162,
       75,   75, 1360,  115,  114,  295,  162,  163,   75,  295,
      103,   75,  177,   75,   75,   75,  103,   75,   83,  103,

      114,  183,   83,   83,  164,   83,  114,   83,   83,  114,
       83,  183,   83, 1357,  112,  112,  112,  112,  202,  103,
      185,  268,  164,  169,   83,   83,   83,  202,  104,  114,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  112,
      112,  169,  112,  185,  112,  180,  268,  184,   83,   83,
      104,   83,  106,  404,  106,  192,  404,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  180,  180,  184,  104,
      187,  181,  116,  192,  116,  104,  181,  116,  116,   83,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  181,
      194,  187,  190,  193,  195,  116,  106,  118,  118,   98,

       98,   98,  121,  116,   98,   98,  118,  190,   98,  188,
      121,  195, 1349,  193,  188,  210,  220,  194,  199,   98,
      116,  220,  116,  118,   98,   98,   98,  121,  210,   98,
      116,   98,  188,  118,  109,  199,  109,  121,  191,  109,
      109,   98,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  196,  189,  201,  223,  191,  204,  109,  109,  189,
      125,  102,  102,  102,  191,  109,  102,  102,  125,  108,
      102,  108,  108,  196,  189,  201,  223,  214,  108,  200,
     1348,  102,  109,  204,  125,  125,  102,  102,  102,  209,
      215,  102,  109,  102,  108,  125,  200,  108,  119,  108,

      119,  119,  206,  102,  214,  108,  120,  119,  120,  215,
      209,  120,  120,  123,  123,  123,  123, 1347,  198,  126,
      206,  126,  280,  119,  126,  126,  119,  208,  119,  120,
      120,  211,  208,  198,  119,  182,  217,  120,  123,  123,
      198,  123,  126,  123,  182,  182,  212,  208,  207,  217,
      126,  211,  182,  216,  120,  182,  246,  217,  246,  207,
      981,  218,  212,  280,  120,  172,  221,  126,  213,  126,
      172,  172,  172,  213,  172,  172,  207,  126,  172,  221,
      172,  218,  287,  205,  219,  172,  172,  172,  172,  172,
      205,  248,  224,  248,  205,  213,  981,  219,  222,  219,

      277,  302,  205,  216,  205,  205,  216,  222,  251,  287,
      251,  222,  224,  228,  228,  228,  228,  228,  228,  229,
      229,  228,  236,  236,  229,  277,  302,  236,  231,  231,
      361,  252,  252,  231,  252,  253,  256,  253,  256,  361,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  233,  233,
      250, 1346,  257,  233,  257,  233,  239,  239,  239,  239,
      239,  239,  239,  249,  258,  250,  258,  250,  343,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  283,  283,
      249,  343,  249,  254,  254,  254,  266,  291,  266,  317,

      349,  266,  266,  317, 1343,  239,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  309,  264,  349,  264,  266,
      293,  264,  264,  289,  291,  263,  263,  263,  434,  298,
      263,  263,  289,  275,  263,  275,  293,  298,  275,  275,
      434,  264,  309,  264,  266,  263,  264,  293,  264,  362,
      263,  263,  263,  299,  298,  263,  275,  263,  333,  289,
      333,  299,  362,  265,  298,  265,  313,  263,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  267,  299,  267,
      334,  275,  334,  267, 1342,  273,  267,  273,  299,  303,
      273,  273,  279,  313,  279,  279,  279,  279,  279,  279,

      279,  347,  267,  337,  267,  300,  300,  265,  347,  267,
      273,  324,  273,  303,  303,  273,  315,  273,  351,  267,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  344,
      337,  300,  315,  279,  322,  322,  324,  325,  351,  272,
      272,  272,  459,  315,  272,  272,  459,  344,  272,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  311,  272,
      322,  325,  325,  364,  272,  272,  272,  311,  290,  272,
      290,  272, 1340,  290,  290,  350,  364,  274,  345,  274,
      350,  272,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  276,  290,  276,  311,  348,  345,  276,  346,  290,

      276,  352,  278,  278,  278,  353,  352,  278,  278,  358,
      360,  278,  356,  348,  346,  360,  276, 1339,  276,  367,
      609,  274,  355,  276,  358,  353,  290,  278,  278,  278,
      356,  359,  278,  276,  278,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  278,  355,  367,  359,  359,  365,
      385,  286,  371,  286,  609,  281,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  396,  294,  365,  294,  385,
      371,  294,  294,  304,  281,  304,  363,  320,  304,  304,
      281,  282,  282,  375,  396,  320,  372,  301,  363,  301,
      375,  374,  301,  301,  373,  372,  304,  294,  376,  373,

      374,  377,  320,  363,  282,  282,  282,  282,  282,  379,
      301,  301,  320,  282,  471,  282,  294,  378,  376,  377,
      282,  304,  380,  304,  294,  388,  382,  379,  383,  282,
      282,  382,  282,  383,  282,  301,  282,  378,  477,  471,
      282,  388,  477,  380,  380,  282,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  321,  285,  398,  285,  381,  384,
      285,  285,  321,  386,  285,  384,  500,  387,  389,  390,
      500,  354,  386,  387,  398,  285,  381,  389,  390,  321,
      285,  381,  285,  392,  308,  285,  354,  285,  392,  321,

      393,  394,  354,  354,  354,  391,  394,  285,  306,  399,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  312,
      391,  312,  399,  393,  312,  312,  306,  306,  306,  306,
      306,  306,  397,  306,  306,  306,  306,  306,  405,  403,
      429,  397,  306,  312,  306,  429,  400,  402,  403,  306,
      312,  306,  306,  306,  306,  306,  306,  405,  306,  306,
      402,  306,  316,  306,  316,  306,  395,  316,  316,  306,
      409,  395,  401,  323,  306,  323,  406,  312,  323,  323,
      326,  400,  326,  401,  408,  326,  326,  407,  395,  411,
      410,  412,  409,  316,  406,  413,  323,  323,  416,  415,

      407,  414,  408,  326,  413,  417,  418,  419,  412,  411,
      423,  424,  316,  410,  506,  418,  419,  416,  506,  423,
      316,  323,  415,  414,  418,  422,  427,  417,  326,  420,
      326,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      425,  426,  420,  428,  422,  431,  430,  432,  427,  827,
      433,  428,  430,  435,  426,  436,  436,  437,  425,  827,
      436,  424,  436,  437,  432,  433,  448,  431,  448,  521,
      327,  435,  438,  438,  438,  438,  438,  438,  438,  439,
      439,  439,  439,  439,  439,  439,  449,  581,  449,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  464,  581,

      464,  524,  530,  464,  464,  524,  530,  498,  503,  509,
      521,  438,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      488,  457,  498,  457,  509,  503,  457,  457,  488,  504,
      457,  544,  511,  510,  469,  527,  469,  546,  545,  469,
      469,  457,  544,  565,  511,  488,  457, 1337,  457,  565,
      465,  457,  546,  457,  545,  488,  504,  469,  510,  458,
      511,  458,  527,  457,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  469,  467,  528,  467,  588,  536,  467,  467,

      485,  485,  466,  466,  466,  512,  492,  466,  466,  485,
      482,  466,  482,  533,  492,  482,  482,  512,  467,  588,
      467,  528,  466,  467,  536,  467,  485,  466,  466,  466,
      492,  492,  466,  512,  466,  553,  485,  534,  533,  547,
      468,  492,  468,  556,  466,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  470,  557,  470,  553,  547,  556,
      470,  548,  534,  470,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  549,  548,  563,  550,  557,  549,  470,
      563,  470, 1336, 1335,  468,  550,  470,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  470,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  551,  490,  490,  490,
      490,  555,  558,  591,  514,  514,  475,  551,  475,  591,
      517,  475,  475,  514,  555,  475,  483,  571,  517,  552,
      554,  559,  490,  490,  558,  490,  475,  490,  552,  554,
      514,  475,  571,  475,  559,  517,  475,  495,  475,  495,
      514,  568,  495,  495,  476,  517,  476,  566,  475,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  484,  484,
      562,  568,  495,  486,  495,  486,  486,  495,  566,  495,
      560,  487,  486,  487,  561,  579,  487,  487,  562, 1334,
     1333,  484,  484,  484,  484,  484,  560,  560,  486,  579,

      484,  486,  484,  486,  487,  487,  561,  484,  496,  486,
      496,  569,  487,  496,  496,  593,  484,  484,  564,  484,
      493,  484,  493,  484,  593,  493,  493,  484,  570,  487,
      569,  496,  484,  564,  522,  497,  567,  497,  576,  487,
      564,  497,  522,  493,  497,  570,  573,  567,  587,  578,
      584,  493,  806,  583,  586,  576,  496,  584,  522,  522,
      497,  587,  497,  515,  806,  515,  515,  497,  493,  522,
      493,  578,  515,  573,  583,  589,  586,  497,  493,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  515,  585,
      590,  515,  589,  515,  519,  519,  519,  519,  494,  515,

      494,  592,  595,  494,  494,  948,  598,  494,  597,  585,
      599,  602,  601,  590,  600,  604,  592,  595,  494,  519,
      519,  603,  519,  494,  519,  494,  598,  597,  494,  600,
      494,  601,  599,  602,  606,  604,  603,  627,  608,  948,
      494,  513,  627,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  611,  612,  606,  608,  605,  616,  613,  513,
      513,  513,  513,  513,  513,  605,  513,  513,  513,  513,
      513,  774,  614, 1326,  611,  513,  624,  513,  616,  612,
      613,  614,  513,  624,  513,  513,  513,  513,  513,  513,
      621,  513,  513,  615,  513,  516,  513,  516,  513,  621,

      516,  516,  513,  518,  617,  518,  774,  513,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  615,  516,  516,
      618,  619,  620,  523,  617,  523,  516,  622,  523,  523,
      625,  626,  628,  629,  630,  623, 1325, 1324,  626,  625,
      618,  619,  632,  516,  620,  622,  523,  518,  623,  631,
      632,  629,  633,  516,  523,  632,  630,  628,  631,  634,
      632,  635,  638,  637,  639,  643,  641,  770,  643,  633,
      634,  523,  644,  523,  639,  641,  770,  638,  644,  659,
      660,  523,  661,  679,  635,  637,  661,  639,  645,  645,
      645,  645,  645,  645,  645,  656,  656,  656,  656,  656,

      656,  656,  656,  656,  659,  660,  669,  674,  679,  674,
      669,  681,  674,  674,  656,  681,  656,  659,  660,  656,
      656,  679,  753,  656,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  693,  656,  753,  687,  693, 1323,  656,
     1320,  656,  680,  685,  656,  687,  656,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  656,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  689,  680,  691,  696,
      685,  718,  687,  698,  698,  697,  667,  696,  667, 1058,
      680,  667,  667,  697,  691,  667,  675,  705,  726,  717,
      700,  705,  726,  689,  696,  691,  667,  762,  718,  698,

      697,  667,  762,  667,  696, 1058,  667,  692,  667,  692,
      697, 1319,  692,  692,  668,  700,  668,  717,  667,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  688,  692,  688,
      734,  734,  688,  688,  722,  701,  724,  676,  764,  676,
      720,  764,  676,  676,  703,  703,  676,  692,  699,  720,
      699,  688,  724,  699,  699,  692,  734,  676,  688,  701,
      701,  722,  676,  724,  676,  736,  714,  676,  702,  676,
      702,  699,  699,  702,  702,  710,  720,  710,  714,  676,
      710,  710,  721,  703,  721,  688,  737,  721,  721, 1318,

      736,  702,  752,  755,  714,  777,  699,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  721,  716,  755,  752,
      737,  737,  777,  721,  756,  715,  702,  715,  702,  716,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  757,
      756,  729,  725,  730,  725,  716,  711,  725,  725,  729,
      721,  730,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  757,  771,  763, 1317,  791,  729,  771,  730,  715,
      758,  760,  791,  725,  763,  733,  729,  733,  730,  765,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  735,
      758,  735,  725,  760,  735,  735,  766,  759,  761,  765,

      725,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      759,  761,  735,  735,  766,  775,  767,  768,  769,  776,
      732,  772,  732, 1316,  775,  732,  732,  780,  738,  732,
      738,  767,  772,  738,  738,  773,  768,  735,  781,  769,
      732,  776,  789,  781,  778,  732,  779,  732,  773,  780,
      732,  738,  732,  778,  788,  779,  792,  793,  796,  788,
      797,  801,  732,  804,  799,  792,  793,  805,  800,  789,
      801,  803,  788,  807,  810,  796,  738,  821,  738,  799,
      803,  809,  797,  800,  805,  804,  811,  809,  807,  810,
      813,  811,  814,  816,  820,  813,  822,  823,  824,  821,

      826,  814,  828,  820,  829,  830,  832,  831,  826,  828,
      823,  816,  834,  833,  832,  824,  809,  838,  822,  831,
      833,  837,  830,  839,  841,  838,  829,  842,  844,  843,
      837,  845,  842,  839,  846,  834,  848,  844,  942,  933,
      928,  841,  843,  859,  866,  867,  868,  928,  877,  845,
      868,  846,  877,  942, 1315,  873,  933,  880,  848,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  859,  866,
      867,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      873,  859,  866,  867,  880,  881,  883,  929,  886,  887,
      883,  889,  890,  873,  906,  902,  929, 1313,  858,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  903,  913,
      872,  891,  881,  886,  887,  891,  889,  890,  863,  906,
      863,  899,  902,  863,  863,  899,  927,  863,  910,  889,
      890,  927,  910,  932,  913,  903,  930, 1292,  863,  938,
      935,  930,  938,  863,  927,  863,  932,  935,  863, 1292,
      863,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      863,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  914,
      896,  937,  896,  934,  936,  896,  896,  949,  907,  896,
      907,  941,  936,  907,  907,  939,  940, 1070,  937,  940,

      896,  950,  949, 1070,  914,  896,  934,  896,  939,  905,
      896,  907,  896,  941,  931,  943,  931,  945,  897,  931,
      897,  950,  896,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  908,  944,  908,  947,  907,  943,  908,  945,
      946,  908,  951,  946,  953,  954,  955,  966,  952,  931,
      944,  951,  947,  952,  964,  965,  970,  908,  967,  908,
      971,  972,  953,  973,  908,  965,  966,  967,  955,  976,
      978,  979,  973,  971,  908,  964,  980,  983,  984,  970,
      954,  987,  976,  972,  988,  991,  989, 1001,  995,  997,
      978,  995,  991,  999,  983,  989,  999,  997,  979, 1000,

      984,  987, 1002, 1006,  988, 1005, 1007, 1009, 1000, 1001,
      980, 1010, 1002, 1038, 1005, 1059, 1056, 1038, 1006, 1023,
     1030, 1007, 1055, 1043, 1062, 1043, 1056, 1009, 1043, 1043,
     1059, 1061, 1218, 1010, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1055, 1023, 1030, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1060, 1062, 1023, 1030, 1060,
     1063, 1064, 1071, 1065, 1218, 1061, 1064, 1063, 1066, 1067,
     1068, 1066, 1067, 1022, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1065, 1071, 1044, 1075, 1072, 1068, 1060,
     1079, 1074, 1073, 1034, 1074, 1034, 1085, 1076, 1034, 1034,

     1072, 1073, 1034, 1076, 1081, 1077, 1078, 1075, 1077, 1080,
     1098, 1084, 1080, 1034, 1082, 1078, 1083, 1081, 1034, 1079,
     1034, 1084, 1082, 1034, 1083, 1034, 1086, 1097, 1099, 1100,
     1085, 1098, 1076, 1103, 1104, 1034, 1097, 1099, 1106, 1086,
     1109, 1112, 1113, 1114, 1116, 1117, 1100, 1120, 1114, 1310,
     1124, 1103, 1104, 1122, 1131, 1120, 1132, 1104, 1109, 1116,
     1150, 1112, 1122, 1124, 1113, 1152, 1117, 1106, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1153, 1133, 1131,
     1155, 1132, 1133, 1149, 1156, 1149, 1159, 1158, 1149, 1150,
     1157, 1152, 1131, 1160, 1132, 1157, 1159, 1161, 1162, 1163,

     1155, 1156, 1158, 1153, 1165, 1164, 1166, 1129, 1164, 1167,
     1169, 1170, 1176, 1169, 1170, 1162, 1160, 1165, 1149, 1171,
     1172, 1177, 1171, 1173, 1161, 1163, 1173, 1172, 1175, 1185,
     1186, 1175, 1189, 1188, 1190, 1193, 1177, 1196, 1197, 1198,
     1166, 1176, 1188, 1206, 1201, 1167, 1216, 1185, 1217, 1189,
     1219, 1222, 1224, 1186, 1225, 1193, 1197, 1190, 1196, 1201,
     1226, 1227, 1198, 1226, 1229, 1228, 1230, 1229, 1206, 1230,
     1232, 1233, 1225, 1224, 1235, 1236, 1219, 1235, 1222, 1238,
     1216, 1206, 1217, 1227, 1228, 1247, 1239, 1240, 1232, 1239,
     1240, 1241, 1248, 1242, 1241, 1247, 1251, 1236, 1253, 1254,

     1233, 1238, 1242, 1266, 1255, 1271, 1254, 1251, 1248, 1272,
     1273, 1276, 1274, 1273, 1275, 1277, 1272, 1278, 1277, 1253,
     1255, 1274, 1282, 1275, 1285, 1282, 1271, 1286, 1291, 1276,
     1286, 1293, 1266, 1294, 1278, 1276, 1295, 1291, 1294, 1303,
     1293, 1306, 1304, 1308, 1306, 1295, 1285, 1304, 1303, 1309,
     1321, 1322, 1311, 1308, 1309, 1311, 1312, 1314, 1327, 1312,
     1314, 1328, 1329, 1330, 1331, 1329, 1322, 1331, 1332, 1338,
     1321, 1332, 1341, 1330, 1344, 1345, 1328, 1350, 1327, 1351,
     1345, 1353, 1354, 1352, 1355, 1358, 1350, 1359, 1356, 1307,
     1345, 1338, 1305, 1354, 1341, 1344, 1352, 1359, 1302, 1351,

     1301, 1300, 1299, 1353, 1298, 1355, 1356, 1358, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1367, 1297, 1296, 1367, 1367, 1367, 1367, 1367,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1369, 1290, 1369, 1369, 1289, 1369, 1369, 1369, 1369,
     1288, 1369, 1370, 1287, 1284, 1370, 1370, 1370, 1370, 1370,
     1370, 1283, 1370, 1371, 1371, 1371, 1371, 1371, 1371, 1371,

     1371, 1371, 1371, 1371, 1372, 1372, 1372, 1281, 1280, 1372,
     1373, 1279, 1270, 1269, 1373, 1373, 1373, 1373, 1374, 1374,
     1268, 1267, 1374, 1375, 1375, 1265, 1264, 1375, 1376, 1263,
     1262, 1261, 1376, 1376, 1376, 1376, 1377, 1377, 1260, 1259,
     1377, 1378, 1378, 1258, 1257, 1378, 1379, 1379, 1256, 1252,
     1379, 1380, 1380, 1250, 1249, 1380, 1381, 1381, 1246, 1245,
     1381, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1383, 1383, 1384, 1384, 1384, 1385, 1244, 1237,
     1385, 1385, 1385, 1385, 1385, 1386, 1386, 1234, 1231, 1386,
     1387, 1387, 1388, 1388, 1223, 1221, 1388, 1389, 1389, 1390,

     1220, 1215, 1390, 1390, 1390, 1390, 1390, 1391, 1214, 1213,
     1391, 1391, 1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394, 1212,
     1209, 1394, 1395, 1395, 1396, 1396, 1208, 1207, 1396, 1397,
     1397, 1398, 1398, 1205, 1204, 1398, 1399, 1399, 1400, 1400,
     1203, 1202, 1400, 1401, 1401, 1402, 1402, 1200, 1199, 1402,
     1403, 1403, 1404, 1404, 1404, 1195, 1404, 1405, 1405, 1405,
     1194, 1405, 1406, 1192, 1191, 1406, 1406, 1406, 1406, 1406,
     1407, 1407, 1187, 1184, 1407, 1408, 1408, 1183, 1181, 1408,

     1409, 1409, 1180, 1179, 1409, 1410, 1410, 1411, 1411, 1178,
     1174, 1411, 1412, 1412, 1413, 1168, 1154, 1413, 1413, 1413,
     1413, 1413, 1414, 1151, 1148, 1414, 1414, 1414, 1414, 1414,
     1415, 1415, 1147, 1146, 1415, 1416, 1416, 1145, 1144, 1416,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1418, 1418, 1143, 1142, 1418, 1419, 1419, 1420, 1420,
     1140, 1139, 1420, 1421, 1421, 1422, 1422, 1138, 1137, 1422,
     1423, 1423, 1136, 1135, 1423, 1424, 1424, 1425, 1425, 1134,
     1130, 1425, 1426, 1426, 1427, 1427, 1427, 1128, 1427, 1428,
     1428, 1127, 1126, 1428, 1429, 1429, 1125, 1123, 1429, 1430,

     1430, 1121, 1119, 1430, 1431, 1431, 1118, 1115, 1431, 1432,
     1432, 1433, 1433, 1111, 1110, 1433, 1434, 1434, 1435, 1435,
     1108, 1107, 1435, 1436, 1436, 1437, 1437, 1105, 1102, 1437,
     1438, 1438, 1439, 1101, 1096, 1439, 1439, 1439, 1439, 1439,
     1440, 1440, 1095, 1093, 1440, 1441, 1441, 1091, 1089, 1441,
     1442, 1442, 1087, 1069, 1442, 1443, 1443, 1444, 1444, 1057,
     1054, 1444, 1445, 1445, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1447, 1447, 1052, 1050, 1447,
     1448, 1448, 1449, 1449, 1048, 1046, 1449, 1450, 1450, 1451,
     1451, 1045, 1041, 1451, 1452, 1452, 1453, 1453, 1040, 1039,

     1453, 1454, 1454, 1455, 1455, 1036, 1035, 1455, 1456, 1456,
     1033, 1032, 1456, 1457, 1457, 1458, 1458, 1031, 1029, 1458,
     1459, 1459, 1460, 1460, 1028, 1027, 1460, 1461, 1461, 1462,
     1462, 1026, 1025, 1462, 1463, 1463, 1464, 1464, 1465, 1465,
     1466, 1024, 1021, 1466, 1466, 1466, 1466, 1466, 1467, 1467,
     1468, 1468, 1012, 1011, 1468, 1469, 1469, 1470, 1470, 1008,
     1004, 1470, 1471, 1471, 1472, 1472, 1003,  998, 1472, 1473,
     1473, 1474, 1474,  996,  994, 1474, 1475, 1475, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1477,
     1477, 1478, 1478, 1479, 1479, 1480, 1480, 1481, 1481, 1482,

     1482, 1483, 1483,  993,  992, 1483, 1484, 1484, 1485, 1485,
      990,  986, 1485, 1486, 1486, 1487, 1487,  985,  982, 1487,
     1488, 1488, 1489, 1489,  977,  975, 1489, 1490, 1490, 1491,
     1491,  974,  969, 1491, 1492, 1492,  968,  962, 1492, 1493,
     1493, 1494, 1494,  960,  958, 1494, 1495, 1495, 1496, 1496,
      956,  925, 1496, 1497, 1497, 1498, 1498,  921,  919, 1498,
     1499, 1499, 1500, 1500,  917,  915, 1500, 1501, 1501,  912,
      911, 1501, 1502, 1502,  909,  904, 1502, 1503, 1503,  901,
      900, 1503, 1504, 1504, 1505, 1505,  898,  894, 1505, 1506,
     1506,  893,  892, 1506, 1507, 1507,  888,  885, 1507, 1508,

     1508, 1509, 1509,  884,  882, 1509, 1510, 1510,  879,  878,
     1510, 1511, 1511, 1512, 1512, 1513, 1513,  876,  875, 1513,
     1514, 1514,  874,  871, 1514, 1515, 1515, 1516, 1516,  870,
      869, 1516, 1517, 1517,  865,  864, 1517, 1518, 1518,  862,
      861, 1518, 1519, 1519,  860,  856, 1519, 1520, 1520,  854,
      852, 1520, 1521, 1521,  850,  849, 1521, 1522, 1522,  847,
      840, 1522, 1523, 1523,  836,  835, 1523, 1524, 1524,  825,
      819, 1524, 1525, 1525,  818,  817, 1525, 1526, 1526,  812,
      808, 1526,  802,  798,  795,  794,  790,  786,  784,  783,
      782,  754,  750,  748,  746,  744,  743,  742,  741,  740,

      739,  728,  727,  713,  712,  708,  707,  706,  695,  694,
      684,  683,  682,  678,  677,  672,  671,  670,  664,  663,
      662,  658,  657,  654,  652,  651,  650,  648,  646,  642,
      640,  636,  610,  607,  596,  594,  582,  580,  577,  575,
      574,  572,  541,  539,  538,  537,  535,  532,  531,  529,
      526,  525,  508,  507,  505,  502,  501,  499,  491,  480,
      479,  478,  472,  462,  461,  460,  453,  451,  450,  446,
      444,  442,  440,  421,  370,  369,  366,  342,  340,  338,
      336,  335,  330,  319,  318,  307,  297,  296,  270,  269,
      260,  259,  255,  247,  244,  242,  241,  240,  230,  203,

      197,  173,  161,  159,  158,  150,  149,  146,  138,  135,
      134,  130,  100,   97,   96,   93,   91,   84,   71,   45,
       35,   32,   18,   11,    4,    3, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[237] =
    {   0,
1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
/*
 * Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
 *
 * The contents of this file are covered under the licence agreement in the
 * file "LICENCE" distributed with Cforall.
 *
 * lex.ll --
 *
 * Author           : Peter A. Buhr
 * Created On       : Sat Sep 22 08:58:10 2001
 * Last Modified By : Peter A. Buhr
 * Last Modified On : Sat Feb 24 11:47:24 2024
 * Update Count     : 777
 */
#line 21 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
// The lexer assumes the program has been preprocessed by cpp. Hence, all user level preprocessor directive have been
// performed and removed from the source. The only exceptions are preprocessor directives passed to the compiler (e.g.,
// line-number directives) and C/C++ style comments, which are ignored.

// *************************** Includes and Defines ****************************

#ifdef __clang__
#pragma GCC diagnostic ignored "-Wnull-conversion"
#endif

// trigger before each matching rule's action
#define YY_USER_ACTION \
	yylloc.first_line = yylineno; \
	yylloc.first_column = column; \
	column += yyleng; \
	yylloc.last_column = column; \
	yylloc.last_line = yylineno; \
	yylloc.filename = yyfilename ? yyfilename : "";
unsigned int column = 0;								// position of the end of the last token parsed

#include <string>
#include <cstdio>										// FILENAME_MAX
using namespace std;

#include "config.h"										// configure info
#include "DeclarationNode.h"                            // for DeclarationNode
#include "ExpressionNode.h"                             // for LabelNode
#include "InitializerNode.h"                            // for InitializerNode
#include "ParseNode.h"
#include "ParserTypes.h"                                // for Token
#include "StatementNode.h"                              // for CondCtl, ForCtrl
#include "TypedefTable.h"
// This (generated) header must come late as it is missing includes.
#include "parser.hh"                                    // generated info

string * build_postfix_name( string * name );

char *yyfilename;
string *strtext;										// accumulate parts of character and string constant value

#define RETURN_LOCN(x)		yylval.tok.loc.file = yyfilename; yylval.tok.loc.line = yylineno; return( x )
#define RETURN_VAL(x)		yylval.tok.str = new string( yytext ); RETURN_LOCN( x )
#define RETURN_CHAR(x)		yylval.tok.str = nullptr; RETURN_LOCN( x )
#define RETURN_STR(x)		yylval.tok.str = strtext; RETURN_LOCN( x )

#define WHITE_RETURN(x)		// do nothing
#define NEWLINE_RETURN()	column = 0; WHITE_RETURN( '\n' )
#define ASCIIOP_RETURN()	RETURN_CHAR( (int)yytext[0] ) // single character operator
#define NAMEDOP_RETURN(x)	RETURN_CHAR( x )			// multichar operator, with a name
#define NUMERIC_RETURN(x)	rm_underscore(); RETURN_VAL( x ) // numeric constant
#define KEYWORD_RETURN(x)	RETURN_CHAR( x )			// keyword
#define QKEYWORD_RETURN(x)	RETURN_VAL(x);				// quasi-keyword
#define IDENTIFIER_RETURN()	RETURN_VAL( typedefTable.isKind( yytext ) )

#ifdef HAVE_KEYWORDS_FLOATXX							// GCC >= 7 => keyword, otherwise typedef
#define FLOATXX(v) KEYWORD_RETURN(v);
#else
#define FLOATXX(v) IDENTIFIER_RETURN();
#endif // HAVE_KEYWORDS_FLOATXX

void rm_underscore() {
	// SKULLDUGGERY: remove underscores (ok to shorten?)
	yyleng = 0;
	for ( int i = 0; yytext[i] != '\0'; i += 1 ) {		// copying non-underscore characters to front of string
		if ( yytext[i] != '_' ) {
			yytext[yyleng] = yytext[i];
			yyleng += 1;
		} // if
	} // for
	yytext[yyleng] = '\0';
} // rm_underscore

// Stop warning due to incorrectly generated flex code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#line 1987 "Parser/lex.cc"
#line 105 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
				// identifier, GCC: $ in identifier
				// numeric constants, CFA: '_' in constant
				// CFA: explicit l8/l16/l32/l64/l128, char 'hh', short 'h', int 'n'
				// CFA: size_t 'z', pointer 'p', which define a sign and length
				// GCC: floating D (double), imaginary iI, and decimal floating DF, DD, DL
				// character escape sequence, GCC: \e => esc character
				// ' stop editor highlighting
				// display/white-space characters
				// overloadable operators
				// op_binary_not_over "?"|"->"|"."|"&&"|"||"|"@="
				// operator {op_unary_pre_post}|{op_binary_over}|{op_binary_not_over}




#line 2004 "Parser/lex.cc"

#define INITIAL 0
#define COMMENT 1
#define BKQUOTE 2
#define QUOTE 3
#define STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 180 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"

				/* line directives */
#line 2229 "Parser/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1363 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4127 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 182 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	/* " stop editor highlighting */
	static char filename[FILENAME_MAX];					// temporarily store current source-file name
	char *end_num;
	char *begin_string, *end_string;
	long lineno, length;
	lineno = strtol( yytext + 1, &end_num, 0 );
	begin_string = strchr( end_num, '"' );
	if ( begin_string ) {								// file name ?
		end_string = strchr( begin_string + 1, '"' );	// look for ending delimiter
		assert( end_string );							// closing quote ?
		length = end_string - begin_string - 1;			// file-name length without quotes or sentinel
		assert( length < FILENAME_MAX );				// room for sentinel ?
		memcpy( &filename, begin_string + 1, length );	// copy file name from yytext
		filename[ length ] = '\0';						// terminate string with sentinel
		//cout << "file " << filename << " line " << lineno << endl;
		yylineno = lineno;
		yyfilename = filename;
	} // if
}
	YY_BREAK
/* preprocessor-style directives */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 204 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL( DIRECTIVE ); }
	YY_BREAK
/* ignore C style comments (ALSO HANDLED BY CPP) */
case 3:
YY_RULE_SETUP
#line 207 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 208 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 209 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; }
	YY_BREAK
/* ignore C++ style comments (ALSO HANDLED BY CPP) */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 212 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
;
	YY_BREAK
/* ignore whitespace */
case 7:
YY_RULE_SETUP
#line 215 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 216 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ WHITE_RETURN(' '); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 217 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NEWLINE_RETURN(); }
	YY_BREAK
/* keywords */
case 10:
YY_RULE_SETUP
#line 220 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// CFA
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 221 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNAS); }			// C11
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 222 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// CFA
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 223 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// C11
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 224 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 225 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ALIGNOF); }			// GCC
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 226 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WAND); }				// CFA
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 227 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 228 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 229 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ASM); }				// GCC
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 230 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATOMIC); }				// C11
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 231 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 232 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ATTRIBUTE); }			// GCC
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 233 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 234 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(AUTO_TYPE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 235 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BASETYPEOF); }			// CFA
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 236 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BOOL); }				// C99
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 237 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(BREAK); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CASE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 239 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCH); }				// CFA
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 240 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(CATCHRESUME); }		// CFA
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHAR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 242 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CHOOSE); }				// CFA
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 243 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COERCE); }				// CFA
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 244 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CORUN); }				// CFA
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 245 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COFOR); }				// CFA
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 246 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// C99
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 247 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COMPLEX); }			// GCC
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 250 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 251 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONST); }				// GCC
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 252 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(CONTINUE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 253 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(COROUTINE); }			// CFA
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 254 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL32); }			// GCC
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 255 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL64); }			// GCC
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 256 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DECIMAL128); }			// GCC
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 257 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DEFAULT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 258 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DISABLE); }			// CFA
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 259 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DO); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 260 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DOUBLE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 261 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(DTYPE); }				// CFA
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 262 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ELSE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 263 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENABLE); }				// CFA
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 264 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(ENUM); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 265 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXCEPTION); }			// CFA
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 266 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTENSION); }			// GCC
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 267 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(EXTERN); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 268 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHROUGH); }		// CFA
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 269 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FALLTHRU); }			// CFA
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 270 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FINALLY); }			// CFA
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 271 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(FIXUP); }				// CFA
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 272 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FLOAT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 273 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 274 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT80); }			// GCC
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 275 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 276 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(uuFLOAT128); }			// GCC
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 277 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT16); }					// GCC
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 278 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32); }					// GCC
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 279 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT32X); }					// GCC
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 280 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64); }					// GCC
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 281 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT64X); }					// GCC
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 282 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 283 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ FLOATXX(uFLOAT128); }					// GCC
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 284 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FOR); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 285 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORALL); }				// CFA
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 286 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FORTRAN); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 287 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(FTYPE); }				// CFA
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 288 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERATOR); }			// CFA
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 289 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GENERIC); }			// C11
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 290 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(GOTO); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 291 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IF); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 292 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// C99
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 293 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 294 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(IMAGINARY); }			// GCC
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 295 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// C99
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 296 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 297 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INLINE); }				// GCC
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 298 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 299 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// CFA
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 300 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 301 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(INT128); }				// GCC
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 302 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LABEL); }				// GCC
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 303 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(LONG); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 304 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MONITOR); }			// CFA
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 305 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(MUTEX); }				// CFA
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 306 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(NORETURN); }			// C11
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 307 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OFFSETOF); }		// GCC
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 308 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ONE_T); }				// CFA
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 309 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(WOR); }				// CFA
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 310 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(OTYPE); }				// CFA
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 311 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(RECOVER); }			// CFA
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 312 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(REGISTER); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 313 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 314 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// C99
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 315 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 316 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RESTRICT); }			// GCC
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 317 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(RETURN); }
	YY_BREAK
/* resume			{ KEYWORD_RETURN(RESUME); }				// CFA */
case 108:
YY_RULE_SETUP
#line 319 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SHORT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 320 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 321 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 322 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIGNED); }				// GCC
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 323 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SIZEOF); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 324 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATIC); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 325 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C11
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 326 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STATICASSERT); }		// C23
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 327 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(STRUCT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 328 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SUSPEND); }			// CFA
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 329 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(SWITCH); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 330 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREAD); }				// C11
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 331 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALGCC); }		// GCC
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 332 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C11
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 333 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THREADLOCALC11); }		// C23
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROW); }				// CFA
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 335 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(THROWRESUME); }		// CFA
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 336 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ QKEYWORD_RETURN(TIMEOUT); }			// CFA
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 337 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRAIT); }				// CFA
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 338 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TRY); }				// CFA
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 339 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TTYPE); }				// CFA
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 340 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEDEF); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 341 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 342 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 343 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEOF); }				// GCC
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 344 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(TYPEID); }				// GCC
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 345 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNION); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 346 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UINT128); }			// GCC
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 347 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(UNSIGNED); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 348 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_ARG); }			// GCC
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 349 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VA_LIST); }			// GCC
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 350 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VIRTUAL); }			// CFA
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 351 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOID); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 352 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 353 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 354 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VOLATILE); }			// GCC
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 355 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(VTABLE); }				// CFA
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 356 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITFOR); }			// CFA
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 357 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WAITUNTIL); }			// CFA
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 358 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHEN); }				// CFA
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 359 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WHILE); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 360 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ KEYWORD_RETURN(WITH); }				// CFA
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 361 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(ZERO_T); }				// CFA
	YY_BREAK
/* identifier */
case 151:
YY_RULE_SETUP
#line 364 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 365 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// CFA
	yytext[yyleng] = '\0'; yytext += 2;					// SKULLDUGGERY: remove backquotes (ok to shorten?)
	IDENTIFIER_RETURN();
}
	YY_BREAK
/* numeric constants */
case 153:
YY_RULE_SETUP
#line 371 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 372 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 373 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 374 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(INTEGERconstant); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 375 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_DECIMALconstant); } // must appear before floating_constant
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 376 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATING_FRACTIONconstant); } // must appear before floating_constant
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 377 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 378 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NUMERIC_RETURN(FLOATINGconstant); }
	YY_BREAK
/* character constant, allows empty value */
case 161:
YY_RULE_SETUP
#line 381 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN QUOTE; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 382 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 383 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(CHARACTERconstant); }
	YY_BREAK
/* ' stop editor highlighting */
/* string constant */
case 164:
YY_RULE_SETUP
#line 387 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN STRING; rm_underscore(); strtext = new string( yytext, yyleng ); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 388 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 389 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ BEGIN 0; strtext->append( yytext, yyleng ); RETURN_STR(STRINGliteral); }
	YY_BREAK
/* " stop editor highlighting */
/* common character/string constant */
case 167:
YY_RULE_SETUP
#line 393 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ rm_underscore(); strtext->append( yytext, yyleng ); }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 394 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{}						// continuation (ALSO HANDLED BY CPP)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 395 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ strtext->append( yytext, yyleng ); } // unknown escape character
	YY_BREAK
/* punctuation */
case 170:
YY_RULE_SETUP
#line 398 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 399 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 400 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 401 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 402 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 403 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 404 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 405 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 406 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 407 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 408 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 409 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// also operator
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 410 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATTR); }				// CFA, attribute shorthand
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 411 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ELLIPSIS); }
	YY_BREAK
/* alternative C99 brackets, "<:" & "<:<:" handled by preprocessor */
case 184:
YY_RULE_SETUP
#line 414 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('['); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 415 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL(']'); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 416 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('{'); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 417 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ RETURN_VAL('}'); }
	YY_BREAK
/* operators */
case 188:
YY_RULE_SETUP
#line 420 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 421 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 422 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 423 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 424 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }					// CFA, exponentiation
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 425 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 426 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 427 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 428 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 429 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 430 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 431 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 432 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 433 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 434 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ ASCIIOP_RETURN(); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 436 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ICR); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 437 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DECR); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 438 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EQ); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 439 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(NE); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 440 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LS); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 441 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RS); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 442 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LE); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 443 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(GE); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 444 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDAND); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 445 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(OROR); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 446 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ARROW); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 447 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(PLUSassign); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 448 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MINUSassign); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 449 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(EXPassign); }			// CFA, exponentiation
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 450 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MULTassign); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 451 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(DIVassign); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 452 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(MODassign); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 453 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ANDassign); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 454 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ORassign); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 455 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ERassign); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 456 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(LSassign); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 457 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(RSassign); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 459 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ATassign); }			// CFA
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 460 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeUpEq); }			// CFA
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 461 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDown); }			// CFA
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 462 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ NAMEDOP_RETURN(ErangeDownEq); }		// CFA
	YY_BREAK
/* CFA, operator identifier */
case 229:
YY_RULE_SETUP
#line 465 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }				// unary
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 466 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 467 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 468 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{										// postfix operator
	yylval.tok.str = new string( &yytext[2] );			// remove ?`
	yylval.tok.str = build_postfix_name( yylval.tok.str ); // add prefix
	RETURN_LOCN( typedefTable.isKind( *yylval.tok.str ) );
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 473 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ IDENTIFIER_RETURN(); }		// binary
	YY_BREAK
/*
	  This rule handles ambiguous cases with operator identifiers, e.g., "int *?*?()", where the string "*?*?"  can be
	  lexed as "*?"/"*?" or "*"/"?*?". Since it is common practise to put a unary operator juxtaposed to an identifier,
	  e.g., "*i", users will be annoyed if they cannot do this with respect to operator identifiers. Therefore, there is
	  a lexical look-ahead for the second case, with backtracking to return the leading unary operator and then
	  reparsing the trailing operator identifier.  Otherwise a space is needed between the unary operator and operator
	  identifier to disambiguate this common case.

	  A similar issue occurs with the dereference, *?(...), and routine-call, ?()(...) identifiers.  The ambiguity
	  occurs when the deference operator has no parameters, *?() and *?()(...), requiring arbitrary whitespace
	  look-ahead for the routine-call parameter-list to disambiguate.  However, the dereference operator must have a
	  parameter/argument to dereference *?(...).  Hence, always interpreting the string *?() as * ?() does not preclude
	  any meaningful program.

	  The remaining cases are with the increment/decrement operators and conditional expression:

	  i++? ...(...);
	  i?++ ...(...);

	  requiring arbitrary whitespace look-ahead for the operator parameter-list, even though that interpretation is an
      incorrect expression (juxtaposed identifiers).  Therefore, it is necessary to disambiguate these cases with a
      space:

	  i++ ? i : 0;
	  i? ++i : 0;
	*/
case 234:
YY_RULE_SETUP
#line 500 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{
	// 1 or 2 character unary operator ?
	int i = yytext[1] == '?' ? 1 : 2;
	yyless( i );		// put back characters up to first '?'
	if ( i > 1 ) {
		NAMEDOP_RETURN( yytext[0] == '+' ? ICR : DECR );
	} else {
		ASCIIOP_RETURN();
	} // if
}
	YY_BREAK
/* unknown character */
case 235:
YY_RULE_SETUP
#line 512 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
{ yyerror( "unknown character" ); }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 514 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"
ECHO;
	YY_BREAK
#line 3564 "Parser/lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(BKQUOTE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1363 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1363 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1362);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 514 "/var/lib/jenkins/workspace/Cforall_Distribute_Ref/src/Parser/lex.ll"


// ----end of lexer----

void yyerror( const char * errmsg ) {
	SemanticErrorThrow = true;
	cerr << (yyfilename ? yyfilename : "*unknown file*") << ':' << yylineno << ':' << column - yyleng + 1
		 << ": " << ErrorHelpers::error_str() << errmsg << " before token \"" << (yytext[0] == '\0' ? "EOF" : yytext) << '"' << endl;
}

// Local Variables: //
// mode: c++ //
// tab-width: 4 //
// compile-command: "make install" //
// End: //

