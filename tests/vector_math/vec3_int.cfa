#include <vec/vec3.hfa>
#include <fstream.hfa>
#include <limits.hfa>

int main(void) {
    vec3(int) v1 = {1,2,3};
    sout | "ctor(x,y):" | v1;

    vec3(int) v2 = v1;
    sout | "copy ctor:" | v2;

    {
        vec3(int) u = {11, -5, 7};
        vec3(int) v = {2, 3, 7};
        sout | "?/?(vec)" | (u / v);
        sout | "?/=?(vec)" | (u /= v);
    }

    {
        vec3(int) u = {1, -3, 100};
        sout | "++?" | ++u;
    }

    {
        vec3(int) u = {1, -3, 100};
        sout | "--?" | --u;
    }
    {
        vec3(int) u = {1, -3, 100};
        sout | "?++(part 1)" | u++;
        sout | "?++(part 2)" | u;
    }
    {
        vec3(int) u = {1, -3, 100};
        sout | "?--(part 1)" | u--;
        sout | "?--(part 2)" | u;
    }

    // %
    {
        vec3(int) u = {-12, 123, 100};
        sout | "?%?(int)" | (u % 2);
        sout | "?%=?(int)" | (u %= 2);
    }
    {
        vec3(int) u = {-12, 27, 100};
        vec3(int) v = {5, 4, 13};
        sout | "?%?(vec)" | (u % v);
        sout | "?%=?(vec)" | (u %= v);
    }


    // &
    {
        vec3(int) u = {5, 1, 8};
        sout | "?&?(int)" | (u & (1 << 3));
        sout | "?&=?(int)" | (u &= (1 << 3));
    }
    {
        vec3(int) u = {5, 6, 5};
        vec3(int) v = {3, 7, 3};
        sout | "?&?(vec)" | (u & v);
        sout | "?&=?(vec)" | (u &= v);
    }

    // |
    {
        vec3(int) u = {5, 1, 5};
        sout | "?|?(int)" | (u | 2);
        sout | "?|=?(int)" | (u |= 2);
    }
    {
        vec3(int) u = {5, 1, 5};
        vec3(int) v = {2, 1, 2};
        sout | "?|?(vec)" | (u | v);
        sout | "?|=?(vec)" | (u |= v);
    }

    // ^
    {
        vec3(int) u = {9, 5, 8};
        sout | "?^?(int)" | (u ^ 5);
        sout | "?^=?(int)" | (u ^= 5);
    }
    {
        vec3(int) u = {9, 5, 8};
        vec3(int) v = {5, 0, 1};
        sout | "?^?(vec)" | (u ^ v);
        sout | "?^=?(vec)" | (u ^= v);
    }

    // <<
    {
        vec3(int) u = {2, 1, 4};
        sout | "?<<?(int)" | (u << 1);
        sout | "?<<=?(int)" | (u <<= 1);
    }
    {
        vec3(int) u = {1, 1, 1};
        vec3(int) v = {5, 2, 1};
        sout | "?<<?(vec)" | (u << v);
        sout | "?<<=?(vec)" | (u <<= v);
    }

    // >>
    {
        vec3(int) u = {2, 1, 4};
        sout | "?>>?(int)" | (u >> 1);
        sout | "?>>=?(int)" | (u >>= 1);
    }
    {
        vec3(int) u = {5, 7, 8};
        vec3(int) v = {1, 2, 2};
        sout | "?>>?(vec)" | (u >> v);
        sout | "?>>=?(vec)" | (u >>= v);
    }

    // ~
    {
        vec3(int) u = {5, 2, 1};
        sout | "~?" | (~u);
    }

    v1 = (vec3(int)){2, 3, 4};
    v2 = (vec3(int)){13, 2, -7};
    sout | "dot:" | dot(v1, v2);

    v1 = (vec3(int)){2,3,4};
    sout | "length_squared:" | length_squared(v1);
}
