#include <vec/vec2.hfa>
#include <fstream.hfa>
#include <limits.hfa>

int main(void) {
    vec2(int) v1 = {1,2};
    sout | "ctor(x,y):" | v1;

    vec2(int) v2 = v1;
    sout | "copy ctor:" | v2;

    v2 = (vec2(int)){3, 4};
    sout | "assignment:" | v2;

    v2 = v1;
    sout | "move assignment:" | v2;

    vec2(int) v3 = 0;
    sout | "zero-init:" | v3;

    v1 = 0;
    sout | "zero-assign:" | v1;

    vec2(int) v4 = {123};
    sout | "fill-ctor:" | v4;

    v1 = (vec2(int)){1, 3};
    sout | "?-?:" | (v1 - (vec2(int)){1003, -14});

    v1 -= (vec2(int)){1003, -14};
    sout | "?-=?:" | v1;

    v1 = -v1;
    sout | "-?:" | v1;

    v1 = (vec2(int)){1, 3};
    sout | "?+?:" | (v1 + (vec2(int)){1003, -14});

    v1 += (vec2(int)){1003, -14};
    sout | "?+=?:" | v1;

    v1 = (vec2(int)){15, 275};
    sout | "v*s:" | v1 * 3;

    sout | "s*v:" | 3 * v1;

    v1 *= 3;
    sout | "?*=?:" | v1;

    {
        vec2(int) u = {1, -5};
        vec2(int) v = {2, 3};
        sout | "?*?(vec)" | (u * v);
        sout | "?*=?(vec)" | (u *= v);
    }

    v1 = (vec2(int)){21, -10};
    sout | "?/?:" | (v1 / 3);

    v1 /= 3;
    sout | "?/=?:" | v1;

    {
        vec2(int) u = {11, -5};
        vec2(int) v = {2, 3};
        sout | "?/?(vec)" | (u / v);
        sout | "?/=?(vec)" | (u /= v);
    }

    {
        vec2(int) u = {1, -3};
        sout | "++?" | ++u;
    }
    {
        vec2(int) u = {1, -3};
        sout | "--?" | ++u;
    }
    {
        vec2(int) u = {1, -3};
        sout | "?++(part 1)" | u++;
        sout | "?++(part 2)" | u;
    }
    {
        vec2(int) u = {1, -3};
        sout | "?--(part 1)" | u--;
        sout | "?--(part 2)" | u;
    }

    // %
    {
        vec2(int) u = {-12, 123};
        sout | "?%?(int)" | (u % 2);
        sout | "?%=?(int)" | (u %= 2);
    }
    {
        vec2(int) u = {-12, 27};
        vec2(int) v = {5, 4};
        sout | "?%?(vec)" | (u % v);
        sout | "?%=?(vec)" | (u %= v);
    }


    // &
    {
        vec2(int) u = {5, 8};
        sout | "?&?(int)" | (u & (1 << 3));
        sout | "?&=?(int)" | (u &= (1 << 3));
    }
    {
        vec2(int) u = {5, 6};
        vec2(int) v = {3, 7};
        sout | "?&?(vec)" | (u & v);
        sout | "?&=?(vec)" | (u &= v);
    }

    // |
    {
        vec2(int) u = {5, 1};
        sout | "?|?(int)" | (u | 2);
        sout | "?|=?(int)" | (u |= 2);
    }
    {
        vec2(int) u = {5, 1};
        vec2(int) v = {2, 1};
        sout | "?|?(vec)" | (u | v);
        sout | "?|=?(vec)" | (u |= v);
    }

    // ^
    {
        vec2(int) u = {9, 5};
        sout | "?^?(int)" | (u ^ 5);
        sout | "?^=?(int)" | (u ^= 5);
    }
    {
        vec2(int) u = {9, 5};
        vec2(int) v = {5, 0};
        sout | "?^?(vec)" | (u ^ v);
        sout | "?^=?(vec)" | (u ^= v);
    }

    // <<
    {
        vec2(int) u = {2, 1};
        sout | "?<<?(int)" | (u << 1);
        sout | "?<<=?(int)" | (u <<= 1);
    }
    {
        vec2(int) u = {1, 1};
        vec2(int) v = {5, 2};
        sout | "?<<?(vec)" | (u << v);
        sout | "?<<=?(vec)" | (u <<= v);
    }

    // >>
    {
        vec2(int) u = {2, 1};
        sout | "?>>?(int)" | (u >> 1);
        sout | "?>>=?(int)" | (u >>= 1);
    }
    {
        vec2(int) u = {5, 7};
        vec2(int) v = {1, 2};
        sout | "?>>?(vec)" | (u >> v);
        sout | "?>>=?(vec)" | (u >>= v);
    }

    // ~
    {
        vec2(int) u = {5, 2};
        sout | "~?" | (~u);
    }

    v1 = (vec2(int)){2, 3};
    v2 = (vec2(int)){-3, 2};
    sout | "dot_1:" | dot(v1, v2);

    v2 = (vec2(int)){13, 2};
    sout | "dot_2:" | dot(v1, v2);

    v1 = (vec2(int)){4, 3};
    sout | "length_squared:" | length_squared(v1);

    vec2(int) geometric_normal = {5,6};
    vec2(int) perturbed_normal = {4,5};
    vec2(int) eyeline = {-1,0};
    sout | "faceforward_nochange:" | faceforward(perturbed_normal, eyeline, geometric_normal);

    eyeline = (vec2(int)){1,0};
    sout | "faceforward_flip:" | faceforward(perturbed_normal, eyeline, geometric_normal);
}
