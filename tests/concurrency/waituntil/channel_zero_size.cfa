#include <select.hfa>
#include <thread.hfa>
#include <channel.hfa>

channel(long long int) A, B, C;

volatile bool done = false;
long long int globalTotal = 0;

thread Server1 {};
void main( Server1 & this ) {
    long long int a, b, c, i = 0, myTotal = 0;
    for( ;;i++ ) {
        // printf("loop S\n");
        waituntil( a << A ) { myTotal += a; }
        or waituntil( b << B ) { myTotal += b; }
        or waituntil( c << C ) { if ( c == -1 ) break; myTotal += c; }
    }
    __atomic_fetch_add( &globalTotal, myTotal, __ATOMIC_SEQ_CST );
}

size_t numtimes = 100000;
size_t numServers = 1;
int main( int argc, char * argv[] ) {
    if ( argc == 2 )
        numtimes = atoi( argv[1] );

    processor p[numServers];
    A{0};
    B{0};
    C{0};

    long long int total = 0;
    printf("start\n");
    {
        Server1 s[numServers];
        for( long long int j = 0; j < numtimes; j++ ) {
            // printf("loop\n");
            waituntil( A << j ) { total += j; }
            or waituntil( B << j ) { total += j; }
            or waituntil( C << j ) { total += j; }
        }
        printf("sending sentinels\n");
        for ( i; numServers ) insert( C, -1 );
        printf("joining servers\n");
    }
    if ( total != globalTotal ) 
        printf("CHECKSUM MISMATCH!! Main thread got %lld, server sum is %lld\n", total, globalTotal);
    printf("done\n");
}