#include <string.hfa>
#include <string_sharectx.hfa>
#include <fstream.hfa>

/*

Modify a subrange of a string, while a witness is watching another subrange of the same string.

Cases are the relative positions and overlaps of the modifier vs the witness.
MS = modifier start
ME = modifier end
ML = modifier length
WS = witness start
WE = witness end
WL = witness length

The test does:
  starts with the entire string being, initially, the alphabet; prints this entire alphabet
  sets up modifier and witness as ranges within it, and prints a visualization of those ranges
  does the main modification
  prints the result of the main modification, which is always an unsurprising consequence of the modifier range, but shows little about what happened to the witness, particularly if the witness is/became empty
  modifies the witness to be "?"
  prints the result of this second modification, which implies what the witness included after the main modification

Deriving the concrete list of cases....

By definition of a string, MS <= ME and WS <= WE.
This API's convention has Start positions being inclusive and end positions being exclusive.

                                v Case number in output
With 1 equivalence class:
MS = ME = WS = WE               1

With 2 equivalence classes:
   <    =    =
MS   rest                       2
WS   rest                       3

   =    <    =
MS   ME   WS   WE               4
WS   WE   MS   ME               5
MS   WS   ME   WE               6

   =    =    <
        rest   ME               7
        rest   WE               8

With 3 equivalence classes
   <    <    =
MS   ME   WS   WE               9
     WS   ME   WE               10
+2                              11, 12

   <    =    <
MS   WS   ME   WE               13
          WE   ME               14
+2                              15, 16

   =    <    <
MS   WS   WE   ME               17
     ME   WS   WE               18
+2                              19, 20

With 4 equivalence classes
   <    <    <
MS   ME   WS   WE               21
     WS   ME   WE               22
          WE   ME               23
+3                              24, 25, 26



*/


void showOneReplacement(string & s, int ms, int ml, int ws, int wl, const char* replaceWith) {

    int me = ms + ml;
    int we = ws + wl;

    assert( ms >= 0 && ms <= me && me <= len(s) );
    assert( ws >= 0 && ws <= we && we <= len(s) );

    string mod = s(ms, ml)`share;
    string wit = s(ws, wl)`share;

    string modOld = mod;
    string witOld = wit;

    // s, before the mode
    sout | s;

    // visualize the pair of ranges
    sout | nlOff;
    for ( i; len(s) ) {
        if( i < ms || i > me ) {
            sout | ' ';
        } else if ( i < me ) {
            sout | '-';
        } else {
            assert ( i == me );
            sout | '!';
        }
    } sout | nl;
    for ( i; len(s) ) {
        if( i < ws || i > we ) {
            sout | ' ';
        } else if ( i < we ) {
            sout | '-';
        } else {
            assert ( i == we );
            sout | '?';
        }
    }
    sout | nl;
    sout | nlOn;

    mod = replaceWith;    // main replacement
    sout | s | "( wit = " | wit | "witlen = " | len(wit) | " )";
    wit = "?";            // witness-revelaing replacement
    sout | s;
}

void runReplaceCases() {
    char * alphabetTemplate = "abcdefghijklmnopqrstuvwxyz";
    struct { int ms; int ml; int ws; int wl; char *replaceWith; char *label; } cases[] = {
        { 12,  2, 10, 10, "xxxxx", "warmup" },
        { 10,  0, 10,  0, "=====", "1"      },
        { 10,  0, 10,  0, "=="   , ""       },
        { 10,  0, 10,  0, "="    , ""       },
        { 10,  0, 10,  0, ""     , ""       },
        { 10,  2, 12,  0, "=====", "2"      },
        { 10,  2, 12,  0, "=="   , ""       },
        { 10,  2, 12,  0, "="    , ""       },
        { 10,  2, 12,  0, ""     , ""       },
        { 12,  0, 10,  2, "=====", "3"      },
        { 12,  0, 10,  2, "=="   , ""       },
        { 12,  0, 10,  2, "="    , ""       },
        { 12,  0, 10,  2, ""     , ""       },
        { 10,  0, 12,  0, "=====", "4"      },
        { 10,  0, 12,  0, "=="   , ""       },
        { 10,  0, 12,  0, "="    , ""       },
        { 10,  0, 12,  0, ""     , ""       },
        { 12,  0, 10,  0, "=====", "5"      },
        { 12,  0, 10,  0, "=="   , ""       },
        { 12,  0, 10,  0, "="    , ""       },
        { 12,  0, 10,  0, ""     , ""       },
        { 10,  2, 10,  2, "=====", "6"      },
        { 10,  2, 10,  2, "=="   , ""       },
        { 10,  2, 10,  2, "="    , ""       },
        { 10,  2, 10,  2, ""     , ""       },
        { 10,  2, 10,  0, "=====", "7"      },
        { 10,  2, 10,  0, "=="   , ""       },
        { 10,  2, 10,  0, "="    , ""       },
        { 10,  2, 10,  0, ""     , ""       },
        { 10,  0, 10,  2, "=====", "8"      },
        { 10,  0, 10,  2, "=="   , ""       },
        { 10,  0, 10,  2, "="    , ""       },
        { 10,  0, 10,  2, ""     , ""       },
        { 10,  2, 14,  0, "=====", "9"      },
        { 10,  2, 14,  0, "=="   , ""       },
        { 10,  2, 14,  0, "="    , ""       },
        { 10,  2, 14,  0, ""     , ""       },
        { 10,  4, 12,  2, "=====", "10"     },
        { 10,  4, 12,  2, "=="   , ""       },
        { 10,  4, 12,  2, "="    , ""       },  // FORMERLY unrunnable bug: tries to print seemingly infinite string
        { 10,  4, 12,  2, ""     , ""       },  // ditto
        { 14,  0, 10,  2, "=====", "11"     },
        { 14,  0, 10,  2, "=="   , ""       },
        { 14,  0, 10,  2, "="    , ""       },
        { 14,  0, 10,  2, ""     , ""       },
        { 12,  2, 10,  4, "=====", "12"     }, // correctness observation:  watching klmn while mn |-> xxx gives klxxx because the mn is inside what I'm watching
        { 12,  2, 10,  4, "=="   , ""       },
        { 12,  2, 10,  4, "="    , ""       },
        { 12,  2, 10,  4, ""     , ""       },
        { 10,  2, 12,  2, "=====", "13"     },
        { 10,  2, 12,  2, "=="   , ""       },
        { 10,  2, 12,  2, "="    , ""       },
        { 10,  2, 12,  2, ""     , ""       },
        { 10,  4, 12,  0, "=====", "14"     },
        { 10,  4, 12,  0, "=="   , ""       },
        { 10,  4, 12,  0, "="    , ""       },
        { 10,  4, 12,  0, ""     , ""       },
        { 12,  2, 10,  2, "=====", "15"     },
        { 12,  2, 10,  2, "=="   , ""       },
        { 12,  2, 10,  2, "="    , ""       },
        { 12,  2, 10,  2, ""     , ""       },
        { 12,  0, 10,  4, "=====", "16"     },
        { 12,  0, 10,  4, "=="   , ""       },
        { 12,  0, 10,  4, "="    , ""       },
        { 12,  0, 10,  4, ""     , ""       },
        { 10,  4, 10,  2, "=====", "17"     },
        { 10,  4, 10,  2, "=="   , ""       },
        { 10,  4, 10,  2, "="    , ""       },
        { 10,  4, 10,  2, ""     , ""       },
        { 10,  0, 12,  2, "=====", "18"     },
        { 10,  0, 12,  2, "=="   , ""       },
        { 10,  0, 12,  2, "="    , ""       },
        { 10,  0, 12,  2, ""     , ""       },
        { 10,  2, 10,  4, "=====", "19"     },
        { 10,  2, 10,  4, "=="   , ""       },
        { 10,  2, 10,  4, "="    , ""       },
        { 10,  2, 10,  4, ""     , ""       },
        { 12,  2, 10,  0, "=====", "20"     },
        { 12,  2, 10,  0, "=="   , ""       },
        { 12,  2, 10,  0, "="    , ""       },
        { 12,  2, 10,  0, ""     , ""       },
        { 10,  2, 14,  2, "=====", "21"     },
        { 10,  2, 14,  2, "=="   , ""       },
        { 10,  2, 14,  2, "="    , ""       },
        { 10,  2, 14,  2, ""     , ""       },
        { 10,  4, 12,  4, "=====", "22"     },
        { 10,  4, 12,  4, "=="   , ""       },
        { 10,  4, 12,  4, "="    , ""       },
        { 10,  4, 12,  4, ""     , ""       },
        { 10,  6, 12,  2, "=====", "23"     },
        { 10,  6, 12,  2, "=="   , ""       },
        { 10,  6, 12,  2, "="    , ""       },
        { 10,  6, 12,  2, ""     , ""       },
        { 14,  2, 10,  2, "=====", "24"     },
        { 14,  2, 10,  2, "=="   , ""       },
        { 14,  2, 10,  2, "="    , ""       },
        { 14,  2, 10,  2, ""     , ""       },
        { 12,  4, 10,  4, "=====", "25"     },
        { 12,  4, 10,  4, "=="   , ""       },
        { 12,  4, 10,  4, "="    , ""       },
        { 12,  4, 10,  4, ""     , ""       },
        { 12,  2, 10,  6, "=====", "26"     },
        { 12,  2, 10,  6, "=="   , ""       },
        { 12,  2, 10,  6, "="    , ""       },
        { 12,  2, 10,  6, ""     , ""       },
    };
    for ( i; sizeof(cases)/sizeof(cases[0]) ) {
        sout | "------------------------------------------------------------------------" | cases[i].label;
        string replaceIn = alphabetTemplate;
        showOneReplacement( replaceIn, cases[i].ms, cases[i].ml, cases[i].ws, cases[i].wl, cases[i].replaceWith );
    }
}


int main() {

    #ifdef STRING_SHARING_OFF
    string_sharectx c = { NO_SHARING };
    #endif


    //          0         1         2
    //          01234567890123456789012345
    string s = "abcdefghijklmnopqrstuvwxyz";

    s(5,5) = "qqqqq";  // start=5, end=10, len=5

    sout | s;


    s(5,0) = "-----";  // start=5, end=5, len=0

    sout | s;

    runReplaceCases();
}
