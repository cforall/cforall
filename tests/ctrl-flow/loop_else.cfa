#include <fstream.hfa>

struct S { int i, j; };
void ?{}( S & s ) { s.[i, j] = 0; }
void ?{}( S & s, int i ) { s.[i, j] = [i, 0]; }
void ?{}( S & s, int i, int j ) { s.[i, j] = [i, j]; }
void ?{}( S & s, zero_t ) { s.[i, j] = 0; }
void ?{}( S & s, one_t ) { s.[i, j] = 1; }
int ?<?( S t1, S t2 ) { return t1.i < t2.i && t1.j < t2.j; }
int ?<=?( S t1, S t2 ) { return t1.i <= t2.i && t1.j <= t2.j; }
int ?>?( S t1, S t2 ) { return t1.i > t2.i && t1.j > t2.j; }
int ?>=?( S t1, S t2 ) { return t1.i >= t2.i && t1.j >= t2.j; }
S ?=?( S & t1, S t2 ) { t1.i = t2.i; t1.j = t2.j; return t1; }
S ?+=?( S & t1, S t2 ) { t1.i += t2.i; t1.j += t2.j; return t1; }
S ?+=?( S & t, one_t ) { t.i += 1; t.j += 1; return t; }
S ?-=?( S & t1, S t2 ) { t1.i -= t2.i; t1.j -= t2.j; return t1; }
S ?-=?( S & t, one_t ) { t.i -= 1; t.j -= 1; return t; }
ofstream & ?|?( ofstream & os, S v ) { return os | '(' | v.i | v.j | ')'; }
void & ?|?( ofstream & os, S v ) { (ofstream &)(os | v); ends( os ); }

int main() {
	// Test some loop options.

	sout | nlOff;										// turn off auto newline
	while () { sout | "empty"; break; } else { sout | "else"; }						sout | nl;
	do { sout | "empty"; break; } while () else { sout | "else"; }					sout | nl;
	for () { sout | "empty"; break; } else { sout | "else"; }						sout | nl | nl;

	do { sout | "false"; } while (false) else { sout | "else"; }					sout | nl | nl;

	for ( 0 ) { sout | "A"; } else { sout | "else"; }								sout | "zero" | nl;
	for ( 1 ) { sout | "A"; } else { sout | "else"; }								sout | nl;
	for ( 10 ) { sout | "A"; } else { sout | "else"; }								sout | nl;
	for ( ~= 10 ) { sout | "A"; } else { sout | "else"; }							sout | nl;
	for ( 1 ~= 10 ~ 2 ) { sout | "B"; } else { sout | "else"; }						sout | nl;
	for ( 1 -~= 10 ~ 2 ) { sout | "C"; } else { sout | "else"; }					sout | nl;
	for ( 0.5 ~ 5.5 ) { sout | "D"; } else { sout | "else"; }						sout | nl;
	for ( 0.5 -~ 5.5 ) { sout | "E"; } else { sout | "else"; }						sout | nl | nl;

	for ( i; 10 ) { sout | i; } else { sout | "else"; }								sout | nl;
	for ( i; ~= 10 ) { sout | i; } else { sout | "else"; }							sout | nl;
	for ( i; 1 ~= 10 ~ 2 ) { sout | i; } else { sout | "else"; }					sout | nl;
	for ( i; 1 -~= 10 ~ 2 ) { sout | i; } else { sout | "else"; }					sout | nl;
	for ( i; 0.5 ~ 5.5 ) { sout | i; } else { sout | "else"; }						sout | nl;
	for ( i; 0.5 -~ 5.5 ) { sout | i; } else { sout | "else"; }						sout | nl;
	for ( ui; 2u ~= 10u ~ 2u ) { sout | ui; } else { sout | "else"; }				sout | nl;
	for ( ui; 2u -~= 10u ~ 2u ) { sout | ui; } else { sout | "else"; }				sout | nl | nl;

	// @ means do nothing
	for ( i; 1 ~ @ ) {
	  if ( i > 10 ) break;
		sout | i;
	} else { sout | "else"; }														sout | nl;
	for ( i; @ -~ 10 ) {
	  if ( i < 0 ) break;
		sout | i;
	} else { sout | "else"; }														sout | nl;
	for ( i; 2 ~ @ ~ 2 ) {
	  if ( i > 10 ) break;
		sout | i;
	} else { sout | "else"; }														sout | nl;
	for ( i; 2.1 ~ @ ~ @ ) {
	  if ( i > 10.5 ) break;
		sout | i;
		i += 1.7;
	} else { sout | "else"; }														sout | nl;
	for ( i; @ -~ 10 ~ 2 ) {
	  if ( i < 0 ) break;
		sout | i;
	} else { sout | "else"; }														sout | nl;
	for ( i; 12.1 ~ @ ~ @ ) {
	  if ( i < 2.5 ) break;
		sout | i;
		i -= 1.7;
	} else { sout | "else"; }														sout | nl | nl;

	enum { N = 10 };
	for ( N ) { sout | "N"; } else { sout | "else"; }							sout | nl;
	for ( i; N ) { sout | i; } else { sout | "else"; }							sout | nl;
	for ( i; ~= N ) { sout | i; } else { sout | "else"; }						sout | nl;
	for ( i; -~= N ) { sout | i; } else { sout | "else"; }						sout | nl | nl;

	const int start = 3, comp = 10, inc = 2;
	for ( i; start ~ comp ~ inc + 1 ) { sout | i; } else { sout | "else"; }		sout | nl | nl;

	for ( i; 10 : j; -5 ~ @ ) { sout | i | j; } else { sout | "else"; } sout | nl;
	for ( i; 10 : j; @ -~ -5 ) { sout | i | j; } else { sout | "else"; } sout | nl;
	for ( i; 10 : j; -5 ~ @ ~ 2 ) { sout | i | j; } else { sout | "else"; } sout | nl;
	for ( i; 10 : j; @ -~ -5 ~ 2 ) { sout | i | j; } else { sout | "else"; } sout | nl | nl;

	for ( j; -5 ~ @ : i; 10 ) { sout | i | j; } else { sout | "else"; } sout | nl;
	for ( j; @ -~ -5 : i; 10 ) { sout | i | j; } else { sout | "else"; } sout | nl;
	for ( j; -5 ~ @ ~ 2 : i; 10 ) { sout | i | j; } else { sout | "else"; } sout | nl;
	for ( j; @ -~ -5 ~ 2 : i; 10 ) { sout | i | j; } else { sout | "else"; } sout | nl | nl;

	for ( j; @ -~ -5 ~ 2 : i; 10 : k; 1.5 ~ @ ) { sout | i | j | k; } else { sout | "else"; } sout | nl;
	for ( j; @ -~ -5 ~ 2 : k; 1.5 ~ @ : i; 10 ) { sout | i | j | k; } else { sout | "else"; } sout | nl;
	for ( k; 1.5 ~ @ : j; @ -~ -5 ~ 2 : i; 10 ) { sout | i | j | k; } else { sout | "else"; } sout | nl;

	for ( S s = (S){0}; s < (S){10,10}; s += (S){1} ) { sout | s; } else { sout | "else"; } sout | nl;
	for ( s; (S){10,10} ) { sout | s; } else { sout | "else"; } sout | nl;
	sout | nl;
	for ( s; (S){0} ~ (S){10,10} ) { sout | s; } else { sout | "else"; }		 sout | nl;
	for ( s; (S){0} ~ (S){10,10} ~ (S){1} ) { sout | s; } else { sout | "else"; } sout | nl;
	for ( s; (S){0} ~= (S){10,10} ) { sout | s; } else { sout | "else"; }		 sout | nl;
	for ( s; (S){0} ~= (S){10,10} ~ (S){1} ) { sout | s; } else { sout | "else"; } sout | nl;
	sout | nl;
	for ( s; (S){0} -~  (S){10,10} ) { sout | s; } else { sout | "else"; }		 sout | nl;
	for ( s; (S){0} -~  (S){10,10} ~ (S){1} ) { sout | s; } else { sout | "else"; } sout | nl;
	for ( s; (S){0} -~= (S){10,10} ) { sout | s; } else { sout | "else"; }		 sout | nl;
	for ( s; (S){0} -~= (S){10,10} ~ (S){1} ) { sout | s; } else { sout | "else"; } sout | nl;
	sout | nl;

	// A break (or a continue) in an else clause should target an outer loop.
	sout | "before";
	while ( true ) {
		sout | " begin";
		while ( false ) {
			sout | "never";
		} else {
			sout | " else";
			break;
		}
		sout | " end";
	}
	sout | " after" | nl;
}
