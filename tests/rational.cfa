//
// Cforall Version 1.0.0 Copyright (C) 2016 University of Waterloo
//
// The contents of this file are covered under the licence agreement in the
// file "LICENCE" distributed with Cforall.
//
// rational.cfa -- test rational number package
//
// Author           : Peter A. Buhr
// Created On       : Mon Mar 28 08:43:12 2016
// Last Modified By : Peter A. Buhr
// Last Modified On : Mon Jun  5 22:58:09 2023
// Update Count     : 108
//

#include <rational.hfa>
#include <limits.hfa>
#include <stdlib.hfa>
#include <fstream.hfa>

typedef rational(int) rat_int;
double convert( int i ) { return (double)i; }			// used by narrow/widen
int convert( double d ) { return (int)d; }

int main() {
	sout | "constructor";
	rat_int a = { 3 }, b = { 4 }, c, d = 0, e = 1;
	sout | "a : " | a | "b : " | b | "c : " | c | "d : " | d | "e : " | e;

	a = (rat_int){ 4, 8 };
	b = (rat_int){ 5, 7 };
	sout | "a : " | a | "b : " | b;
	a = (rat_int){ -2, -3 };
	b = (rat_int){ 3, -2 };
	sout | "a : " | a | "b : " | b;
	a = (rat_int){ -2, 3 };
	b = (rat_int){ 3, 2 };
	sout | "a : " | a | "b : " | b;
	sout | nl;

	sout | "comparison";
	a = (rat_int){ -2 };
	b = (rat_int){ -3, 2 };
	sout | "a : " | a | "b : " | b;
	sout | "a == 0 : " | a == (rational(int)){0}; // FIX ME
	sout | "a == 1 : " | a == (rational(int)){1}; // FIX ME
	sout | "a != 0 : " | a != 0;
	sout | "! a : " | ! a;
	sout | "a != b : " | a != b;
	sout | "a <  b : " | a <  b;
	sout | "a <=  b : " | a <= b;
	sout | "a >  b : " | a >  b;
	sout | "a >=  b : " | a >= b;
	sout | nl;

	sout | "arithmetic";
	sout | "a : " | a | "b : " | b;
	sout | "a + b : " | a + b;
	sout | "a += b : " | (a += b);
	sout | "++a : " | ++a;
	sout | "a++ : " | a++;
	sout | "a : " | a;
	sout | "a - b : " | a - b;
	sout | "a -= b : " | (a -= b);
	sout | "--a : " | --a;
	sout | "a-- : " | a--;
	sout | "a : " | a;
	sout | "a * b : " | a * b;
	sout | "a / b : " | a / b;
	sout | "a \\ 2 : " | a \ 2u | "b \\ 2 : " | b \ 2u;
	sout | "a \\ -2 : " | a \ -2 | "b \\ -2 : " | b \ -2;
	sout | nl;

	sout | "conversion";
	a = (rat_int){ 3, 4 };
	sout | widen( a );
	a = (rat_int){ 1, 7 };
	sout | widen( a );
	a = (rat_int){ 355, 113 };
	sout | widen( a );
	sout | narrow( 0.75, 4 );
	sout | narrow( 0.14285714285714, 16 );
	sout | narrow( 3.14159265358979, 256 );
	sout | nl;

	// sout | "decompose";
	// int n, d;
	// [n, d] = a;
	// sout | a | n | d;

	sout | "more tests";
	rat_int x = { 1, 2 }, y = { 2 };
	sout | x - y;
	sout | x > y;
	sout | x | numerator( x, 2 ) | x;
	sout | y | denominator( y, -2 ) | y;

	rat_int z = { 0, 5 };
	sout | z;

	sout | x | numerator( x, 0 ) | x;

	x = (rat_int){ 1, MAX } + (rat_int){ 1, MAX };
	sout | x;
	x = (rat_int){ 3, MAX } + (rat_int){ 2, MAX };
	sout | x;

	sin | a | b;
	sout | a | b;
} // main

// Local Variables: //
// tab-width: 4 //
// compile-command: "cfa rational.cfa" //
// End: //
