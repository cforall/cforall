//
// Cforall Version 1.0.0 Copyright (C) 2015 University of Waterloo
//
// The contents of this file are covered under the licence agreement in the
// file "LICENCE" distributed with Cforall.
//
// limits.cfa --
//
// Author           : Peter A. Buhr
// Created On       : Tue May 10 20:44:20 2016
// Last Modified By : Peter A. Buhr
// Last Modified On : Sun Sep 27 08:45:43 2020
// Update Count     : 10
//

// Note: For testing the ability to load the constants defined in libcfa/src/limits.cfa,
// see discussion in test const-init.

#include <limits.hfa>

// Integral Constants

signed char m = MIN;
unsigned char m = MIN;
short int m = MIN;
unsigned short int m = MIN;
int m = MIN;
unsigned int m = MIN;
long int m = MIN;
unsigned long int m = MIN;
long long int m = MIN;
unsigned long long int m = MIN;

signed char M = MAX;
unsigned char M = MAX;
short int M = MAX;
unsigned short int M = MAX;
int M = MAX;
unsigned int M = MAX;
long int M = MAX;
unsigned long int M = MAX;
long long int M = MAX;
unsigned long long int M = MAX;

// Floating-Point Constants

float m = MIN;
double m = MIN;
long double m = MIN;
float _Complex m = MIN;
double _Complex m = MIN;
long double _Complex m = MIN;

float M = MAX;
double M = MAX;
long double M = MAX;
float _Complex M = MAX;
double _Complex M = MAX;
long double _Complex M = MAX;

float pi = PI;
float pi_2 = PI_2;
float pi_4 = PI_4;
float _1_pi = _1_PI;
float _2_pi = _2_PI;
float _2_sqrt_pi = _2_SQRT_PI;

double pi = PI;
double pi_2 = PI_2;
double pi_4 = PI_4;
double _1_pi = _1_PI;
double _2_pi = _2_PI;
double _2_SQRT_pi = _2_SQRT_PI;

long double pi = PI;
long double pi_2 = PI_2;
long double pi_4 = PI_4;
long double _1_pi = _1_PI;
long double _2_pi = _2_PI;
long double _2_sqrt_pi = _2_SQRT_PI;

float _Complex pi = PI;
float _Complex pi_2 = PI_2;
float _Complex pi_4 = PI_4;
float _Complex _1_pi = _1_PI;
float _Complex _2_pi = _2_PI;
float _Complex _2_sqrt_pi = _2_SQRT_PI;

double _Complex pi = PI;
double _Complex pi_2 = PI_2;
double _Complex pi_4 = PI_4;
double _Complex _1_pi = _1_PI;
double _Complex _2_pi = _2_PI;
double _Complex _2_sqrt_pi = _2_SQRT_PI;

long double _Complex pi = PI;
long double _Complex pi_2 = PI_2;
long double _Complex pi_4 = PI_4;
long double _Complex _1_pi = _1_PI;
long double _Complex _2_pi = _2_PI;
long double _Complex _2_sqrt_pi = _2_SQRT_PI;

float e = E;
float log2_e = LOG2_E;
float log10_e = LOG10_E;
float ln_2 = LN_2;
float ln_10 = LN_10;
float sqrt_2 = SQRT_2;
float _1_sqrt_2 = _1_SQRT_2;

double e = E;
double log2_e = LOG2_E;
double log10_e = LOG10_E;
double ln_2 = LN_2;
double ln_10 = LN_10;
double sqrt_2 = SQRT_2;
double _1_sqrt_2 = _1_SQRT_2;

long double e = E;
long double log2_e = LOG2_E;
long double log10_e = LOG10_E;
long double ln_2 = LN_2;
long double ln_10 = LN_10;
long double sqrt_2 = SQRT_2;
long double _1_sqrt_2 = _1_SQRT_2;

float _Complex e = E;
float _Complex log2_e = LOG2_E;
float _Complex log10_e = LOG10_E;
float _Complex ln_2 = LN_2;
float _Complex ln_10 = LN_10;
float _Complex sqrt_2 = SQRT_2;
float _Complex _1_sqrt_2 = _1_SQRT_2;

double _Complex e = E;
double _Complex log2_e = LOG2_E;
double _Complex log10_e = LOG10_E;
double _Complex ln_2 = LN_2;
double _Complex ln_10 = LN_10;
double _Complex sqrt_2 = SQRT_2;
double _Complex _1_sqrt_2 = _1_SQRT_2;

long double _Complex e = E;
long double _Complex log2_e = LOG2_E;
long double _Complex log10_e = LOG10_E;
long double _Complex ln_2 = LN_2;
long double _Complex ln_10 = LN_10;
long double _Complex sqrt_2 = SQRT_2;
long double _Complex _1_sqrt_2 = _1_SQRT_2;

int main(int argc, char const *argv[]) {
	#pragma message( "Compiled" )						// force non-empty .expect file
}

// Local Variables: //
// tab-width: 4 //
// compile-command: "cfa limits.cfa" //
// End: //
